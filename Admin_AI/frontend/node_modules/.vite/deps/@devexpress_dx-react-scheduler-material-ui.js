import {
  ButtonGroup_default,
  Checkbox_default,
  Chip_default,
  DialogActions_default,
  DialogContent_default,
  DialogTitle_default,
  Dialog_default,
  Drawer_default,
  FormControlLabel_default,
  Grid_default,
  IconButton_default,
  InputAdornment_default,
  ListItem_default,
  Popper_default,
  RadioGroup_default,
  Radio_default,
  Tab_default,
  TableBody_default,
  TableCell_default,
  TableHead_default,
  TableRow_default,
  Table_default,
  Tabs_default,
  TextField_default,
  Toolbar_default,
  colors_exports,
  dialogClasses_default,
  tabsClasses_default
} from "./chunk-HFNF6KKV.js";
import {
  Fade_default,
  FocusTrap,
  Grow_default,
  List_default,
  MenuList_default,
  OutlinedInput_default,
  Paper_default,
  Popover_default,
  Select_default,
  resolveComponentProps,
  useSlotProps
} from "./chunk-V3OSWYLL.js";
import "./chunk-YSPQN2JF.js";
import {
  useTheme
} from "./chunk-PFMNWNG7.js";
import {
  Button_default
} from "./chunk-MU2NRY2N.js";
import "./chunk-KWQYSKCU.js";
import "./chunk-AKKANAVW.js";
import "./chunk-3SYHC3CP.js";
import "./chunk-ACV5NCBC.js";
import "./chunk-345TD53H.js";
import {
  Divider_default,
  MenuItem_default,
  Typography_default
} from "./chunk-QUO6AKSC.js";
import "./chunk-O7TP7IRW.js";
import {
  ButtonBase_default
} from "./chunk-OMWYJP4X.js";
import {
  alpha,
  darken,
  lighten,
  useMediaQuery
} from "./chunk-LA5M2QEN.js";
import {
  AccessTime_default,
  CalendarToday_default,
  ChevronLeft_default,
  ChevronRight_default,
  Close_default,
  Delete_default,
  Edit_default,
  Lens_default,
  Repeat_default
} from "./chunk-QXZ3FSY5.js";
import {
  init_utils as init_utils2
} from "./chunk-5AXOGNS5.js";
import {
  createSvgIcon
} from "./chunk-AVLXL3ND.js";
import "./chunk-SZQXPODJ.js";
import "./chunk-BWVPR4FI.js";
import "./chunk-VLTVMST6.js";
import "./chunk-GPO72J2H.js";
import {
  init_useControlled,
  init_useEnhancedEffect,
  init_useEventCallback,
  init_useForkRef,
  init_useId,
  init_utils,
  ownerDocument,
  refType_default,
  useControlled,
  useEnhancedEffect_default,
  useEventCallback_default,
  useForkRef,
  useId
} from "./chunk-XTJFWDYG.js";
import "./chunk-RUOI7PPW.js";
import "./chunk-TDGGCMP5.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_composeClasses,
  init_generateUtilityClass,
  init_generateUtilityClasses,
  require_jsx_runtime,
  styled_default,
  useThemeProps2 as useThemeProps,
  useTheme_default
} from "./chunk-C3NE6Z2M.js";
import "./chunk-TUKCLYE6.js";
import {
  AUTO_HEIGHT,
  AllDayPanel,
  AppointmentForm,
  AppointmentTooltip,
  Appointments,
  CANCEL_BUTTON,
  CLOSE_COMMAND_BUTTON,
  ConfirmationDialog,
  CurrentTimeIndicator,
  DAY_OPTIONS,
  DAY_SHORT_MONTH_OPTIONS,
  DELETE_BUTTON,
  DELETE_COMMAND_BUTTON,
  DateNavigator,
  DayView,
  DragDropProvider,
  END_REPEAT_RADIO_GROUP,
  EditRecurrenceMenu,
  GroupingPanel,
  HORIZONTAL_GROUP_ORIENTATION,
  HORIZONTAL_TYPE,
  HOUR_MINUTE_OPTIONS,
  MONTHLY_RADIO_GROUP,
  MONTH_YEAR_OPTIONS,
  MULTILINE_TEXT_EDITOR,
  MonthView,
  NUMBER_EDITOR,
  OPEN_COMMAND_BUTTON,
  ORDINARY_LABEL,
  ORDINARY_TEXT_EDITOR,
  OUTLINED_SELECT,
  POSITION_END,
  POSITION_START,
  REPEAT_TYPES,
  RRULE_REPEAT_TYPES,
  Resources,
  SAVE_BUTTON,
  STANDARD_SELECT,
  Scheduler,
  TITLE,
  TITLE_TEXT_EDITOR,
  TodayButton,
  Toolbar,
  VERTICAL_GROUP_ORIENTATION,
  VERTICAL_TYPE,
  VIEW_TYPES,
  ViewSwitcher,
  WEEKDAY_INTERVAL,
  WEEK_DAY_OPTIONS,
  WeekView,
  YEARLY_RADIO_GROUP,
  areDatesSame,
  changeRecurrenceOptions,
  checkIsNaturalNumber,
  getAvailableRecurrenceOptions,
  getCellKey,
  getDayScaleCells,
  getDaysOfWeek,
  getDaysOfWeekArray,
  getDaysOfWeekDates,
  getFrequencyString,
  getGroupsLastRow,
  getLabelsForAllGroups,
  getMonths,
  getMonthsWithOf,
  getRadioGroupDisplayData,
  getRecurrenceOptions,
  getRowFromGroups,
  getVerticalRowFromGroups,
  getWeekNumberLabels,
  handleChangeFrequency,
  handleStartDateChange,
  handleToDayOfWeekChange,
  handleWeekDaysChange,
  isDateValid,
  moment_default,
  navigateByOneMonth,
  prepareVerticalViewCellsData,
  viewBoundText,
  withComponents
} from "./chunk-WDKAFSIY.js";
import {
  CSSTransition_default,
  TransitionGroup_default
} from "./chunk-MHFSOSQ5.js";
import "./chunk-AGYRAQNY.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-4JNWWNIS.js";
import "./chunk-4FVB2LYY.js";
import "./chunk-R4K76R74.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-HY777VUD.js";
import {
  _extends,
  init_extends
} from "./chunk-WH2AMN5A.js";
import {
  require_prop_types
} from "./chunk-LWPR4REK.js";
import {
  require_react
} from "./chunk-KL6BCPSF.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@devexpress/dx-react-scheduler-material-ui/dist/dx-react-scheduler-material-ui.es.js
var import_react = __toESM(require_react(), 1);
var import_prop_types19 = __toESM(require_prop_types(), 1);
init_clsx_m();

// node_modules/@mui/x-date-pickers/AdapterMoment/AdapterMoment.js
init_extends();
var formatTokenMap = {
  Y: "year",
  YY: "year",
  YYYY: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  M: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  MM: "month",
  MMM: {
    sectionType: "month",
    contentType: "letter"
  },
  MMMM: {
    sectionType: "month",
    contentType: "letter"
  },
  D: {
    sectionType: "day",
    contentType: "digit",
    maxLength: 2
  },
  DD: "day",
  Do: {
    sectionType: "day",
    contentType: "digit-with-letter"
  },
  E: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  e: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  d: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  dd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  ddd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  dddd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  A: "meridiem",
  a: "meridiem",
  H: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  HH: "hours",
  h: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  hh: "hours",
  m: {
    sectionType: "minutes",
    contentType: "digit",
    maxLength: 2
  },
  mm: "minutes",
  s: {
    sectionType: "seconds",
    contentType: "digit",
    maxLength: 2
  },
  ss: "seconds"
};
var defaultFormats = {
  year: "YYYY",
  month: "MMMM",
  monthShort: "MMM",
  dayOfMonth: "D",
  weekday: "dddd",
  weekdayShort: "ddd",
  hours24h: "HH",
  hours12h: "hh",
  meridiem: "A",
  minutes: "mm",
  seconds: "ss",
  fullDate: "ll",
  fullDateWithWeekday: "dddd, LL",
  keyboardDate: "L",
  shortDate: "MMM D",
  normalDate: "D MMMM",
  normalDateWithWeekday: "ddd, MMM D",
  monthAndYear: "MMMM YYYY",
  monthAndDate: "MMMM D",
  fullTime: "LT",
  fullTime12h: "hh:mm A",
  fullTime24h: "HH:mm",
  fullDateTime: "lll",
  fullDateTime12h: "ll hh:mm A",
  fullDateTime24h: "ll HH:mm",
  keyboardDateTime: "L LT",
  keyboardDateTime12h: "L hh:mm A",
  keyboardDateTime24h: "L HH:mm"
};
var MISSING_TIMEZONE_PLUGIN = ["Missing timezone plugin", "To be able to use timezones, you have to pass the default export from `moment-timezone` to the `dateLibInstance` prop of `LocalizationProvider`", "Find more information on https://mui.com/x/react-date-pickers/timezone/#moment-and-timezone"].join("\n");
var AdapterMoment = class {
  constructor({
    locale,
    formats,
    instance
  } = {}) {
    this.isMUIAdapter = true;
    this.isTimezoneCompatible = true;
    this.lib = "moment";
    this.moment = void 0;
    this.locale = void 0;
    this.formats = void 0;
    this.escapedCharacters = {
      start: "[",
      end: "]"
    };
    this.formatTokenMap = formatTokenMap;
    this.setLocaleToValue = (value) => {
      const expectedLocale = this.getCurrentLocaleCode();
      if (expectedLocale === value.locale()) {
        return value;
      }
      return value.locale(expectedLocale);
    };
    this.syncMomentLocale = (runner) => {
      var _this$locale;
      const momentLocale = moment_default.locale();
      const adapterLocale = (_this$locale = this.locale) != null ? _this$locale : "en-us";
      if (momentLocale !== adapterLocale) {
        moment_default.locale(adapterLocale);
        const result = runner();
        moment_default.locale(momentLocale);
        return result;
      }
      return runner();
    };
    this.hasTimezonePlugin = () => typeof this.moment.tz !== "undefined";
    this.createSystemDate = (value) => {
      const parsedValue = this.moment(value).local();
      if (this.locale === void 0) {
        return parsedValue;
      }
      return parsedValue.locale(this.locale);
    };
    this.createUTCDate = (value) => {
      const parsedValue = this.moment.utc(value);
      if (this.locale === void 0) {
        return parsedValue;
      }
      return parsedValue.locale(this.locale);
    };
    this.createTZDate = (value, timezone) => {
      if (!this.hasTimezonePlugin()) {
        throw new Error(MISSING_TIMEZONE_PLUGIN);
      }
      const parsedValue = timezone === "default" ? this.moment(value) : this.moment.tz(value, timezone);
      if (this.locale === void 0) {
        return parsedValue;
      }
      return parsedValue.locale(this.locale);
    };
    this.date = (value) => {
      if (value === null) {
        return null;
      }
      const moment = this.moment(value);
      moment.locale(this.getCurrentLocaleCode());
      return moment;
    };
    this.dateWithTimezone = (value, timezone) => {
      if (value === null) {
        return null;
      }
      if (timezone === "UTC") {
        return this.createUTCDate(value);
      }
      if (timezone === "system" || timezone === "default" && !this.hasTimezonePlugin()) {
        return this.createSystemDate(value);
      }
      return this.createTZDate(value, timezone);
    };
    this.getTimezone = (value) => {
      var _value$_z, _ref, _this$moment$defaultZ;
      const zone = (_value$_z = value._z) == null ? void 0 : _value$_z.name;
      const defaultZone = value.isUTC() ? "UTC" : "system";
      return (_ref = zone != null ? zone : (_this$moment$defaultZ = this.moment.defaultZone) == null ? void 0 : _this$moment$defaultZ.name) != null ? _ref : defaultZone;
    };
    this.setTimezone = (value, timezone) => {
      var _this$moment$defaultZ2, _this$moment$defaultZ3;
      if (this.getTimezone(value) === timezone) {
        return value;
      }
      if (timezone === "UTC") {
        return value.clone().utc();
      }
      if (timezone === "system") {
        return value.clone().local();
      }
      if (!this.hasTimezonePlugin()) {
        if (timezone !== "default") {
          throw new Error(MISSING_TIMEZONE_PLUGIN);
        }
        return value;
      }
      const cleanZone = timezone === "default" ? (_this$moment$defaultZ2 = (_this$moment$defaultZ3 = this.moment.defaultZone) == null ? void 0 : _this$moment$defaultZ3.name) != null ? _this$moment$defaultZ2 : "system" : timezone;
      if (cleanZone === "system") {
        return value.clone().local();
      }
      const newValue = value.clone();
      newValue.tz(cleanZone);
      return newValue;
    };
    this.toJsDate = (value) => {
      return value.toDate();
    };
    this.parseISO = (isoString) => {
      return this.moment(isoString, true);
    };
    this.toISO = (value) => {
      return value.toISOString();
    };
    this.parse = (value, format) => {
      if (value === "") {
        return null;
      }
      if (this.locale) {
        return this.moment(value, format, this.locale, true);
      }
      return this.moment(value, format, true);
    };
    this.getCurrentLocaleCode = () => {
      return this.locale || moment_default.locale();
    };
    this.is12HourCycleInCurrentLocale = () => {
      return /A|a/.test(moment_default.localeData(this.getCurrentLocaleCode()).longDateFormat("LT"));
    };
    this.expandFormat = (format) => {
      const localFormattingTokens = /(\[[^[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
      return format.match(localFormattingTokens).map((token) => {
        const firstCharacter = token[0];
        if (firstCharacter === "L" || firstCharacter === ";") {
          return moment_default.localeData(this.getCurrentLocaleCode()).longDateFormat(token);
        }
        return token;
      }).join("");
    };
    this.getFormatHelperText = (format) => {
      return this.expandFormat(format).replace(/a/gi, "(a|p)m").toLocaleLowerCase();
    };
    this.isNull = (value) => {
      return value === null;
    };
    this.isValid = (value) => {
      return this.moment(value).isValid();
    };
    this.format = (value, formatKey) => {
      return this.formatByString(value, this.formats[formatKey]);
    };
    this.formatByString = (value, formatString) => {
      const clonedDate = value.clone();
      clonedDate.locale(this.getCurrentLocaleCode());
      return clonedDate.format(formatString);
    };
    this.formatNumber = (numberToFormat) => {
      return numberToFormat;
    };
    this.getDiff = (value, comparing, unit) => {
      return value.diff(comparing, unit);
    };
    this.isEqual = (value, comparing) => {
      if (value === null && comparing === null) {
        return true;
      }
      return this.moment(value).isSame(comparing);
    };
    this.isSameYear = (value, comparing) => {
      return value.isSame(comparing, "year");
    };
    this.isSameMonth = (value, comparing) => {
      return value.isSame(comparing, "month");
    };
    this.isSameDay = (value, comparing) => {
      return value.isSame(comparing, "day");
    };
    this.isSameHour = (value, comparing) => {
      return value.isSame(comparing, "hour");
    };
    this.isAfter = (value, comparing) => {
      return value.isAfter(comparing);
    };
    this.isAfterYear = (value, comparing) => {
      return value.isAfter(comparing, "year");
    };
    this.isAfterDay = (value, comparing) => {
      return value.isAfter(comparing, "day");
    };
    this.isBefore = (value, comparing) => {
      return value.isBefore(comparing);
    };
    this.isBeforeYear = (value, comparing) => {
      return value.isBefore(comparing, "year");
    };
    this.isBeforeDay = (value, comparing) => {
      return value.isBefore(comparing, "day");
    };
    this.isWithinRange = (value, [start, end]) => {
      return value.isBetween(start, end, null, "[]");
    };
    this.startOfYear = (value) => {
      return value.clone().startOf("year");
    };
    this.startOfMonth = (value) => {
      return value.clone().startOf("month");
    };
    this.startOfWeek = (value) => {
      return value.clone().startOf("week");
    };
    this.startOfDay = (value) => {
      return value.clone().startOf("day");
    };
    this.endOfYear = (value) => {
      return value.clone().endOf("year");
    };
    this.endOfMonth = (value) => {
      return value.clone().endOf("month");
    };
    this.endOfWeek = (value) => {
      return value.clone().endOf("week");
    };
    this.endOfDay = (value) => {
      return value.clone().endOf("day");
    };
    this.addYears = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "years") : value.clone().add(amount, "years");
    };
    this.addMonths = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "months") : value.clone().add(amount, "months");
    };
    this.addWeeks = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "weeks") : value.clone().add(amount, "weeks");
    };
    this.addDays = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "days") : value.clone().add(amount, "days");
    };
    this.addHours = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "hours") : value.clone().add(amount, "hours");
    };
    this.addMinutes = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "minutes") : value.clone().add(amount, "minutes");
    };
    this.addSeconds = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "seconds") : value.clone().add(amount, "seconds");
    };
    this.getYear = (value) => {
      return value.get("year");
    };
    this.getMonth = (value) => {
      return value.get("month");
    };
    this.getDate = (value) => {
      return value.get("date");
    };
    this.getHours = (value) => {
      return value.get("hours");
    };
    this.getMinutes = (value) => {
      return value.get("minutes");
    };
    this.getSeconds = (value) => {
      return value.get("seconds");
    };
    this.getMilliseconds = (value) => {
      return value.get("milliseconds");
    };
    this.setYear = (value, year) => {
      return value.clone().year(year);
    };
    this.setMonth = (value, month) => {
      return value.clone().month(month);
    };
    this.setDate = (value, date) => {
      return value.clone().date(date);
    };
    this.setHours = (value, hours) => {
      return value.clone().hours(hours);
    };
    this.setMinutes = (value, minutes) => {
      return value.clone().minutes(minutes);
    };
    this.setSeconds = (value, seconds) => {
      return value.clone().seconds(seconds);
    };
    this.setMilliseconds = (value, milliseconds) => {
      return value.clone().milliseconds(milliseconds);
    };
    this.getDaysInMonth = (value) => {
      return value.daysInMonth();
    };
    this.getNextMonth = (value) => {
      return value.clone().add(1, "month");
    };
    this.getPreviousMonth = (value) => {
      return value.clone().subtract(1, "month");
    };
    this.getMonthArray = (value) => {
      const firstMonth = this.startOfYear(value);
      const monthArray = [firstMonth];
      while (monthArray.length < 12) {
        const prevMonth = monthArray[monthArray.length - 1];
        monthArray.push(this.getNextMonth(prevMonth));
      }
      return monthArray;
    };
    this.mergeDateAndTime = (dateParam, timeParam) => {
      return dateParam.clone().hour(timeParam.hour()).minute(timeParam.minute()).second(timeParam.second());
    };
    this.getWeekdays = () => this.syncMomentLocale(() => moment_default.weekdaysShort(true));
    this.getWeekArray = (value) => {
      const cleanValue = this.setLocaleToValue(value);
      const start = cleanValue.clone().startOf("month").startOf("week");
      const end = cleanValue.clone().endOf("month").endOf("week");
      let count = 0;
      let current = start;
      const nestedWeeks = [];
      while (current.isBefore(end)) {
        const weekNumber = Math.floor(count / 7);
        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
        nestedWeeks[weekNumber].push(current);
        current = current.clone().add(1, "day");
        count += 1;
      }
      return nestedWeeks;
    };
    this.getWeekNumber = (value) => {
      return value.week();
    };
    this.getYearRange = (start, end) => {
      const startDate = this.moment(start).startOf("year");
      const endDate = this.moment(end).endOf("year");
      const years = [];
      let current = startDate;
      while (current.isBefore(endDate)) {
        years.push(current);
        current = current.clone().add(1, "year");
      }
      return years;
    };
    this.getMeridiemText = (ampm) => {
      if (this.is12HourCycleInCurrentLocale()) {
        return moment_default.localeData(this.getCurrentLocaleCode()).meridiem(ampm === "am" ? 0 : 13, 0, false);
      }
      return ampm === "am" ? "AM" : "PM";
    };
    this.moment = instance || moment_default;
    this.locale = locale;
    this.formats = _extends({}, defaultFormats, formats);
  }
};

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React59 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
init_extends();
var React56 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js
init_objectWithoutPropertiesLoose();

// node_modules/@mui/x-date-pickers/internals/utils/views.js
var areViewsEqual = (views, expectedViews) => {
  if (views.length !== expectedViews.length) {
    return false;
  }
  return expectedViews.every((expectedView) => views.includes(expectedView));
};
var applyDefaultViewProps = ({
  openTo,
  defaultOpenTo,
  views,
  defaultViews
}) => {
  const viewsWithDefault = views != null ? views : defaultViews;
  let openToWithDefault;
  if (openTo != null) {
    openToWithDefault = openTo;
  } else if (viewsWithDefault.includes(defaultOpenTo)) {
    openToWithDefault = defaultOpenTo;
  } else if (viewsWithDefault.length > 0) {
    openToWithDefault = viewsWithDefault[0];
  } else {
    throw new Error("MUI: The `views` prop must contain at least one view");
  }
  return {
    views: viewsWithDefault,
    openTo: openToWithDefault
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/date-utils.js
var findClosestEnabledDate = ({
  date,
  disableFuture,
  disablePast,
  maxDate,
  minDate,
  isDateDisabled,
  utils,
  timezone
}) => {
  const today = utils.startOfDay(utils.dateWithTimezone(void 0, timezone));
  if (disablePast && utils.isBefore(minDate, today)) {
    minDate = today;
  }
  if (disableFuture && utils.isAfter(maxDate, today)) {
    maxDate = today;
  }
  let forward = date;
  let backward = date;
  if (utils.isBefore(date, minDate)) {
    forward = minDate;
    backward = null;
  }
  if (utils.isAfter(date, maxDate)) {
    if (backward) {
      backward = maxDate;
    }
    forward = null;
  }
  while (forward || backward) {
    if (forward && utils.isAfter(forward, maxDate)) {
      forward = null;
    }
    if (backward && utils.isBefore(backward, minDate)) {
      backward = null;
    }
    if (forward) {
      if (!isDateDisabled(forward)) {
        return forward;
      }
      forward = utils.addDays(forward, 1);
    }
    if (backward) {
      if (!isDateDisabled(backward)) {
        return backward;
      }
      backward = utils.addDays(backward, -1);
    }
  }
  return null;
};
var replaceInvalidDateByNull = (utils, value) => value == null || !utils.isValid(value) ? null : value;
var applyDefaultDate = (utils, value, defaultValue) => {
  if (value == null || !utils.isValid(value)) {
    return defaultValue;
  }
  return value;
};
var areDatesEqual = (utils, a, b) => {
  if (!utils.isValid(a) && a != null && !utils.isValid(b) && b != null) {
    return true;
  }
  return utils.isEqual(a, b);
};
var getMonthsInYear = (utils, year) => {
  const firstMonth = utils.startOfYear(year);
  const months = [firstMonth];
  while (months.length < 12) {
    const prevMonth = months[months.length - 1];
    months.push(utils.addMonths(prevMonth, 1));
  }
  return months;
};
var mergeDateAndTime = (utils, dateParam, timeParam) => {
  let mergedDate = dateParam;
  mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));
  mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));
  mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));
  return mergedDate;
};
var getTodayDate = (utils, timezone, valueType) => valueType === "date" ? utils.startOfDay(utils.dateWithTimezone(void 0, timezone)) : utils.dateWithTimezone(void 0, timezone);
var formatMeridiem = (utils, meridiem) => {
  const date = utils.setHours(utils.date(), meridiem === "am" ? 2 : 14);
  return utils.format(date, "meridiem");
};
var dateViews = ["year", "month", "day"];
var isDatePickerView = (view) => dateViews.includes(view);
var resolveDateFormat = (utils, {
  format,
  views
}, isInToolbar) => {
  if (format != null) {
    return format;
  }
  const formats = utils.formats;
  if (areViewsEqual(views, ["year"])) {
    return formats.year;
  }
  if (areViewsEqual(views, ["month"])) {
    return formats.month;
  }
  if (areViewsEqual(views, ["day"])) {
    return formats.dayOfMonth;
  }
  if (areViewsEqual(views, ["month", "year"])) {
    return `${formats.month} ${formats.year}`;
  }
  if (areViewsEqual(views, ["day", "month"])) {
    return `${formats.month} ${formats.dayOfMonth}`;
  }
  if (isInToolbar) {
    return /en/.test(utils.getCurrentLocaleCode()) ? formats.normalDateWithWeekday : formats.normalDate;
  }
  return formats.keyboardDate;
};
var getWeekdays = (utils, date) => {
  const start = utils.startOfWeek(date);
  return [0, 1, 2, 3, 4, 5, 6].map((diff) => utils.addDays(start, diff));
};

// node_modules/@mui/x-date-pickers/internals/utils/time-utils.js
var timeViews = ["hours", "minutes", "seconds"];
var isTimeView = (view) => timeViews.includes(view);
var isInternalTimeView = (view) => timeViews.includes(view) || view === "meridiem";
var getMeridiem = (date, utils) => {
  if (!date) {
    return null;
  }
  return utils.getHours(date) >= 12 ? "pm" : "am";
};
var convertValueToMeridiem = (value, meridiem, ampm) => {
  if (ampm) {
    const currentMeridiem = value >= 12 ? "pm" : "am";
    if (currentMeridiem !== meridiem) {
      return meridiem === "am" ? value - 12 : value + 12;
    }
  }
  return value;
};
var convertToMeridiem = (time, meridiem, ampm, utils) => {
  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);
  return utils.setHours(time, newHoursAmount);
};
var getSecondsInDay = (date, utils) => {
  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
};
var createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {
  if (disableIgnoringDatePartForTimeValidation) {
    return utils.isAfter(dateLeft, dateRight);
  }
  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
};
var resolveTimeFormat = (utils, {
  format,
  views,
  ampm
}) => {
  if (format != null) {
    return format;
  }
  const formats = utils.formats;
  if (areViewsEqual(views, ["hours"])) {
    return ampm ? `${formats.hours12h} ${formats.meridiem}` : formats.hours24h;
  }
  if (areViewsEqual(views, ["minutes"])) {
    return formats.minutes;
  }
  if (areViewsEqual(views, ["seconds"])) {
    return formats.seconds;
  }
  if (areViewsEqual(views, ["minutes", "seconds"])) {
    return `${formats.minutes}:${formats.seconds}`;
  }
  if (areViewsEqual(views, ["hours", "minutes", "seconds"])) {
    return ampm ? `${formats.hours12h}:${formats.minutes}:${formats.seconds} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}:${formats.seconds}`;
  }
  return ampm ? `${formats.hours12h}:${formats.minutes} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}`;
};

// node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js
var SECTION_TYPE_GRANULARITY = {
  year: 1,
  month: 2,
  day: 3,
  hours: 4,
  minutes: 5,
  seconds: 6,
  milliseconds: 7
};
var getSectionTypeGranularity = (sections) => Math.max(...sections.map((section) => {
  var _SECTION_TYPE_GRANULA;
  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;
}));
var roundDate = (utils, granularity, date) => {
  if (granularity === SECTION_TYPE_GRANULARITY.year) {
    return utils.startOfYear(date);
  }
  if (granularity === SECTION_TYPE_GRANULARITY.month) {
    return utils.startOfMonth(date);
  }
  if (granularity === SECTION_TYPE_GRANULARITY.day) {
    return utils.startOfDay(date);
  }
  let roundedDate = date;
  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {
    roundedDate = utils.setMinutes(roundedDate, 0);
  }
  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {
    roundedDate = utils.setSeconds(roundedDate, 0);
  }
  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {
    roundedDate = utils.setMilliseconds(roundedDate, 0);
  }
  return roundedDate;
};
var getDefaultReferenceDate = ({
  props,
  utils,
  granularity,
  timezone,
  getTodayDate: inGetTodayDate
}) => {
  var _props$disableIgnorin;
  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));
  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {
    referenceDate = roundDate(utils, granularity, props.minDate);
  }
  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {
    referenceDate = roundDate(utils, granularity, props.maxDate);
  }
  const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);
  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {
    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));
  }
  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {
    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));
  }
  return referenceDate;
};

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js
init_extends();
var getDateSectionConfigFromFormatToken = (utils, formatToken) => {
  const config = utils.formatTokenMap[formatToken];
  if (config == null) {
    throw new Error([`MUI: The token "${formatToken}" is not supported by the Date and Time Pickers.`, "Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported."].join("\n"));
  }
  if (typeof config === "string") {
    return {
      type: config,
      contentType: config === "meridiem" ? "letter" : "digit",
      maxLength: void 0
    };
  }
  return {
    type: config.sectionType,
    contentType: config.contentType,
    maxLength: config.maxLength
  };
};
var getDeltaFromKeyCode = (keyCode) => {
  switch (keyCode) {
    case "ArrowUp":
      return 1;
    case "ArrowDown":
      return -1;
    case "PageUp":
      return 5;
    case "PageDown":
      return -5;
    default:
      return 0;
  }
};
var getDaysInWeekStr = (utils, timezone, format) => {
  const elements = [];
  const now = utils.dateWithTimezone(void 0, timezone);
  const startDate = utils.startOfWeek(now);
  const endDate = utils.endOfWeek(now);
  let current = startDate;
  while (utils.isBefore(current, endDate)) {
    elements.push(current);
    current = utils.addDays(current, 1);
  }
  return elements.map((weekDay) => utils.formatByString(weekDay, format));
};
var getLetterEditingOptions = (utils, timezone, sectionType, format) => {
  switch (sectionType) {
    case "month": {
      return getMonthsInYear(utils, utils.dateWithTimezone(void 0, timezone)).map((month) => utils.formatByString(month, format));
    }
    case "weekDay": {
      return getDaysInWeekStr(utils, timezone, format);
    }
    case "meridiem": {
      const now = utils.dateWithTimezone(void 0, timezone);
      return [utils.startOfDay(now), utils.endOfDay(now)].map((date) => utils.formatByString(date, format));
    }
    default: {
      return [];
    }
  }
};
var cleanLeadingZeros = (utils, valueStr, size) => {
  let cleanValueStr = valueStr;
  cleanValueStr = Number(cleanValueStr).toString();
  while (cleanValueStr.length < size) {
    cleanValueStr = `0${cleanValueStr}`;
  }
  return cleanValueStr;
};
var cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {
  if (true) {
    if (section.type !== "day" && section.contentType === "digit-with-letter") {
      throw new Error([`MUI: The token "${section.format}" is a digit format with letter in it.'
             This type of format is only supported for 'day' sections`].join("\n"));
    }
  }
  if (section.type === "day" && section.contentType === "digit-with-letter") {
    const date = utils.setDate(sectionBoundaries.longestMonth, value);
    return utils.formatByString(date, section.format);
  }
  const valueStr = value.toString();
  if (section.hasLeadingZerosInInput) {
    return cleanLeadingZeros(utils, valueStr, section.maxLength);
  }
  return valueStr;
};
var adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {
  const delta = getDeltaFromKeyCode(keyCode);
  const isStart = keyCode === "Home";
  const isEnd = keyCode === "End";
  const shouldSetAbsolute = section.value === "" || isStart || isEnd;
  const adjustDigitSection = () => {
    const sectionBoundaries = sectionsValueBoundaries[section.type]({
      currentDate: activeDate,
      format: section.format,
      contentType: section.contentType
    });
    const getCleanValue = (value) => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);
    const step = section.type === "minutes" && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;
    const currentSectionValue = parseInt(section.value, 10);
    let newSectionValueNumber = currentSectionValue + delta * step;
    if (shouldSetAbsolute) {
      if (section.type === "year" && !isEnd && !isStart) {
        return utils.formatByString(utils.dateWithTimezone(void 0, timezone), section.format);
      }
      if (delta > 0 || isStart) {
        newSectionValueNumber = sectionBoundaries.minimum;
      } else {
        newSectionValueNumber = sectionBoundaries.maximum;
      }
    }
    if (newSectionValueNumber % step !== 0) {
      if (delta < 0 || isStart) {
        newSectionValueNumber += step - (step + newSectionValueNumber) % step;
      }
      if (delta > 0 || isEnd) {
        newSectionValueNumber -= newSectionValueNumber % step;
      }
    }
    if (newSectionValueNumber > sectionBoundaries.maximum) {
      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
    }
    if (newSectionValueNumber < sectionBoundaries.minimum) {
      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
    }
    return getCleanValue(newSectionValueNumber);
  };
  const adjustLetterSection = () => {
    const options = getLetterEditingOptions(utils, timezone, section.type, section.format);
    if (options.length === 0) {
      return section.value;
    }
    if (shouldSetAbsolute) {
      if (delta > 0 || isStart) {
        return options[0];
      }
      return options[options.length - 1];
    }
    const currentOptionIndex = options.indexOf(section.value);
    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;
    return options[newOptionIndex];
  };
  if (section.contentType === "digit" || section.contentType === "digit-with-letter") {
    return adjustDigitSection();
  }
  return adjustLetterSection();
};
var getSectionVisibleValue = (section, target) => {
  let value = section.value || section.placeholder;
  const hasLeadingZeros = target === "non-input" ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;
  if (target === "non-input" && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {
    value = Number(value).toString();
  }
  const shouldAddInvisibleSpace = ["input-rtl", "input-ltr"].includes(target) && section.contentType === "digit" && !hasLeadingZeros && value.length === 1;
  if (shouldAddInvisibleSpace) {
    value = `${value}\u200E`;
  }
  if (target === "input-rtl") {
    value = `\u2068${value}\u2069`;
  }
  return value;
};
var cleanString = (dirtyString) => dirtyString.replace(/[\u2066\u2067\u2068\u2069]/g, "");
var addPositionPropertiesToSections = (sections, isRTL) => {
  let position = 0;
  let positionInInput = isRTL ? 1 : 0;
  const newSections = [];
  for (let i = 0; i < sections.length; i += 1) {
    const section = sections[i];
    const renderedValue = getSectionVisibleValue(section, isRTL ? "input-rtl" : "input-ltr");
    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;
    const sectionLength = cleanString(sectionStr).length;
    const sectionLengthInInput = sectionStr.length;
    const cleanedValue = cleanString(renderedValue);
    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;
    const endInInput = startInInput + cleanedValue.length;
    newSections.push(_extends({}, section, {
      start: position,
      end: position + sectionLength,
      startInInput,
      endInInput
    }));
    position += sectionLength;
    positionInInput += sectionLengthInInput;
  }
  return newSections;
};
var getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, sectionFormat) => {
  switch (sectionConfig.type) {
    case "year": {
      return localeText.fieldYearPlaceholder({
        digitAmount: utils.formatByString(utils.dateWithTimezone(void 0, timezone), sectionFormat).length,
        format: sectionFormat
      });
    }
    case "month": {
      return localeText.fieldMonthPlaceholder({
        contentType: sectionConfig.contentType,
        format: sectionFormat
      });
    }
    case "day": {
      return localeText.fieldDayPlaceholder({
        format: sectionFormat
      });
    }
    case "weekDay": {
      return localeText.fieldWeekDayPlaceholder({
        contentType: sectionConfig.contentType,
        format: sectionFormat
      });
    }
    case "hours": {
      return localeText.fieldHoursPlaceholder({
        format: sectionFormat
      });
    }
    case "minutes": {
      return localeText.fieldMinutesPlaceholder({
        format: sectionFormat
      });
    }
    case "seconds": {
      return localeText.fieldSecondsPlaceholder({
        format: sectionFormat
      });
    }
    case "meridiem": {
      return localeText.fieldMeridiemPlaceholder({
        format: sectionFormat
      });
    }
    default: {
      return sectionFormat;
    }
  }
};
var changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {
  if (true) {
    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === "weekDay") {
      throw new Error("changeSectionValueFormat doesn't support week day formats");
    }
  }
  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);
};
var isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.dateWithTimezone(void 0, timezone), format).length === 4;
var doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {
  if (contentType !== "digit") {
    return false;
  }
  const now = utils.dateWithTimezone(void 0, timezone);
  switch (sectionType) {
    case "year": {
      if (isFourDigitYearFormat(utils, timezone, format)) {
        const formatted0001 = utils.formatByString(utils.setYear(now, 1), format);
        return formatted0001 === "0001";
      }
      const formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);
      return formatted2001 === "01";
    }
    case "month": {
      return utils.formatByString(utils.startOfYear(now), format).length > 1;
    }
    case "day": {
      return utils.formatByString(utils.startOfMonth(now), format).length > 1;
    }
    case "weekDay": {
      return utils.formatByString(utils.startOfWeek(now), format).length > 1;
    }
    case "hours": {
      return utils.formatByString(utils.setHours(now, 1), format).length > 1;
    }
    case "minutes": {
      return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;
    }
    case "seconds": {
      return utils.formatByString(utils.setSeconds(now, 1), format).length > 1;
    }
    default: {
      throw new Error("Invalid section type");
    }
  }
};
var getEscapedPartsFromFormat = (utils, format) => {
  const escapedParts = [];
  const {
    start: startChar,
    end: endChar
  } = utils.escapedCharacters;
  const regExp = new RegExp(`(\\${startChar}[^\\${endChar}]*\\${endChar})+`, "g");
  let match = null;
  while (match = regExp.exec(format)) {
    escapedParts.push({
      start: match.index,
      end: regExp.lastIndex - 1
    });
  }
  return escapedParts;
};
var splitFormatIntoSections = (utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {
  let startSeparator = "";
  const sections = [];
  const now = utils.date();
  const commitToken = (token) => {
    if (token === "") {
      return null;
    }
    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);
    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);
    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === "digit";
    const isValidDate = date != null && utils.isValid(date);
    let sectionValue = isValidDate ? utils.formatByString(date, token) : "";
    let maxLength = null;
    if (hasLeadingZerosInInput) {
      if (hasLeadingZerosInFormat) {
        maxLength = sectionValue === "" ? utils.formatByString(now, token).length : sectionValue.length;
      } else {
        if (sectionConfig.maxLength == null) {
          throw new Error(`MUI: The token ${token} should have a 'maxDigitNumber' property on it's adapter`);
        }
        maxLength = sectionConfig.maxLength;
        if (isValidDate) {
          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);
        }
      }
    }
    sections.push(_extends({}, sectionConfig, {
      format: token,
      maxLength,
      value: sectionValue,
      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),
      hasLeadingZeros: hasLeadingZerosInFormat,
      hasLeadingZerosInFormat,
      hasLeadingZerosInInput,
      startSeparator: sections.length === 0 ? startSeparator : "",
      endSeparator: "",
      modified: false
    }));
    return null;
  };
  let formatExpansionOverflow = 10;
  let prevFormat = format;
  let nextFormat = utils.expandFormat(format);
  while (nextFormat !== prevFormat) {
    prevFormat = nextFormat;
    nextFormat = utils.expandFormat(prevFormat);
    formatExpansionOverflow -= 1;
    if (formatExpansionOverflow < 0) {
      throw new Error("MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component");
    }
  }
  const expandedFormat = nextFormat;
  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);
  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).sort((a, b) => b.length - a.length).join("|")})`, "g");
  let currentTokenValue = "";
  for (let i = 0; i < expandedFormat.length; i += 1) {
    const escapedPartOfCurrentChar = escapedParts.find((escapeIndex) => escapeIndex.start <= i && escapeIndex.end >= i);
    const char = expandedFormat[i];
    const isEscapedChar = escapedPartOfCurrentChar != null;
    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;
    const regExpMatch = isTokenStartRegExp.test(potentialToken);
    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && regExpMatch) {
      currentTokenValue = potentialToken.slice(0, isTokenStartRegExp.lastIndex);
      i += isTokenStartRegExp.lastIndex - 1;
    } else {
      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;
      if (!isEscapeBoundary) {
        commitToken(currentTokenValue);
        currentTokenValue = "";
        if (sections.length === 0) {
          startSeparator += char;
        } else {
          sections[sections.length - 1].endSeparator += char;
        }
      }
    }
  }
  commitToken(currentTokenValue);
  return sections.map((section) => {
    const cleanSeparator = (separator) => {
      let cleanedSeparator = separator;
      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(" ")) {
        cleanedSeparator = `\u2069${cleanedSeparator}\u2066`;
      }
      if (formatDensity === "spacious" && ["/", ".", "-"].includes(cleanedSeparator)) {
        cleanedSeparator = ` ${cleanedSeparator} `;
      }
      return cleanedSeparator;
    };
    section.startSeparator = cleanSeparator(section.startSeparator);
    section.endSeparator = cleanSeparator(section.endSeparator);
    return section;
  });
};
var getDateFromDateSections = (utils, sections) => {
  const shouldSkipWeekDays = sections.some((section) => section.type === "day");
  const sectionFormats = [];
  const sectionValues = [];
  for (let i = 0; i < sections.length; i += 1) {
    const section = sections[i];
    const shouldSkip = shouldSkipWeekDays && section.type === "weekDay";
    if (!shouldSkip) {
      sectionFormats.push(section.format);
      sectionValues.push(getSectionVisibleValue(section, "non-input"));
    }
  }
  const formatWithoutSeparator = sectionFormats.join(" ");
  const dateWithoutSeparatorStr = sectionValues.join(" ");
  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);
};
var createDateStrForInputFromSections = (sections, isRTL) => {
  const formattedSections = sections.map((section) => {
    const dateValue = getSectionVisibleValue(section, isRTL ? "input-rtl" : "input-ltr");
    return `${section.startSeparator}${dateValue}${section.endSeparator}`;
  });
  const dateStr = formattedSections.join("");
  if (!isRTL) {
    return dateStr;
  }
  return `\u2066${dateStr}\u2069`;
};
var getSectionsBoundaries = (utils, timezone) => {
  const today = utils.dateWithTimezone(void 0, timezone);
  const endOfYear = utils.endOfYear(today);
  const endOfDay = utils.endOfDay(today);
  const {
    maxDaysInMonth,
    longestMonth
  } = getMonthsInYear(utils, today).reduce((acc, month) => {
    const daysInMonth = utils.getDaysInMonth(month);
    if (daysInMonth > acc.maxDaysInMonth) {
      return {
        maxDaysInMonth: daysInMonth,
        longestMonth: month
      };
    }
    return acc;
  }, {
    maxDaysInMonth: 0,
    longestMonth: null
  });
  return {
    year: ({
      format
    }) => ({
      minimum: 0,
      maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99
    }),
    month: () => ({
      minimum: 1,
      maximum: utils.getMonth(endOfYear) + 1
    }),
    day: ({
      currentDate
    }) => ({
      minimum: 1,
      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,
      longestMonth
    }),
    weekDay: ({
      format,
      contentType
    }) => {
      if (contentType === "digit") {
        const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);
        return {
          minimum: Math.min(...daysInWeek),
          maximum: Math.max(...daysInWeek)
        };
      }
      return {
        minimum: 1,
        maximum: 7
      };
    },
    hours: ({
      format
    }) => {
      const lastHourInDay = utils.getHours(endOfDay);
      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();
      if (hasMeridiem) {
        return {
          minimum: 1,
          maximum: Number(utils.formatByString(utils.startOfDay(today), format))
        };
      }
      return {
        minimum: 0,
        maximum: lastHourInDay
      };
    },
    minutes: () => ({
      minimum: 0,
      maximum: utils.getMinutes(endOfDay)
    }),
    seconds: () => ({
      minimum: 0,
      maximum: utils.getSeconds(endOfDay)
    }),
    meridiem: () => ({
      minimum: 0,
      maximum: 0
    })
  };
};
var warnedOnceInvalidSection = false;
var validateSections = (sections, valueType) => {
  if (true) {
    if (!warnedOnceInvalidSection) {
      const supportedSections = [];
      if (["date", "date-time"].includes(valueType)) {
        supportedSections.push("weekDay", "day", "month", "year");
      }
      if (["time", "date-time"].includes(valueType)) {
        supportedSections.push("hours", "minutes", "seconds", "meridiem");
      }
      const invalidSection = sections.find((section) => !supportedSections.includes(section.type));
      if (invalidSection) {
        console.warn(`MUI: The field component you are using is not compatible with the "${invalidSection.type} date section.`, `The supported date sections are ["${supportedSections.join('", "')}"]\`.`);
        warnedOnceInvalidSection = true;
      }
    }
  }
};
var transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {
  switch (section.type) {
    case "year": {
      return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));
    }
    case "month": {
      return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));
    }
    case "weekDay": {
      const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);
      const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);
      const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);
      const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);
      const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;
      return utils.addDays(dateToTransferFrom, diff);
    }
    case "day": {
      return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));
    }
    case "meridiem": {
      const isAM = utils.getHours(dateToTransferFrom) < 12;
      const mergedDateHours = utils.getHours(dateToTransferTo);
      if (isAM && mergedDateHours >= 12) {
        return utils.addHours(dateToTransferTo, -12);
      }
      if (!isAM && mergedDateHours < 12) {
        return utils.addHours(dateToTransferTo, 12);
      }
      return dateToTransferTo;
    }
    case "hours": {
      return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));
    }
    case "minutes": {
      return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));
    }
    case "seconds": {
      return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));
    }
    default: {
      return dateToTransferTo;
    }
  }
};
var reliableSectionModificationOrder = {
  year: 1,
  month: 2,
  day: 3,
  weekDay: 4,
  hours: 5,
  minutes: 6,
  seconds: 7,
  meridiem: 8
};
var mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => [...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {
  if (!shouldLimitToEditedSections || section.modified) {
    return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);
  }
  return mergedDate;
}, referenceDate);
var isAndroid = () => navigator.userAgent.toLowerCase().indexOf("android") > -1;
var getSectionOrder = (sections, isRTL) => {
  const neighbors = {};
  if (!isRTL) {
    sections.forEach((_, index) => {
      const leftIndex = index === 0 ? null : index - 1;
      const rightIndex = index === sections.length - 1 ? null : index + 1;
      neighbors[index] = {
        leftIndex,
        rightIndex
      };
    });
    return {
      neighbors,
      startIndex: 0,
      endIndex: sections.length - 1
    };
  }
  const rtl2ltr = {};
  const ltr2rtl = {};
  let groupedSectionsStart = 0;
  let groupedSectionsEnd = 0;
  let RTLIndex = sections.length - 1;
  while (RTLIndex >= 0) {
    groupedSectionsEnd = sections.findIndex(
      (section, index) => {
        var _section$endSeparator;
        return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(" ")) && section.endSeparator !== " / ";
      }
    );
    if (groupedSectionsEnd === -1) {
      groupedSectionsEnd = sections.length - 1;
    }
    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {
      ltr2rtl[i] = RTLIndex;
      rtl2ltr[RTLIndex] = i;
      RTLIndex -= 1;
    }
    groupedSectionsStart = groupedSectionsEnd + 1;
  }
  sections.forEach((_, index) => {
    const rtlIndex = ltr2rtl[index];
    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];
    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];
    neighbors[index] = {
      leftIndex,
      rightIndex
    };
  });
  return {
    neighbors,
    startIndex: rtl2ltr[0],
    endIndex: rtl2ltr[sections.length - 1]
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js
var _excluded = ["value", "referenceDate"];
var singleItemValueManager = {
  emptyValue: null,
  getTodayValue: getTodayDate,
  getInitialReferenceValue: (_ref) => {
    let {
      value,
      referenceDate
    } = _ref, params = _objectWithoutPropertiesLoose(_ref, _excluded);
    if (value != null && params.utils.isValid(value)) {
      return value;
    }
    if (referenceDate != null) {
      return referenceDate;
    }
    return getDefaultReferenceDate(params);
  },
  cleanValue: replaceInvalidDateByNull,
  areValuesEqual: areDatesEqual,
  isSameError: (a, b) => a === b,
  hasError: (error) => error != null,
  defaultErrorState: null,
  getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),
  setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)
};
var singleItemFieldValueManager = {
  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,
  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {
    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
    if (shouldReUsePrevDateSections) {
      return prevSections;
    }
    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);
  },
  getValueStrFromSections: createDateStrForInputFromSections,
  getActiveDateManager: (utils, state) => ({
    date: state.value,
    referenceDate: state.referenceValue,
    getSections: (sections) => sections,
    getNewValuesFromNewActiveDate: (newActiveDate) => ({
      value: newActiveDate,
      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
    })
  }),
  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)
};

// node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.js
init_extends();
init_objectWithoutPropertiesLoose();
var React32 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/DateTimeField/useDateTimeField.js
init_extends();

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js
init_extends();
init_objectWithoutPropertiesLoose();
var React7 = __toESM(require_react());
init_useEnhancedEffect();
init_useEventCallback();
init_useForkRef();

// node_modules/@mui/x-date-pickers/internals/hooks/useValidation.js
var React3 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/internals/hooks/useUtils.js
init_extends();
var React2 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded2 = ["localeText"];
var MuiPickersAdapterContext = React.createContext(null);
if (true) {
  MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
}
var LocalizationProvider = function LocalizationProvider2(inProps) {
  var _React$useContext;
  const {
    localeText: inLocaleText
  } = inProps, otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded2);
  const {
    utils: parentUtils,
    localeText: parentLocaleText
  } = (_React$useContext = React.useContext(MuiPickersAdapterContext)) != null ? _React$useContext : {
    utils: void 0,
    localeText: void 0
  };
  const props = useThemeProps({
    props: otherInProps,
    name: "MuiLocalizationProvider"
  });
  const {
    children,
    dateAdapter: DateAdapter,
    dateFormats,
    dateLibInstance,
    adapterLocale,
    localeText: themeLocaleText
  } = props;
  const localeText = React.useMemo(() => _extends({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
  const utils = React.useMemo(() => {
    if (!DateAdapter) {
      if (parentUtils) {
        return parentUtils;
      }
      return null;
    }
    const adapter = new DateAdapter({
      locale: adapterLocale,
      formats: dateFormats,
      instance: dateLibInstance
    });
    if (!adapter.isMUIAdapter) {
      throw new Error(["MUI: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`", "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", "More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation"].join(`
`));
    }
    return adapter;
  }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);
  const defaultDates = React.useMemo(() => {
    if (!utils) {
      return null;
    }
    return {
      minDate: utils.date("1900-01-01T00:00:00.000"),
      maxDate: utils.date("2099-12-31T00:00:00.000")
    };
  }, [utils]);
  const contextValue = React.useMemo(() => {
    return {
      utils,
      defaultDates,
      localeText
    };
  }, [defaultDates, utils, localeText]);
  return (0, import_jsx_runtime.jsx)(MuiPickersAdapterContext.Provider, {
    value: contextValue,
    children
  });
};
true ? LocalizationProvider.propTypes = {
  adapterLocale: import_prop_types.default.any,
  children: import_prop_types.default.node,
  dateAdapter: import_prop_types.default.func,
  dateFormats: import_prop_types.default.shape({
    dayOfMonth: import_prop_types.default.string,
    fullDate: import_prop_types.default.string,
    fullDateTime: import_prop_types.default.string,
    fullDateTime12h: import_prop_types.default.string,
    fullDateTime24h: import_prop_types.default.string,
    fullDateWithWeekday: import_prop_types.default.string,
    fullTime: import_prop_types.default.string,
    fullTime12h: import_prop_types.default.string,
    fullTime24h: import_prop_types.default.string,
    hours12h: import_prop_types.default.string,
    hours24h: import_prop_types.default.string,
    keyboardDate: import_prop_types.default.string,
    keyboardDateTime: import_prop_types.default.string,
    keyboardDateTime12h: import_prop_types.default.string,
    keyboardDateTime24h: import_prop_types.default.string,
    meridiem: import_prop_types.default.string,
    minutes: import_prop_types.default.string,
    month: import_prop_types.default.string,
    monthAndDate: import_prop_types.default.string,
    monthAndYear: import_prop_types.default.string,
    monthShort: import_prop_types.default.string,
    normalDate: import_prop_types.default.string,
    normalDateWithWeekday: import_prop_types.default.string,
    seconds: import_prop_types.default.string,
    shortDate: import_prop_types.default.string,
    weekday: import_prop_types.default.string,
    weekdayShort: import_prop_types.default.string,
    year: import_prop_types.default.string
  }),
  dateLibInstance: import_prop_types.default.any,
  localeText: import_prop_types.default.object
} : void 0;

// node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
init_extends();
var getPickersLocalization = (pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/locales/enUS.js
var enUSPickers = {
  previousMonth: "Previous month",
  nextMonth: "Next month",
  openPreviousView: "open previous view",
  openNextView: "open next view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  start: "Start",
  end: "End",
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  datePickerToolbarTitle: "Select date",
  dateTimePickerToolbarTitle: "Select date & time",
  timePickerToolbarTitle: "Select time",
  dateRangePickerToolbarTitle: "Select date range",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} hours`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} seconds`,
  selectViewText: (view) => `Select ${view}`,
  calendarWeekNumberHeaderLabel: "Week number",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Week ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose date, selected date is ${utils.format(value, "fullDate")}` : "Choose date",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose time, selected time is ${utils.format(value, "fullTime")}` : "Choose time",
  fieldClearLabel: "Clear value",
  timeTableLabel: "pick time",
  dateTableLabel: "pick date",
  fieldYearPlaceholder: (params) => "Y".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa"
};
var DEFAULT_LOCALE = enUSPickers;
var enUS = getPickersLocalization(enUSPickers);

// node_modules/@mui/x-date-pickers/internals/hooks/useUtils.js
var useLocalizationContext = () => {
  const localization = React2.useContext(MuiPickersAdapterContext);
  if (localization === null) {
    throw new Error(["MUI: Can not find the date and time pickers localization context.", "It looks like you forgot to wrap your component in LocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package"].join("\n"));
  }
  if (localization.utils === null) {
    throw new Error(["MUI: Can not find the date and time pickers adapter from its localization context.", "It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider."].join("\n"));
  }
  const localeText = React2.useMemo(() => _extends({}, DEFAULT_LOCALE, localization.localeText), [localization.localeText]);
  return React2.useMemo(() => _extends({}, localization, {
    localeText
  }), [localization, localeText]);
};
var useUtils = () => useLocalizationContext().utils;
var useDefaultDates = () => useLocalizationContext().defaultDates;
var useLocaleText = () => useLocalizationContext().localeText;
var useNow = (timezone) => {
  const utils = useUtils();
  const now = React2.useRef();
  if (now.current === void 0) {
    now.current = utils.dateWithTimezone(void 0, timezone);
  }
  return now.current;
};

// node_modules/@mui/x-date-pickers/internals/hooks/useValidation.js
function useValidation(props, validate, isSameError, defaultErrorState) {
  const {
    value,
    onError
  } = props;
  const adapter = useLocalizationContext();
  const previousValidationErrorRef = React3.useRef(defaultErrorState);
  const validationError = validate({
    adapter,
    value,
    props
  });
  React3.useEffect(() => {
    if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
      onError(validationError, value);
    }
    previousValidationErrorRef.current = validationError;
  }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
  return validationError;
}

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js
init_extends();
var React5 = __toESM(require_react());
init_useControlled();

// node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.js
var React4 = __toESM(require_react());
init_useEventCallback();
init_useControlled();
var useValueWithTimezone = ({
  timezone: timezoneProp,
  value: valueProp,
  defaultValue,
  onChange,
  valueManager
}) => {
  var _ref, _ref2;
  const utils = useUtils();
  const firstDefaultValue = React4.useRef(defaultValue);
  const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;
  const inputTimezone = React4.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);
  const setInputTimezone = useEventCallback_default((newValue) => {
    if (inputTimezone == null) {
      return newValue;
    }
    return valueManager.setTimezone(utils, inputTimezone, newValue);
  });
  const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : "default";
  const valueWithTimezoneToRender = React4.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);
  const handleValueChange = useEventCallback_default((newValue, ...otherParams) => {
    const newValueWithInputTimezone = setInputTimezone(newValue);
    onChange == null || onChange(newValueWithInputTimezone, ...otherParams);
  });
  return {
    value: valueWithTimezoneToRender,
    handleValueChange,
    timezone: timezoneToRender
  };
};
var useControlledValueWithTimezone = ({
  name,
  timezone: timezoneProp,
  value: valueProp,
  defaultValue,
  onChange: onChangeProp,
  valueManager
}) => {
  const [valueWithInputTimezone, setValue] = useControlled({
    name,
    state: "value",
    controlled: valueProp,
    default: defaultValue != null ? defaultValue : valueManager.emptyValue
  });
  const onChange = useEventCallback_default((newValue, ...otherParams) => {
    setValue(newValue);
    onChangeProp == null || onChangeProp(newValue, ...otherParams);
  });
  return useValueWithTimezone({
    timezone: timezoneProp,
    value: valueWithInputTimezone,
    defaultValue: void 0,
    onChange,
    valueManager
  });
};

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js
var useFieldState = (params) => {
  const utils = useUtils();
  const localeText = useLocaleText();
  const adapter = useLocalizationContext();
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const {
    valueManager,
    fieldValueManager,
    valueType,
    validator,
    internalProps,
    internalProps: {
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      onChange,
      format,
      formatDensity = "dense",
      selectedSections: selectedSectionsProp,
      onSelectedSectionsChange,
      shouldRespectLeadingZeros = false,
      timezone: timezoneProp
    }
  } = params;
  const {
    timezone,
    value: valueFromTheOutside,
    handleValueChange
  } = useValueWithTimezone({
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager
  });
  const sectionsValueBoundaries = React5.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);
  const getSectionsFromValue = React5.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, (date) => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);
  const placeholder = React5.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);
  const [state, setState] = React5.useState(() => {
    const sections = getSectionsFromValue(valueFromTheOutside);
    validateSections(sections, valueType);
    const stateWithoutReferenceDate = {
      sections,
      value: valueFromTheOutside,
      referenceValue: valueManager.emptyValue,
      tempValueStrAndroid: null
    };
    const granularity = getSectionTypeGranularity(sections);
    const referenceValue = valueManager.getInitialReferenceValue({
      referenceDate: referenceDateProp,
      value: valueFromTheOutside,
      utils,
      props: internalProps,
      granularity,
      timezone
    });
    return _extends({}, stateWithoutReferenceDate, {
      referenceValue
    });
  });
  const [selectedSections, innerSetSelectedSections] = useControlled({
    controlled: selectedSectionsProp,
    default: null,
    name: "useField",
    state: "selectedSectionIndexes"
  });
  const setSelectedSections = (newSelectedSections) => {
    innerSetSelectedSections(newSelectedSections);
    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
    setState((prevState) => _extends({}, prevState, {
      selectedSectionQuery: null
    }));
  };
  const selectedSectionIndexes = React5.useMemo(() => {
    if (selectedSections == null) {
      return null;
    }
    if (selectedSections === "all") {
      return {
        startIndex: 0,
        endIndex: state.sections.length - 1,
        shouldSelectBoundarySelectors: true
      };
    }
    if (typeof selectedSections === "number") {
      return {
        startIndex: selectedSections,
        endIndex: selectedSections
      };
    }
    if (typeof selectedSections === "string") {
      const selectedSectionIndex = state.sections.findIndex((section) => section.type === selectedSections);
      return {
        startIndex: selectedSectionIndex,
        endIndex: selectedSectionIndex
      };
    }
    return selectedSections;
  }, [selectedSections, state.sections]);
  const publishValue = ({
    value,
    referenceValue,
    sections
  }) => {
    setState((prevState) => _extends({}, prevState, {
      sections,
      value,
      referenceValue,
      tempValueStrAndroid: null
    }));
    if (valueManager.areValuesEqual(utils, state.value, value)) {
      return;
    }
    const context = {
      validationError: validator({
        adapter,
        value,
        props: _extends({}, internalProps, {
          value,
          timezone
        })
      })
    };
    handleValueChange(value, context);
  };
  const setSectionValue = (sectionIndex, newSectionValue) => {
    const newSections = [...state.sections];
    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {
      value: newSectionValue,
      modified: true
    });
    return addPositionPropertiesToSections(newSections, isRTL);
  };
  const clearValue = () => {
    publishValue({
      value: valueManager.emptyValue,
      referenceValue: state.referenceValue,
      sections: getSectionsFromValue(valueManager.emptyValue)
    });
  };
  const clearActiveSection = () => {
    if (selectedSectionIndexes == null) {
      return;
    }
    const activeSection = state.sections[selectedSectionIndexes.startIndex];
    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter((section) => section.value !== "").length;
    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === "" ? 0 : 1);
    const newSections = setSectionValue(selectedSectionIndexes.startIndex, "");
    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(""));
    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {
      publishValue(_extends({}, newValues, {
        sections: newSections
      }));
    } else {
      setState((prevState) => _extends({}, prevState, newValues, {
        sections: newSections,
        tempValueStrAndroid: null
      }));
    }
  };
  const updateValueFromValueStr = (valueStr) => {
    const parseDateStr = (dateStr, referenceDate) => {
      const date = utils.parse(dateStr, format);
      if (date == null || !utils.isValid(date)) {
        return null;
      }
      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);
      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);
    };
    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);
    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);
    publishValue({
      value: newValue,
      referenceValue: newReferenceValue,
      sections: getSectionsFromValue(newValue, state.sections)
    });
  };
  const updateSectionValue = ({
    activeSection,
    newSectionValue,
    shouldGoToNextSection
  }) => {
    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {
      setSelectedSections(selectedSectionIndexes.startIndex + 1);
    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
      setSelectedSections(selectedSectionIndexes.startIndex);
    }
    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);
    const newActiveDateSections = activeDateManager.getSections(newSections);
    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);
    let values;
    let shouldPublish;
    if (newActiveDate != null && utils.isValid(newActiveDate)) {
      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);
      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);
      shouldPublish = true;
    } else {
      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));
    }
    if (shouldPublish) {
      return publishValue(_extends({}, values, {
        sections: newSections
      }));
    }
    return setState((prevState) => _extends({}, prevState, values, {
      sections: newSections,
      tempValueStrAndroid: null
    }));
  };
  const setTempAndroidValueStr = (tempValueStrAndroid) => setState((prev) => _extends({}, prev, {
    tempValueStrAndroid
  }));
  React5.useEffect(() => {
    const sections = getSectionsFromValue(state.value);
    validateSections(sections, valueType);
    setState((prevState) => _extends({}, prevState, {
      sections
    }));
  }, [format, utils.locale]);
  React5.useEffect(() => {
    let shouldUpdate = false;
    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {
      shouldUpdate = true;
    } else {
      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);
    }
    if (shouldUpdate) {
      setState((prevState) => _extends({}, prevState, {
        value: valueFromTheOutside,
        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),
        sections: getSectionsFromValue(valueFromTheOutside)
      }));
    }
  }, [valueFromTheOutside]);
  return {
    state,
    selectedSectionIndexes,
    setSelectedSections,
    clearValue,
    clearActiveSection,
    updateSectionValue,
    updateValueFromValueStr,
    setTempAndroidValueStr,
    sectionsValueBoundaries,
    placeholder,
    timezone
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js
init_extends();
var React6 = __toESM(require_react());
init_useEventCallback();
var QUERY_LIFE_DURATION_MS = 5e3;
var isQueryResponseWithoutValue = (response) => response.saveQuery != null;
var useFieldCharacterEditing = ({
  sections,
  updateSectionValue,
  sectionsValueBoundaries,
  setTempAndroidValueStr,
  timezone
}) => {
  const utils = useUtils();
  const [query, setQuery] = React6.useState(null);
  const resetQuery = useEventCallback_default(() => setQuery(null));
  React6.useEffect(() => {
    var _sections$query$secti;
    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {
      resetQuery();
    }
  }, [sections, query, resetQuery]);
  React6.useEffect(() => {
    if (query != null) {
      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);
      return () => {
        window.clearTimeout(timeout);
      };
    }
    return () => {
    };
  }, [query, resetQuery]);
  const applyQuery = ({
    keyPressed,
    sectionIndex
  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {
    const cleanKeyPressed = keyPressed.toLowerCase();
    const activeSection = sections[sectionIndex];
    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {
      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;
      const queryResponse2 = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);
      if (!isQueryResponseWithoutValue(queryResponse2)) {
        setQuery({
          sectionIndex,
          value: concatenatedQueryValue,
          sectionType: activeSection.type
        });
        return queryResponse2;
      }
    }
    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);
    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {
      resetQuery();
      return null;
    }
    setQuery({
      sectionIndex,
      value: cleanKeyPressed,
      sectionType: activeSection.type
    });
    if (isQueryResponseWithoutValue(queryResponse)) {
      return null;
    }
    return queryResponse;
  };
  const applyLetterEditing = (params) => {
    const findMatchingOptions = (format, options, queryValue) => {
      const matchingValues = options.filter((option) => option.toLowerCase().startsWith(queryValue));
      if (matchingValues.length === 0) {
        return {
          saveQuery: false
        };
      }
      return {
        sectionValue: matchingValues[0],
        shouldGoToNextSection: matchingValues.length === 1
      };
    };
    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {
      const getOptions = (format) => getLetterEditingOptions(utils, timezone, activeSection.type, format);
      if (activeSection.contentType === "letter") {
        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);
      }
      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === "letter") {
        const fallbackOptions = getOptions(fallbackFormat);
        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);
        if (isQueryResponseWithoutValue(response)) {
          return {
            saveQuery: false
          };
        }
        return _extends({}, response, {
          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)
        });
      }
      return {
        saveQuery: false
      };
    };
    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
      switch (activeSection.type) {
        case "month": {
          const formatFallbackValue = (fallbackValue) => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);
          return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);
        }
        case "weekDay": {
          const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();
          return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);
        }
        case "meridiem": {
          return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);
        }
        default: {
          return {
            saveQuery: false
          };
        }
      }
    };
    return applyQuery(params, getFirstSectionValueMatchingWithQuery);
  };
  const applyNumericEditing = (params) => {
    const getNewSectionValue = (queryValue, section) => {
      const queryValueNumber = Number(`${queryValue}`);
      const sectionBoundaries = sectionsValueBoundaries[section.type]({
        currentDate: null,
        format: section.format,
        contentType: section.contentType
      });
      if (queryValueNumber > sectionBoundaries.maximum) {
        return {
          saveQuery: false
        };
      }
      if (queryValueNumber < sectionBoundaries.minimum) {
        return {
          saveQuery: true
        };
      }
      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;
      const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);
      return {
        sectionValue: newSectionValue,
        shouldGoToNextSection
      };
    };
    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
      if (activeSection.contentType === "digit" || activeSection.contentType === "digit-with-letter") {
        return getNewSectionValue(queryValue, activeSection);
      }
      if (activeSection.type === "month") {
        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, "digit", "month", "MM");
        const response = getNewSectionValue(queryValue, {
          type: activeSection.type,
          format: "MM",
          hasLeadingZerosInFormat,
          hasLeadingZerosInInput: true,
          contentType: "digit",
          maxLength: 2
        });
        if (isQueryResponseWithoutValue(response)) {
          return response;
        }
        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, "MM", activeSection.format);
        return _extends({}, response, {
          sectionValue: formattedValue
        });
      }
      if (activeSection.type === "weekDay") {
        const response = getNewSectionValue(queryValue, activeSection);
        if (isQueryResponseWithoutValue(response)) {
          return response;
        }
        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];
        return _extends({}, response, {
          sectionValue: formattedValue
        });
      }
      return {
        saveQuery: false
      };
    };
    return applyQuery(params, getFirstSectionValueMatchingWithQuery, (queryValue) => !Number.isNaN(Number(queryValue)));
  };
  const applyCharacterEditing = useEventCallback_default((params) => {
    const activeSection = sections[params.sectionIndex];
    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));
    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);
    if (response == null) {
      setTempAndroidValueStr(null);
    } else {
      updateSectionValue({
        activeSection,
        newSectionValue: response.sectionValue,
        shouldGoToNextSection: response.shouldGoToNextSection
      });
    }
  });
  return {
    applyCharacterEditing,
    resetCharacterQuery: resetQuery
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/utils.js
function arrayIncludes(array, itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.every((item) => array.indexOf(item) !== -1);
  }
  return array.indexOf(itemOrItems) !== -1;
}
var onSpaceOrEnter = (innerFn, externalEvent) => (event) => {
  if (event.key === "Enter" || event.key === " ") {
    innerFn(event);
    event.preventDefault();
    event.stopPropagation();
  }
  if (externalEvent) {
    externalEvent(event);
  }
};
var getActiveElement = (root = document) => {
  const activeEl = root.activeElement;
  if (!activeEl) {
    return null;
  }
  if (activeEl.shadowRoot) {
    return getActiveElement(activeEl.shadowRoot);
  }
  return activeEl;
};
var DEFAULT_DESKTOP_MODE_MEDIA_QUERY = "@media (pointer: fine)";

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js
var _excluded3 = ["onClick", "onKeyDown", "onFocus", "onBlur", "onMouseUp", "onPaste", "error", "clearable", "onClear", "disabled"];
var useField = (params) => {
  const utils = useUtils();
  const {
    state,
    selectedSectionIndexes,
    setSelectedSections,
    clearValue,
    clearActiveSection,
    updateSectionValue,
    updateValueFromValueStr,
    setTempAndroidValueStr,
    sectionsValueBoundaries,
    placeholder,
    timezone
  } = useFieldState(params);
  const {
    inputRef: inputRefProp,
    internalProps,
    internalProps: {
      readOnly = false,
      unstableFieldRef,
      minutesStep
    },
    forwardedProps: {
      onClick: onClick2,
      onKeyDown,
      onFocus,
      onBlur,
      onMouseUp,
      onPaste,
      error,
      clearable,
      onClear,
      disabled
    },
    fieldValueManager,
    valueManager,
    validator
  } = params, otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded3);
  const {
    applyCharacterEditing,
    resetCharacterQuery
  } = useFieldCharacterEditing({
    sections: state.sections,
    updateSectionValue,
    sectionsValueBoundaries,
    setTempAndroidValueStr,
    timezone
  });
  const inputRef = React7.useRef(null);
  const handleRef = useForkRef(inputRefProp, inputRef);
  const focusTimeoutRef = React7.useRef(void 0);
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const sectionOrder = React7.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);
  const syncSelectionFromDOM = () => {
    var _selectionStart;
    if (readOnly) {
      setSelectedSections(null);
      return;
    }
    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;
    let nextSectionIndex;
    if (browserStartIndex <= state.sections[0].startInInput) {
      nextSectionIndex = 1;
    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {
      nextSectionIndex = 1;
    } else {
      nextSectionIndex = state.sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
    }
    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
    setSelectedSections(sectionIndex);
  };
  const handleInputClick = useEventCallback_default((event, ...args) => {
    if (event.isDefaultPrevented()) {
      return;
    }
    onClick2 == null || onClick2(event, ...args);
    syncSelectionFromDOM();
  });
  const handleInputMouseUp = useEventCallback_default((event) => {
    onMouseUp == null || onMouseUp(event);
    event.preventDefault();
  });
  const handleInputFocus = useEventCallback_default((...args) => {
    onFocus == null || onFocus(...args);
    const input = inputRef.current;
    window.clearTimeout(focusTimeoutRef.current);
    focusTimeoutRef.current = setTimeout(() => {
      if (!input || input !== inputRef.current) {
        return;
      }
      if (selectedSectionIndexes != null || readOnly) {
        return;
      }
      if (input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {
        setSelectedSections("all");
      } else {
        syncSelectionFromDOM();
      }
    });
  });
  const handleInputBlur = useEventCallback_default((...args) => {
    onBlur == null || onBlur(...args);
    setSelectedSections(null);
  });
  const handleInputPaste = useEventCallback_default((event) => {
    onPaste == null || onPaste(event);
    if (readOnly) {
      event.preventDefault();
      return;
    }
    const pastedValue = event.clipboardData.getData("text");
    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {
      const activeSection = state.sections[selectedSectionIndexes.startIndex];
      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
      const digitsOnly = /^[0-9]+$/.test(pastedValue);
      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
      const isValidPastedValue = activeSection.contentType === "letter" && lettersOnly || activeSection.contentType === "digit" && digitsOnly || activeSection.contentType === "digit-with-letter" && digitsAndLetterOnly;
      if (isValidPastedValue) {
        resetCharacterQuery();
        updateSectionValue({
          activeSection,
          newSectionValue: pastedValue,
          shouldGoToNextSection: true
        });
        event.preventDefault();
        return;
      }
      if (lettersOnly || digitsOnly) {
        event.preventDefault();
        return;
      }
    }
    event.preventDefault();
    resetCharacterQuery();
    updateValueFromValueStr(pastedValue);
  });
  const handleInputChange = useEventCallback_default((event) => {
    if (readOnly) {
      return;
    }
    const targetValue = event.target.value;
    if (targetValue === "") {
      resetCharacterQuery();
      clearValue();
      return;
    }
    const eventData = event.nativeEvent.data;
    const shouldUseEventData = eventData && eventData.length > 1;
    const valueStr2 = shouldUseEventData ? eventData : targetValue;
    const cleanValueStr = cleanString(valueStr2);
    if (selectedSectionIndexes == null || shouldUseEventData) {
      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);
      return;
    }
    let keyPressed;
    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {
      keyPressed = cleanValueStr;
    } else {
      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));
      let startOfDiffIndex = -1;
      let endOfDiffIndex = -1;
      for (let i = 0; i < prevValueStr.length; i += 1) {
        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {
          startOfDiffIndex = i;
        }
        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {
          endOfDiffIndex = i;
        }
      }
      const activeSection = state.sections[selectedSectionIndexes.startIndex];
      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;
      if (hasDiffOutsideOfActiveSection) {
        return;
      }
      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || "").length;
      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || "").length, activeSectionEndRelativeToNewValue);
    }
    if (keyPressed.length === 0) {
      if (isAndroid()) {
        setTempAndroidValueStr(valueStr2);
      } else {
        resetCharacterQuery();
        clearActiveSection();
      }
      return;
    }
    applyCharacterEditing({
      keyPressed,
      sectionIndex: selectedSectionIndexes.startIndex
    });
  });
  const handleInputKeyDown = useEventCallback_default((event) => {
    onKeyDown == null || onKeyDown(event);
    switch (true) {
      case (event.key === "a" && (event.ctrlKey || event.metaKey)): {
        event.preventDefault();
        setSelectedSections("all");
        break;
      }
      case event.key === "ArrowRight": {
        event.preventDefault();
        if (selectedSectionIndexes == null) {
          setSelectedSections(sectionOrder.startIndex);
        } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
          setSelectedSections(selectedSectionIndexes.endIndex);
        } else {
          const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;
          if (nextSectionIndex !== null) {
            setSelectedSections(nextSectionIndex);
          }
        }
        break;
      }
      case event.key === "ArrowLeft": {
        event.preventDefault();
        if (selectedSectionIndexes == null) {
          setSelectedSections(sectionOrder.endIndex);
        } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
          setSelectedSections(selectedSectionIndexes.startIndex);
        } else {
          const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;
          if (nextSectionIndex !== null) {
            setSelectedSections(nextSectionIndex);
          }
        }
        break;
      }
      case event.key === "Delete": {
        event.preventDefault();
        if (readOnly) {
          break;
        }
        if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {
          clearValue();
        } else {
          clearActiveSection();
        }
        resetCharacterQuery();
        break;
      }
      case ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"].includes(event.key): {
        event.preventDefault();
        if (readOnly || selectedSectionIndexes == null) {
          break;
        }
        const activeSection = state.sections[selectedSectionIndexes.startIndex];
        const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
        const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {
          minutesStep
        });
        updateSectionValue({
          activeSection,
          newSectionValue,
          shouldGoToNextSection: false
        });
        break;
      }
    }
  });
  useEnhancedEffect_default(() => {
    if (!inputRef.current) {
      return;
    }
    if (selectedSectionIndexes == null) {
      if (inputRef.current.scrollLeft) {
        inputRef.current.scrollLeft = 0;
      }
      return;
    }
    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];
    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];
    let selectionStart = firstSelectedSection.startInInput;
    let selectionEnd = lastSelectedSection.endInInput;
    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {
      selectionStart -= firstSelectedSection.startSeparator.length;
      selectionEnd += lastSelectedSection.endSeparator.length;
    }
    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {
      const currentScrollTop = inputRef.current.scrollTop;
      if (inputRef.current === getActiveElement(document)) {
        inputRef.current.setSelectionRange(selectionStart, selectionEnd);
      }
      inputRef.current.scrollTop = currentScrollTop;
    }
  });
  const validationError = useValidation(_extends({}, internalProps, {
    value: state.value,
    timezone
  }), validator, valueManager.isSameError, valueManager.defaultErrorState);
  const inputError = React7.useMemo(() => {
    if (error !== void 0) {
      return error;
    }
    return valueManager.hasError(validationError);
  }, [valueManager, validationError, error]);
  React7.useEffect(() => {
    if (!inputError && !selectedSectionIndexes) {
      resetCharacterQuery();
    }
  }, [state.referenceValue, selectedSectionIndexes, inputError]);
  React7.useEffect(() => {
    if (inputRef.current && inputRef.current === document.activeElement) {
      setSelectedSections("all");
    }
    return () => window.clearTimeout(focusTimeoutRef.current);
  }, []);
  React7.useEffect(() => {
    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {
      resetCharacterQuery();
      clearActiveSection();
    }
  }, [state.tempValueStrAndroid]);
  const valueStr = React7.useMemo(() => {
    var _state$tempValueStrAn;
    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);
  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);
  const inputMode = React7.useMemo(() => {
    if (selectedSectionIndexes == null) {
      return "text";
    }
    if (state.sections[selectedSectionIndexes.startIndex].contentType === "letter") {
      return "text";
    }
    return "numeric";
  }, [selectedSectionIndexes, state.sections]);
  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
  const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);
  const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;
  React7.useImperativeHandle(unstableFieldRef, () => ({
    getSections: () => state.sections,
    getActiveSectionIndex: () => {
      var _selectionStart2, _selectionEnd;
      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;
      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;
      if (browserStartIndex === 0 && browserEndIndex === 0) {
        return null;
      }
      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 : state.sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
    },
    setSelectedSections: (activeSectionIndex) => setSelectedSections(activeSectionIndex)
  }));
  const handleClearValue = useEventCallback_default((event, ...args) => {
    var _inputRef$current;
    event.preventDefault();
    onClear == null || onClear(event, ...args);
    clearValue();
    inputRef == null || (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();
    setSelectedSections(0);
  });
  return _extends({
    placeholder,
    autoComplete: "off",
    disabled: Boolean(disabled)
  }, otherForwardedProps, {
    value: shouldShowPlaceholder ? "" : valueStr,
    inputMode,
    readOnly,
    onClick: handleInputClick,
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    onPaste: handleInputPaste,
    onChange: handleInputChange,
    onKeyDown: handleInputKeyDown,
    onMouseUp: handleInputMouseUp,
    onClear: handleClearValue,
    error: inputError,
    ref: handleRef,
    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)
  });
};

// node_modules/@mui/x-date-pickers/internals/utils/validation/validateDate.js
var validateDate = ({
  props,
  value,
  adapter
}) => {
  if (value === null) {
    return null;
  }
  const {
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    disablePast,
    disableFuture,
    timezone
  } = props;
  const now = adapter.utils.dateWithTimezone(void 0, timezone);
  const minDate = applyDefaultDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
  const maxDate = applyDefaultDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);
  switch (true) {
    case !adapter.utils.isValid(value):
      return "invalidDate";
    case Boolean(shouldDisableDate && shouldDisableDate(value)):
      return "shouldDisableDate";
    case Boolean(shouldDisableMonth && shouldDisableMonth(value)):
      return "shouldDisableMonth";
    case Boolean(shouldDisableYear && shouldDisableYear(value)):
      return "shouldDisableYear";
    case Boolean(disableFuture && adapter.utils.isAfterDay(value, now)):
      return "disableFuture";
    case Boolean(disablePast && adapter.utils.isBeforeDay(value, now)):
      return "disablePast";
    case Boolean(minDate && adapter.utils.isBeforeDay(value, minDate)):
      return "minDate";
    case Boolean(maxDate && adapter.utils.isAfterDay(value, maxDate)):
      return "maxDate";
    default:
      return null;
  }
};

// node_modules/@mui/x-date-pickers/internals/utils/validation/validateTime.js
var validateTime = ({
  adapter,
  value,
  props
}) => {
  if (value === null) {
    return null;
  }
  const {
    minTime,
    maxTime,
    minutesStep,
    shouldDisableClock,
    shouldDisableTime,
    disableIgnoringDatePartForTimeValidation = false,
    disablePast,
    disableFuture,
    timezone
  } = props;
  const now = adapter.utils.dateWithTimezone(void 0, timezone);
  const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
  switch (true) {
    case !adapter.utils.isValid(value):
      return "invalidDate";
    case Boolean(minTime && isAfter(minTime, value)):
      return "minTime";
    case Boolean(maxTime && isAfter(value, maxTime)):
      return "maxTime";
    case Boolean(disableFuture && adapter.utils.isAfter(value, now)):
      return "disableFuture";
    case Boolean(disablePast && adapter.utils.isBefore(value, now)):
      return "disablePast";
    case Boolean(shouldDisableTime && shouldDisableTime(value, "hours")):
      return "shouldDisableTime-hours";
    case Boolean(shouldDisableTime && shouldDisableTime(value, "minutes")):
      return "shouldDisableTime-minutes";
    case Boolean(shouldDisableTime && shouldDisableTime(value, "seconds")):
      return "shouldDisableTime-seconds";
    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getHours(value), "hours")):
      return "shouldDisableClock-hours";
    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getMinutes(value), "minutes")):
      return "shouldDisableClock-minutes";
    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getSeconds(value), "seconds")):
      return "shouldDisableClock-seconds";
    case Boolean(minutesStep && adapter.utils.getMinutes(value) % minutesStep !== 0):
      return "minutesStep";
    default:
      return null;
  }
};

// node_modules/@mui/x-date-pickers/internals/utils/validation/validateDateTime.js
var validateDateTime = ({
  props,
  value,
  adapter
}) => {
  const dateValidationResult = validateDate({
    adapter,
    value,
    props
  });
  if (dateValidationResult !== null) {
    return dateValidationResult;
  }
  return validateTime({
    adapter,
    value,
    props
  });
};

// node_modules/@mui/x-date-pickers/internals/utils/fields.js
init_extends();

// node_modules/@mui/x-date-pickers/internals/utils/validation/extractValidationProps.js
var DATE_VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minDate", "maxDate", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear"];
var TIME_VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minTime", "maxTime", "shouldDisableClock", "shouldDisableTime", "minutesStep", "ampm", "disableIgnoringDatePartForTimeValidation"];
var DATE_TIME_VALIDATION_PROP_NAMES = ["minDateTime", "maxDateTime"];
var VALIDATION_PROP_NAMES = [...DATE_VALIDATION_PROP_NAMES, ...TIME_VALIDATION_PROP_NAMES, ...DATE_TIME_VALIDATION_PROP_NAMES];
var extractValidationProps = (props) => VALIDATION_PROP_NAMES.reduce((extractedProps, propName) => {
  if (props.hasOwnProperty(propName)) {
    extractedProps[propName] = props[propName];
  }
  return extractedProps;
}, {});

// node_modules/@mui/x-date-pickers/internals/utils/fields.js
var SHARED_FIELD_INTERNAL_PROP_NAMES = ["value", "defaultValue", "referenceDate", "format", "formatDensity", "onChange", "timezone", "readOnly", "onError", "shouldRespectLeadingZeros", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef"];
var splitFieldInternalAndForwardedProps = (props, valueType) => {
  const forwardedProps = _extends({}, props);
  const internalProps = {};
  const extractProp = (propName) => {
    if (forwardedProps.hasOwnProperty(propName)) {
      internalProps[propName] = forwardedProps[propName];
      delete forwardedProps[propName];
    }
  };
  SHARED_FIELD_INTERNAL_PROP_NAMES.forEach(extractProp);
  if (valueType === "date") {
    DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
  } else if (valueType === "time") {
    TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
  } else if (valueType === "date-time") {
    DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
    TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
    DATE_TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
  }
  return {
    forwardedProps,
    internalProps
  };
};

// node_modules/@mui/x-date-pickers/DateTimeField/useDateTimeField.js
var useDefaultizedDateTimeField = (props) => {
  var _props$ampm, _props$disablePast, _props$disableFuture, _props$format, _props$minDateTime, _props$maxDateTime, _props$minDateTime2, _props$maxDateTime2;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils.is12HourCycleInCurrentLocale();
  const defaultFormat = ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h;
  return _extends({}, props, {
    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
    format: (_props$format = props.format) != null ? _props$format : defaultFormat,
    disableIgnoringDatePartForTimeValidation: Boolean(props.minDateTime || props.maxDateTime),
    minDate: applyDefaultDate(utils, (_props$minDateTime = props.minDateTime) != null ? _props$minDateTime : props.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, (_props$maxDateTime = props.maxDateTime) != null ? _props$maxDateTime : props.maxDate, defaultDates.maxDate),
    minTime: (_props$minDateTime2 = props.minDateTime) != null ? _props$minDateTime2 : props.minTime,
    maxTime: (_props$maxDateTime2 = props.maxDateTime) != null ? _props$maxDateTime2 : props.maxTime
  });
};
var useDateTimeField = ({
  props: inProps,
  inputRef
}) => {
  const props = useDefaultizedDateTimeField(inProps);
  const {
    forwardedProps,
    internalProps
  } = splitFieldInternalAndForwardedProps(props, "date-time");
  return useField({
    inputRef,
    forwardedProps,
    internalProps,
    valueManager: singleItemValueManager,
    fieldValueManager: singleItemFieldValueManager,
    validator: validateDateTime,
    valueType: "date-time"
  });
};

// node_modules/@mui/x-date-pickers/hooks/useClearableField.js
init_extends();
init_objectWithoutPropertiesLoose();
var React31 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/icons/index.js
init_utils2();
var React8 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var ArrowDropDownIcon = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");
var ArrowLeftIcon = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
}), "ArrowLeft");
var ArrowRightIcon = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "ArrowRight");
var CalendarIcon = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
}), "Calendar");
var ClockIcon = createSvgIcon((0, import_jsx_runtime3.jsxs)(React8.Fragment, {
  children: [(0, import_jsx_runtime2.jsx)("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), (0, import_jsx_runtime2.jsx)("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Clock");
var DateRangeIcon = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
}), "DateRange");
var TimeIcon = createSvgIcon((0, import_jsx_runtime3.jsxs)(React8.Fragment, {
  children: [(0, import_jsx_runtime2.jsx)("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), (0, import_jsx_runtime2.jsx)("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Time");
var ClearIcon = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Clear");

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
init_objectWithoutPropertiesLoose();
init_extends();
var React9 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/pickersArrowSwitcherClasses.js
init_utils();
function getPickersArrowSwitcherUtilityClass(slot) {
  return generateUtilityClass("MuiPickersArrowSwitcher", slot);
}
var pickersArrowSwitcherClasses = generateUtilityClasses("MuiPickersArrowSwitcher", ["root", "spacer", "button"]);

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _excluded4 = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel"];
var _excluded22 = ["ownerState"];
var _excluded32 = ["ownerState"];
var PickersArrowSwitcherRoot = styled_default("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex"
});
var PickersArrowSwitcherSpacer = styled_default("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Spacer",
  overridesResolver: (props, styles) => styles.spacer
})(({
  theme
}) => ({
  width: theme.spacing(3)
}));
var PickersArrowSwitcherButton = styled_default(IconButton_default, {
  name: "MuiPickersArrowSwitcher",
  slot: "Button",
  overridesResolver: (props, styles) => styles.button
})(({
  ownerState
}) => _extends({}, ownerState.hidden && {
  visibility: "hidden"
}));
var useUtilityClasses = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    spacer: ["spacer"],
    button: ["button"]
  };
  return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes2);
};
var PickersArrowSwitcher = React9.forwardRef(function PickersArrowSwitcher2(inProps, ref) {
  var _slots$previousIconBu, _slots$nextIconButton, _slots$leftArrowIcon, _slots$rightArrowIcon;
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersArrowSwitcher"
  });
  const {
    children,
    className,
    slots,
    slotProps,
    isNextDisabled,
    isNextHidden,
    onGoToNext,
    nextLabel,
    isPreviousDisabled,
    isPreviousHidden,
    onGoToPrevious,
    previousLabel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const ownerState = props;
  const classes2 = useUtilityClasses(ownerState);
  const nextProps = {
    isDisabled: isNextDisabled,
    isHidden: isNextHidden,
    goTo: onGoToNext,
    label: nextLabel
  };
  const previousProps = {
    isDisabled: isPreviousDisabled,
    isHidden: isPreviousHidden,
    goTo: onGoToPrevious,
    label: previousLabel
  };
  const PreviousIconButton = (_slots$previousIconBu = slots == null ? void 0 : slots.previousIconButton) != null ? _slots$previousIconBu : PickersArrowSwitcherButton;
  const previousIconButtonProps = useSlotProps({
    elementType: PreviousIconButton,
    externalSlotProps: slotProps == null ? void 0 : slotProps.previousIconButton,
    additionalProps: {
      size: "medium",
      title: previousProps.label,
      "aria-label": previousProps.label,
      disabled: previousProps.isDisabled,
      edge: "end",
      onClick: previousProps.goTo
    },
    ownerState: _extends({}, ownerState, {
      hidden: previousProps.isHidden
    }),
    className: classes2.button
  });
  const NextIconButton = (_slots$nextIconButton = slots == null ? void 0 : slots.nextIconButton) != null ? _slots$nextIconButton : PickersArrowSwitcherButton;
  const nextIconButtonProps = useSlotProps({
    elementType: NextIconButton,
    externalSlotProps: slotProps == null ? void 0 : slotProps.nextIconButton,
    additionalProps: {
      size: "medium",
      title: nextProps.label,
      "aria-label": nextProps.label,
      disabled: nextProps.isDisabled,
      edge: "start",
      onClick: nextProps.goTo
    },
    ownerState: _extends({}, ownerState, {
      hidden: nextProps.isHidden
    }),
    className: classes2.button
  });
  const LeftArrowIcon = (_slots$leftArrowIcon = slots == null ? void 0 : slots.leftArrowIcon) != null ? _slots$leftArrowIcon : ArrowLeftIcon;
  const _useSlotProps = useSlotProps({
    elementType: LeftArrowIcon,
    externalSlotProps: slotProps == null ? void 0 : slotProps.leftArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: void 0
  }), leftArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded22);
  const RightArrowIcon = (_slots$rightArrowIcon = slots == null ? void 0 : slots.rightArrowIcon) != null ? _slots$rightArrowIcon : ArrowRightIcon;
  const _useSlotProps2 = useSlotProps({
    elementType: RightArrowIcon,
    externalSlotProps: slotProps == null ? void 0 : slotProps.rightArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: void 0
  }), rightArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded32);
  return (0, import_jsx_runtime5.jsxs)(PickersArrowSwitcherRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime4.jsx)(PreviousIconButton, _extends({}, previousIconButtonProps, {
      children: isRTL ? (0, import_jsx_runtime4.jsx)(RightArrowIcon, _extends({}, rightArrowIconProps)) : (0, import_jsx_runtime4.jsx)(LeftArrowIcon, _extends({}, leftArrowIconProps))
    })), children ? (0, import_jsx_runtime4.jsx)(Typography_default, {
      variant: "subtitle1",
      component: "span",
      children
    }) : (0, import_jsx_runtime4.jsx)(PickersArrowSwitcherSpacer, {
      className: classes2.spacer,
      ownerState
    }), (0, import_jsx_runtime4.jsx)(NextIconButton, _extends({}, nextIconButtonProps, {
      children: isRTL ? (0, import_jsx_runtime4.jsx)(LeftArrowIcon, _extends({}, leftArrowIconProps)) : (0, import_jsx_runtime4.jsx)(RightArrowIcon, _extends({}, rightArrowIconProps))
    }))]
  }));
});

// node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
init_extends();
var React10 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/internals/constants/dimensions.js
var DAY_SIZE = 36;
var DAY_MARGIN = 2;
var DIALOG_WIDTH = 320;
var MAX_CALENDAR_HEIGHT = 280;
var VIEW_HEIGHT = 334;
var DIGITAL_CLOCK_VIEW_HEIGHT = 232;
var MULTI_SECTION_CLOCK_SECTION_WIDTH = 48;

// node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var PickersModalDialogRoot = styled_default(Dialog_default)({
  [`& .${dialogClasses_default.container}`]: {
    outline: 0
  },
  [`& .${dialogClasses_default.paper}`]: {
    outline: 0,
    minWidth: DIALOG_WIDTH
  }
});
var PickersModalDialogContent = styled_default(DialogContent_default)({
  "&:first-of-type": {
    padding: 0
  }
});
function PickersModalDialog(props) {
  var _slots$dialog, _slots$mobileTransiti;
  const {
    children,
    onDismiss,
    open,
    slots,
    slotProps
  } = props;
  const Dialog = (_slots$dialog = slots == null ? void 0 : slots.dialog) != null ? _slots$dialog : PickersModalDialogRoot;
  const Transition = (_slots$mobileTransiti = slots == null ? void 0 : slots.mobileTransition) != null ? _slots$mobileTransiti : Fade_default;
  return (0, import_jsx_runtime6.jsx)(Dialog, _extends({
    open,
    onClose: onDismiss
  }, slotProps == null ? void 0 : slotProps.dialog, {
    TransitionComponent: Transition,
    TransitionProps: slotProps == null ? void 0 : slotProps.mobileTransition,
    PaperComponent: slots == null ? void 0 : slots.mobilePaper,
    PaperProps: slotProps == null ? void 0 : slotProps.mobilePaper,
    children: (0, import_jsx_runtime6.jsx)(PickersModalDialogContent, {
      children
    })
  }));
}

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React11 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/pickersPopperClasses.js
init_utils();
function getPickersPopperUtilityClass(slot) {
  return generateUtilityClass("MuiPickersPopper", slot);
}
var pickersPopperClasses = generateUtilityClasses("MuiPickersPopper", ["root", "paper"]);

// node_modules/@mui/x-date-pickers/internals/hooks/useDefaultReduceAnimations.js
var PREFERS_REDUCED_MOTION = "@media (prefers-reduced-motion: reduce)";
var mobileVersionMatches = typeof navigator !== "undefined" && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i);
var androidVersion = mobileVersionMatches && mobileVersionMatches[1] ? parseInt(mobileVersionMatches[1], 10) : null;
var iOSVersion = mobileVersionMatches && mobileVersionMatches[2] ? parseInt(mobileVersionMatches[2], 10) : null;
var slowAnimationDevices = androidVersion && androidVersion < 10 || iOSVersion && iOSVersion < 13 || false;
var useDefaultReduceAnimations = () => {
  const prefersReduced = useMediaQuery(PREFERS_REDUCED_MOTION, {
    defaultMatches: false
  });
  return prefersReduced || slowAnimationDevices;
};

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var _excluded5 = ["PaperComponent", "popperPlacement", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    paper: ["paper"]
  };
  return composeClasses(slots, getPickersPopperUtilityClass, classes2);
};
var PickersPopperRoot = styled_default(Popper_default, {
  name: "MuiPickersPopper",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var PickersPopperPaper = styled_default(Paper_default, {
  name: "MuiPickersPopper",
  slot: "Paper",
  overridesResolver: (_, styles) => styles.paper
})(({
  ownerState
}) => _extends({
  outline: 0,
  transformOrigin: "top center"
}, ownerState.placement.includes("top") && {
  transformOrigin: "bottom center"
}));
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function useClickAwayListener(active, onClickAway) {
  const movedRef = React11.useRef(false);
  const syntheticEventRef = React11.useRef(false);
  const nodeRef = React11.useRef(null);
  const activatedRef = React11.useRef(false);
  React11.useEffect(() => {
    if (!active) {
      return void 0;
    }
    function armClickAwayListener() {
      activatedRef.current = true;
    }
    document.addEventListener("mousedown", armClickAwayListener, true);
    document.addEventListener("touchstart", armClickAwayListener, true);
    return () => {
      document.removeEventListener("mousedown", armClickAwayListener, true);
      document.removeEventListener("touchstart", armClickAwayListener, true);
      activatedRef.current = false;
    };
  }, [active]);
  const handleClickAway = useEventCallback_default((event) => {
    if (!activatedRef.current) {
      return;
    }
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument(nodeRef.current);
    if (!nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && !insideReactTree) {
      onClickAway(event);
    }
  });
  const handleSynthetic = () => {
    syntheticEventRef.current = true;
  };
  React11.useEffect(() => {
    if (active) {
      const doc = ownerDocument(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener("touchstart", handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener("touchstart", handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  React11.useEffect(() => {
    if (active) {
      const doc = ownerDocument(nodeRef.current);
      doc.addEventListener("click", handleClickAway);
      return () => {
        doc.removeEventListener("click", handleClickAway);
        syntheticEventRef.current = false;
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  return [nodeRef, handleSynthetic, handleSynthetic];
}
var PickersPopperPaperWrapper = React11.forwardRef((props, ref) => {
  const {
    PaperComponent,
    popperPlacement,
    ownerState: inOwnerState,
    children,
    paperSlotProps,
    paperClasses,
    onPaperClick,
    onPaperTouchStart
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const ownerState = _extends({}, inOwnerState, {
    placement: popperPlacement
  });
  const paperProps = useSlotProps({
    elementType: PaperComponent,
    externalSlotProps: paperSlotProps,
    additionalProps: {
      tabIndex: -1,
      elevation: 8,
      ref
    },
    className: paperClasses,
    ownerState
  });
  return (0, import_jsx_runtime7.jsx)(PaperComponent, _extends({}, other, paperProps, {
    onClick: (event) => {
      var _paperProps$onClick;
      onPaperClick(event);
      (_paperProps$onClick = paperProps.onClick) == null || _paperProps$onClick.call(paperProps, event);
    },
    onTouchStart: (event) => {
      var _paperProps$onTouchSt;
      onPaperTouchStart(event);
      (_paperProps$onTouchSt = paperProps.onTouchStart) == null || _paperProps$onTouchSt.call(paperProps, event);
    },
    ownerState,
    children
  }));
});
function PickersPopper(inProps) {
  var _slots$desktopTransit, _slots$desktopTrapFoc, _slots$desktopPaper, _slots$popper;
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersPopper"
  });
  const {
    anchorEl,
    children,
    containerRef = null,
    shouldRestoreFocus,
    onBlur,
    onDismiss,
    open,
    role,
    placement,
    slots,
    slotProps,
    reduceAnimations: inReduceAnimations
  } = props;
  React11.useEffect(() => {
    function handleKeyDown2(nativeEvent) {
      if (open && (nativeEvent.key === "Escape" || nativeEvent.key === "Esc")) {
        onDismiss();
      }
    }
    document.addEventListener("keydown", handleKeyDown2);
    return () => {
      document.removeEventListener("keydown", handleKeyDown2);
    };
  }, [onDismiss, open]);
  const lastFocusedElementRef = React11.useRef(null);
  React11.useEffect(() => {
    if (role === "tooltip" || shouldRestoreFocus && !shouldRestoreFocus()) {
      return;
    }
    if (open) {
      lastFocusedElementRef.current = getActiveElement(document);
    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
      setTimeout(() => {
        if (lastFocusedElementRef.current instanceof HTMLElement) {
          lastFocusedElementRef.current.focus();
        }
      });
    }
  }, [open, role, shouldRestoreFocus]);
  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onDismiss);
  const paperRef = React11.useRef(null);
  const handleRef = useForkRef(paperRef, containerRef);
  const handlePaperRef = useForkRef(handleRef, clickAwayRef);
  const ownerState = props;
  const classes2 = useUtilityClasses2(ownerState);
  const defaultReduceAnimations = useDefaultReduceAnimations();
  const reduceAnimations = inReduceAnimations != null ? inReduceAnimations : defaultReduceAnimations;
  const handleKeyDown = (event) => {
    if (event.key === "Escape") {
      event.stopPropagation();
      onDismiss();
    }
  };
  const Transition = ((_slots$desktopTransit = slots == null ? void 0 : slots.desktopTransition) != null ? _slots$desktopTransit : reduceAnimations) ? Fade_default : Grow_default;
  const FocusTrap2 = (_slots$desktopTrapFoc = slots == null ? void 0 : slots.desktopTrapFocus) != null ? _slots$desktopTrapFoc : FocusTrap;
  const Paper = (_slots$desktopPaper = slots == null ? void 0 : slots.desktopPaper) != null ? _slots$desktopPaper : PickersPopperPaper;
  const Popper = (_slots$popper = slots == null ? void 0 : slots.popper) != null ? _slots$popper : PickersPopperRoot;
  const popperProps = useSlotProps({
    elementType: Popper,
    externalSlotProps: slotProps == null ? void 0 : slotProps.popper,
    additionalProps: {
      transition: true,
      role,
      open,
      anchorEl,
      placement,
      onKeyDown: handleKeyDown
    },
    className: classes2.root,
    ownerState: props
  });
  return (0, import_jsx_runtime7.jsx)(Popper, _extends({}, popperProps, {
    children: ({
      TransitionProps,
      placement: popperPlacement
    }) => (0, import_jsx_runtime7.jsx)(FocusTrap2, _extends({
      open,
      disableAutoFocus: true,
      disableRestoreFocus: true,
      disableEnforceFocus: role === "tooltip",
      isEnabled: () => true
    }, slotProps == null ? void 0 : slotProps.desktopTrapFocus, {
      children: (0, import_jsx_runtime7.jsx)(Transition, _extends({}, TransitionProps, slotProps == null ? void 0 : slotProps.desktopTransition, {
        children: (0, import_jsx_runtime7.jsx)(PickersPopperPaperWrapper, {
          PaperComponent: Paper,
          ownerState,
          popperPlacement,
          ref: handlePaperRef,
          onPaperClick,
          onPaperTouchStart,
          paperClasses: classes2.paper,
          paperSlotProps: slotProps == null ? void 0 : slotProps.desktopPaper,
          children
        })
      }))
    }))
  }));
}

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.js
init_extends();
var React12 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/pickersToolbarClasses.js
init_utils();
function getPickersToolbarUtilityClass(slot) {
  return generateUtilityClass("MuiPickersToolbar", slot);
}
var pickersToolbarClasses = generateUtilityClasses("MuiPickersToolbar", ["root", "content"]);

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var useUtilityClasses3 = (ownerState) => {
  const {
    classes: classes2,
    isLandscape
  } = ownerState;
  const slots = {
    root: ["root"],
    content: ["content"],
    penIconButton: ["penIconButton", isLandscape && "penIconButtonLandscape"]
  };
  return composeClasses(slots, getPickersToolbarUtilityClass, classes2);
};
var PickersToolbarRoot = styled_default("div", {
  name: "MuiPickersToolbar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start",
  justifyContent: "space-between",
  padding: theme.spacing(2, 3)
}, ownerState.isLandscape && {
  height: "auto",
  maxWidth: 160,
  padding: 16,
  justifyContent: "flex-start",
  flexWrap: "wrap"
}));
var PickersToolbarContent = styled_default("div", {
  name: "MuiPickersToolbar",
  slot: "Content",
  overridesResolver: (props, styles) => styles.content
})(({
  ownerState
}) => {
  var _ownerState$landscape;
  return {
    display: "flex",
    flexWrap: "wrap",
    width: "100%",
    justifyContent: ownerState.isLandscape ? "flex-start" : "space-between",
    flexDirection: ownerState.isLandscape ? (_ownerState$landscape = ownerState.landscapeDirection) != null ? _ownerState$landscape : "column" : "row",
    flex: 1,
    alignItems: ownerState.isLandscape ? "flex-start" : "center"
  };
});
var PickersToolbar = React12.forwardRef(function PickersToolbar2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersToolbar"
  });
  const {
    children,
    className,
    toolbarTitle,
    hidden,
    titleId
  } = props;
  const ownerState = props;
  const classes2 = useUtilityClasses3(ownerState);
  if (hidden) {
    return null;
  }
  return (0, import_jsx_runtime9.jsxs)(PickersToolbarRoot, {
    ref,
    className: clsx_default(classes2.root, className),
    ownerState,
    children: [(0, import_jsx_runtime8.jsx)(Typography_default, {
      color: "text.secondary",
      variant: "overline",
      id: titleId,
      children: toolbarTitle
    }), (0, import_jsx_runtime8.jsx)(PickersToolbarContent, {
      className: classes2.content,
      ownerState,
      children
    })]
  });
});

// node_modules/@mui/x-date-pickers/internals/components/pickersToolbarButtonClasses.js
init_utils();
var pickersToolbarButtonClasses = generateUtilityClasses("MuiPickersToolbarButton", ["root"]);

// node_modules/@mui/x-date-pickers/internals/components/pickersToolbarTextClasses.js
init_utils();
function getPickersToolbarTextUtilityClass(slot) {
  return generateUtilityClass("MuiPickersToolbarText", slot);
}
var pickersToolbarTextClasses = generateUtilityClasses("MuiPickersToolbarText", ["root", "selected"]);

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js
init_extends();
init_objectWithoutPropertiesLoose();
var React14 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React13 = __toESM(require_react());
init_utils();
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded6 = ["className", "selected", "value"];
var useUtilityClasses4 = (ownerState) => {
  const {
    classes: classes2,
    selected
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected"]
  };
  return composeClasses(slots, getPickersToolbarTextUtilityClass, classes2);
};
var PickersToolbarTextRoot = styled_default(Typography_default, {
  name: "MuiPickersToolbarText",
  slot: "Root",
  overridesResolver: (_, styles) => [styles.root, {
    [`&.${pickersToolbarTextClasses.selected}`]: styles.selected
  }]
})(({
  theme
}) => ({
  transition: theme.transitions.create("color"),
  color: (theme.vars || theme).palette.text.secondary,
  [`&.${pickersToolbarTextClasses.selected}`]: {
    color: (theme.vars || theme).palette.text.primary
  }
}));
var PickersToolbarText = React13.forwardRef(function PickersToolbarText2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersToolbarText"
  });
  const {
    className,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const classes2 = useUtilityClasses4(props);
  return (0, import_jsx_runtime10.jsx)(PickersToolbarTextRoot, _extends({
    ref,
    className: clsx_default(className, classes2.root),
    component: "span"
  }, other, {
    children: value
  }));
});

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded7 = ["align", "className", "selected", "typographyClassName", "value", "variant", "width"];
var useUtilityClasses5 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getPickersToolbarUtilityClass, classes2);
};
var PickersToolbarButtonRoot = styled_default(Button_default, {
  name: "MuiPickersToolbarButton",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})({
  padding: 0,
  minWidth: 16,
  textTransform: "none"
});
var PickersToolbarButton = React14.forwardRef(function PickersToolbarButton2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersToolbarButton"
  });
  const {
    align,
    className,
    selected,
    typographyClassName,
    value,
    variant,
    width
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const classes2 = useUtilityClasses5(props);
  return (0, import_jsx_runtime11.jsx)(PickersToolbarButtonRoot, _extends({
    variant: "text",
    ref,
    className: clsx_default(className, classes2.root)
  }, width ? {
    sx: {
      width
    }
  } : {}, other, {
    children: (0, import_jsx_runtime11.jsx)(PickersToolbarText, {
      align,
      className: typographyClassName,
      variant,
      value,
      selected
    })
  }));
});

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js
init_extends();
var React16 = __toESM(require_react());
init_utils();
init_useEventCallback();

// node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js
var React15 = __toESM(require_react());
var useOpenState = ({
  open,
  onOpen,
  onClose
}) => {
  const isControllingOpenProp = React15.useRef(typeof open === "boolean").current;
  const [openState, setIsOpenState] = React15.useState(false);
  React15.useEffect(() => {
    if (isControllingOpenProp) {
      if (typeof open !== "boolean") {
        throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
      }
      setIsOpenState(open);
    }
  }, [isControllingOpenProp, open]);
  const setIsOpen = React15.useCallback((newIsOpen) => {
    if (!isControllingOpenProp) {
      setIsOpenState(newIsOpen);
    }
    if (newIsOpen && onOpen) {
      onOpen();
    }
    if (!newIsOpen && onClose) {
      onClose();
    }
  }, [isControllingOpenProp, onOpen, onClose]);
  return {
    isOpen: openState,
    setIsOpen
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js
var shouldPublishValue = (params) => {
  const {
    action,
    hasChanged,
    dateState,
    isControlled
  } = params;
  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
  if (action.name === "setValueFromField") {
    return true;
  }
  if (action.name === "setValueFromAction") {
    if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
      return true;
    }
    return hasChanged(dateState.lastPublishedValue);
  }
  if (action.name === "setValueFromView" && action.selectionState !== "shallow") {
    if (isCurrentValueTheDefaultValue) {
      return true;
    }
    return hasChanged(dateState.lastPublishedValue);
  }
  if (action.name === "setValueFromShortcut") {
    if (isCurrentValueTheDefaultValue) {
      return true;
    }
    return hasChanged(dateState.lastPublishedValue);
  }
  return false;
};
var shouldCommitValue = (params) => {
  const {
    action,
    hasChanged,
    dateState,
    isControlled,
    closeOnSelect
  } = params;
  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
  if (action.name === "setValueFromAction") {
    if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
      return true;
    }
    return hasChanged(dateState.lastCommittedValue);
  }
  if (action.name === "setValueFromView" && action.selectionState === "finish" && closeOnSelect) {
    if (isCurrentValueTheDefaultValue) {
      return true;
    }
    return hasChanged(dateState.lastCommittedValue);
  }
  if (action.name === "setValueFromShortcut") {
    return action.changeImportance === "accept" && hasChanged(dateState.lastCommittedValue);
  }
  return false;
};
var shouldClosePicker = (params) => {
  const {
    action,
    closeOnSelect
  } = params;
  if (action.name === "setValueFromAction") {
    return true;
  }
  if (action.name === "setValueFromView") {
    return action.selectionState === "finish" && closeOnSelect;
  }
  if (action.name === "setValueFromShortcut") {
    return action.changeImportance === "accept";
  }
  return false;
};
var usePickerValue = ({
  props,
  valueManager,
  valueType,
  wrapperVariant,
  validator
}) => {
  const {
    onAccept,
    onChange,
    value: inValue,
    defaultValue: inDefaultValue,
    closeOnSelect = wrapperVariant === "desktop",
    selectedSections: selectedSectionsProp,
    onSelectedSectionsChange,
    timezone: timezoneProp
  } = props;
  const {
    current: defaultValue
  } = React16.useRef(inDefaultValue);
  const {
    current: isControlled
  } = React16.useRef(inValue !== void 0);
  if (true) {
    React16.useEffect(() => {
      if (isControlled !== (inValue !== void 0)) {
        console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled value of a picker to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled valuefor the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
      }
    }, [inValue]);
    React16.useEffect(() => {
      if (!isControlled && defaultValue !== inDefaultValue) {
        console.error([`MUI: A component is changing the defaultValue of an uncontrolled picker after being initialized. To suppress this warning opt to use a controlled value.`].join("\n"));
      }
    }, [JSON.stringify(defaultValue)]);
  }
  const utils = useUtils();
  const adapter = useLocalizationContext();
  const [selectedSections, setSelectedSections] = useControlled({
    controlled: selectedSectionsProp,
    default: null,
    name: "usePickerValue",
    state: "selectedSections"
  });
  const {
    isOpen,
    setIsOpen
  } = useOpenState(props);
  const [dateState, setDateState] = React16.useState(() => {
    let initialValue;
    if (inValue !== void 0) {
      initialValue = inValue;
    } else if (defaultValue !== void 0) {
      initialValue = defaultValue;
    } else {
      initialValue = valueManager.emptyValue;
    }
    return {
      draft: initialValue,
      lastPublishedValue: initialValue,
      lastCommittedValue: initialValue,
      lastControlledValue: inValue,
      hasBeenModifiedSinceMount: false
    };
  });
  const {
    timezone,
    handleValueChange
  } = useValueWithTimezone({
    timezone: timezoneProp,
    value: inValue,
    defaultValue,
    onChange,
    valueManager
  });
  useValidation(_extends({}, props, {
    value: dateState.draft,
    timezone
  }), validator, valueManager.isSameError, valueManager.defaultErrorState);
  const updateDate = useEventCallback_default((action) => {
    const updaterParams = {
      action,
      dateState,
      hasChanged: (comparison) => !valueManager.areValuesEqual(utils, action.value, comparison),
      isControlled,
      closeOnSelect
    };
    const shouldPublish = shouldPublishValue(updaterParams);
    const shouldCommit = shouldCommitValue(updaterParams);
    const shouldClose = shouldClosePicker(updaterParams);
    setDateState((prev) => _extends({}, prev, {
      draft: action.value,
      lastPublishedValue: shouldPublish ? action.value : prev.lastPublishedValue,
      lastCommittedValue: shouldCommit ? action.value : prev.lastCommittedValue,
      hasBeenModifiedSinceMount: true
    }));
    if (shouldPublish) {
      const validationError = action.name === "setValueFromField" ? action.context.validationError : validator({
        adapter,
        value: action.value,
        props: _extends({}, props, {
          value: action.value,
          timezone
        })
      });
      const context = {
        validationError
      };
      if (action.name === "setValueFromShortcut" && action.shortcut != null) {
        context.shortcut = action.shortcut;
      }
      handleValueChange(action.value, context);
    }
    if (shouldCommit && onAccept) {
      onAccept(action.value);
    }
    if (shouldClose) {
      setIsOpen(false);
    }
  });
  if (inValue !== void 0 && (dateState.lastControlledValue === void 0 || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValue))) {
    const isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValue);
    setDateState((prev) => _extends({}, prev, {
      lastControlledValue: inValue
    }, isUpdateComingFromPicker ? {} : {
      lastCommittedValue: inValue,
      lastPublishedValue: inValue,
      draft: inValue,
      hasBeenModifiedSinceMount: true
    }));
  }
  const handleClear = useEventCallback_default(() => {
    updateDate({
      value: valueManager.emptyValue,
      name: "setValueFromAction",
      pickerAction: "clear"
    });
  });
  const handleAccept = useEventCallback_default(() => {
    updateDate({
      value: dateState.lastPublishedValue,
      name: "setValueFromAction",
      pickerAction: "accept"
    });
  });
  const handleDismiss = useEventCallback_default(() => {
    updateDate({
      value: dateState.lastPublishedValue,
      name: "setValueFromAction",
      pickerAction: "dismiss"
    });
  });
  const handleCancel2 = useEventCallback_default(() => {
    updateDate({
      value: dateState.lastCommittedValue,
      name: "setValueFromAction",
      pickerAction: "cancel"
    });
  });
  const handleSetToday = useEventCallback_default(() => {
    updateDate({
      value: valueManager.getTodayValue(utils, timezone, valueType),
      name: "setValueFromAction",
      pickerAction: "today"
    });
  });
  const handleOpen = useEventCallback_default(() => setIsOpen(true));
  const handleClose2 = useEventCallback_default(() => setIsOpen(false));
  const handleChange = useEventCallback_default((newValue, selectionState = "partial") => updateDate({
    name: "setValueFromView",
    value: newValue,
    selectionState
  }));
  const handleSelectShortcut = useEventCallback_default((newValue, changeImportance, shortcut) => updateDate({
    name: "setValueFromShortcut",
    value: newValue,
    changeImportance: changeImportance != null ? changeImportance : "accept",
    shortcut
  }));
  const handleChangeFromField = useEventCallback_default((newValue, context) => updateDate({
    name: "setValueFromField",
    value: newValue,
    context
  }));
  const handleFieldSelectedSectionsChange = useEventCallback_default((newSelectedSections) => {
    setSelectedSections(newSelectedSections);
    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
  });
  const actions = {
    onClear: handleClear,
    onAccept: handleAccept,
    onDismiss: handleDismiss,
    onCancel: handleCancel2,
    onSetToday: handleSetToday,
    onOpen: handleOpen,
    onClose: handleClose2
  };
  const fieldResponse = {
    value: dateState.draft,
    onChange: handleChangeFromField,
    selectedSections,
    onSelectedSectionsChange: handleFieldSelectedSectionsChange
  };
  const viewValue = React16.useMemo(() => valueManager.cleanValue(utils, dateState.draft), [utils, valueManager, dateState.draft]);
  const viewResponse = {
    value: viewValue,
    onChange: handleChange,
    onClose: handleClose2,
    open: isOpen,
    onSelectedSectionsChange: handleFieldSelectedSectionsChange
  };
  const isValid = (testedValue) => {
    const error = validator({
      adapter,
      value: testedValue,
      props: _extends({}, props, {
        value: testedValue,
        timezone
      })
    });
    return !valueManager.hasError(error);
  };
  const layoutResponse = _extends({}, actions, {
    value: viewValue,
    onChange: handleChange,
    onSelectShortcut: handleSelectShortcut,
    isValid
  });
  return {
    open: isOpen,
    fieldProps: fieldResponse,
    viewProps: viewResponse,
    layoutProps: layoutResponse,
    actions
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js
init_extends();
init_objectWithoutPropertiesLoose();
var React18 = __toESM(require_react());
init_useEnhancedEffect();
init_useEventCallback();

// node_modules/@mui/x-date-pickers/internals/hooks/useViews.js
var React17 = __toESM(require_react());
init_useEventCallback();
init_utils();
var warnedOnceNotValidView = false;
function useViews({
  onChange,
  onViewChange,
  openTo,
  view: inView,
  views,
  autoFocus,
  focusedView: inFocusedView,
  onFocusedViewChange
}) {
  var _views, _views2;
  if (true) {
    if (!warnedOnceNotValidView) {
      if (inView != null && !views.includes(inView)) {
        console.warn(`MUI: \`view="${inView}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
        warnedOnceNotValidView = true;
      }
      if (inView == null && openTo != null && !views.includes(openTo)) {
        console.warn(`MUI: \`openTo="${openTo}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
        warnedOnceNotValidView = true;
      }
    }
  }
  const previousOpenTo = React17.useRef(openTo);
  const previousViews = React17.useRef(views);
  const defaultView = React17.useRef(views.includes(openTo) ? openTo : views[0]);
  const [view, setView] = useControlled({
    name: "useViews",
    state: "view",
    controlled: inView,
    default: defaultView.current
  });
  const defaultFocusedView = React17.useRef(autoFocus ? view : null);
  const [focusedView, setFocusedView] = useControlled({
    name: "useViews",
    state: "focusedView",
    controlled: inFocusedView,
    default: defaultFocusedView.current
  });
  React17.useEffect(() => {
    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some((previousView2) => !views.includes(previousView2))) {
      setView(views.includes(openTo) ? openTo : views[0]);
      previousViews.current = views;
      previousOpenTo.current = openTo;
    }
  }, [openTo, setView, view, views]);
  const viewIndex = views.indexOf(view);
  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;
  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;
  const handleFocusedViewChange = useEventCallback_default((viewToFocus, hasFocus) => {
    if (hasFocus) {
      setFocusedView(viewToFocus);
    } else {
      setFocusedView(
        (prevFocusedView) => viewToFocus === prevFocusedView ? null : prevFocusedView
      );
    }
    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);
  });
  const handleChangeView = useEventCallback_default((newView) => {
    handleFocusedViewChange(newView, true);
    if (newView === view) {
      return;
    }
    setView(newView);
    if (onViewChange) {
      onViewChange(newView);
    }
  });
  const goToNextView = useEventCallback_default(() => {
    if (nextView) {
      handleChangeView(nextView);
    }
  });
  const setValueAndGoToNextView = useEventCallback_default((value, currentViewSelectionState, selectedView) => {
    const isSelectionFinishedOnCurrentView = currentViewSelectionState === "finish";
    const hasMoreViews = selectedView ? views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);
    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? "partial" : currentViewSelectionState;
    onChange(value, globalSelectionState, selectedView);
    if (selectedView && selectedView !== view) {
      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];
      if (nextViewAfterSelected) {
        handleChangeView(nextViewAfterSelected);
      }
    } else if (isSelectionFinishedOnCurrentView) {
      goToNextView();
    }
  });
  return {
    view,
    setView: handleChangeView,
    focusedView,
    setFocusedView: handleFocusedViewChange,
    nextView,
    previousView,
    defaultView: views.includes(openTo) ? openTo : views[0],
    goToNextView,
    setValueAndGoToNextView
  };
}

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js
var _excluded8 = ["className", "sx"];
var usePickerViews = ({
  props,
  propsFromPickerValue,
  additionalViewProps,
  inputRef,
  autoFocusView
}) => {
  const {
    onChange,
    open,
    onSelectedSectionsChange,
    onClose
  } = propsFromPickerValue;
  const {
    views,
    openTo,
    onViewChange,
    disableOpenPicker,
    viewRenderers,
    timezone
  } = props;
  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded8);
  const {
    view,
    setView,
    defaultView,
    focusedView,
    setFocusedView,
    setValueAndGoToNextView
  } = useViews({
    view: void 0,
    views,
    openTo,
    onChange,
    onViewChange,
    autoFocus: autoFocusView
  });
  const {
    hasUIView,
    viewModeLookup
  } = React18.useMemo(() => views.reduce((acc, viewForReduce) => {
    let viewMode;
    if (disableOpenPicker) {
      viewMode = "field";
    } else if (viewRenderers[viewForReduce] != null) {
      viewMode = "UI";
    } else {
      viewMode = "field";
    }
    acc.viewModeLookup[viewForReduce] = viewMode;
    if (viewMode === "UI") {
      acc.hasUIView = true;
    }
    return acc;
  }, {
    hasUIView: false,
    viewModeLookup: {}
  }), [disableOpenPicker, viewRenderers, views]);
  const timeViewsCount = React18.useMemo(() => views.reduce((acc, viewForReduce) => {
    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {
      return acc + 1;
    }
    return acc;
  }, 0), [viewRenderers, views]);
  const currentViewMode = viewModeLookup[view];
  const shouldRestoreFocus = useEventCallback_default(() => currentViewMode === "UI");
  const [popperView, setPopperView] = React18.useState(currentViewMode === "UI" ? view : null);
  if (popperView !== view && viewModeLookup[view] === "UI") {
    setPopperView(view);
  }
  useEnhancedEffect_default(() => {
    if (currentViewMode === "field" && open) {
      onClose();
      setTimeout(() => {
        inputRef == null || inputRef.current.focus();
        onSelectedSectionsChange(view);
      });
    }
  }, [view]);
  useEnhancedEffect_default(() => {
    if (!open) {
      return;
    }
    let newView = view;
    if (currentViewMode === "field" && popperView != null) {
      newView = popperView;
    }
    if (newView !== defaultView && viewModeLookup[newView] === "UI" && viewModeLookup[defaultView] === "UI") {
      newView = defaultView;
    }
    if (newView !== view) {
      setView(newView);
    }
    setFocusedView(newView, true);
  }, [open]);
  const layoutProps = {
    views,
    view: popperView,
    onViewChange: setView
  };
  return {
    hasUIView,
    shouldRestoreFocus,
    layoutProps,
    renderCurrentView: () => {
      if (popperView == null) {
        return null;
      }
      const renderer = viewRenderers[popperView];
      if (renderer == null) {
        return null;
      }
      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {
        views,
        timezone,
        onChange: setValueAndGoToNextView,
        view: popperView,
        onViewChange: setView,
        focusedView,
        onFocusedViewChange: setFocusedView,
        showViewSwitcher: timeViewsCount > 1,
        timeViewsCount
      }));
    }
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.js
init_extends();

// node_modules/@mui/x-date-pickers/internals/hooks/useIsLandscape.js
var React19 = __toESM(require_react());
init_utils();
function getOrientation() {
  if (typeof window === "undefined") {
    return "portrait";
  }
  if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
    return Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait";
  }
  if (window.orientation) {
    return Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
  }
  return "portrait";
}
var useIsLandscape = (views, customOrientation) => {
  const [orientation, setOrientation] = React19.useState(getOrientation);
  useEnhancedEffect_default(() => {
    const eventHandler = () => {
      setOrientation(getOrientation());
    };
    window.addEventListener("orientationchange", eventHandler);
    return () => {
      window.removeEventListener("orientationchange", eventHandler);
    };
  }, []);
  if (arrayIncludes(views, ["hours", "minutes", "seconds"])) {
    return false;
  }
  const orientationToUse = customOrientation || orientation;
  return orientationToUse === "landscape";
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.js
var usePickerLayoutProps = ({
  props,
  propsFromPickerValue,
  propsFromPickerViews,
  wrapperVariant
}) => {
  const {
    orientation
  } = props;
  const isLandscape = useIsLandscape(propsFromPickerViews.views, orientation);
  const layoutProps = _extends({}, propsFromPickerViews, propsFromPickerValue, {
    isLandscape,
    wrapperVariant,
    disabled: props.disabled,
    readOnly: props.readOnly
  });
  return {
    layoutProps
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/warning.js
var buildWarning = (message, gravity = "warning") => {
  let alreadyWarned = false;
  const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
  return () => {
    if (!alreadyWarned) {
      alreadyWarned = true;
      if (gravity === "error") {
        console.error(cleanMessage);
      } else {
        console.warn(cleanMessage);
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePicker.js
var warnRenderInputIsDefined = buildWarning(["The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.", "You can replace it with the `textField` component slot in most cases.", "For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5)."]);
var usePicker = ({
  props,
  valueManager,
  valueType,
  wrapperVariant,
  inputRef,
  additionalViewProps,
  validator,
  autoFocusView
}) => {
  if (true) {
    if (props.renderInput != null) {
      warnRenderInputIsDefined();
    }
  }
  const pickerValueResponse = usePickerValue({
    props,
    valueManager,
    valueType,
    wrapperVariant,
    validator
  });
  const pickerViewsResponse = usePickerViews({
    props,
    inputRef,
    additionalViewProps,
    autoFocusView,
    propsFromPickerValue: pickerValueResponse.viewProps
  });
  const pickerLayoutResponse = usePickerLayoutProps({
    props,
    wrapperVariant,
    propsFromPickerValue: pickerValueResponse.layoutProps,
    propsFromPickerViews: pickerViewsResponse.layoutProps
  });
  return {
    open: pickerValueResponse.open,
    actions: pickerValueResponse.actions,
    fieldProps: pickerValueResponse.fieldProps,
    renderCurrentView: pickerViewsResponse.renderCurrentView,
    hasUIView: pickerViewsResponse.hasUIView,
    shouldRestoreFocus: pickerViewsResponse.shouldRestoreFocus,
    layoutProps: pickerLayoutResponse.layoutProps
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/useStaticPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React24 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.js
var React23 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/PickersLayout/pickersLayoutClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getPickersLayoutUtilityClass(slot) {
  return generateUtilityClass("MuiPickersLayout", slot);
}
var pickersLayoutClasses = generateUtilityClasses("MuiPickersLayout", ["root", "landscape", "contentWrapper", "toolbar", "actionBar", "tabs", "shortcuts"]);

// node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.js
init_extends();
var React22 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/PickersActionBar/PickersActionBar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React20 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _excluded9 = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
function PickersActionBar(props) {
  const {
    onAccept,
    onClear,
    onCancel,
    onSetToday,
    actions
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const localeText = useLocaleText();
  if (actions == null || actions.length === 0) {
    return null;
  }
  const buttons = actions == null ? void 0 : actions.map((actionType) => {
    switch (actionType) {
      case "clear":
        return (0, import_jsx_runtime12.jsx)(Button_default, {
          onClick: onClear,
          children: localeText.clearButtonLabel
        }, actionType);
      case "cancel":
        return (0, import_jsx_runtime12.jsx)(Button_default, {
          onClick: onCancel,
          children: localeText.cancelButtonLabel
        }, actionType);
      case "accept":
        return (0, import_jsx_runtime12.jsx)(Button_default, {
          onClick: onAccept,
          children: localeText.okButtonLabel
        }, actionType);
      case "today":
        return (0, import_jsx_runtime12.jsx)(Button_default, {
          onClick: onSetToday,
          children: localeText.todayButtonLabel
        }, actionType);
      default:
        return null;
    }
  });
  return (0, import_jsx_runtime12.jsx)(DialogActions_default, _extends({}, other, {
    children: buttons
  }));
}
true ? PickersActionBar.propTypes = {
  actions: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(["accept", "cancel", "clear", "today"]).isRequired),
  disableSpacing: import_prop_types2.default.bool,
  onAccept: import_prop_types2.default.func.isRequired,
  onCancel: import_prop_types2.default.func.isRequired,
  onClear: import_prop_types2.default.func.isRequired,
  onSetToday: import_prop_types2.default.func.isRequired,
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object])
} : void 0;

// node_modules/@mui/x-date-pickers/PickersShortcuts/PickersShortcuts.js
init_extends();
init_objectWithoutPropertiesLoose();
var React21 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _excluded10 = ["items", "changeImportance", "isLandscape", "onChange", "isValid"];
var _excluded23 = ["getValue"];
function PickersShortcuts(props) {
  const {
    items,
    changeImportance,
    onChange,
    isValid
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  if (items == null || items.length === 0) {
    return null;
  }
  const resolvedItems = items.map((_ref) => {
    let {
      getValue
    } = _ref, item = _objectWithoutPropertiesLoose(_ref, _excluded23);
    const newValue = getValue({
      isValid
    });
    return {
      label: item.label,
      onClick: () => {
        onChange(newValue, changeImportance, item);
      },
      disabled: !isValid(newValue)
    };
  });
  return (0, import_jsx_runtime13.jsx)(List_default, _extends({
    dense: true,
    sx: [{
      maxHeight: VIEW_HEIGHT,
      maxWidth: 200,
      overflow: "auto"
    }, ...Array.isArray(other.sx) ? other.sx : [other.sx]]
  }, other, {
    children: resolvedItems.map((item) => {
      return (0, import_jsx_runtime13.jsx)(ListItem_default, {
        children: (0, import_jsx_runtime13.jsx)(Chip_default, _extends({}, item))
      }, item.label);
    })
  }));
}
true ? PickersShortcuts.propTypes = {
  changeImportance: import_prop_types3.default.oneOf(["accept", "set"]),
  className: import_prop_types3.default.string,
  component: import_prop_types3.default.elementType,
  dense: import_prop_types3.default.bool,
  disablePadding: import_prop_types3.default.bool,
  isLandscape: import_prop_types3.default.bool.isRequired,
  isValid: import_prop_types3.default.func.isRequired,
  items: import_prop_types3.default.arrayOf(import_prop_types3.default.shape({
    getValue: import_prop_types3.default.func.isRequired,
    label: import_prop_types3.default.string.isRequired
  })),
  onChange: import_prop_types3.default.func.isRequired,
  style: import_prop_types3.default.object,
  subheader: import_prop_types3.default.node,
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object])
} : void 0;

// node_modules/@mui/x-date-pickers/internals/utils/slots-migration.js
init_extends();
var uncapitalizeObjectKeys = (capitalizedObject) => {
  if (capitalizedObject === void 0) {
    return void 0;
  }
  return Object.keys(capitalizedObject).reduce((acc, key) => _extends({}, acc, {
    [`${key.slice(0, 1).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
  }), {});
};

// node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
function toolbarHasView(toolbarProps) {
  return toolbarProps.view !== null;
}
var useUtilityClasses6 = (ownerState) => {
  const {
    classes: classes2,
    isLandscape
  } = ownerState;
  const slots = {
    root: ["root", isLandscape && "landscape"],
    contentWrapper: ["contentWrapper"],
    toolbar: ["toolbar"],
    actionBar: ["actionBar"],
    tabs: ["tabs"],
    landscape: ["landscape"],
    shortcuts: ["shortcuts"]
  };
  return composeClasses(slots, getPickersLayoutUtilityClass, classes2);
};
var usePickerLayout = (props) => {
  var _slots$actionBar, _slots$shortcuts;
  const {
    wrapperVariant,
    onAccept,
    onClear,
    onCancel,
    onSetToday,
    view,
    views,
    onViewChange,
    value,
    onChange,
    onSelectShortcut,
    isValid,
    isLandscape,
    disabled,
    readOnly,
    children,
    components,
    componentsProps,
    slots: innerSlots,
    slotProps: innerSlotProps
  } = props;
  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
  const classes2 = useUtilityClasses6(props);
  const ActionBar = (_slots$actionBar = slots == null ? void 0 : slots.actionBar) != null ? _slots$actionBar : PickersActionBar;
  const actionBarProps = useSlotProps({
    elementType: ActionBar,
    externalSlotProps: slotProps == null ? void 0 : slotProps.actionBar,
    additionalProps: {
      onAccept,
      onClear,
      onCancel,
      onSetToday,
      actions: wrapperVariant === "desktop" ? [] : ["cancel", "accept"],
      className: classes2.actionBar
    },
    ownerState: _extends({}, props, {
      wrapperVariant
    })
  });
  const actionBar = (0, import_jsx_runtime14.jsx)(ActionBar, _extends({}, actionBarProps));
  const Toolbar4 = slots == null ? void 0 : slots.toolbar;
  const toolbarProps = useSlotProps({
    elementType: Toolbar4,
    externalSlotProps: slotProps == null ? void 0 : slotProps.toolbar,
    additionalProps: {
      isLandscape,
      onChange,
      value,
      view,
      onViewChange,
      views,
      disabled,
      readOnly,
      className: classes2.toolbar
    },
    ownerState: _extends({}, props, {
      wrapperVariant
    })
  });
  const toolbar = toolbarHasView(toolbarProps) && !!Toolbar4 ? (0, import_jsx_runtime14.jsx)(Toolbar4, _extends({}, toolbarProps)) : null;
  const content = children;
  const Tabs = slots == null ? void 0 : slots.tabs;
  const tabs = view && Tabs ? (0, import_jsx_runtime14.jsx)(Tabs, _extends({
    view,
    onViewChange,
    className: classes2.tabs
  }, slotProps == null ? void 0 : slotProps.tabs)) : null;
  const Shortcuts = (_slots$shortcuts = slots == null ? void 0 : slots.shortcuts) != null ? _slots$shortcuts : PickersShortcuts;
  const shortcutsProps = useSlotProps({
    elementType: Shortcuts,
    externalSlotProps: slotProps == null ? void 0 : slotProps.shortcuts,
    additionalProps: {
      isValid,
      isLandscape,
      onChange: onSelectShortcut,
      className: classes2.shortcuts
    },
    ownerState: {
      isValid,
      isLandscape,
      onChange: onSelectShortcut,
      className: classes2.shortcuts,
      wrapperVariant
    }
  });
  const shortcuts = view && !!Shortcuts ? (0, import_jsx_runtime14.jsx)(Shortcuts, _extends({}, shortcutsProps)) : null;
  return {
    toolbar,
    content,
    tabs,
    actionBar,
    shortcuts
  };
};
var usePickerLayout_default = usePickerLayout;

// node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var useUtilityClasses7 = (ownerState) => {
  const {
    isLandscape,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", isLandscape && "landscape"],
    contentWrapper: ["contentWrapper"]
  };
  return composeClasses(slots, getPickersLayoutUtilityClass, classes2);
};
var PickersLayoutRoot = styled_default("div", {
  name: "MuiPickersLayout",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => ({
  display: "grid",
  gridAutoColumns: "max-content auto max-content",
  gridAutoRows: "max-content auto max-content",
  [`& .${pickersLayoutClasses.toolbar}`]: ownerState.isLandscape ? {
    gridColumn: theme.direction === "rtl" ? 3 : 1,
    gridRow: "2 / 3"
  } : {
    gridColumn: "2 / 4",
    gridRow: 1
  },
  [`.${pickersLayoutClasses.shortcuts}`]: ownerState.isLandscape ? {
    gridColumn: "2 / 4",
    gridRow: 1
  } : {
    gridColumn: theme.direction === "rtl" ? 3 : 1,
    gridRow: "2 / 3"
  },
  [`& .${pickersLayoutClasses.actionBar}`]: {
    gridColumn: "1 / 4",
    gridRow: 3
  }
}));
PickersLayoutRoot.propTypes = {
  as: import_prop_types4.default.elementType,
  ownerState: import_prop_types4.default.shape({
    isLandscape: import_prop_types4.default.bool.isRequired
  }).isRequired,
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object])
};
var PickersLayoutContentWrapper = styled_default("div", {
  name: "MuiPickersLayout",
  slot: "ContentWrapper",
  overridesResolver: (props, styles) => styles.contentWrapper
})({
  gridColumn: 2,
  gridRow: 2,
  display: "flex",
  flexDirection: "column"
});
var PickersLayout = function PickersLayout2(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersLayout"
  });
  const {
    toolbar,
    content,
    tabs,
    actionBar,
    shortcuts
  } = usePickerLayout_default(props);
  const {
    sx,
    className,
    isLandscape,
    ref,
    wrapperVariant
  } = props;
  const ownerState = props;
  const classes2 = useUtilityClasses7(ownerState);
  return (0, import_jsx_runtime15.jsxs)(PickersLayoutRoot, {
    ref,
    sx,
    className: clsx_default(className, classes2.root),
    ownerState,
    children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, (0, import_jsx_runtime16.jsx)(PickersLayoutContentWrapper, {
      className: classes2.contentWrapper,
      children: wrapperVariant === "desktop" ? (0, import_jsx_runtime15.jsxs)(React23.Fragment, {
        children: [content, tabs]
      }) : (0, import_jsx_runtime15.jsxs)(React23.Fragment, {
        children: [tabs, content]
      })
    }), actionBar]
  });
};
true ? PickersLayout.propTypes = {
  children: import_prop_types4.default.node,
  classes: import_prop_types4.default.object,
  className: import_prop_types4.default.string,
  components: import_prop_types4.default.object,
  componentsProps: import_prop_types4.default.object,
  disabled: import_prop_types4.default.bool,
  isLandscape: import_prop_types4.default.bool.isRequired,
  isValid: import_prop_types4.default.func.isRequired,
  onAccept: import_prop_types4.default.func.isRequired,
  onCancel: import_prop_types4.default.func.isRequired,
  onChange: import_prop_types4.default.func.isRequired,
  onClear: import_prop_types4.default.func.isRequired,
  onClose: import_prop_types4.default.func.isRequired,
  onDismiss: import_prop_types4.default.func.isRequired,
  onOpen: import_prop_types4.default.func.isRequired,
  onSelectShortcut: import_prop_types4.default.func.isRequired,
  onSetToday: import_prop_types4.default.func.isRequired,
  onViewChange: import_prop_types4.default.func.isRequired,
  orientation: import_prop_types4.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types4.default.bool,
  slotProps: import_prop_types4.default.object,
  slots: import_prop_types4.default.object,
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object]),
  value: import_prop_types4.default.any,
  view: import_prop_types4.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  views: import_prop_types4.default.arrayOf(import_prop_types4.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired,
  wrapperVariant: import_prop_types4.default.oneOf(["desktop", "mobile"])
} : void 0;

// node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/useStaticPicker.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var PickerStaticLayout = styled_default(PickersLayout)(({
  theme
}) => ({
  overflow: "hidden",
  minWidth: DIALOG_WIDTH,
  backgroundColor: (theme.vars || theme).palette.background.paper
}));

// node_modules/@mui/x-date-pickers/internals/hooks/date-helpers-hooks.js
var React25 = __toESM(require_react());
function useNextMonthDisabled(month, {
  disableFuture,
  maxDate,
  timezone
}) {
  const utils = useUtils();
  return React25.useMemo(() => {
    const now = utils.dateWithTimezone(void 0, timezone);
    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
    return !utils.isAfter(lastEnabledMonth, month);
  }, [disableFuture, maxDate, month, utils, timezone]);
}
function usePreviousMonthDisabled(month, {
  disablePast,
  minDate,
  timezone
}) {
  const utils = useUtils();
  return React25.useMemo(() => {
    const now = utils.dateWithTimezone(void 0, timezone);
    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
    return !utils.isBefore(firstEnabledMonth, month);
  }, [disablePast, minDate, month, utils, timezone]);
}
function useMeridiemMode(date, ampm, onChange, selectionState) {
  const utils = useUtils();
  const meridiemMode = getMeridiem(date, utils);
  const handleMeridiemChange = React25.useCallback((mode) => {
    const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils);
    onChange(timeWithMeridiem, selectionState != null ? selectionState : "partial");
  }, [ampm, date, onChange, selectionState, utils]);
  return {
    meridiemMode,
    handleMeridiemChange
  };
}

// node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React29 = __toESM(require_react());
init_useEventCallback();
init_utils();

// node_modules/@mui/x-date-pickers/PickersDay/PickersDay.js
init_objectWithoutPropertiesLoose();
init_extends();
var React26 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/PickersDay/pickersDayClasses.js
init_utils();
function getPickersDayUtilityClass(slot) {
  return generateUtilityClass("MuiPickersDay", slot);
}
var pickersDayClasses = generateUtilityClasses("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);

// node_modules/@mui/x-date-pickers/PickersDay/PickersDay.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _excluded11 = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today", "isFirstVisibleCell", "isLastVisibleCell"];
var useUtilityClasses8 = (ownerState) => {
  const {
    selected,
    disableMargin,
    disableHighlightToday,
    today,
    disabled,
    outsideCurrentMonth,
    showDaysOutsideCurrentMonth,
    classes: classes2
  } = ownerState;
  const isHiddenDaySpacingFiller = outsideCurrentMonth && !showDaysOutsideCurrentMonth;
  const slots = {
    root: ["root", selected && !isHiddenDaySpacingFiller && "selected", disabled && "disabled", !disableMargin && "dayWithMargin", !disableHighlightToday && today && "today", outsideCurrentMonth && showDaysOutsideCurrentMonth && "dayOutsideMonth", isHiddenDaySpacingFiller && "hiddenDaySpacingFiller"],
    hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
  };
  return composeClasses(slots, getPickersDayUtilityClass, classes2);
};
var styleArg = ({
  theme,
  ownerState
}) => _extends({}, theme.typography.caption, {
  width: DAY_SIZE,
  height: DAY_SIZE,
  borderRadius: "50%",
  padding: 0,
  backgroundColor: "transparent",
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.short
  }),
  color: (theme.vars || theme).palette.text.primary,
  "@media (pointer: fine)": {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
    }
  },
  "&:focus": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity),
    [`&.${pickersDayClasses.selected}`]: {
      willChange: "background-color",
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  [`&.${pickersDayClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText,
    backgroundColor: (theme.vars || theme).palette.primary.main,
    fontWeight: theme.typography.fontWeightMedium,
    "&:hover": {
      willChange: "background-color",
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  [`&.${pickersDayClasses.disabled}:not(.${pickersDayClasses.selected})`]: {
    color: (theme.vars || theme).palette.text.disabled
  },
  [`&.${pickersDayClasses.disabled}&.${pickersDayClasses.selected}`]: {
    opacity: 0.6
  }
}, !ownerState.disableMargin && {
  margin: `0 ${DAY_MARGIN}px`
}, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
  color: (theme.vars || theme).palette.text.secondary
}, !ownerState.disableHighlightToday && ownerState.today && {
  [`&:not(.${pickersDayClasses.selected})`]: {
    border: `1px solid ${(theme.vars || theme).palette.text.secondary}`
  }
});
var overridesResolver = (props, styles) => {
  const {
    ownerState
  } = props;
  return [styles.root, !ownerState.disableMargin && styles.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles.hiddenDaySpacingFiller];
};
var PickersDayRoot = styled_default(ButtonBase_default, {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver
})(styleArg);
var PickersDayFiller = styled_default("div", {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver
})(({
  theme,
  ownerState
}) => _extends({}, styleArg({
  theme,
  ownerState
}), {
  opacity: 0,
  pointerEvents: "none"
}));
var noop = () => {
};
var PickersDayRaw = React26.forwardRef(function PickersDay(inProps, forwardedRef) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersDay"
  });
  const {
    autoFocus = false,
    className,
    day,
    disabled = false,
    disableHighlightToday = false,
    disableMargin = false,
    isAnimating,
    onClick: onClick2,
    onDaySelect,
    onFocus = noop,
    onBlur = noop,
    onKeyDown = noop,
    onMouseDown = noop,
    onMouseEnter = noop,
    outsideCurrentMonth,
    selected = false,
    showDaysOutsideCurrentMonth = false,
    children,
    today: isToday = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const ownerState = _extends({}, props, {
    autoFocus,
    disabled,
    disableHighlightToday,
    disableMargin,
    selected,
    showDaysOutsideCurrentMonth,
    today: isToday
  });
  const classes2 = useUtilityClasses8(ownerState);
  const utils = useUtils();
  const ref = React26.useRef(null);
  const handleRef = useForkRef(ref, forwardedRef);
  useEnhancedEffect_default(() => {
    if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
      ref.current.focus();
    }
  }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);
  const handleMouseDown = (event) => {
    onMouseDown(event);
    if (outsideCurrentMonth) {
      event.preventDefault();
    }
  };
  const handleClick = (event) => {
    if (!disabled) {
      onDaySelect(day);
    }
    if (outsideCurrentMonth) {
      event.currentTarget.focus();
    }
    if (onClick2) {
      onClick2(event);
    }
  };
  if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
    return (0, import_jsx_runtime18.jsx)(PickersDayFiller, {
      className: clsx_default(classes2.root, classes2.hiddenDaySpacingFiller, className),
      ownerState,
      role: other.role
    });
  }
  return (0, import_jsx_runtime18.jsx)(PickersDayRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref: handleRef,
    centerRipple: true,
    disabled,
    tabIndex: selected ? 0 : -1,
    onKeyDown: (event) => onKeyDown(event, day),
    onFocus: (event) => onFocus(event, day),
    onBlur: (event) => onBlur(event, day),
    onMouseEnter: (event) => onMouseEnter(event, day),
    onClick: handleClick,
    onMouseDown: handleMouseDown
  }, other, {
    ownerState,
    children: !children ? utils.format(day, "dayOfMonth") : children
  }));
});
true ? PickersDayRaw.propTypes = {
  action: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.shape({
    current: import_prop_types5.default.shape({
      focusVisible: import_prop_types5.default.func.isRequired
    })
  })]),
  centerRipple: import_prop_types5.default.bool,
  classes: import_prop_types5.default.object,
  className: import_prop_types5.default.string,
  component: import_prop_types5.default.elementType,
  day: import_prop_types5.default.any.isRequired,
  disabled: import_prop_types5.default.bool,
  disableHighlightToday: import_prop_types5.default.bool,
  disableMargin: import_prop_types5.default.bool,
  disableRipple: import_prop_types5.default.bool,
  disableTouchRipple: import_prop_types5.default.bool,
  focusRipple: import_prop_types5.default.bool,
  focusVisibleClassName: import_prop_types5.default.string,
  isAnimating: import_prop_types5.default.bool,
  isFirstVisibleCell: import_prop_types5.default.bool.isRequired,
  isLastVisibleCell: import_prop_types5.default.bool.isRequired,
  onBlur: import_prop_types5.default.func,
  onDaySelect: import_prop_types5.default.func.isRequired,
  onFocus: import_prop_types5.default.func,
  onFocusVisible: import_prop_types5.default.func,
  onKeyDown: import_prop_types5.default.func,
  onMouseEnter: import_prop_types5.default.func,
  outsideCurrentMonth: import_prop_types5.default.bool.isRequired,
  selected: import_prop_types5.default.bool,
  showDaysOutsideCurrentMonth: import_prop_types5.default.bool,
  style: import_prop_types5.default.object,
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  tabIndex: import_prop_types5.default.number,
  today: import_prop_types5.default.bool,
  TouchRippleProps: import_prop_types5.default.object,
  touchRippleRef: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.shape({
    current: import_prop_types5.default.shape({
      pulsate: import_prop_types5.default.func.isRequired,
      start: import_prop_types5.default.func.isRequired,
      stop: import_prop_types5.default.func.isRequired
    })
  })])
} : void 0;
var PickersDay2 = React26.memo(PickersDayRaw);

// node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.js
init_extends();
init_objectWithoutPropertiesLoose();
var React27 = __toESM(require_react());
init_composeClasses();

// node_modules/@mui/x-date-pickers/DateCalendar/pickersSlideTransitionClasses.js
init_utils();
var getPickersSlideTransitionUtilityClass = (slot) => generateUtilityClass("MuiPickersSlideTransition", slot);
var pickersSlideTransitionClasses = generateUtilityClasses("MuiPickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]);

// node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var _excluded12 = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"];
var useUtilityClasses9 = (ownerState) => {
  const {
    classes: classes2,
    slideDirection
  } = ownerState;
  const slots = {
    root: ["root"],
    exit: ["slideExit"],
    enterActive: ["slideEnterActive"],
    enter: [`slideEnter-${slideDirection}`],
    exitActive: [`slideExitActiveLeft-${slideDirection}`]
  };
  return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes2);
};
var PickersSlideTransitionRoot = styled_default(TransitionGroup_default, {
  name: "MuiPickersSlideTransition",
  slot: "Root",
  overridesResolver: (_, styles) => [styles.root, {
    [`.${pickersSlideTransitionClasses["slideEnter-left"]}`]: styles["slideEnter-left"]
  }, {
    [`.${pickersSlideTransitionClasses["slideEnter-right"]}`]: styles["slideEnter-right"]
  }, {
    [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles.slideEnterActive
  }, {
    [`.${pickersSlideTransitionClasses.slideExit}`]: styles.slideExit
  }, {
    [`.${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: styles["slideExitActiveLeft-left"]
  }, {
    [`.${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: styles["slideExitActiveLeft-right"]
  }]
})(({
  theme
}) => {
  const slideTransition = theme.transitions.create("transform", {
    duration: theme.transitions.duration.complex,
    easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
  });
  return {
    display: "block",
    position: "relative",
    overflowX: "hidden",
    "& > *": {
      position: "absolute",
      top: 0,
      right: 0,
      left: 0
    },
    [`& .${pickersSlideTransitionClasses["slideEnter-left"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      zIndex: 1
    },
    [`& .${pickersSlideTransitionClasses["slideEnter-right"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      zIndex: 1
    },
    [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
      transform: "translate(0%)",
      transition: slideTransition
    },
    [`& .${pickersSlideTransitionClasses.slideExit}`]: {
      transform: "translate(0%)"
    },
    [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      transition: slideTransition,
      zIndex: 0
    },
    [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      transition: slideTransition,
      zIndex: 0
    }
  };
});
function PickersSlideTransition(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersSlideTransition"
  });
  const {
    children,
    className,
    reduceAnimations,
    transKey
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const classes2 = useUtilityClasses9(props);
  const theme = useTheme();
  if (reduceAnimations) {
    return (0, import_jsx_runtime19.jsx)("div", {
      className: clsx_default(classes2.root, className),
      children
    });
  }
  const transitionClasses = {
    exit: classes2.exit,
    enterActive: classes2.enterActive,
    enter: classes2.enter,
    exitActive: classes2.exitActive
  };
  return (0, import_jsx_runtime19.jsx)(PickersSlideTransitionRoot, {
    className: clsx_default(classes2.root, className),
    childFactory: (element) => React27.cloneElement(element, {
      classNames: transitionClasses
    }),
    role: "presentation",
    children: (0, import_jsx_runtime19.jsx)(CSSTransition_default, _extends({
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: theme.transitions.duration.complex,
      classNames: transitionClasses
    }, other, {
      children
    }), transKey)
  });
}

// node_modules/@mui/x-date-pickers/DateCalendar/useIsDateDisabled.js
var React28 = __toESM(require_react());
var useIsDateDisabled = ({
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  minDate,
  maxDate,
  disableFuture,
  disablePast,
  timezone
}) => {
  const adapter = useLocalizationContext();
  return React28.useCallback((day) => validateDate({
    adapter,
    value: day,
    props: {
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      minDate,
      maxDate,
      disableFuture,
      disablePast,
      timezone
    }
  }) !== null, [adapter, shouldDisableDate, shouldDisableMonth, shouldDisableYear, minDate, maxDate, disableFuture, disablePast, timezone]);
};

// node_modules/@mui/x-date-pickers/DateCalendar/dayCalendarClasses.js
init_utils();
var getDayCalendarUtilityClass = (slot) => generateUtilityClass("MuiDayCalendar", slot);
var dayPickerClasses = generateUtilityClasses("MuiDayCalendar", ["root", "header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer", "weekNumberLabel", "weekNumber"]);

// node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var _excluded13 = ["parentProps", "day", "focusableDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"];
var _excluded24 = ["ownerState"];
var useUtilityClasses10 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    header: ["header"],
    weekDayLabel: ["weekDayLabel"],
    loadingContainer: ["loadingContainer"],
    slideTransition: ["slideTransition"],
    monthContainer: ["monthContainer"],
    weekContainer: ["weekContainer"],
    weekNumberLabel: ["weekNumberLabel"],
    weekNumber: ["weekNumber"]
  };
  return composeClasses(slots, getDayCalendarUtilityClass, classes2);
};
var weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
var PickersCalendarDayRoot = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})({});
var PickersCalendarDayHeader = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "Header",
  overridesResolver: (_, styles) => styles.header
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
});
var PickersCalendarWeekDayLabel = styled_default(Typography_default, {
  name: "MuiDayCalendar",
  slot: "WeekDayLabel",
  overridesResolver: (_, styles) => styles.weekDayLabel
})(({
  theme
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: (theme.vars || theme).palette.text.secondary
}));
var PickersCalendarWeekNumberLabel = styled_default(Typography_default, {
  name: "MuiDayCalendar",
  slot: "WeekNumberLabel",
  overridesResolver: (_, styles) => styles.weekNumberLabel
})(({
  theme
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: theme.palette.text.disabled
}));
var PickersCalendarWeekNumber = styled_default(Typography_default, {
  name: "MuiDayCalendar",
  slot: "WeekNumber",
  overridesResolver: (_, styles) => styles.weekNumber
})(({
  theme
}) => _extends({}, theme.typography.caption, {
  width: DAY_SIZE,
  height: DAY_SIZE,
  padding: 0,
  margin: `0 ${DAY_MARGIN}px`,
  color: theme.palette.text.disabled,
  fontSize: "0.75rem",
  alignItems: "center",
  justifyContent: "center",
  display: "inline-flex"
}));
var PickersCalendarLoadingContainer = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "LoadingContainer",
  overridesResolver: (_, styles) => styles.loadingContainer
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  minHeight: weeksContainerHeight
});
var PickersCalendarSlideTransition = styled_default(PickersSlideTransition, {
  name: "MuiDayCalendar",
  slot: "SlideTransition",
  overridesResolver: (_, styles) => styles.slideTransition
})({
  minHeight: weeksContainerHeight
});
var PickersCalendarWeekContainer = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "MonthContainer",
  overridesResolver: (_, styles) => styles.monthContainer
})({
  overflow: "hidden"
});
var PickersCalendarWeek = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "WeekContainer",
  overridesResolver: (_, styles) => styles.weekContainer
})({
  margin: `${DAY_MARGIN}px 0`,
  display: "flex",
  justifyContent: "center"
});
function WrappedDay(_ref) {
  var _ref2, _slots$day, _slotProps$day;
  let {
    parentProps,
    day,
    focusableDay,
    selectedDays,
    isDateDisabled,
    currentMonthNumber,
    isViewFocused
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded13);
  const {
    disabled,
    disableHighlightToday,
    isMonthSwitchingAnimating,
    showDaysOutsideCurrentMonth,
    components,
    componentsProps,
    slots,
    slotProps,
    timezone
  } = parentProps;
  const utils = useUtils();
  const now = useNow(timezone);
  const isFocusableDay = focusableDay !== null && utils.isSameDay(day, focusableDay);
  const isSelected = selectedDays.some((selectedDay) => utils.isSameDay(selectedDay, day));
  const isToday = utils.isSameDay(day, now);
  const Day = (_ref2 = (_slots$day = slots == null ? void 0 : slots.day) != null ? _slots$day : components == null ? void 0 : components.Day) != null ? _ref2 : PickersDay2;
  const _useSlotProps = useSlotProps({
    elementType: Day,
    externalSlotProps: (_slotProps$day = slotProps == null ? void 0 : slotProps.day) != null ? _slotProps$day : componentsProps == null ? void 0 : componentsProps.day,
    additionalProps: _extends({
      disableHighlightToday,
      showDaysOutsideCurrentMonth,
      role: "gridcell",
      isAnimating: isMonthSwitchingAnimating,
      "data-timestamp": utils.toJsDate(day).valueOf()
    }, other),
    ownerState: _extends({}, parentProps, {
      day,
      selected: isSelected
    })
  }), dayProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded24);
  const isDisabled = React29.useMemo(() => disabled || isDateDisabled(day), [disabled, isDateDisabled, day]);
  const outsideCurrentMonth = React29.useMemo(() => utils.getMonth(day) !== currentMonthNumber, [utils, day, currentMonthNumber]);
  const isFirstVisibleCell = React29.useMemo(() => {
    const startOfMonth = utils.startOfMonth(utils.setMonth(day, currentMonthNumber));
    if (!showDaysOutsideCurrentMonth) {
      return utils.isSameDay(day, startOfMonth);
    }
    return utils.isSameDay(day, utils.startOfWeek(startOfMonth));
  }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
  const isLastVisibleCell = React29.useMemo(() => {
    const endOfMonth = utils.endOfMonth(utils.setMonth(day, currentMonthNumber));
    if (!showDaysOutsideCurrentMonth) {
      return utils.isSameDay(day, endOfMonth);
    }
    return utils.isSameDay(day, utils.endOfWeek(endOfMonth));
  }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
  return (0, import_jsx_runtime20.jsx)(Day, _extends({}, dayProps, {
    day,
    disabled: isDisabled,
    autoFocus: isViewFocused && isFocusableDay,
    today: isToday,
    outsideCurrentMonth,
    isFirstVisibleCell,
    isLastVisibleCell,
    selected: isSelected,
    tabIndex: isFocusableDay ? 0 : -1,
    "aria-selected": isSelected,
    "aria-current": isToday ? "date" : void 0
  }));
}
function DayCalendar(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDayCalendar"
  });
  const {
    onFocusedDayChange,
    className,
    currentMonth,
    selectedDays,
    focusedDay,
    loading,
    onSelectedDaysChange,
    onMonthSwitchingAnimationEnd,
    readOnly,
    reduceAnimations,
    renderLoading = () => (0, import_jsx_runtime20.jsx)("span", {
      children: "..."
    }),
    slideDirection,
    TransitionProps,
    disablePast,
    disableFuture,
    minDate,
    maxDate,
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    dayOfWeekFormatter: dayOfWeekFormatterFromProps,
    hasFocus,
    onFocusedViewChange,
    gridLabelId,
    displayWeekNumber,
    fixedWeekNumber,
    autoFocus,
    timezone
  } = props;
  const now = useNow(timezone);
  const utils = useUtils();
  const classes2 = useUtilityClasses10(props);
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const dayOfWeekFormatter = dayOfWeekFormatterFromProps || ((_day, date) => utils.format(date, "weekdayShort").charAt(0).toUpperCase());
  const isDateDisabled = useIsDateDisabled({
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    minDate,
    maxDate,
    disablePast,
    disableFuture,
    timezone
  });
  const localeText = useLocaleText();
  const [internalHasFocus, setInternalHasFocus] = useControlled({
    name: "DayCalendar",
    state: "hasFocus",
    controlled: hasFocus,
    default: autoFocus != null ? autoFocus : false
  });
  const [internalFocusedDay, setInternalFocusedDay] = React29.useState(() => focusedDay || now);
  const handleDaySelect = useEventCallback_default((day) => {
    if (readOnly) {
      return;
    }
    onSelectedDaysChange(day);
  });
  const focusDay = (day) => {
    if (!isDateDisabled(day)) {
      onFocusedDayChange(day);
      setInternalFocusedDay(day);
      onFocusedViewChange == null || onFocusedViewChange(true);
      setInternalHasFocus(true);
    }
  };
  const handleKeyDown = useEventCallback_default((event, day) => {
    switch (event.key) {
      case "ArrowUp":
        focusDay(utils.addDays(day, -7));
        event.preventDefault();
        break;
      case "ArrowDown":
        focusDay(utils.addDays(day, 7));
        event.preventDefault();
        break;
      case "ArrowLeft": {
        const newFocusedDayDefault = utils.addDays(day, isRTL ? 1 : -1);
        const nextAvailableMonth = utils.addMonths(day, isRTL ? 1 : -1);
        const closestDayToFocus = findClosestEnabledDate({
          utils,
          date: newFocusedDayDefault,
          minDate: isRTL ? newFocusedDayDefault : utils.startOfMonth(nextAvailableMonth),
          maxDate: isRTL ? utils.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
          isDateDisabled,
          timezone
        });
        focusDay(closestDayToFocus || newFocusedDayDefault);
        event.preventDefault();
        break;
      }
      case "ArrowRight": {
        const newFocusedDayDefault = utils.addDays(day, isRTL ? -1 : 1);
        const nextAvailableMonth = utils.addMonths(day, isRTL ? -1 : 1);
        const closestDayToFocus = findClosestEnabledDate({
          utils,
          date: newFocusedDayDefault,
          minDate: isRTL ? utils.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
          maxDate: isRTL ? newFocusedDayDefault : utils.endOfMonth(nextAvailableMonth),
          isDateDisabled,
          timezone
        });
        focusDay(closestDayToFocus || newFocusedDayDefault);
        event.preventDefault();
        break;
      }
      case "Home":
        focusDay(utils.startOfWeek(day));
        event.preventDefault();
        break;
      case "End":
        focusDay(utils.endOfWeek(day));
        event.preventDefault();
        break;
      case "PageUp":
        focusDay(utils.addMonths(day, 1));
        event.preventDefault();
        break;
      case "PageDown":
        focusDay(utils.addMonths(day, -1));
        event.preventDefault();
        break;
      default:
        break;
    }
  });
  const handleFocus = useEventCallback_default((event, day) => focusDay(day));
  const handleBlur = useEventCallback_default((event, day) => {
    if (internalHasFocus && utils.isSameDay(internalFocusedDay, day)) {
      onFocusedViewChange == null || onFocusedViewChange(false);
    }
  });
  const currentMonthNumber = utils.getMonth(currentMonth);
  const validSelectedDays = React29.useMemo(() => selectedDays.filter((day) => !!day).map((day) => utils.startOfDay(day)), [utils, selectedDays]);
  const transitionKey = currentMonthNumber;
  const slideNodeRef = React29.useMemo(() => React29.createRef(), [transitionKey]);
  const startOfCurrentWeek = utils.startOfWeek(now);
  const focusableDay = React29.useMemo(() => {
    const startOfMonth = utils.startOfMonth(currentMonth);
    const endOfMonth = utils.endOfMonth(currentMonth);
    if (isDateDisabled(internalFocusedDay) || utils.isAfterDay(internalFocusedDay, endOfMonth) || utils.isBeforeDay(internalFocusedDay, startOfMonth)) {
      return findClosestEnabledDate({
        utils,
        date: internalFocusedDay,
        minDate: startOfMonth,
        maxDate: endOfMonth,
        disablePast,
        disableFuture,
        isDateDisabled,
        timezone
      });
    }
    return internalFocusedDay;
  }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils, timezone]);
  const weeksToDisplay = React29.useMemo(() => {
    const currentMonthWithTimezone = utils.setTimezone(currentMonth, timezone);
    const toDisplay = utils.getWeekArray(currentMonthWithTimezone);
    let nextMonth = utils.addMonths(currentMonthWithTimezone, 1);
    while (fixedWeekNumber && toDisplay.length < fixedWeekNumber) {
      const additionalWeeks = utils.getWeekArray(nextMonth);
      const hasCommonWeek = utils.isSameDay(toDisplay[toDisplay.length - 1][0], additionalWeeks[0][0]);
      additionalWeeks.slice(hasCommonWeek ? 1 : 0).forEach((week) => {
        if (toDisplay.length < fixedWeekNumber) {
          toDisplay.push(week);
        }
      });
      nextMonth = utils.addMonths(nextMonth, 1);
    }
    return toDisplay;
  }, [currentMonth, fixedWeekNumber, utils, timezone]);
  return (0, import_jsx_runtime21.jsxs)(PickersCalendarDayRoot, {
    role: "grid",
    "aria-labelledby": gridLabelId,
    className: classes2.root,
    children: [(0, import_jsx_runtime21.jsxs)(PickersCalendarDayHeader, {
      role: "row",
      className: classes2.header,
      children: [displayWeekNumber && (0, import_jsx_runtime20.jsx)(PickersCalendarWeekNumberLabel, {
        variant: "caption",
        role: "columnheader",
        "aria-label": localeText.calendarWeekNumberHeaderLabel,
        className: classes2.weekNumberLabel,
        children: localeText.calendarWeekNumberHeaderText
      }), getWeekdays(utils, now).map((weekday, i) => {
        var _dayOfWeekFormatter;
        const day = utils.format(weekday, "weekdayShort");
        return (0, import_jsx_runtime20.jsx)(PickersCalendarWeekDayLabel, {
          variant: "caption",
          role: "columnheader",
          "aria-label": utils.format(utils.addDays(startOfCurrentWeek, i), "weekday"),
          className: classes2.weekDayLabel,
          children: (_dayOfWeekFormatter = dayOfWeekFormatter == null ? void 0 : dayOfWeekFormatter(day, weekday)) != null ? _dayOfWeekFormatter : day
        }, day + i.toString());
      })]
    }), loading ? (0, import_jsx_runtime20.jsx)(PickersCalendarLoadingContainer, {
      className: classes2.loadingContainer,
      children: renderLoading()
    }) : (0, import_jsx_runtime20.jsx)(PickersCalendarSlideTransition, _extends({
      transKey: transitionKey,
      onExited: onMonthSwitchingAnimationEnd,
      reduceAnimations,
      slideDirection,
      className: clsx_default(className, classes2.slideTransition)
    }, TransitionProps, {
      nodeRef: slideNodeRef,
      children: (0, import_jsx_runtime20.jsx)(PickersCalendarWeekContainer, {
        ref: slideNodeRef,
        role: "rowgroup",
        className: classes2.monthContainer,
        children: weeksToDisplay.map((week, index) => (0, import_jsx_runtime21.jsxs)(PickersCalendarWeek, {
          role: "row",
          className: classes2.weekContainer,
          "aria-rowindex": index + 1,
          children: [displayWeekNumber && (0, import_jsx_runtime20.jsx)(PickersCalendarWeekNumber, {
            className: classes2.weekNumber,
            role: "rowheader",
            "aria-label": localeText.calendarWeekNumberAriaLabelText(utils.getWeekNumber(week[0])),
            children: localeText.calendarWeekNumberText(utils.getWeekNumber(week[0]))
          }), week.map((day, dayIndex) => (0, import_jsx_runtime20.jsx)(WrappedDay, {
            parentProps: props,
            day,
            selectedDays: validSelectedDays,
            focusableDay,
            onKeyDown: handleKeyDown,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onDaySelect: handleDaySelect,
            isDateDisabled,
            currentMonthNumber,
            isViewFocused: internalHasFocus,
            "aria-colindex": dayIndex + 1
          }, day.toString()))]
        }, `week-${week[0]}`))
      })
    }))]
  });
}

// node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js
init_extends();
var React30 = __toESM(require_react());
init_useEventCallback();
var createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {
  switch (action.type) {
    case "changeMonth":
      return _extends({}, state, {
        slideDirection: action.direction,
        currentMonth: action.newMonth,
        isMonthSwitchingAnimating: !reduceAnimations
      });
    case "finishMonthSwitchingAnimation":
      return _extends({}, state, {
        isMonthSwitchingAnimating: false
      });
    case "changeFocusedDay": {
      if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {
        return state;
      }
      const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);
      return _extends({}, state, {
        focusedDay: action.focusedDay,
        isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
        currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,
        slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? "left" : "right"
      });
    }
    default:
      throw new Error("missing support");
  }
};
var useCalendarState = (params) => {
  const {
    value,
    referenceDate: referenceDateProp,
    defaultCalendarMonth,
    disableFuture,
    disablePast,
    disableSwitchToMonthOnDayFocus = false,
    maxDate,
    minDate,
    onMonthChange,
    reduceAnimations,
    shouldDisableDate,
    timezone
  } = params;
  const utils = useUtils();
  const reducerFn = React30.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;
  const referenceDate = React30.useMemo(
    () => {
      let externalReferenceDate = null;
      if (referenceDateProp) {
        externalReferenceDate = referenceDateProp;
      } else if (defaultCalendarMonth) {
        externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);
      }
      return singleItemValueManager.getInitialReferenceValue({
        value,
        utils,
        timezone,
        props: params,
        referenceDate: externalReferenceDate,
        granularity: SECTION_TYPE_GRANULARITY.day
      });
    },
    []
  );
  const [calendarState, dispatch] = React30.useReducer(reducerFn, {
    isMonthSwitchingAnimating: false,
    focusedDay: referenceDate,
    currentMonth: utils.startOfMonth(referenceDate),
    slideDirection: "left"
  });
  const handleChangeMonth = React30.useCallback((payload) => {
    dispatch(_extends({
      type: "changeMonth"
    }, payload));
    if (onMonthChange) {
      onMonthChange(payload.newMonth);
    }
  }, [onMonthChange]);
  const changeMonth = React30.useCallback((newDate) => {
    const newDateRequested = newDate;
    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {
      return;
    }
    handleChangeMonth({
      newMonth: utils.startOfMonth(newDateRequested),
      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? "left" : "right"
    });
  }, [calendarState.currentMonth, handleChangeMonth, utils]);
  const isDateDisabled = useIsDateDisabled({
    shouldDisableDate,
    minDate,
    maxDate,
    disableFuture,
    disablePast,
    timezone
  });
  const onMonthSwitchingAnimationEnd = React30.useCallback(() => {
    dispatch({
      type: "finishMonthSwitchingAnimation"
    });
  }, []);
  const changeFocusedDay = useEventCallback_default((newFocusedDate, withoutMonthSwitchingAnimation) => {
    if (!isDateDisabled(newFocusedDate)) {
      dispatch({
        type: "changeFocusedDay",
        focusedDay: newFocusedDate,
        withoutMonthSwitchingAnimation
      });
    }
  });
  return {
    referenceDate,
    calendarState,
    changeMonth,
    changeFocusedDay,
    isDateDisabled,
    onMonthSwitchingAnimationEnd,
    handleChangeMonth
  };
};

// node_modules/@mui/x-date-pickers/hooks/useClearableField.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var _excluded14 = ["ownerState"];
var useClearableField = ({
  clearable,
  fieldProps: forwardedFieldProps,
  InputProps: ForwardedInputProps,
  onClear,
  slots,
  slotProps,
  components,
  componentsProps
}) => {
  var _ref, _slots$clearButton, _slotProps$clearButto, _ref2, _slots$clearIcon, _slotProps$clearIcon;
  const localeText = useLocaleText();
  const IconButton = (_ref = (_slots$clearButton = slots == null ? void 0 : slots.clearButton) != null ? _slots$clearButton : components == null ? void 0 : components.ClearButton) != null ? _ref : IconButton_default;
  const _useSlotProps = useSlotProps({
    elementType: IconButton,
    externalSlotProps: (_slotProps$clearButto = slotProps == null ? void 0 : slotProps.clearButton) != null ? _slotProps$clearButto : componentsProps == null ? void 0 : componentsProps.clearButton,
    ownerState: {},
    className: "clearButton",
    additionalProps: {
      title: localeText.fieldClearLabel
    }
  }), iconButtonProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded14);
  const EndClearIcon = (_ref2 = (_slots$clearIcon = slots == null ? void 0 : slots.clearIcon) != null ? _slots$clearIcon : components == null ? void 0 : components.ClearIcon) != null ? _ref2 : ClearIcon;
  const endClearIconProps = useSlotProps({
    elementType: EndClearIcon,
    externalSlotProps: (_slotProps$clearIcon = slotProps == null ? void 0 : slotProps.clearIcon) != null ? _slotProps$clearIcon : componentsProps == null ? void 0 : componentsProps.clearIcon,
    ownerState: {}
  });
  const InputProps = _extends({}, ForwardedInputProps, {
    endAdornment: (0, import_jsx_runtime23.jsxs)(React31.Fragment, {
      children: [clearable && (0, import_jsx_runtime22.jsx)(InputAdornment_default, {
        position: "end",
        sx: {
          marginRight: ForwardedInputProps != null && ForwardedInputProps.endAdornment ? -1 : -1.5
        },
        children: (0, import_jsx_runtime22.jsx)(IconButton, _extends({}, iconButtonProps, {
          onClick: onClear,
          children: (0, import_jsx_runtime22.jsx)(EndClearIcon, _extends({
            fontSize: "small"
          }, endClearIconProps))
        }))
      }), ForwardedInputProps == null ? void 0 : ForwardedInputProps.endAdornment]
    })
  });
  const fieldProps = _extends({}, forwardedFieldProps, {
    sx: [{
      "& .clearButton": {
        opacity: 1
      },
      "@media (pointer: fine)": {
        "& .clearButton": {
          opacity: 0
        },
        "&:hover, &:focus-within": {
          ".clearButton": {
            opacity: 1
          }
        }
      }
    }, ...Array.isArray(forwardedFieldProps.sx) ? forwardedFieldProps.sx : [forwardedFieldProps.sx]]
  });
  return {
    InputProps,
    fieldProps
  };
};

// node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var _excluded15 = ["components", "componentsProps", "slots", "slotProps", "InputProps", "inputProps"];
var _excluded25 = ["inputRef"];
var _excluded33 = ["ref", "onPaste", "onKeyDown", "inputMode", "readOnly", "clearable", "onClear"];
var DateTimeField = React32.forwardRef(function DateTimeField2(inProps, ref) {
  var _ref, _slots$textField, _slotProps$textField;
  const themeProps = useThemeProps({
    props: inProps,
    name: "MuiDateTimeField"
  });
  const {
    components,
    componentsProps,
    slots,
    slotProps,
    InputProps,
    inputProps
  } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded15);
  const ownerState = themeProps;
  const TextField = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField_default;
  const _useSlotProps = useSlotProps({
    elementType: TextField,
    externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
    externalForwardedProps: other,
    ownerState
  }), {
    inputRef: externalInputRef
  } = _useSlotProps, textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded25);
  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
  const _useDateTimeField = useDateTimeField({
    props: textFieldProps,
    inputRef: externalInputRef
  }), {
    ref: inputRef,
    onPaste,
    onKeyDown,
    inputMode,
    readOnly,
    clearable,
    onClear
  } = _useDateTimeField, fieldProps = _objectWithoutPropertiesLoose(_useDateTimeField, _excluded33);
  const {
    InputProps: ProcessedInputProps,
    fieldProps: processedFieldProps
  } = useClearableField({
    onClear,
    clearable,
    fieldProps,
    InputProps: fieldProps.InputProps,
    slots,
    slotProps,
    components,
    componentsProps
  });
  return (0, import_jsx_runtime24.jsx)(TextField, _extends({
    ref
  }, processedFieldProps, {
    InputProps: _extends({}, ProcessedInputProps, {
      readOnly
    }),
    inputProps: _extends({}, fieldProps.inputProps, {
      inputMode,
      onPaste,
      onKeyDown,
      ref: inputRef
    })
  }));
});
true ? DateTimeField.propTypes = {
  ampm: import_prop_types6.default.bool,
  autoFocus: import_prop_types6.default.bool,
  className: import_prop_types6.default.string,
  clearable: import_prop_types6.default.bool,
  color: import_prop_types6.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
  component: import_prop_types6.default.elementType,
  components: import_prop_types6.default.object,
  componentsProps: import_prop_types6.default.object,
  defaultValue: import_prop_types6.default.any,
  disabled: import_prop_types6.default.bool,
  disableFuture: import_prop_types6.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types6.default.bool,
  disablePast: import_prop_types6.default.bool,
  focused: import_prop_types6.default.bool,
  format: import_prop_types6.default.string,
  formatDensity: import_prop_types6.default.oneOf(["dense", "spacious"]),
  FormHelperTextProps: import_prop_types6.default.object,
  fullWidth: import_prop_types6.default.bool,
  helperText: import_prop_types6.default.node,
  hiddenLabel: import_prop_types6.default.bool,
  id: import_prop_types6.default.string,
  InputLabelProps: import_prop_types6.default.object,
  inputProps: import_prop_types6.default.object,
  InputProps: import_prop_types6.default.object,
  inputRef: refType_default,
  label: import_prop_types6.default.node,
  margin: import_prop_types6.default.oneOf(["dense", "none", "normal"]),
  maxDate: import_prop_types6.default.any,
  maxDateTime: import_prop_types6.default.any,
  maxTime: import_prop_types6.default.any,
  minDate: import_prop_types6.default.any,
  minDateTime: import_prop_types6.default.any,
  minTime: import_prop_types6.default.any,
  minutesStep: import_prop_types6.default.number,
  name: import_prop_types6.default.string,
  onBlur: import_prop_types6.default.func,
  onChange: import_prop_types6.default.func,
  onClear: import_prop_types6.default.func,
  onError: import_prop_types6.default.func,
  onFocus: import_prop_types6.default.func,
  onSelectedSectionsChange: import_prop_types6.default.func,
  readOnly: import_prop_types6.default.bool,
  referenceDate: import_prop_types6.default.any,
  required: import_prop_types6.default.bool,
  selectedSections: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types6.default.number, import_prop_types6.default.shape({
    endIndex: import_prop_types6.default.number.isRequired,
    startIndex: import_prop_types6.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types6.default.func,
  shouldDisableDate: import_prop_types6.default.func,
  shouldDisableMonth: import_prop_types6.default.func,
  shouldDisableTime: import_prop_types6.default.func,
  shouldDisableYear: import_prop_types6.default.func,
  shouldRespectLeadingZeros: import_prop_types6.default.bool,
  size: import_prop_types6.default.oneOf(["medium", "small"]),
  slotProps: import_prop_types6.default.object,
  slots: import_prop_types6.default.object,
  style: import_prop_types6.default.object,
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
  timezone: import_prop_types6.default.string,
  unstableFieldRef: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object]),
  value: import_prop_types6.default.any,
  variant: import_prop_types6.default.oneOf(["filled", "outlined", "standard"])
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
init_extends();
var React35 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
var React33 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
init_composeClasses();

// node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerTabsClasses.js
init_utils();
function getDateTimePickerTabsUtilityClass(slot) {
  return generateUtilityClass("MuiDateTimePickerTabs", slot);
}
var dateTimePickerTabsClasses = generateUtilityClasses("MuiDateTimePickerTabs", ["root"]);

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var viewToTab = (view) => {
  if (isDatePickerView(view)) {
    return "date";
  }
  return "time";
};
var tabToView = (tab) => {
  if (tab === "date") {
    return "day";
  }
  return "hours";
};
var useUtilityClasses11 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes2);
};
var DateTimePickerTabsRoot = styled_default(Tabs_default, {
  name: "MuiDateTimePickerTabs",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  theme
}) => ({
  boxShadow: `0 -1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
  "&:last-child": {
    boxShadow: `0 1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
    [`& .${tabsClasses_default.indicator}`]: {
      bottom: "auto",
      top: 0
    }
  }
}));
var DateTimePickerTabs = function DateTimePickerTabs2(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateTimePickerTabs"
  });
  const {
    dateIcon = (0, import_jsx_runtime25.jsx)(DateRangeIcon, {}),
    onViewChange,
    timeIcon = (0, import_jsx_runtime25.jsx)(TimeIcon, {}),
    view,
    hidden = typeof window === "undefined" || window.innerHeight < 667,
    className,
    sx
  } = props;
  const localeText = useLocaleText();
  const classes2 = useUtilityClasses11(props);
  const handleChange = (event, value) => {
    onViewChange(tabToView(value));
  };
  if (hidden) {
    return null;
  }
  return (0, import_jsx_runtime26.jsxs)(DateTimePickerTabsRoot, {
    ownerState: props,
    variant: "fullWidth",
    value: viewToTab(view),
    onChange: handleChange,
    className: clsx_default(className, classes2.root),
    sx,
    children: [(0, import_jsx_runtime25.jsx)(Tab_default, {
      value: "date",
      "aria-label": localeText.dateTableLabel,
      icon: (0, import_jsx_runtime25.jsx)(React33.Fragment, {
        children: dateIcon
      })
    }), (0, import_jsx_runtime25.jsx)(Tab_default, {
      value: "time",
      "aria-label": localeText.timeTableLabel,
      icon: (0, import_jsx_runtime25.jsx)(React33.Fragment, {
        children: timeIcon
      })
    })]
  });
};
true ? DateTimePickerTabs.propTypes = {
  classes: import_prop_types7.default.object,
  className: import_prop_types7.default.string,
  dateIcon: import_prop_types7.default.node,
  hidden: import_prop_types7.default.bool,
  onViewChange: import_prop_types7.default.func.isRequired,
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
  timeIcon: import_prop_types7.default.node,
  view: import_prop_types7.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React34 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerToolbarClasses.js
init_utils();
function getDateTimePickerToolbarUtilityClass(slot) {
  return generateUtilityClass("MuiDateTimePickerToolbar", slot);
}
var dateTimePickerToolbarClasses = generateUtilityClasses("MuiDateTimePickerToolbar", ["root", "dateContainer", "timeContainer", "timeDigitsContainer", "separator", "timeLabelReverse", "ampmSelection", "ampmLandscape", "ampmLabel"]);

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded16 = ["ampm", "ampmInClock", "value", "onChange", "view", "isLandscape", "onViewChange", "toolbarFormat", "toolbarPlaceholder", "views", "disabled", "readOnly", "toolbarVariant"];
var useUtilityClasses12 = (ownerState) => {
  const {
    classes: classes2,
    theme,
    isLandscape
  } = ownerState;
  const slots = {
    root: ["root"],
    dateContainer: ["dateContainer"],
    timeContainer: ["timeContainer", theme.direction === "rtl" && "timeLabelReverse"],
    timeDigitsContainer: ["timeDigitsContainer", theme.direction === "rtl" && "timeLabelReverse"],
    separator: ["separator"],
    ampmSelection: ["ampmSelection", isLandscape && "ampmLandscape"],
    ampmLabel: ["ampmLabel"]
  };
  return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes2);
};
var DateTimePickerToolbarRoot = styled_default(PickersToolbar, {
  name: "MuiDateTimePickerToolbar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => ({
  paddingLeft: ownerState.toolbarVariant === "desktop" && !ownerState.isLandscape ? 24 : 16,
  paddingRight: ownerState.toolbarVariant === "desktop" && !ownerState.isLandscape ? 0 : 16,
  borderBottom: ownerState.toolbarVariant === "desktop" ? `1px solid ${(theme.vars || theme).palette.divider}` : void 0,
  borderRight: ownerState.toolbarVariant === "desktop" && ownerState.isLandscape ? `1px solid ${(theme.vars || theme).palette.divider}` : void 0,
  justifyContent: "space-around",
  position: "relative"
}));
DateTimePickerToolbarRoot.propTypes = {
  as: import_prop_types8.default.elementType,
  classes: import_prop_types8.default.object,
  className: import_prop_types8.default.string,
  isLandscape: import_prop_types8.default.bool.isRequired,
  isMobileKeyboardViewOpen: import_prop_types8.default.bool,
  landscapeDirection: import_prop_types8.default.oneOf(["column", "row"]),
  ownerState: import_prop_types8.default.object.isRequired,
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
  toggleMobileKeyboardView: import_prop_types8.default.func,
  toolbarTitle: import_prop_types8.default.node,
  viewType: import_prop_types8.default.oneOf(["date", "time"])
};
var DateTimePickerToolbarDateContainer = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "DateContainer",
  overridesResolver: (props, styles) => styles.dateContainer
})({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start"
});
var DateTimePickerToolbarTimeContainer = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "TimeContainer",
  overridesResolver: (props, styles) => styles.timeContainer
})(({
  theme,
  ownerState
}) => {
  const direction = ownerState.isLandscape && ownerState.toolbarVariant !== "desktop" ? "column" : "row";
  return _extends({
    display: "flex",
    flexDirection: direction
  }, ownerState.toolbarVariant === "desktop" && _extends({}, !ownerState.isLandscape && {
    gap: 9,
    marginRight: 4,
    alignSelf: "flex-end"
  }), theme.direction === "rtl" && {
    flexDirection: `${direction}-reverse`
  });
});
var DateTimePickerToolbarTimeDigitsContainer = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "TimeDigitsContainer",
  overridesResolver: (props, styles) => styles.timeDigitsContainer
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex"
}, ownerState.toolbarVariant === "desktop" && {
  gap: 1.5
}, theme.direction === "rtl" && {
  flexDirection: "row-reverse"
}));
DateTimePickerToolbarTimeContainer.propTypes = {
  as: import_prop_types8.default.elementType,
  ownerState: import_prop_types8.default.object.isRequired,
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object])
};
var DateTimePickerToolbarSeparator = styled_default(PickersToolbarText, {
  name: "MuiDateTimePickerToolbar",
  slot: "Separator",
  overridesResolver: (props, styles) => styles.separator
})(({
  ownerState
}) => ({
  margin: ownerState.toolbarVariant === "desktop" ? 0 : "0 4px 0 2px",
  cursor: "default"
}));
var DateTimePickerToolbarAmPmSelection = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "AmPmSelection",
  overridesResolver: (props, styles) => [{
    [`.${dateTimePickerToolbarClasses.ampmLabel}`]: styles.ampmLabel
  }, {
    [`&.${dateTimePickerToolbarClasses.ampmLandscape}`]: styles.ampmLandscape
  }, styles.ampmSelection]
})(({
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "column",
  marginRight: "auto",
  marginLeft: 12
}, ownerState.isLandscape && {
  margin: "4px 0 auto",
  flexDirection: "row",
  justifyContent: "space-around",
  width: "100%"
}, {
  [`& .${dateTimePickerToolbarClasses.ampmLabel}`]: {
    fontSize: 17
  }
}));
function DateTimePickerToolbar(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateTimePickerToolbar"
  });
  const {
    ampm,
    ampmInClock,
    value,
    onChange,
    view,
    isLandscape,
    onViewChange,
    toolbarFormat,
    toolbarPlaceholder = "\u2013\u2013",
    views,
    disabled,
    readOnly,
    toolbarVariant = "mobile"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const ownerState = props;
  const utils = useUtils();
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(value, ampm, onChange);
  const showAmPmControl = Boolean(ampm && !ampmInClock);
  const isDesktop = toolbarVariant === "desktop";
  const localeText = useLocaleText();
  const theme = useTheme();
  const classes2 = useUtilityClasses12(_extends({}, ownerState, {
    theme
  }));
  const formatHours = (time) => ampm ? utils.format(time, "hours12h") : utils.format(time, "hours24h");
  const dateText = React34.useMemo(() => {
    if (!value) {
      return toolbarPlaceholder;
    }
    if (toolbarFormat) {
      return utils.formatByString(value, toolbarFormat);
    }
    return utils.format(value, "shortDate");
  }, [value, toolbarFormat, toolbarPlaceholder, utils]);
  return (0, import_jsx_runtime28.jsxs)(DateTimePickerToolbarRoot, _extends({
    toolbarTitle: localeText.dateTimePickerToolbarTitle,
    isLandscape,
    className: classes2.root
  }, other, {
    ownerState,
    children: [(0, import_jsx_runtime28.jsxs)(DateTimePickerToolbarDateContainer, {
      className: classes2.dateContainer,
      ownerState,
      children: [views.includes("year") && (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
        tabIndex: -1,
        variant: "subtitle1",
        onClick: () => onViewChange("year"),
        selected: view === "year",
        value: value ? utils.format(value, "year") : "\u2013"
      }), views.includes("day") && (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
        tabIndex: -1,
        variant: isDesktop ? "h5" : "h4",
        onClick: () => onViewChange("day"),
        selected: view === "day",
        value: dateText
      })]
    }), (0, import_jsx_runtime28.jsxs)(DateTimePickerToolbarTimeContainer, {
      className: classes2.timeContainer,
      ownerState,
      children: [(0, import_jsx_runtime28.jsxs)(DateTimePickerToolbarTimeDigitsContainer, {
        className: classes2.timeDigitsContainer,
        ownerState,
        children: [views.includes("hours") && (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
          variant: isDesktop ? "h5" : "h3",
          width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
          onClick: () => onViewChange("hours"),
          selected: view === "hours",
          value: value ? formatHours(value) : "--"
        }), views.includes("minutes") && (0, import_jsx_runtime28.jsxs)(React34.Fragment, {
          children: [(0, import_jsx_runtime27.jsx)(DateTimePickerToolbarSeparator, {
            variant: isDesktop ? "h5" : "h3",
            value: ":",
            className: classes2.separator,
            ownerState
          }), (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
            variant: isDesktop ? "h5" : "h3",
            width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
            onClick: () => onViewChange("minutes"),
            selected: view === "minutes",
            value: value ? utils.format(value, "minutes") : "--"
          })]
        }), views.includes("seconds") && (0, import_jsx_runtime28.jsxs)(React34.Fragment, {
          children: [(0, import_jsx_runtime27.jsx)(DateTimePickerToolbarSeparator, {
            variant: isDesktop ? "h5" : "h3",
            value: ":",
            className: classes2.separator,
            ownerState
          }), (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
            variant: isDesktop ? "h5" : "h3",
            width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
            onClick: () => onViewChange("seconds"),
            selected: view === "seconds",
            value: value ? utils.format(value, "seconds") : "--"
          })]
        })]
      }), showAmPmControl && !isDesktop && (0, import_jsx_runtime28.jsxs)(DateTimePickerToolbarAmPmSelection, {
        className: classes2.ampmSelection,
        ownerState,
        children: [(0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
          variant: "subtitle2",
          selected: meridiemMode === "am",
          typographyClassName: classes2.ampmLabel,
          value: formatMeridiem(utils, "am"),
          onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
          disabled
        }), (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
          variant: "subtitle2",
          selected: meridiemMode === "pm",
          typographyClassName: classes2.ampmLabel,
          value: formatMeridiem(utils, "pm"),
          onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
          disabled
        })]
      }), ampm && isDesktop && (0, import_jsx_runtime27.jsx)(PickersToolbarButton, {
        variant: "h5",
        onClick: () => onViewChange("meridiem"),
        selected: view === "meridiem",
        value: value && meridiemMode ? formatMeridiem(utils, meridiemMode) : "--",
        width: MULTI_SECTION_CLOCK_SECTION_WIDTH
      })]
    })]
  }));
}
true ? DateTimePickerToolbar.propTypes = {
  ampm: import_prop_types8.default.bool,
  ampmInClock: import_prop_types8.default.bool,
  classes: import_prop_types8.default.object,
  className: import_prop_types8.default.string,
  disabled: import_prop_types8.default.bool,
  hidden: import_prop_types8.default.bool,
  isLandscape: import_prop_types8.default.bool.isRequired,
  onChange: import_prop_types8.default.func.isRequired,
  onViewChange: import_prop_types8.default.func.isRequired,
  readOnly: import_prop_types8.default.bool,
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
  titleId: import_prop_types8.default.string,
  toolbarFormat: import_prop_types8.default.string,
  toolbarPlaceholder: import_prop_types8.default.node,
  toolbarVariant: import_prop_types8.default.oneOf(["desktop", "mobile"]),
  value: import_prop_types8.default.any,
  view: import_prop_types8.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired,
  views: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
function useDateTimePickerDefaultizedProps(props, name) {
  var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$orientati, _themeProps$disableIg, _themeProps$disableFu, _themeProps$disablePa, _themeProps$minDateTi, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps({
    props,
    name
  });
  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
  const localeText = React35.useMemo(() => {
    var _themeProps$localeTex;
    if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
      return themeProps.localeText;
    }
    return _extends({}, themeProps.localeText, {
      dateTimePickerToolbarTitle: themeProps.localeText.toolbarTitle
    });
  }, [themeProps.localeText]);
  const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
  const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
  return _extends({}, themeProps, applyDefaultViewProps({
    views: themeProps.views,
    openTo: themeProps.openTo,
    defaultViews: ["year", "day", "hours", "minutes"],
    defaultOpenTo: "day"
  }), {
    ampm,
    localeText,
    orientation: (_themeProps$orientati = themeProps.orientation) != null ? _themeProps$orientati : "portrait",
    disableIgnoringDatePartForTimeValidation: (_themeProps$disableIg = themeProps.disableIgnoringDatePartForTimeValidation) != null ? _themeProps$disableIg : Boolean(themeProps.minDateTime || themeProps.maxDateTime || themeProps.disablePast || themeProps.disableFuture),
    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
    minDate: applyDefaultDate(utils, (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate, defaultDates.maxDate),
    minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
    maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime,
    slots: _extends({
      toolbar: DateTimePickerToolbar,
      tabs: DateTimePickerTabs
    }, slots),
    slotProps: _extends({}, slotProps, {
      toolbar: _extends({
        ampm
      }, slotProps == null ? void 0 : slotProps.toolbar)
    })
  });
}

// node_modules/@mui/x-date-pickers/dateViewRenderers/dateViewRenderers.js
var React43 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React42 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.js
var React36 = __toESM(require_react());
init_composeClasses();

// node_modules/@mui/x-date-pickers/DateCalendar/pickersFadeTransitionGroupClasses.js
init_utils();
var getPickersFadeTransitionGroupUtilityClass = (slot) => generateUtilityClass("MuiPickersFadeTransitionGroup", slot);
var pickersFadeTransitionGroupClasses = generateUtilityClasses("MuiPickersFadeTransitionGroup", ["root"]);

// node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var useUtilityClasses13 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes2);
};
var PickersFadeTransitionGroupRoot = styled_default(TransitionGroup_default, {
  name: "MuiPickersFadeTransitionGroup",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})({
  display: "block",
  position: "relative"
});
function PickersFadeTransitionGroup(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersFadeTransitionGroup"
  });
  const {
    children,
    className,
    reduceAnimations,
    transKey
  } = props;
  const classes2 = useUtilityClasses13(props);
  const theme = useTheme();
  if (reduceAnimations) {
    return children;
  }
  return (0, import_jsx_runtime29.jsx)(PickersFadeTransitionGroupRoot, {
    className: clsx_default(classes2.root, className),
    children: (0, import_jsx_runtime29.jsx)(Fade_default, {
      appear: false,
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: {
        appear: theme.transitions.duration.enteringScreen,
        enter: theme.transitions.duration.enteringScreen,
        exit: 0
      },
      children
    }, transKey)
  });
}

// node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React38 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.js
init_objectWithoutPropertiesLoose();
init_extends();
var React37 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/MonthCalendar/pickersMonthClasses.js
init_utils();
function getPickersMonthUtilityClass(slot) {
  return generateUtilityClass("MuiPickersMonth", slot);
}
var pickersMonthClasses = generateUtilityClasses("MuiPickersMonth", ["root", "monthButton", "disabled", "selected"]);

// node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var _excluded17 = ["autoFocus", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "aria-label", "monthsPerRow"];
var useUtilityClasses14 = (ownerState) => {
  const {
    disabled,
    selected,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    monthButton: ["monthButton", disabled && "disabled", selected && "selected"]
  };
  return composeClasses(slots, getPickersMonthUtilityClass, classes2);
};
var PickersMonthRoot = styled_default("div", {
  name: "MuiPickersMonth",
  slot: "Root",
  overridesResolver: (_, styles) => [styles.root]
})(({
  ownerState
}) => ({
  flexBasis: ownerState.monthsPerRow === 3 ? "33.3%" : "25%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center"
}));
var PickersMonthButton = styled_default("button", {
  name: "MuiPickersMonth",
  slot: "MonthButton",
  overridesResolver: (_, styles) => [styles.monthButton, {
    [`&.${pickersMonthClasses.disabled}`]: styles.disabled
  }, {
    [`&.${pickersMonthClasses.selected}`]: styles.selected
  }]
})(({
  theme
}) => _extends({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, theme.typography.subtitle1, {
  margin: "8px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${pickersMonthClasses.disabled}`]: {
    color: (theme.vars || theme).palette.text.secondary
  },
  [`&.${pickersMonthClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText,
    backgroundColor: (theme.vars || theme).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  }
}));
var PickersMonth = React37.memo(function PickersMonth2(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersMonth"
  });
  const {
    autoFocus,
    children,
    disabled,
    selected,
    value,
    tabIndex,
    onClick: onClick2,
    onKeyDown,
    onFocus,
    onBlur,
    "aria-current": ariaCurrent,
    "aria-label": ariaLabel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const ref = React37.useRef(null);
  const classes2 = useUtilityClasses14(props);
  useEnhancedEffect_default(() => {
    if (autoFocus) {
      var _ref$current;
      (_ref$current = ref.current) == null || _ref$current.focus();
    }
  }, [autoFocus]);
  return (0, import_jsx_runtime30.jsx)(PickersMonthRoot, _extends({
    className: classes2.root,
    ownerState: props
  }, other, {
    children: (0, import_jsx_runtime30.jsx)(PickersMonthButton, {
      ref,
      disabled,
      type: "button",
      role: "radio",
      tabIndex: disabled ? -1 : tabIndex,
      "aria-current": ariaCurrent,
      "aria-checked": selected,
      "aria-label": ariaLabel,
      onClick: (event) => onClick2(event, value),
      onKeyDown: (event) => onKeyDown(event, value),
      onFocus: (event) => onFocus(event, value),
      onBlur: (event) => onBlur(event, value),
      className: classes2.monthButton,
      ownerState: props,
      children
    })
  }));
});

// node_modules/@mui/x-date-pickers/MonthCalendar/monthCalendarClasses.js
init_utils();
function getMonthCalendarUtilityClass(slot) {
  return generateUtilityClass("MuiMonthCalendar", slot);
}
var monthCalendarClasses = generateUtilityClasses("MuiMonthCalendar", ["root"]);

// node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var _excluded18 = ["className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow", "timezone", "gridLabelId"];
var useUtilityClasses15 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getMonthCalendarUtilityClass, classes2);
};
function useMonthCalendarDefaultizedProps(props, name) {
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps({
    props,
    name
  });
  return _extends({
    disableFuture: false,
    disablePast: false
  }, themeProps, {
    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
  });
}
var MonthCalendarRoot = styled_default("div", {
  name: "MuiMonthCalendar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexWrap: "wrap",
  alignContent: "stretch",
  padding: "0 4px",
  width: DIALOG_WIDTH,
  boxSizing: "border-box"
});
var MonthCalendar = React38.forwardRef(function MonthCalendar2(inProps, ref) {
  const props = useMonthCalendarDefaultizedProps(inProps, "MuiMonthCalendar");
  const {
    className,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onChange,
    shouldDisableMonth,
    readOnly,
    disableHighlightToday,
    autoFocus = false,
    onMonthFocus,
    hasFocus,
    onFocusedViewChange,
    monthsPerRow = 3,
    timezone: timezoneProp,
    gridLabelId
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "MonthCalendar",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const now = useNow(timezone);
  const theme = useTheme_default();
  const utils = useUtils();
  const referenceDate = React38.useMemo(
    () => singleItemValueManager.getInitialReferenceValue({
      value,
      utils,
      props,
      timezone,
      referenceDate: referenceDateProp,
      granularity: SECTION_TYPE_GRANULARITY.month
    }),
    []
  );
  const ownerState = props;
  const classes2 = useUtilityClasses15(ownerState);
  const todayMonth = React38.useMemo(() => utils.getMonth(now), [utils, now]);
  const selectedMonth = React38.useMemo(() => {
    if (value != null) {
      return utils.getMonth(value);
    }
    if (disableHighlightToday) {
      return null;
    }
    return utils.getMonth(referenceDate);
  }, [value, utils, disableHighlightToday, referenceDate]);
  const [focusedMonth, setFocusedMonth] = React38.useState(() => selectedMonth || todayMonth);
  const [internalHasFocus, setInternalHasFocus] = useControlled({
    name: "MonthCalendar",
    state: "hasFocus",
    controlled: hasFocus,
    default: autoFocus != null ? autoFocus : false
  });
  const changeHasFocus = useEventCallback_default((newHasFocus) => {
    setInternalHasFocus(newHasFocus);
    if (onFocusedViewChange) {
      onFocusedViewChange(newHasFocus);
    }
  });
  const isMonthDisabled = React38.useCallback((dateToValidate) => {
    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
    const monthToValidate = utils.startOfMonth(dateToValidate);
    if (utils.isBefore(monthToValidate, firstEnabledMonth)) {
      return true;
    }
    if (utils.isAfter(monthToValidate, lastEnabledMonth)) {
      return true;
    }
    if (!shouldDisableMonth) {
      return false;
    }
    return shouldDisableMonth(monthToValidate);
  }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableMonth, utils]);
  const handleMonthSelection = useEventCallback_default((event, month) => {
    if (readOnly) {
      return;
    }
    const newDate = utils.setMonth(value != null ? value : referenceDate, month);
    handleValueChange(newDate);
  });
  const focusMonth = useEventCallback_default((month) => {
    if (!isMonthDisabled(utils.setMonth(value != null ? value : referenceDate, month))) {
      setFocusedMonth(month);
      changeHasFocus(true);
      if (onMonthFocus) {
        onMonthFocus(month);
      }
    }
  });
  React38.useEffect(() => {
    setFocusedMonth((prevFocusedMonth) => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
  }, [selectedMonth]);
  const handleKeyDown = useEventCallback_default((event, month) => {
    const monthsInYear = 12;
    const monthsInRow = 3;
    switch (event.key) {
      case "ArrowUp":
        focusMonth((monthsInYear + month - monthsInRow) % monthsInYear);
        event.preventDefault();
        break;
      case "ArrowDown":
        focusMonth((monthsInYear + month + monthsInRow) % monthsInYear);
        event.preventDefault();
        break;
      case "ArrowLeft":
        focusMonth((monthsInYear + month + (theme.direction === "ltr" ? -1 : 1)) % monthsInYear);
        event.preventDefault();
        break;
      case "ArrowRight":
        focusMonth((monthsInYear + month + (theme.direction === "ltr" ? 1 : -1)) % monthsInYear);
        event.preventDefault();
        break;
      default:
        break;
    }
  });
  const handleMonthFocus = useEventCallback_default((event, month) => {
    focusMonth(month);
  });
  const handleMonthBlur = useEventCallback_default((event, month) => {
    if (focusedMonth === month) {
      changeHasFocus(false);
    }
  });
  return (0, import_jsx_runtime31.jsx)(MonthCalendarRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState,
    role: "radiogroup",
    "aria-labelledby": gridLabelId
  }, other, {
    children: getMonthsInYear(utils, value != null ? value : referenceDate).map((month) => {
      const monthNumber = utils.getMonth(month);
      const monthText = utils.format(month, "monthShort");
      const monthLabel = utils.format(month, "month");
      const isSelected = monthNumber === selectedMonth;
      const isDisabled = disabled || isMonthDisabled(month);
      return (0, import_jsx_runtime31.jsx)(PickersMonth, {
        selected: isSelected,
        value: monthNumber,
        onClick: handleMonthSelection,
        onKeyDown: handleKeyDown,
        autoFocus: internalHasFocus && monthNumber === focusedMonth,
        disabled: isDisabled,
        tabIndex: monthNumber === focusedMonth ? 0 : -1,
        onFocus: handleMonthFocus,
        onBlur: handleMonthBlur,
        "aria-current": todayMonth === monthNumber ? "date" : void 0,
        "aria-label": monthLabel,
        monthsPerRow,
        children: monthText
      }, monthText);
    })
  }));
});
true ? MonthCalendar.propTypes = {
  autoFocus: import_prop_types9.default.bool,
  classes: import_prop_types9.default.object,
  className: import_prop_types9.default.string,
  defaultValue: import_prop_types9.default.any,
  disabled: import_prop_types9.default.bool,
  disableFuture: import_prop_types9.default.bool,
  disableHighlightToday: import_prop_types9.default.bool,
  disablePast: import_prop_types9.default.bool,
  gridLabelId: import_prop_types9.default.string,
  hasFocus: import_prop_types9.default.bool,
  maxDate: import_prop_types9.default.any,
  minDate: import_prop_types9.default.any,
  monthsPerRow: import_prop_types9.default.oneOf([3, 4]),
  onChange: import_prop_types9.default.func,
  onFocusedViewChange: import_prop_types9.default.func,
  onMonthFocus: import_prop_types9.default.func,
  readOnly: import_prop_types9.default.bool,
  referenceDate: import_prop_types9.default.any,
  shouldDisableMonth: import_prop_types9.default.func,
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
  timezone: import_prop_types9.default.string,
  value: import_prop_types9.default.any
} : void 0;

// node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React40 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.js
init_objectWithoutPropertiesLoose();
init_extends();
var React39 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/YearCalendar/pickersYearClasses.js
init_utils();
function getPickersYearUtilityClass(slot) {
  return generateUtilityClass("MuiPickersYear", slot);
}
var pickersYearClasses = generateUtilityClasses("MuiPickersYear", ["root", "yearButton", "selected", "disabled"]);

// node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var _excluded19 = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "yearsPerRow"];
var useUtilityClasses16 = (ownerState) => {
  const {
    disabled,
    selected,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    yearButton: ["yearButton", disabled && "disabled", selected && "selected"]
  };
  return composeClasses(slots, getPickersYearUtilityClass, classes2);
};
var PickersYearRoot = styled_default("div", {
  name: "MuiPickersYear",
  slot: "Root",
  overridesResolver: (_, styles) => [styles.root]
})(({
  ownerState
}) => ({
  flexBasis: ownerState.yearsPerRow === 3 ? "33.3%" : "25%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center"
}));
var PickersYearButton = styled_default("button", {
  name: "MuiPickersYear",
  slot: "YearButton",
  overridesResolver: (_, styles) => [styles.yearButton, {
    [`&.${pickersYearClasses.disabled}`]: styles.disabled
  }, {
    [`&.${pickersYearClasses.selected}`]: styles.selected
  }]
})(({
  theme
}) => _extends({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, theme.typography.subtitle1, {
  margin: "6px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.action.active, theme.palette.action.focusOpacity)
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${pickersYearClasses.disabled}`]: {
    color: (theme.vars || theme).palette.text.secondary
  },
  [`&.${pickersYearClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText,
    backgroundColor: (theme.vars || theme).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  }
}));
var PickersYear = React39.memo(function PickersYear2(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersYear"
  });
  const {
    autoFocus,
    className,
    children,
    disabled,
    selected,
    value,
    tabIndex,
    onClick: onClick2,
    onKeyDown,
    onFocus,
    onBlur,
    "aria-current": ariaCurrent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const ref = React39.useRef(null);
  const classes2 = useUtilityClasses16(props);
  React39.useEffect(() => {
    if (autoFocus) {
      ref.current.focus();
    }
  }, [autoFocus]);
  return (0, import_jsx_runtime32.jsx)(PickersYearRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: props
  }, other, {
    children: (0, import_jsx_runtime32.jsx)(PickersYearButton, {
      ref,
      disabled,
      type: "button",
      role: "radio",
      tabIndex: disabled ? -1 : tabIndex,
      "aria-current": ariaCurrent,
      "aria-checked": selected,
      onClick: (event) => onClick2(event, value),
      onKeyDown: (event) => onKeyDown(event, value),
      onFocus: (event) => onFocus(event, value),
      onBlur: (event) => onBlur(event, value),
      className: classes2.yearButton,
      ownerState: props,
      children
    })
  }));
});

// node_modules/@mui/x-date-pickers/YearCalendar/yearCalendarClasses.js
init_utils();
function getYearCalendarUtilityClass(slot) {
  return generateUtilityClass("MuiYearCalendar", slot);
}
var yearCalendarClasses = generateUtilityClasses("MuiYearCalendar", ["root"]);

// node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var _excluded20 = ["autoFocus", "className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsPerRow", "timezone", "gridLabelId"];
var useUtilityClasses17 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getYearCalendarUtilityClass, classes2);
};
function useYearCalendarDefaultizedProps(props, name) {
  var _themeProps$yearsPerR;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps({
    props,
    name
  });
  return _extends({
    disablePast: false,
    disableFuture: false
  }, themeProps, {
    yearsPerRow: (_themeProps$yearsPerR = themeProps.yearsPerRow) != null ? _themeProps$yearsPerR : 3,
    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
  });
}
var YearCalendarRoot = styled_default("div", {
  name: "MuiYearCalendar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "row",
  flexWrap: "wrap",
  overflowY: "auto",
  height: "100%",
  padding: "0 4px",
  width: DIALOG_WIDTH,
  maxHeight: MAX_CALENDAR_HEIGHT,
  boxSizing: "border-box",
  position: "relative"
});
var YearCalendar = React40.forwardRef(function YearCalendar2(inProps, ref) {
  const props = useYearCalendarDefaultizedProps(inProps, "MuiYearCalendar");
  const {
    autoFocus,
    className,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onChange,
    readOnly,
    shouldDisableYear,
    disableHighlightToday,
    onYearFocus,
    hasFocus,
    onFocusedViewChange,
    yearsPerRow,
    timezone: timezoneProp,
    gridLabelId
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "YearCalendar",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const now = useNow(timezone);
  const theme = useTheme_default();
  const utils = useUtils();
  const referenceDate = React40.useMemo(
    () => singleItemValueManager.getInitialReferenceValue({
      value,
      utils,
      props,
      timezone,
      referenceDate: referenceDateProp,
      granularity: SECTION_TYPE_GRANULARITY.year
    }),
    []
  );
  const ownerState = props;
  const classes2 = useUtilityClasses17(ownerState);
  const todayYear = React40.useMemo(() => utils.getYear(now), [utils, now]);
  const selectedYear = React40.useMemo(() => {
    if (value != null) {
      return utils.getYear(value);
    }
    if (disableHighlightToday) {
      return null;
    }
    return utils.getYear(referenceDate);
  }, [value, utils, disableHighlightToday, referenceDate]);
  const [focusedYear, setFocusedYear] = React40.useState(() => selectedYear || todayYear);
  const [internalHasFocus, setInternalHasFocus] = useControlled({
    name: "YearCalendar",
    state: "hasFocus",
    controlled: hasFocus,
    default: autoFocus != null ? autoFocus : false
  });
  const changeHasFocus = useEventCallback_default((newHasFocus) => {
    setInternalHasFocus(newHasFocus);
    if (onFocusedViewChange) {
      onFocusedViewChange(newHasFocus);
    }
  });
  const isYearDisabled = React40.useCallback((dateToValidate) => {
    if (disablePast && utils.isBeforeYear(dateToValidate, now)) {
      return true;
    }
    if (disableFuture && utils.isAfterYear(dateToValidate, now)) {
      return true;
    }
    if (minDate && utils.isBeforeYear(dateToValidate, minDate)) {
      return true;
    }
    if (maxDate && utils.isAfterYear(dateToValidate, maxDate)) {
      return true;
    }
    if (!shouldDisableYear) {
      return false;
    }
    const yearToValidate = utils.startOfYear(dateToValidate);
    return shouldDisableYear(yearToValidate);
  }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableYear, utils]);
  const handleYearSelection = useEventCallback_default((event, year) => {
    if (readOnly) {
      return;
    }
    const newDate = utils.setYear(value != null ? value : referenceDate, year);
    handleValueChange(newDate);
  });
  const focusYear = useEventCallback_default((year) => {
    if (!isYearDisabled(utils.setYear(value != null ? value : referenceDate, year))) {
      setFocusedYear(year);
      changeHasFocus(true);
      onYearFocus == null || onYearFocus(year);
    }
  });
  React40.useEffect(() => {
    setFocusedYear((prevFocusedYear) => selectedYear !== null && prevFocusedYear !== selectedYear ? selectedYear : prevFocusedYear);
  }, [selectedYear]);
  const handleKeyDown = useEventCallback_default((event, year) => {
    switch (event.key) {
      case "ArrowUp":
        focusYear(year - yearsPerRow);
        event.preventDefault();
        break;
      case "ArrowDown":
        focusYear(year + yearsPerRow);
        event.preventDefault();
        break;
      case "ArrowLeft":
        focusYear(year + (theme.direction === "ltr" ? -1 : 1));
        event.preventDefault();
        break;
      case "ArrowRight":
        focusYear(year + (theme.direction === "ltr" ? 1 : -1));
        event.preventDefault();
        break;
      default:
        break;
    }
  });
  const handleYearFocus = useEventCallback_default((event, year) => {
    focusYear(year);
  });
  const handleYearBlur = useEventCallback_default((event, year) => {
    if (focusedYear === year) {
      changeHasFocus(false);
    }
  });
  const scrollerRef = React40.useRef(null);
  const handleRef = useForkRef(ref, scrollerRef);
  React40.useEffect(() => {
    if (autoFocus || scrollerRef.current === null) {
      return;
    }
    const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');
    if (!tabbableButton) {
      return;
    }
    const offsetHeight = tabbableButton.offsetHeight;
    const offsetTop = tabbableButton.offsetTop;
    const clientHeight = scrollerRef.current.clientHeight;
    const scrollTop = scrollerRef.current.scrollTop;
    const elementBottom = offsetTop + offsetHeight;
    if (offsetHeight > clientHeight || offsetTop < scrollTop) {
      return;
    }
    scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
  }, [autoFocus]);
  return (0, import_jsx_runtime33.jsx)(YearCalendarRoot, _extends({
    ref: handleRef,
    className: clsx_default(classes2.root, className),
    ownerState,
    role: "radiogroup",
    "aria-labelledby": gridLabelId
  }, other, {
    children: utils.getYearRange(minDate, maxDate).map((year) => {
      const yearNumber = utils.getYear(year);
      const isSelected = yearNumber === selectedYear;
      const isDisabled = disabled || isYearDisabled(year);
      return (0, import_jsx_runtime33.jsx)(PickersYear, {
        selected: isSelected,
        value: yearNumber,
        onClick: handleYearSelection,
        onKeyDown: handleKeyDown,
        autoFocus: internalHasFocus && yearNumber === focusedYear,
        disabled: isDisabled,
        tabIndex: yearNumber === focusedYear ? 0 : -1,
        onFocus: handleYearFocus,
        onBlur: handleYearBlur,
        "aria-current": todayYear === yearNumber ? "date" : void 0,
        yearsPerRow,
        children: utils.format(year, "year")
      }, utils.format(year, "year"));
    })
  }));
});
true ? YearCalendar.propTypes = {
  autoFocus: import_prop_types10.default.bool,
  classes: import_prop_types10.default.object,
  className: import_prop_types10.default.string,
  defaultValue: import_prop_types10.default.any,
  disabled: import_prop_types10.default.bool,
  disableFuture: import_prop_types10.default.bool,
  disableHighlightToday: import_prop_types10.default.bool,
  disablePast: import_prop_types10.default.bool,
  gridLabelId: import_prop_types10.default.string,
  hasFocus: import_prop_types10.default.bool,
  maxDate: import_prop_types10.default.any,
  minDate: import_prop_types10.default.any,
  onChange: import_prop_types10.default.func,
  onFocusedViewChange: import_prop_types10.default.func,
  onYearFocus: import_prop_types10.default.func,
  readOnly: import_prop_types10.default.bool,
  referenceDate: import_prop_types10.default.any,
  shouldDisableYear: import_prop_types10.default.func,
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object]),
  timezone: import_prop_types10.default.string,
  value: import_prop_types10.default.any,
  yearsPerRow: import_prop_types10.default.oneOf([3, 4])
} : void 0;

// node_modules/@mui/x-date-pickers/PickersCalendarHeader/pickersCalendarHeaderClasses.js
init_utils();
var getPickersCalendarHeaderUtilityClass = (slot) => generateUtilityClass("MuiPickersCalendarHeader", slot);
var pickersCalendarHeaderClasses = generateUtilityClasses("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);

// node_modules/@mui/x-date-pickers/PickersCalendarHeader/PickersCalendarHeader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React41 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var _excluded21 = ["slots", "slotProps", "components", "componentsProps", "currentMonth", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onMonthChange", "onViewChange", "view", "reduceAnimations", "views", "labelId", "className", "timezone"];
var _excluded26 = ["ownerState"];
var useUtilityClasses18 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    labelContainer: ["labelContainer"],
    label: ["label"],
    switchViewButton: ["switchViewButton"],
    switchViewIcon: ["switchViewIcon"]
  };
  return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes2);
};
var PickersCalendarHeaderRoot = styled_default("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})({
  display: "flex",
  alignItems: "center",
  marginTop: 16,
  marginBottom: 8,
  paddingLeft: 24,
  paddingRight: 12,
  maxHeight: 30,
  minHeight: 30
});
var PickersCalendarHeaderLabelContainer = styled_default("div", {
  name: "MuiPickersCalendarHeader",
  slot: "LabelContainer",
  overridesResolver: (_, styles) => styles.labelContainer
})(({
  theme
}) => _extends({
  display: "flex",
  overflow: "hidden",
  alignItems: "center",
  cursor: "pointer",
  marginRight: "auto"
}, theme.typography.body1, {
  fontWeight: theme.typography.fontWeightMedium
}));
var PickersCalendarHeaderLabel = styled_default("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Label",
  overridesResolver: (_, styles) => styles.label
})({
  marginRight: 6
});
var PickersCalendarHeaderSwitchViewButton = styled_default(IconButton_default, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewButton",
  overridesResolver: (_, styles) => styles.switchViewButton
})(({
  ownerState
}) => _extends({
  marginRight: "auto"
}, ownerState.view === "year" && {
  [`.${pickersCalendarHeaderClasses.switchViewIcon}`]: {
    transform: "rotate(180deg)"
  }
}));
var PickersCalendarHeaderSwitchViewIcon = styled_default(ArrowDropDownIcon, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewIcon",
  overridesResolver: (_, styles) => styles.switchViewIcon
})(({
  theme
}) => ({
  willChange: "transform",
  transition: theme.transitions.create("transform"),
  transform: "rotate(0deg)"
}));
var PickersCalendarHeader = React41.forwardRef(function PickersCalendarHeader2(inProps, ref) {
  var _ref, _slots$switchViewButt, _ref2, _slots$switchViewIcon;
  const localeText = useLocaleText();
  const utils = useUtils();
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersCalendarHeader"
  });
  const {
    slots,
    slotProps,
    components,
    currentMonth: month,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onMonthChange,
    onViewChange,
    view,
    reduceAnimations,
    views,
    labelId,
    className,
    timezone
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const ownerState = props;
  const classes2 = useUtilityClasses18(props);
  const SwitchViewButton = (_ref = (_slots$switchViewButt = slots == null ? void 0 : slots.switchViewButton) != null ? _slots$switchViewButt : components == null ? void 0 : components.SwitchViewButton) != null ? _ref : PickersCalendarHeaderSwitchViewButton;
  const switchViewButtonProps = useSlotProps({
    elementType: SwitchViewButton,
    externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewButton,
    additionalProps: {
      size: "small",
      "aria-label": localeText.calendarViewSwitchingButtonAriaLabel(view)
    },
    ownerState,
    className: classes2.switchViewButton
  });
  const SwitchViewIcon = (_ref2 = (_slots$switchViewIcon = slots == null ? void 0 : slots.switchViewIcon) != null ? _slots$switchViewIcon : components == null ? void 0 : components.SwitchViewIcon) != null ? _ref2 : PickersCalendarHeaderSwitchViewIcon;
  const _useSlotProps = useSlotProps({
    elementType: SwitchViewIcon,
    externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewIcon,
    ownerState: void 0,
    className: classes2.switchViewIcon
  }), switchViewIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded26);
  const selectNextMonth = () => onMonthChange(utils.addMonths(month, 1), "left");
  const selectPreviousMonth = () => onMonthChange(utils.addMonths(month, -1), "right");
  const isNextMonthDisabled = useNextMonthDisabled(month, {
    disableFuture,
    maxDate,
    timezone
  });
  const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
    disablePast,
    minDate,
    timezone
  });
  const handleToggleView = () => {
    if (views.length === 1 || !onViewChange || disabled) {
      return;
    }
    if (views.length === 2) {
      onViewChange(views.find((el) => el !== view) || views[0]);
    } else {
      const nextIndexToOpen = views.indexOf(view) !== 0 ? 0 : 1;
      onViewChange(views[nextIndexToOpen]);
    }
  };
  if (views.length === 1 && views[0] === "year") {
    return null;
  }
  return (0, import_jsx_runtime35.jsxs)(PickersCalendarHeaderRoot, _extends({}, other, {
    ownerState,
    className: clsx_default(className, classes2.root),
    ref,
    children: [(0, import_jsx_runtime35.jsxs)(PickersCalendarHeaderLabelContainer, {
      role: "presentation",
      onClick: handleToggleView,
      ownerState,
      "aria-live": "polite",
      className: classes2.labelContainer,
      children: [(0, import_jsx_runtime34.jsx)(PickersFadeTransitionGroup, {
        reduceAnimations,
        transKey: utils.format(month, "monthAndYear"),
        children: (0, import_jsx_runtime34.jsx)(PickersCalendarHeaderLabel, {
          id: labelId,
          ownerState,
          className: classes2.label,
          children: utils.format(month, "monthAndYear")
        })
      }), views.length > 1 && !disabled && (0, import_jsx_runtime34.jsx)(SwitchViewButton, _extends({}, switchViewButtonProps, {
        children: (0, import_jsx_runtime34.jsx)(SwitchViewIcon, _extends({}, switchViewIconProps))
      }))]
    }), (0, import_jsx_runtime34.jsx)(Fade_default, {
      in: view === "day",
      children: (0, import_jsx_runtime34.jsx)(PickersArrowSwitcher, {
        slots,
        slotProps,
        onGoToPrevious: selectPreviousMonth,
        isPreviousDisabled: isPreviousMonthDisabled,
        previousLabel: localeText.previousMonth,
        onGoToNext: selectNextMonth,
        isNextDisabled: isNextMonthDisabled,
        nextLabel: localeText.nextMonth
      })
    })]
  }));
});
true ? PickersCalendarHeader.propTypes = {
  classes: import_prop_types11.default.object,
  className: import_prop_types11.default.string,
  components: import_prop_types11.default.object,
  componentsProps: import_prop_types11.default.object,
  currentMonth: import_prop_types11.default.any.isRequired,
  disabled: import_prop_types11.default.bool,
  disableFuture: import_prop_types11.default.bool,
  disablePast: import_prop_types11.default.bool,
  labelId: import_prop_types11.default.string,
  maxDate: import_prop_types11.default.any.isRequired,
  minDate: import_prop_types11.default.any.isRequired,
  onMonthChange: import_prop_types11.default.func.isRequired,
  onViewChange: import_prop_types11.default.func,
  reduceAnimations: import_prop_types11.default.bool.isRequired,
  slotProps: import_prop_types11.default.object,
  slots: import_prop_types11.default.object,
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
  timezone: import_prop_types11.default.string.isRequired,
  view: import_prop_types11.default.oneOf(["day", "month", "year"]).isRequired,
  views: import_prop_types11.default.arrayOf(import_prop_types11.default.oneOf(["day", "month", "year"]).isRequired).isRequired
} : void 0;

// node_modules/@mui/x-date-pickers/internals/components/PickerViewRoot/PickerViewRoot.js
var PickerViewRoot = styled_default("div")({
  overflow: "hidden",
  width: DIALOG_WIDTH,
  maxHeight: VIEW_HEIGHT,
  display: "flex",
  flexDirection: "column",
  margin: "0 auto"
});

// node_modules/@mui/x-date-pickers/DateCalendar/dateCalendarClasses.js
init_utils();
var getDateCalendarUtilityClass = (slot) => generateUtilityClass("MuiDateCalendar", slot);
var dateCalendarClasses = generateUtilityClasses("MuiDateCalendar", ["root", "viewTransitionContainer"]);

// node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var _excluded27 = ["autoFocus", "onViewChange", "value", "defaultValue", "referenceDate", "disableFuture", "disablePast", "defaultCalendarMonth", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "components", "componentsProps", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsPerRow", "monthsPerRow", "timezone"];
var useUtilityClasses19 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    viewTransitionContainer: ["viewTransitionContainer"]
  };
  return composeClasses(slots, getDateCalendarUtilityClass, classes2);
};
function useDateCalendarDefaultizedProps(props, name) {
  var _themeProps$loading, _themeProps$disablePa, _themeProps$disableFu, _themeProps$openTo, _themeProps$views, _themeProps$reduceAni, _themeProps$renderLoa;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const defaultReduceAnimations = useDefaultReduceAnimations();
  const themeProps = useThemeProps({
    props,
    name
  });
  return _extends({}, themeProps, {
    loading: (_themeProps$loading = themeProps.loading) != null ? _themeProps$loading : false,
    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
    openTo: (_themeProps$openTo = themeProps.openTo) != null ? _themeProps$openTo : "day",
    views: (_themeProps$views = themeProps.views) != null ? _themeProps$views : ["year", "day"],
    reduceAnimations: (_themeProps$reduceAni = themeProps.reduceAnimations) != null ? _themeProps$reduceAni : defaultReduceAnimations,
    renderLoading: (_themeProps$renderLoa = themeProps.renderLoading) != null ? _themeProps$renderLoa : () => (0, import_jsx_runtime36.jsx)("span", {
      children: "..."
    }),
    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
  });
}
var DateCalendarRoot = styled_default(PickerViewRoot, {
  name: "MuiDateCalendar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  height: VIEW_HEIGHT
});
var DateCalendarViewTransitionContainer = styled_default(PickersFadeTransitionGroup, {
  name: "MuiDateCalendar",
  slot: "ViewTransitionContainer",
  overridesResolver: (props, styles) => styles.viewTransitionContainer
})({});
var DateCalendar = React42.forwardRef(function DateCalendar2(inProps, ref) {
  var _ref, _slots$calendarHeader, _slotProps$calendarHe;
  const utils = useUtils();
  const id = useId();
  const props = useDateCalendarDefaultizedProps(inProps, "MuiDateCalendar");
  const {
    autoFocus,
    onViewChange,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableFuture,
    disablePast,
    defaultCalendarMonth,
    onChange,
    onYearChange,
    onMonthChange,
    reduceAnimations,
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    view: inView,
    views,
    openTo,
    className,
    disabled,
    readOnly,
    minDate,
    maxDate,
    disableHighlightToday,
    focusedView: inFocusedView,
    onFocusedViewChange,
    showDaysOutsideCurrentMonth,
    fixedWeekNumber,
    dayOfWeekFormatter,
    components,
    componentsProps,
    slots,
    slotProps,
    loading,
    renderLoading,
    displayWeekNumber,
    yearsPerRow,
    monthsPerRow,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "DateCalendar",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const {
    view,
    setView,
    focusedView,
    setFocusedView,
    goToNextView,
    setValueAndGoToNextView
  } = useViews({
    view: inView,
    views,
    openTo,
    onChange: handleValueChange,
    onViewChange,
    autoFocus,
    focusedView: inFocusedView,
    onFocusedViewChange
  });
  const {
    referenceDate,
    calendarState,
    changeFocusedDay,
    changeMonth,
    handleChangeMonth,
    isDateDisabled,
    onMonthSwitchingAnimationEnd
  } = useCalendarState({
    value,
    defaultCalendarMonth,
    referenceDate: referenceDateProp,
    reduceAnimations,
    onMonthChange,
    minDate,
    maxDate,
    shouldDisableDate,
    disablePast,
    disableFuture,
    timezone
  });
  const minDateWithDisabled = disabled && value || minDate;
  const maxDateWithDisabled = disabled && value || maxDate;
  const gridLabelId = `${id}-grid-label`;
  const hasFocus = focusedView !== null;
  const CalendarHeader = (_ref = (_slots$calendarHeader = slots == null ? void 0 : slots.calendarHeader) != null ? _slots$calendarHeader : components == null ? void 0 : components.CalendarHeader) != null ? _ref : PickersCalendarHeader;
  const calendarHeaderProps = useSlotProps({
    elementType: CalendarHeader,
    externalSlotProps: (_slotProps$calendarHe = slotProps == null ? void 0 : slotProps.calendarHeader) != null ? _slotProps$calendarHe : componentsProps == null ? void 0 : componentsProps.calendarHeader,
    additionalProps: {
      views,
      view,
      currentMonth: calendarState.currentMonth,
      onViewChange: setView,
      onMonthChange: (newMonth, direction) => handleChangeMonth({
        newMonth,
        direction
      }),
      minDate: minDateWithDisabled,
      maxDate: maxDateWithDisabled,
      disabled,
      disablePast,
      disableFuture,
      reduceAnimations,
      timezone,
      labelId: gridLabelId,
      slots,
      slotProps
    },
    ownerState: props
  });
  const handleDateMonthChange = useEventCallback_default((newDate) => {
    const startOfMonth = utils.startOfMonth(newDate);
    const endOfMonth = utils.endOfMonth(newDate);
    const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
      utils,
      date: newDate,
      minDate: utils.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
      maxDate: utils.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
      disablePast,
      disableFuture,
      isDateDisabled,
      timezone
    }) : newDate;
    if (closestEnabledDate) {
      setValueAndGoToNextView(closestEnabledDate, "finish");
      onMonthChange == null || onMonthChange(startOfMonth);
    } else {
      goToNextView();
      changeMonth(startOfMonth);
    }
    changeFocusedDay(closestEnabledDate, true);
  });
  const handleDateYearChange = useEventCallback_default((newDate) => {
    const startOfYear = utils.startOfYear(newDate);
    const endOfYear = utils.endOfYear(newDate);
    const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
      utils,
      date: newDate,
      minDate: utils.isBefore(minDate, startOfYear) ? startOfYear : minDate,
      maxDate: utils.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
      disablePast,
      disableFuture,
      isDateDisabled,
      timezone
    }) : newDate;
    if (closestEnabledDate) {
      setValueAndGoToNextView(closestEnabledDate, "finish");
      onYearChange == null || onYearChange(closestEnabledDate);
    } else {
      goToNextView();
      changeMonth(startOfYear);
    }
    changeFocusedDay(closestEnabledDate, true);
  });
  const handleSelectedDayChange = useEventCallback_default((day) => {
    if (day) {
      return handleValueChange(mergeDateAndTime(utils, day, value != null ? value : referenceDate), "finish", view);
    }
    return handleValueChange(day, "finish", view);
  });
  React42.useEffect(() => {
    if (value != null && utils.isValid(value)) {
      changeMonth(value);
    }
  }, [value]);
  const ownerState = props;
  const classes2 = useUtilityClasses19(ownerState);
  const baseDateValidationProps = {
    disablePast,
    disableFuture,
    maxDate,
    minDate
  };
  const commonViewProps = {
    disableHighlightToday,
    readOnly,
    disabled,
    timezone,
    gridLabelId
  };
  const prevOpenViewRef = React42.useRef(view);
  React42.useEffect(() => {
    if (prevOpenViewRef.current === view) {
      return;
    }
    if (focusedView === prevOpenViewRef.current) {
      setFocusedView(view, true);
    }
    prevOpenViewRef.current = view;
  }, [focusedView, setFocusedView, view]);
  const selectedDays = React42.useMemo(() => [value], [value]);
  return (0, import_jsx_runtime37.jsxs)(DateCalendarRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime36.jsx)(CalendarHeader, _extends({}, calendarHeaderProps)), (0, import_jsx_runtime36.jsx)(DateCalendarViewTransitionContainer, {
      reduceAnimations,
      className: classes2.viewTransitionContainer,
      transKey: view,
      ownerState,
      children: (0, import_jsx_runtime37.jsxs)("div", {
        children: [view === "year" && (0, import_jsx_runtime36.jsx)(YearCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
          value,
          onChange: handleDateYearChange,
          shouldDisableYear,
          hasFocus,
          onFocusedViewChange: (isViewFocused) => setFocusedView("year", isViewFocused),
          yearsPerRow,
          referenceDate
        })), view === "month" && (0, import_jsx_runtime36.jsx)(MonthCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
          hasFocus,
          className,
          value,
          onChange: handleDateMonthChange,
          shouldDisableMonth,
          onFocusedViewChange: (isViewFocused) => setFocusedView("month", isViewFocused),
          monthsPerRow,
          referenceDate
        })), view === "day" && (0, import_jsx_runtime36.jsx)(DayCalendar, _extends({}, calendarState, baseDateValidationProps, commonViewProps, {
          onMonthSwitchingAnimationEnd,
          onFocusedDayChange: changeFocusedDay,
          reduceAnimations,
          selectedDays,
          onSelectedDaysChange: handleSelectedDayChange,
          shouldDisableDate,
          shouldDisableMonth,
          shouldDisableYear,
          hasFocus,
          onFocusedViewChange: (isViewFocused) => setFocusedView("day", isViewFocused),
          showDaysOutsideCurrentMonth,
          fixedWeekNumber,
          dayOfWeekFormatter,
          displayWeekNumber,
          components,
          componentsProps,
          slots,
          slotProps,
          loading,
          renderLoading
        }))]
      })
    })]
  }));
});
true ? DateCalendar.propTypes = {
  autoFocus: import_prop_types12.default.bool,
  classes: import_prop_types12.default.object,
  className: import_prop_types12.default.string,
  components: import_prop_types12.default.object,
  componentsProps: import_prop_types12.default.object,
  dayOfWeekFormatter: import_prop_types12.default.func,
  defaultCalendarMonth: import_prop_types12.default.any,
  defaultValue: import_prop_types12.default.any,
  disabled: import_prop_types12.default.bool,
  disableFuture: import_prop_types12.default.bool,
  disableHighlightToday: import_prop_types12.default.bool,
  disablePast: import_prop_types12.default.bool,
  displayWeekNumber: import_prop_types12.default.bool,
  fixedWeekNumber: import_prop_types12.default.number,
  focusedView: import_prop_types12.default.oneOf(["day", "month", "year"]),
  loading: import_prop_types12.default.bool,
  maxDate: import_prop_types12.default.any,
  minDate: import_prop_types12.default.any,
  monthsPerRow: import_prop_types12.default.oneOf([3, 4]),
  onChange: import_prop_types12.default.func,
  onFocusedViewChange: import_prop_types12.default.func,
  onMonthChange: import_prop_types12.default.func,
  onViewChange: import_prop_types12.default.func,
  onYearChange: import_prop_types12.default.func,
  openTo: import_prop_types12.default.oneOf(["day", "month", "year"]),
  readOnly: import_prop_types12.default.bool,
  reduceAnimations: import_prop_types12.default.bool,
  referenceDate: import_prop_types12.default.any,
  renderLoading: import_prop_types12.default.func,
  shouldDisableDate: import_prop_types12.default.func,
  shouldDisableMonth: import_prop_types12.default.func,
  shouldDisableYear: import_prop_types12.default.func,
  showDaysOutsideCurrentMonth: import_prop_types12.default.bool,
  slotProps: import_prop_types12.default.object,
  slots: import_prop_types12.default.object,
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  timezone: import_prop_types12.default.string,
  value: import_prop_types12.default.any,
  view: import_prop_types12.default.oneOf(["day", "month", "year"]),
  views: import_prop_types12.default.arrayOf(import_prop_types12.default.oneOf(["day", "month", "year"]).isRequired),
  yearsPerRow: import_prop_types12.default.oneOf([3, 4])
} : void 0;

// node_modules/@mui/x-date-pickers/dateViewRenderers/dateViewRenderers.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var renderDateViewCalendar = ({
  view,
  onViewChange,
  views,
  focusedView,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minDate,
  maxDate,
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  reduceAnimations,
  onMonthChange,
  monthsPerRow,
  onYearChange,
  yearsPerRow,
  defaultCalendarMonth,
  components,
  componentsProps,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  sx,
  autoFocus,
  fixedWeekNumber,
  displayWeekNumber,
  timezone
}) => (0, import_jsx_runtime38.jsx)(DateCalendar, {
  view,
  onViewChange,
  views: views.filter(isDatePickerView),
  focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minDate,
  maxDate,
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  reduceAnimations,
  onMonthChange,
  monthsPerRow,
  onYearChange,
  yearsPerRow,
  defaultCalendarMonth,
  components,
  componentsProps,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  sx,
  autoFocus,
  fixedWeekNumber,
  displayWeekNumber,
  timezone
});

// node_modules/@mui/x-date-pickers/dateTimeViewRenderers/dateTimeViewRenderers.js
init_extends();
var React54 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js
init_extends();
init_objectWithoutPropertiesLoose();
var React46 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
init_useEventCallback();
init_composeClasses();

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getMultiSectionDigitalClockUtilityClass(slot) {
  return generateUtilityClass("MuiMultiSectionDigitalClock", slot);
}
var multiSectionDigitalClockClasses = generateUtilityClasses("MuiMultiSectionDigitalClock", ["root"]);

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.js
init_extends();
init_objectWithoutPropertiesLoose();
var React44 = __toESM(require_react());
init_composeClasses();
init_useForkRef();

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockSectionClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getMultiSectionDigitalClockSectionUtilityClass(slot) {
  return generateUtilityClass("MuiMultiSectionDigitalClockSection", slot);
}
var multiSectionDigitalClockSectionClasses = generateUtilityClasses("MuiMultiSectionDigitalClockSection", ["root", "item"]);

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var _excluded28 = ["autoFocus", "onChange", "className", "disabled", "readOnly", "items", "active", "slots", "slotProps", "skipDisabled"];
var useUtilityClasses20 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    item: ["item"]
  };
  return composeClasses(slots, getMultiSectionDigitalClockSectionUtilityClass, classes2);
};
var MultiSectionDigitalClockSectionRoot = styled_default(MenuList_default, {
  name: "MuiMultiSectionDigitalClockSection",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  theme,
  ownerState
}) => ({
  maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
  width: 56,
  padding: 0,
  overflow: "hidden",
  "@media (prefers-reduced-motion: no-preference)": {
    scrollBehavior: ownerState.alreadyRendered ? "smooth" : "auto"
  },
  "@media (pointer: fine)": {
    "&:hover": {
      overflowY: "auto"
    }
  },
  "@media (pointer: none), (pointer: coarse)": {
    overflowY: "auto"
  },
  "&:not(:first-of-type)": {
    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
  },
  "&:after": {
    display: "block",
    content: '""',
    height: "calc(100% - 40px - 6px)"
  }
}));
var MultiSectionDigitalClockSectionItem = styled_default(MenuItem_default, {
  name: "MuiMultiSectionDigitalClockSection",
  slot: "Item",
  overridesResolver: (_, styles) => styles.item
})(({
  theme
}) => ({
  padding: 8,
  margin: "2px 4px",
  width: MULTI_SECTION_CLOCK_SECTION_WIDTH,
  justifyContent: "center",
  "&:first-of-type": {
    marginTop: 4
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
  },
  "&.Mui-selected": {
    backgroundColor: (theme.vars || theme).palette.primary.main,
    color: (theme.vars || theme).palette.primary.contrastText,
    "&:focus-visible, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  "&.Mui-focusVisible": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
  }
}));
var MultiSectionDigitalClockSection = React44.forwardRef(function MultiSectionDigitalClockSection2(inProps, ref) {
  var _slots$digitalClockSe;
  const containerRef = React44.useRef(null);
  const handleRef = useForkRef(ref, containerRef);
  const previousActive = React44.useRef(null);
  const props = useThemeProps({
    props: inProps,
    name: "MuiMultiSectionDigitalClockSection"
  });
  const {
    autoFocus,
    onChange,
    className,
    disabled,
    readOnly,
    items,
    active,
    slots,
    slotProps,
    skipDisabled
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const ownerState = React44.useMemo(() => _extends({}, props, {
    alreadyRendered: !!containerRef.current
  }), [props]);
  const classes2 = useUtilityClasses20(ownerState);
  const DigitalClockSectionItem = (_slots$digitalClockSe = slots == null ? void 0 : slots.digitalClockSectionItem) != null ? _slots$digitalClockSe : MultiSectionDigitalClockSectionItem;
  React44.useEffect(() => {
    if (containerRef.current === null) {
      return;
    }
    const activeItem = containerRef.current.querySelector('[role="option"][aria-selected="true"]');
    if (active && autoFocus && activeItem) {
      activeItem.focus();
    }
    if (!activeItem || previousActive.current === activeItem) {
      return;
    }
    previousActive.current = activeItem;
    const offsetTop = activeItem.offsetTop;
    containerRef.current.scrollTop = offsetTop - 4;
  });
  return (0, import_jsx_runtime39.jsx)(MultiSectionDigitalClockSectionRoot, _extends({
    ref: handleRef,
    className: clsx_default(classes2.root, className),
    ownerState,
    autoFocusItem: autoFocus && active,
    role: "listbox"
  }, other, {
    children: items.map((option) => {
      var _option$isDisabled, _option$isDisabled2;
      if (skipDisabled && (_option$isDisabled = option.isDisabled) != null && _option$isDisabled.call(option, option.value)) {
        return null;
      }
      const isSelected = option.isSelected(option.value);
      return (0, import_jsx_runtime39.jsx)(DigitalClockSectionItem, _extends({
        onClick: () => !readOnly && onChange(option.value),
        selected: isSelected,
        disabled: disabled || ((_option$isDisabled2 = option.isDisabled) == null ? void 0 : _option$isDisabled2.call(option, option.value)),
        disableRipple: readOnly,
        role: "option",
        "aria-disabled": readOnly,
        "aria-label": option.ariaLabel,
        "aria-selected": isSelected,
        className: classes2.item
      }, slotProps == null ? void 0 : slotProps.digitalClockSectionItem, {
        children: option.label
      }), option.label);
    })
  }));
});

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.utils.js
var getHourSectionOptions = ({
  now,
  value,
  utils,
  ampm,
  isDisabled,
  resolveAriaLabel,
  timeStep
}) => {
  const currentHours = value ? utils.getHours(value) : null;
  const result = [];
  const isSelected = (hour) => {
    if (currentHours === null) {
      return false;
    }
    if (ampm) {
      if (hour === 12) {
        return currentHours === 12 || currentHours === 0;
      }
      return currentHours === hour || currentHours - 12 === hour;
    }
    return currentHours === hour;
  };
  const endHour = ampm ? 11 : 23;
  for (let hour = 0; hour <= endHour; hour += timeStep) {
    let label = utils.format(utils.setHours(now, hour), ampm ? "hours12h" : "hours24h");
    const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
    label = utils.formatNumber(label);
    result.push({
      value: hour,
      label,
      isSelected,
      isDisabled,
      ariaLabel
    });
  }
  return result;
};
var getTimeSectionOptions = ({
  value,
  utils,
  isDisabled,
  timeStep,
  resolveLabel,
  resolveAriaLabel,
  hasValue = true
}) => {
  const isSelected = (timeValue) => {
    if (value === null) {
      return false;
    }
    return hasValue && value === timeValue;
  };
  return [...Array.from({
    length: Math.ceil(60 / timeStep)
  }, (_, index) => {
    const timeValue = timeStep * index;
    return {
      value: timeValue,
      label: utils.formatNumber(resolveLabel(timeValue)),
      isDisabled,
      isSelected,
      ariaLabel: resolveAriaLabel(timeValue.toString())
    };
  })];
};

// node_modules/@mui/x-date-pickers/internals/hooks/useClockReferenceDate.js
var React45 = __toESM(require_react());
var useClockReferenceDate = ({
  value,
  referenceDate: referenceDateProp,
  utils,
  props,
  timezone
}) => {
  const referenceDate = React45.useMemo(
    () => singleItemValueManager.getInitialReferenceValue({
      value,
      utils,
      props,
      referenceDate: referenceDateProp,
      granularity: SECTION_TYPE_GRANULARITY.day,
      timezone,
      getTodayDate: () => getTodayDate(utils, timezone, "date")
    }),
    []
  );
  return value != null ? value : referenceDate;
};

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var _excluded29 = ["ampm", "timeSteps", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "skipDisabled", "timezone"];
var useUtilityClasses21 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes2);
};
var MultiSectionDigitalClockRoot = styled_default(PickerViewRoot, {
  name: "MuiMultiSectionDigitalClock",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  theme
}) => ({
  display: "flex",
  flexDirection: "row",
  width: "100%",
  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
}));
var MultiSectionDigitalClock = React46.forwardRef(function MultiSectionDigitalClock2(inProps, ref) {
  const utils = useUtils();
  const props = useThemeProps({
    props: inProps,
    name: "MuiMultiSectionDigitalClock"
  });
  const {
    ampm = utils.is12HourCycleInCurrentLocale(),
    timeSteps: inTimeSteps,
    autoFocus,
    components,
    componentsProps,
    slots,
    slotProps,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableIgnoringDatePartForTimeValidation = false,
    maxTime,
    minTime,
    disableFuture,
    disablePast,
    minutesStep = 1,
    shouldDisableClock,
    shouldDisableTime,
    onChange,
    view: inView,
    views: inViews = ["hours", "minutes"],
    openTo,
    onViewChange,
    focusedView: inFocusedView,
    onFocusedViewChange,
    className,
    disabled,
    readOnly,
    skipDisabled = false,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const {
    value,
    handleValueChange: handleRawValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "MultiSectionDigitalClock",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const localeText = useLocaleText();
  const now = useNow(timezone);
  const timeSteps = React46.useMemo(() => _extends({
    hours: 1,
    minutes: 5,
    seconds: 5
  }, inTimeSteps), [inTimeSteps]);
  const valueOrReferenceDate = useClockReferenceDate({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  });
  const handleValueChange = useEventCallback_default((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));
  const views = React46.useMemo(() => {
    if (!ampm || !inViews.includes("hours")) {
      return inViews;
    }
    return inViews.includes("meridiem") ? inViews : [...inViews, "meridiem"];
  }, [ampm, inViews]);
  const {
    view,
    setValueAndGoToNextView,
    focusedView
  } = useViews({
    view: inView,
    views,
    openTo,
    onViewChange,
    onChange: handleValueChange,
    focusedView: inFocusedView,
    onFocusedViewChange
  });
  const handleMeridiemValueChange = useEventCallback_default((newValue) => {
    setValueAndGoToNextView(newValue, "finish", "meridiem");
  });
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, "finish");
  const isTimeDisabled = React46.useCallback((rawValue, viewType) => {
    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
    const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
    const containsValidTime = ({
      start,
      end
    }) => {
      if (minTime && isAfter(minTime, end)) {
        return false;
      }
      if (maxTime && isAfter(start, maxTime)) {
        return false;
      }
      if (disableFuture && isAfter(start, now)) {
        return false;
      }
      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {
        return false;
      }
      return true;
    };
    const isValidValue = (timeValue, step = 1) => {
      if (timeValue % step !== 0) {
        return false;
      }
      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
        return false;
      }
      if (shouldDisableTime) {
        switch (viewType) {
          case "hours":
            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
          case "minutes":
            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
          case "seconds":
            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
          default:
            return false;
        }
      }
      return true;
    };
    switch (viewType) {
      case "hours": {
        const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
        const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
        const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
        const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(valueWithMeridiem);
      }
      case "minutes": {
        const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
        const start = utils.setSeconds(dateWithNewMinutes, 0);
        const end = utils.setSeconds(dateWithNewMinutes, 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue, minutesStep);
      }
      case "seconds": {
        const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
        const start = dateWithNewSeconds;
        const end = dateWithNewSeconds;
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue);
      }
      default:
        throw new Error("not supported");
    }
  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);
  const buildViewProps = React46.useCallback((viewToBuild) => {
    switch (viewToBuild) {
      case "hours": {
        return {
          onChange: (hours) => {
            const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);
            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), "finish", "hours");
          },
          items: getHourSectionOptions({
            now,
            value,
            ampm,
            utils,
            isDisabled: (hours) => disabled || isTimeDisabled(hours, "hours"),
            timeStep: timeSteps.hours,
            resolveAriaLabel: localeText.hoursClockNumberText
          })
        };
      }
      case "minutes": {
        return {
          onChange: (minutes) => {
            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minutes), "finish", "minutes");
          },
          items: getTimeSectionOptions({
            value: utils.getMinutes(valueOrReferenceDate),
            utils,
            isDisabled: (minutes) => disabled || isTimeDisabled(minutes, "minutes"),
            resolveLabel: (minutes) => utils.format(utils.setMinutes(now, minutes), "minutes"),
            timeStep: timeSteps.minutes,
            hasValue: !!value,
            resolveAriaLabel: localeText.minutesClockNumberText
          })
        };
      }
      case "seconds": {
        return {
          onChange: (seconds) => {
            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, seconds), "finish", "seconds");
          },
          items: getTimeSectionOptions({
            value: utils.getSeconds(valueOrReferenceDate),
            utils,
            isDisabled: (seconds) => disabled || isTimeDisabled(seconds, "seconds"),
            resolveLabel: (seconds) => utils.format(utils.setSeconds(now, seconds), "seconds"),
            timeStep: timeSteps.seconds,
            hasValue: !!value,
            resolveAriaLabel: localeText.secondsClockNumberText
          })
        };
      }
      case "meridiem": {
        const amLabel = formatMeridiem(utils, "am");
        const pmLabel = formatMeridiem(utils, "pm");
        return {
          onChange: handleMeridiemChange,
          items: [{
            value: "am",
            label: amLabel,
            isSelected: () => !!value && meridiemMode === "am",
            ariaLabel: amLabel
          }, {
            value: "pm",
            label: pmLabel,
            isSelected: () => !!value && meridiemMode === "pm",
            ariaLabel: pmLabel
          }]
        };
      }
      default:
        throw new Error(`Unknown view: ${viewToBuild} found.`);
    }
  }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, disabled, isTimeDisabled, handleMeridiemChange]);
  const viewTimeOptions = React46.useMemo(() => {
    return views.reduce((result, currentView) => {
      return _extends({}, result, {
        [currentView]: buildViewProps(currentView)
      });
    }, {});
  }, [views, buildViewProps]);
  const ownerState = props;
  const classes2 = useUtilityClasses21(ownerState);
  return (0, import_jsx_runtime40.jsx)(MultiSectionDigitalClockRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState,
    role: "group"
  }, other, {
    children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => (0, import_jsx_runtime40.jsx)(MultiSectionDigitalClockSection, {
      items: viewOptions.items,
      onChange: viewOptions.onChange,
      active: view === timeView,
      autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,
      disabled,
      readOnly,
      slots: slots != null ? slots : components,
      slotProps: slotProps != null ? slotProps : componentsProps,
      skipDisabled,
      "aria-label": localeText.selectViewText(timeView)
    }, timeView))
  }));
});
true ? MultiSectionDigitalClock.propTypes = {
  ampm: import_prop_types13.default.bool,
  autoFocus: import_prop_types13.default.bool,
  classes: import_prop_types13.default.object,
  className: import_prop_types13.default.string,
  components: import_prop_types13.default.object,
  componentsProps: import_prop_types13.default.object,
  defaultValue: import_prop_types13.default.any,
  disabled: import_prop_types13.default.bool,
  disableFuture: import_prop_types13.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types13.default.bool,
  disablePast: import_prop_types13.default.bool,
  focusedView: import_prop_types13.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  maxTime: import_prop_types13.default.any,
  minTime: import_prop_types13.default.any,
  minutesStep: import_prop_types13.default.number,
  onChange: import_prop_types13.default.func,
  onFocusedViewChange: import_prop_types13.default.func,
  onViewChange: import_prop_types13.default.func,
  openTo: import_prop_types13.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  readOnly: import_prop_types13.default.bool,
  referenceDate: import_prop_types13.default.any,
  shouldDisableClock: import_prop_types13.default.func,
  shouldDisableTime: import_prop_types13.default.func,
  skipDisabled: import_prop_types13.default.bool,
  slotProps: import_prop_types13.default.object,
  slots: import_prop_types13.default.object,
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  timeSteps: import_prop_types13.default.shape({
    hours: import_prop_types13.default.number,
    minutes: import_prop_types13.default.number,
    seconds: import_prop_types13.default.number
  }),
  timezone: import_prop_types13.default.string,
  value: import_prop_types13.default.any,
  view: import_prop_types13.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  views: import_prop_types13.default.arrayOf(import_prop_types13.default.oneOf(["hours", "meridiem", "minutes", "seconds"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/internals/components/DateTimeViewWrapper/DateTimeViewWrapper.js
var DateTimeViewWrapper = styled_default("div")({
  display: "flex",
  margin: "0 auto"
});

// node_modules/@mui/x-date-pickers/timeViewRenderers/timeViewRenderers.js
var React53 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js
init_extends();
init_objectWithoutPropertiesLoose();
var React51 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/timeClockClasses.js
init_utils();
function getTimeClockUtilityClass(slot) {
  return generateUtilityClass("MuiTimeClock", slot);
}
var timeClockClasses = generateUtilityClasses("MuiTimeClock", ["root", "arrowSwitcher"]);

// node_modules/@mui/x-date-pickers/TimeClock/Clock.js
init_extends();
var React48 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.js
init_objectWithoutPropertiesLoose();
init_extends();
var React47 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/shared.js
var CLOCK_WIDTH = 220;
var CLOCK_HOUR_WIDTH = 36;
var clockCenter = {
  x: CLOCK_WIDTH / 2,
  y: CLOCK_WIDTH / 2
};
var baseClockPoint = {
  x: clockCenter.x,
  y: 0
};
var cx = baseClockPoint.x - clockCenter.x;
var cy = baseClockPoint.y - clockCenter.y;
var rad2deg = (rad) => rad * (180 / Math.PI);
var getAngleValue = (step, offsetX, offsetY) => {
  const x = offsetX - clockCenter.x;
  const y = offsetY - clockCenter.y;
  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
  let deg = rad2deg(atan);
  deg = Math.round(deg / step) * step;
  deg %= 360;
  const value = Math.floor(deg / step) || 0;
  const delta = x ** 2 + y ** 2;
  const distance = Math.sqrt(delta);
  return {
    value,
    distance
  };
};
var getMinutes = (offsetX, offsetY, step = 1) => {
  const angleStep = step * 6;
  let {
    value
  } = getAngleValue(angleStep, offsetX, offsetY);
  value = value * step % 60;
  return value;
};
var getHours = (offsetX, offsetY, ampm) => {
  const {
    value,
    distance
  } = getAngleValue(30, offsetX, offsetY);
  let hour = value || 12;
  if (!ampm) {
    if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
      hour += 12;
      hour %= 24;
    }
  } else {
    hour %= 12;
  }
  return hour;
};

// node_modules/@mui/x-date-pickers/TimeClock/clockPointerClasses.js
init_utils();
function getClockPointerUtilityClass(slot) {
  return generateUtilityClass("MuiClockPointer", slot);
}
var clockPointerClasses = generateUtilityClasses("MuiClockPointer", ["root", "thumb"]);

// node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var _excluded30 = ["className", "hasSelected", "isInner", "type", "viewValue"];
var useUtilityClasses22 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    thumb: ["thumb"]
  };
  return composeClasses(slots, getClockPointerUtilityClass, classes2);
};
var ClockPointerRoot = styled_default("div", {
  name: "MuiClockPointer",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  width: 2,
  backgroundColor: (theme.vars || theme).palette.primary.main,
  position: "absolute",
  left: "calc(50% - 1px)",
  bottom: "50%",
  transformOrigin: "center bottom 0px"
}, ownerState.shouldAnimate && {
  transition: theme.transitions.create(["transform", "height"])
}));
var ClockPointerThumb = styled_default("div", {
  name: "MuiClockPointer",
  slot: "Thumb",
  overridesResolver: (_, styles) => styles.thumb
})(({
  theme,
  ownerState
}) => _extends({
  width: 4,
  height: 4,
  backgroundColor: (theme.vars || theme).palette.primary.contrastText,
  borderRadius: "50%",
  position: "absolute",
  top: -21,
  left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
  border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${(theme.vars || theme).palette.primary.main}`,
  boxSizing: "content-box"
}, ownerState.hasSelected && {
  backgroundColor: (theme.vars || theme).palette.primary.main
}));
function ClockPointer(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiClockPointer"
  });
  const {
    className,
    isInner,
    type,
    viewValue
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const previousType = React47.useRef(type);
  React47.useEffect(() => {
    previousType.current = type;
  }, [type]);
  const ownerState = _extends({}, props, {
    shouldAnimate: previousType.current !== type
  });
  const classes2 = useUtilityClasses22(ownerState);
  const getAngleStyle = () => {
    const max = type === "hours" ? 12 : 60;
    let angle = 360 / max * viewValue;
    if (type === "hours" && viewValue > 12) {
      angle -= 360;
    }
    return {
      height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
      transform: `rotateZ(${angle}deg)`
    };
  };
  return (0, import_jsx_runtime41.jsx)(ClockPointerRoot, _extends({
    style: getAngleStyle(),
    className: clsx_default(className, classes2.root),
    ownerState
  }, other, {
    children: (0, import_jsx_runtime41.jsx)(ClockPointerThumb, {
      ownerState,
      className: classes2.thumb
    })
  }));
}

// node_modules/@mui/x-date-pickers/TimeClock/clockClasses.js
init_utils();
function getClockUtilityClass(slot) {
  return generateUtilityClass("MuiClock", slot);
}
var clockClasses = generateUtilityClasses("MuiClock", ["root", "clock", "wrapper", "squareMask", "pin", "amButton", "pmButton", "meridiemText"]);

// node_modules/@mui/x-date-pickers/TimeClock/Clock.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var useUtilityClasses23 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    clock: ["clock"],
    wrapper: ["wrapper"],
    squareMask: ["squareMask"],
    pin: ["pin"],
    amButton: ["amButton"],
    pmButton: ["pmButton"],
    meridiemText: ["meridiemText"]
  };
  return composeClasses(slots, getClockUtilityClass, classes2);
};
var ClockRoot = styled_default("div", {
  name: "MuiClock",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  theme
}) => ({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  margin: theme.spacing(2)
}));
var ClockClock = styled_default("div", {
  name: "MuiClock",
  slot: "Clock",
  overridesResolver: (_, styles) => styles.clock
})({
  backgroundColor: "rgba(0,0,0,.07)",
  borderRadius: "50%",
  height: 220,
  width: 220,
  flexShrink: 0,
  position: "relative",
  pointerEvents: "none"
});
var ClockWrapper = styled_default("div", {
  name: "MuiClock",
  slot: "Wrapper",
  overridesResolver: (_, styles) => styles.wrapper
})({
  "&:focus": {
    outline: "none"
  }
});
var ClockSquareMask = styled_default("div", {
  name: "MuiClock",
  slot: "SquareMask",
  overridesResolver: (_, styles) => styles.squareMask
})(({
  ownerState
}) => _extends({
  width: "100%",
  height: "100%",
  position: "absolute",
  pointerEvents: "auto",
  outline: 0,
  touchAction: "none",
  userSelect: "none"
}, ownerState.disabled ? {} : {
  "@media (pointer: fine)": {
    cursor: "pointer",
    borderRadius: "50%"
  },
  "&:active": {
    cursor: "move"
  }
}));
var ClockPin = styled_default("div", {
  name: "MuiClock",
  slot: "Pin",
  overridesResolver: (_, styles) => styles.pin
})(({
  theme
}) => ({
  width: 6,
  height: 6,
  borderRadius: "50%",
  backgroundColor: (theme.vars || theme).palette.primary.main,
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)"
}));
var ClockAmButton = styled_default(IconButton_default, {
  name: "MuiClock",
  slot: "AmButton",
  overridesResolver: (_, styles) => styles.amButton
})(({
  theme,
  ownerState
}) => _extends({
  zIndex: 1,
  position: "absolute",
  bottom: 8,
  left: 8,
  paddingLeft: 4,
  paddingRight: 4,
  width: CLOCK_HOUR_WIDTH
}, ownerState.meridiemMode === "am" && {
  backgroundColor: (theme.vars || theme).palette.primary.main,
  color: (theme.vars || theme).palette.primary.contrastText,
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.primary.light
  }
}));
var ClockPmButton = styled_default(IconButton_default, {
  name: "MuiClock",
  slot: "PmButton",
  overridesResolver: (_, styles) => styles.pmButton
})(({
  theme,
  ownerState
}) => _extends({
  zIndex: 1,
  position: "absolute",
  bottom: 8,
  right: 8,
  paddingLeft: 4,
  paddingRight: 4,
  width: CLOCK_HOUR_WIDTH
}, ownerState.meridiemMode === "pm" && {
  backgroundColor: (theme.vars || theme).palette.primary.main,
  color: (theme.vars || theme).palette.primary.contrastText,
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.primary.light
  }
}));
var ClockMeridiemText = styled_default(Typography_default, {
  name: "MuiClock",
  slot: "meridiemText",
  overridesResolver: (_, styles) => styles.meridiemText
})({
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis"
});
function Clock(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiClock"
  });
  const {
    ampm,
    ampmInClock,
    autoFocus,
    children,
    value,
    handleMeridiemChange,
    isTimeDisabled,
    meridiemMode,
    minutesStep = 1,
    onChange,
    selectedId,
    type,
    viewValue,
    disabled,
    readOnly,
    className
  } = props;
  const ownerState = props;
  const utils = useUtils();
  const localeText = useLocaleText();
  const isMoving = React48.useRef(false);
  const classes2 = useUtilityClasses23(ownerState);
  const isSelectedTimeDisabled = isTimeDisabled(viewValue, type);
  const isPointerInner = !ampm && type === "hours" && (viewValue < 1 || viewValue > 12);
  const handleValueChange = (newValue, isFinish) => {
    if (disabled || readOnly) {
      return;
    }
    if (isTimeDisabled(newValue, type)) {
      return;
    }
    onChange(newValue, isFinish);
  };
  const setTime = (event, isFinish) => {
    let {
      offsetX,
      offsetY
    } = event;
    if (offsetX === void 0) {
      const rect = event.target.getBoundingClientRect();
      offsetX = event.changedTouches[0].clientX - rect.left;
      offsetY = event.changedTouches[0].clientY - rect.top;
    }
    const newSelectedValue = type === "seconds" || type === "minutes" ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
    handleValueChange(newSelectedValue, isFinish);
  };
  const handleTouchMove = (event) => {
    isMoving.current = true;
    setTime(event, "shallow");
  };
  const handleTouchEnd = (event) => {
    if (isMoving.current) {
      setTime(event, "finish");
      isMoving.current = false;
    }
  };
  const handleMouseMove = (event) => {
    if (event.buttons > 0) {
      setTime(event.nativeEvent, "shallow");
    }
  };
  const handleMouseUp = (event) => {
    if (isMoving.current) {
      isMoving.current = false;
    }
    setTime(event.nativeEvent, "finish");
  };
  const hasSelected = React48.useMemo(() => {
    if (type === "hours") {
      return true;
    }
    return viewValue % 5 === 0;
  }, [type, viewValue]);
  const keyboardControlStep = type === "minutes" ? minutesStep : 1;
  const listboxRef = React48.useRef(null);
  useEnhancedEffect_default(() => {
    if (autoFocus) {
      listboxRef.current.focus();
    }
  }, [autoFocus]);
  const handleKeyDown = (event) => {
    if (isMoving.current) {
      return;
    }
    switch (event.key) {
      case "Home":
        handleValueChange(0, "partial");
        event.preventDefault();
        break;
      case "End":
        handleValueChange(type === "minutes" ? 59 : 23, "partial");
        event.preventDefault();
        break;
      case "ArrowUp":
        handleValueChange(viewValue + keyboardControlStep, "partial");
        event.preventDefault();
        break;
      case "ArrowDown":
        handleValueChange(viewValue - keyboardControlStep, "partial");
        event.preventDefault();
        break;
      default:
    }
  };
  return (0, import_jsx_runtime43.jsxs)(ClockRoot, {
    className: clsx_default(className, classes2.root),
    children: [(0, import_jsx_runtime43.jsxs)(ClockClock, {
      className: classes2.clock,
      children: [(0, import_jsx_runtime42.jsx)(ClockSquareMask, {
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        onMouseUp: handleMouseUp,
        onMouseMove: handleMouseMove,
        ownerState: {
          disabled
        },
        className: classes2.squareMask
      }), !isSelectedTimeDisabled && (0, import_jsx_runtime43.jsxs)(React48.Fragment, {
        children: [(0, import_jsx_runtime42.jsx)(ClockPin, {
          className: classes2.pin
        }), value != null && (0, import_jsx_runtime42.jsx)(ClockPointer, {
          type,
          viewValue,
          isInner: isPointerInner,
          hasSelected
        })]
      }), (0, import_jsx_runtime42.jsx)(ClockWrapper, {
        "aria-activedescendant": selectedId,
        "aria-label": localeText.clockLabelText(type, value, utils),
        ref: listboxRef,
        role: "listbox",
        onKeyDown: handleKeyDown,
        tabIndex: 0,
        className: classes2.wrapper,
        children
      })]
    }), ampm && ampmInClock && (0, import_jsx_runtime43.jsxs)(React48.Fragment, {
      children: [(0, import_jsx_runtime42.jsx)(ClockAmButton, {
        onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
        disabled: disabled || meridiemMode === null,
        ownerState,
        className: classes2.amButton,
        title: formatMeridiem(utils, "am"),
        children: (0, import_jsx_runtime42.jsx)(ClockMeridiemText, {
          variant: "caption",
          className: classes2.meridiemText,
          children: formatMeridiem(utils, "am")
        })
      }), (0, import_jsx_runtime42.jsx)(ClockPmButton, {
        disabled: disabled || meridiemMode === null,
        onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
        ownerState,
        className: classes2.pmButton,
        title: formatMeridiem(utils, "pm"),
        children: (0, import_jsx_runtime42.jsx)(ClockMeridiemText, {
          variant: "caption",
          className: classes2.meridiemText,
          children: formatMeridiem(utils, "pm")
        })
      })]
    })]
  });
}

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.js
var React50 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.js
init_objectWithoutPropertiesLoose();
init_extends();
var React49 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/clockNumberClasses.js
init_utils();
function getClockNumberUtilityClass(slot) {
  return generateUtilityClass("MuiClockNumber", slot);
}
var clockNumberClasses = generateUtilityClasses("MuiClockNumber", ["root", "selected", "disabled"]);

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var _excluded31 = ["className", "disabled", "index", "inner", "label", "selected"];
var useUtilityClasses24 = (ownerState) => {
  const {
    classes: classes2,
    selected,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected", disabled && "disabled"]
  };
  return composeClasses(slots, getClockNumberUtilityClass, classes2);
};
var ClockNumberRoot = styled_default("span", {
  name: "MuiClockNumber",
  slot: "Root",
  overridesResolver: (_, styles) => [styles.root, {
    [`&.${clockNumberClasses.disabled}`]: styles.disabled
  }, {
    [`&.${clockNumberClasses.selected}`]: styles.selected
  }]
})(({
  theme,
  ownerState
}) => _extends({
  height: CLOCK_HOUR_WIDTH,
  width: CLOCK_HOUR_WIDTH,
  position: "absolute",
  left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  borderRadius: "50%",
  color: (theme.vars || theme).palette.text.primary,
  fontFamily: theme.typography.fontFamily,
  "&:focused": {
    backgroundColor: (theme.vars || theme).palette.background.paper
  },
  [`&.${clockNumberClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText
  },
  [`&.${clockNumberClasses.disabled}`]: {
    pointerEvents: "none",
    color: (theme.vars || theme).palette.text.disabled
  }
}, ownerState.inner && _extends({}, theme.typography.body2, {
  color: (theme.vars || theme).palette.text.secondary
})));
function ClockNumber(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiClockNumber"
  });
  const {
    className,
    disabled,
    index,
    inner,
    label,
    selected
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const ownerState = props;
  const classes2 = useUtilityClasses24(ownerState);
  const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
  const length = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
  const x = Math.round(Math.cos(angle) * length);
  const y = Math.round(Math.sin(angle) * length);
  return (0, import_jsx_runtime44.jsx)(ClockNumberRoot, _extends({
    className: clsx_default(className, classes2.root),
    "aria-disabled": disabled ? true : void 0,
    "aria-selected": selected ? true : void 0,
    role: "option",
    style: {
      transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
    },
    ownerState
  }, other, {
    children: label
  }));
}

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var getHourNumbers = ({
  ampm,
  value,
  getClockNumberText,
  isDisabled,
  selectedId,
  utils
}) => {
  const currentHours = value ? utils.getHours(value) : null;
  const hourNumbers = [];
  const startHour = ampm ? 1 : 0;
  const endHour = ampm ? 12 : 23;
  const isSelected = (hour) => {
    if (currentHours === null) {
      return false;
    }
    if (ampm) {
      if (hour === 12) {
        return currentHours === 12 || currentHours === 0;
      }
      return currentHours === hour || currentHours - 12 === hour;
    }
    return currentHours === hour;
  };
  for (let hour = startHour; hour <= endHour; hour += 1) {
    let label = hour.toString();
    if (hour === 0) {
      label = "00";
    }
    const inner = !ampm && (hour === 0 || hour > 12);
    label = utils.formatNumber(label);
    const selected = isSelected(hour);
    hourNumbers.push((0, import_jsx_runtime45.jsx)(ClockNumber, {
      id: selected ? selectedId : void 0,
      index: hour,
      inner,
      selected,
      disabled: isDisabled(hour),
      label,
      "aria-label": getClockNumberText(label)
    }, hour));
  }
  return hourNumbers;
};
var getMinutesNumbers = ({
  utils,
  value,
  isDisabled,
  getClockNumberText,
  selectedId
}) => {
  const f = utils.formatNumber;
  return [[5, f("05")], [10, f("10")], [15, f("15")], [20, f("20")], [25, f("25")], [30, f("30")], [35, f("35")], [40, f("40")], [45, f("45")], [50, f("50")], [55, f("55")], [0, f("00")]].map(([numberValue, label], index) => {
    const selected = numberValue === value;
    return (0, import_jsx_runtime45.jsx)(ClockNumber, {
      label,
      id: selected ? selectedId : void 0,
      index: index + 1,
      inner: false,
      disabled: isDisabled(numberValue),
      selected,
      "aria-label": getClockNumberText(label)
    }, numberValue);
  });
};

// node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var _excluded34 = ["ampm", "ampmInClock", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "showViewSwitcher", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "timezone"];
var useUtilityClasses25 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    arrowSwitcher: ["arrowSwitcher"]
  };
  return composeClasses(slots, getTimeClockUtilityClass, classes2);
};
var TimeClockRoot = styled_default(PickerViewRoot, {
  name: "MuiTimeClock",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  position: "relative"
});
var TimeClockArrowSwitcher = styled_default(PickersArrowSwitcher, {
  name: "MuiTimeClock",
  slot: "ArrowSwitcher",
  overridesResolver: (props, styles) => styles.arrowSwitcher
})({
  position: "absolute",
  right: 12,
  top: 15
});
var TIME_CLOCK_DEFAULT_VIEWS = ["hours", "minutes"];
var TimeClock = React51.forwardRef(function TimeClock2(inProps, ref) {
  const utils = useUtils();
  const props = useThemeProps({
    props: inProps,
    name: "MuiTimeClock"
  });
  const {
    ampm = utils.is12HourCycleInCurrentLocale(),
    ampmInClock = false,
    autoFocus,
    components,
    componentsProps,
    slots: innerSlots,
    slotProps: innerSlotProps,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableIgnoringDatePartForTimeValidation = false,
    maxTime,
    minTime,
    disableFuture,
    disablePast,
    minutesStep = 1,
    shouldDisableClock,
    shouldDisableTime,
    showViewSwitcher,
    onChange,
    view: inView,
    views = TIME_CLOCK_DEFAULT_VIEWS,
    openTo,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    className,
    disabled,
    readOnly,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "TimeClock",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const valueOrReferenceDate = useClockReferenceDate({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  });
  const localeText = useLocaleText();
  const now = useNow(timezone);
  const {
    view,
    setView,
    previousView,
    nextView,
    setValueAndGoToNextView
  } = useViews({
    view: inView,
    views,
    openTo,
    onViewChange,
    onChange: handleValueChange,
    focusedView,
    onFocusedViewChange
  });
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView);
  const isTimeDisabled = React51.useCallback((rawValue, viewType) => {
    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
    const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
    const containsValidTime = ({
      start,
      end
    }) => {
      if (minTime && isAfter(minTime, end)) {
        return false;
      }
      if (maxTime && isAfter(start, maxTime)) {
        return false;
      }
      if (disableFuture && isAfter(start, now)) {
        return false;
      }
      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {
        return false;
      }
      return true;
    };
    const isValidValue = (timeValue, step = 1) => {
      if (timeValue % step !== 0) {
        return false;
      }
      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
        return false;
      }
      if (shouldDisableTime) {
        switch (viewType) {
          case "hours":
            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
          case "minutes":
            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
          case "seconds":
            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
          default:
            return false;
        }
      }
      return true;
    };
    switch (viewType) {
      case "hours": {
        const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
        const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
        const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
        const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(valueWithMeridiem);
      }
      case "minutes": {
        const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
        const start = utils.setSeconds(dateWithNewMinutes, 0);
        const end = utils.setSeconds(dateWithNewMinutes, 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue, minutesStep);
      }
      case "seconds": {
        const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
        const start = dateWithNewSeconds;
        const end = dateWithNewSeconds;
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue);
      }
      default:
        throw new Error("not supported");
    }
  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);
  const selectedId = useId();
  const viewProps = React51.useMemo(() => {
    switch (view) {
      case "hours": {
        const handleHoursChange = (hourValue, isFinish) => {
          const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);
          setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish);
        };
        return {
          onChange: handleHoursChange,
          viewValue: utils.getHours(valueOrReferenceDate),
          children: getHourNumbers({
            value,
            utils,
            ampm,
            onChange: handleHoursChange,
            getClockNumberText: localeText.hoursClockNumberText,
            isDisabled: (hourValue) => disabled || isTimeDisabled(hourValue, "hours"),
            selectedId
          })
        };
      }
      case "minutes": {
        const minutesValue = utils.getMinutes(valueOrReferenceDate);
        const handleMinutesChange = (minuteValue, isFinish) => {
          setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish);
        };
        return {
          viewValue: minutesValue,
          onChange: handleMinutesChange,
          children: getMinutesNumbers({
            utils,
            value: minutesValue,
            onChange: handleMinutesChange,
            getClockNumberText: localeText.minutesClockNumberText,
            isDisabled: (minuteValue) => disabled || isTimeDisabled(minuteValue, "minutes"),
            selectedId
          })
        };
      }
      case "seconds": {
        const secondsValue = utils.getSeconds(valueOrReferenceDate);
        const handleSecondsChange = (secondValue, isFinish) => {
          setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish);
        };
        return {
          viewValue: secondsValue,
          onChange: handleSecondsChange,
          children: getMinutesNumbers({
            utils,
            value: secondsValue,
            onChange: handleSecondsChange,
            getClockNumberText: localeText.secondsClockNumberText,
            isDisabled: (secondValue) => disabled || isTimeDisabled(secondValue, "seconds"),
            selectedId
          })
        };
      }
      default:
        throw new Error("You must provide the type for ClockView");
    }
  }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);
  const ownerState = props;
  const classes2 = useUtilityClasses25(ownerState);
  return (0, import_jsx_runtime47.jsxs)(TimeClockRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime46.jsx)(Clock, _extends({
      autoFocus: autoFocus != null ? autoFocus : !!focusedView,
      ampmInClock: ampmInClock && views.includes("hours"),
      value,
      type: view,
      ampm,
      minutesStep,
      isTimeDisabled,
      meridiemMode,
      handleMeridiemChange,
      selectedId,
      disabled,
      readOnly
    }, viewProps)), showViewSwitcher && (0, import_jsx_runtime46.jsx)(TimeClockArrowSwitcher, {
      className: classes2.arrowSwitcher,
      slots,
      slotProps,
      onGoToPrevious: () => setView(previousView),
      isPreviousDisabled: !previousView,
      previousLabel: localeText.openPreviousView,
      onGoToNext: () => setView(nextView),
      isNextDisabled: !nextView,
      nextLabel: localeText.openNextView,
      ownerState
    })]
  }));
});
true ? TimeClock.propTypes = {
  ampm: import_prop_types14.default.bool,
  ampmInClock: import_prop_types14.default.bool,
  autoFocus: import_prop_types14.default.bool,
  classes: import_prop_types14.default.object,
  className: import_prop_types14.default.string,
  components: import_prop_types14.default.object,
  componentsProps: import_prop_types14.default.object,
  defaultValue: import_prop_types14.default.any,
  disabled: import_prop_types14.default.bool,
  disableFuture: import_prop_types14.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types14.default.bool,
  disablePast: import_prop_types14.default.bool,
  focusedView: import_prop_types14.default.oneOf(["hours", "minutes", "seconds"]),
  maxTime: import_prop_types14.default.any,
  minTime: import_prop_types14.default.any,
  minutesStep: import_prop_types14.default.number,
  onChange: import_prop_types14.default.func,
  onFocusedViewChange: import_prop_types14.default.func,
  onViewChange: import_prop_types14.default.func,
  openTo: import_prop_types14.default.oneOf(["hours", "minutes", "seconds"]),
  readOnly: import_prop_types14.default.bool,
  referenceDate: import_prop_types14.default.any,
  shouldDisableClock: import_prop_types14.default.func,
  shouldDisableTime: import_prop_types14.default.func,
  showViewSwitcher: import_prop_types14.default.bool,
  slotProps: import_prop_types14.default.object,
  slots: import_prop_types14.default.object,
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
  timezone: import_prop_types14.default.string,
  value: import_prop_types14.default.any,
  view: import_prop_types14.default.oneOf(["hours", "minutes", "seconds"]),
  views: import_prop_types14.default.arrayOf(import_prop_types14.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.js
init_extends();
init_objectWithoutPropertiesLoose();
var React52 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());
init_useEventCallback();
init_composeClasses();
init_useForkRef();

// node_modules/@mui/x-date-pickers/DigitalClock/digitalClockClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getDigitalClockUtilityClass(slot) {
  return generateUtilityClass("MuiDigitalClock", slot);
}
var digitalClockClasses = generateUtilityClasses("MuiDigitalClock", ["root", "list", "item"]);

// node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var _excluded35 = ["ampm", "timeStep", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "views", "skipDisabled", "timezone"];
var useUtilityClasses26 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    list: ["list"],
    item: ["item"]
  };
  return composeClasses(slots, getDigitalClockUtilityClass, classes2);
};
var DigitalClockRoot = styled_default(PickerViewRoot, {
  name: "MuiDigitalClock",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => ({
  overflowY: "auto",
  width: "100%",
  "@media (prefers-reduced-motion: no-preference)": {
    scrollBehavior: ownerState.alreadyRendered ? "smooth" : "auto"
  },
  maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT
}));
var DigitalClockList = styled_default(MenuList_default, {
  name: "MuiDigitalClock",
  slot: "List",
  overridesResolver: (props, styles) => styles.list
})({
  padding: 0
});
var DigitalClockItem = styled_default(MenuItem_default, {
  name: "MuiDigitalClock",
  slot: "Item",
  overridesResolver: (props, styles) => styles.item
})(({
  theme
}) => ({
  padding: "8px 16px",
  margin: "2px 4px",
  "&:first-of-type": {
    marginTop: 4
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
  },
  "&.Mui-selected": {
    backgroundColor: (theme.vars || theme).palette.primary.main,
    color: (theme.vars || theme).palette.primary.contrastText,
    "&:focus-visible, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  "&.Mui-focusVisible": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
  }
}));
var DigitalClock = React52.forwardRef(function DigitalClock2(inProps, ref) {
  var _ref, _slots$digitalClockIt, _slotProps$digitalClo;
  const utils = useUtils();
  const containerRef = React52.useRef(null);
  const handleRef = useForkRef(ref, containerRef);
  const props = useThemeProps({
    props: inProps,
    name: "MuiDigitalClock"
  });
  const {
    ampm = utils.is12HourCycleInCurrentLocale(),
    timeStep = 30,
    autoFocus,
    components,
    componentsProps,
    slots,
    slotProps,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableIgnoringDatePartForTimeValidation = false,
    maxTime,
    minTime,
    disableFuture,
    disablePast,
    minutesStep = 1,
    shouldDisableClock,
    shouldDisableTime,
    onChange,
    view: inView,
    openTo,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    className,
    disabled,
    readOnly,
    views = ["hours"],
    skipDisabled = false,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const {
    value,
    handleValueChange: handleRawValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "DigitalClock",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const localeText = useLocaleText();
  const now = useNow(timezone);
  const ownerState = React52.useMemo(() => _extends({}, props, {
    alreadyRendered: !!containerRef.current
  }), [props]);
  const classes2 = useUtilityClasses26(ownerState);
  const ClockItem = (_ref = (_slots$digitalClockIt = slots == null ? void 0 : slots.digitalClockItem) != null ? _slots$digitalClockIt : components == null ? void 0 : components.DigitalClockItem) != null ? _ref : DigitalClockItem;
  const clockItemProps = useSlotProps({
    elementType: ClockItem,
    externalSlotProps: (_slotProps$digitalClo = slotProps == null ? void 0 : slotProps.digitalClockItem) != null ? _slotProps$digitalClo : componentsProps == null ? void 0 : componentsProps.digitalClockItem,
    ownerState: {},
    className: classes2.item
  });
  const valueOrReferenceDate = useClockReferenceDate({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  });
  const handleValueChange = useEventCallback_default((newValue) => handleRawValueChange(newValue, "finish", "hours"));
  const {
    setValueAndGoToNextView
  } = useViews({
    view: inView,
    views,
    openTo,
    onViewChange,
    onChange: handleValueChange,
    focusedView,
    onFocusedViewChange
  });
  const handleItemSelect = useEventCallback_default((newValue) => {
    setValueAndGoToNextView(newValue, "finish");
  });
  React52.useEffect(() => {
    if (containerRef.current === null) {
      return;
    }
    const selectedItem = containerRef.current.querySelector('[role="listbox"] [role="option"][aria-selected="true"]');
    if (!selectedItem) {
      return;
    }
    const offsetTop = selectedItem.offsetTop;
    containerRef.current.scrollTop = offsetTop - 4;
  });
  const isTimeDisabled = React52.useCallback((valueToCheck) => {
    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
    const containsValidTime = () => {
      if (minTime && isAfter(minTime, valueToCheck)) {
        return false;
      }
      if (maxTime && isAfter(valueToCheck, maxTime)) {
        return false;
      }
      if (disableFuture && isAfter(valueToCheck, now)) {
        return false;
      }
      if (disablePast && isAfter(now, valueToCheck)) {
        return false;
      }
      return true;
    };
    const isValidValue = () => {
      if (utils.getMinutes(valueToCheck) % minutesStep !== 0) {
        return false;
      }
      if (shouldDisableClock != null && shouldDisableClock(utils.toJsDate(valueToCheck).getTime(), "hours")) {
        return false;
      }
      if (shouldDisableTime) {
        return !shouldDisableTime(valueToCheck, "hours");
      }
      return true;
    };
    return !containsValidTime() || !isValidValue();
  }, [disableIgnoringDatePartForTimeValidation, utils, minTime, maxTime, disableFuture, now, disablePast, minutesStep, shouldDisableClock, shouldDisableTime]);
  const timeOptions = React52.useMemo(() => {
    const startOfDay = utils.startOfDay(valueOrReferenceDate);
    return [startOfDay, ...Array.from({
      length: Math.ceil(24 * 60 / timeStep) - 1
    }, (_, index) => utils.addMinutes(startOfDay, timeStep * (index + 1)))];
  }, [valueOrReferenceDate, timeStep, utils]);
  return (0, import_jsx_runtime48.jsx)(DigitalClockRoot, _extends({
    ref: handleRef,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: (0, import_jsx_runtime48.jsx)(DigitalClockList, {
      autoFocusItem: autoFocus || !!focusedView,
      role: "listbox",
      "aria-label": localeText.timePickerToolbarTitle,
      className: classes2.list,
      children: timeOptions.map((option) => {
        if (skipDisabled && isTimeDisabled(option)) {
          return null;
        }
        const isSelected = utils.isEqual(option, value);
        return (0, import_jsx_runtime48.jsx)(ClockItem, _extends({
          onClick: () => !readOnly && handleItemSelect(option),
          selected: isSelected,
          disabled: disabled || isTimeDisabled(option),
          disableRipple: readOnly,
          role: "option",
          "aria-disabled": readOnly,
          "aria-selected": isSelected
        }, clockItemProps, {
          children: utils.format(option, ampm ? "fullTime12h" : "fullTime24h")
        }), utils.toISO(option));
      })
    })
  }));
});
true ? DigitalClock.propTypes = {
  ampm: import_prop_types15.default.bool,
  autoFocus: import_prop_types15.default.bool,
  classes: import_prop_types15.default.object,
  className: import_prop_types15.default.string,
  components: import_prop_types15.default.object,
  componentsProps: import_prop_types15.default.object,
  defaultValue: import_prop_types15.default.any,
  disabled: import_prop_types15.default.bool,
  disableFuture: import_prop_types15.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types15.default.bool,
  disablePast: import_prop_types15.default.bool,
  focusedView: import_prop_types15.default.oneOf(["hours"]),
  maxTime: import_prop_types15.default.any,
  minTime: import_prop_types15.default.any,
  minutesStep: import_prop_types15.default.number,
  onChange: import_prop_types15.default.func,
  onFocusedViewChange: import_prop_types15.default.func,
  onViewChange: import_prop_types15.default.func,
  openTo: import_prop_types15.default.oneOf(["hours"]),
  readOnly: import_prop_types15.default.bool,
  referenceDate: import_prop_types15.default.any,
  shouldDisableClock: import_prop_types15.default.func,
  shouldDisableTime: import_prop_types15.default.func,
  skipDisabled: import_prop_types15.default.bool,
  slotProps: import_prop_types15.default.object,
  slots: import_prop_types15.default.object,
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
  timeStep: import_prop_types15.default.number,
  timezone: import_prop_types15.default.string,
  value: import_prop_types15.default.any,
  view: import_prop_types15.default.oneOf(["hours"]),
  views: import_prop_types15.default.arrayOf(import_prop_types15.default.oneOf(["hours"]))
} : void 0;

// node_modules/@mui/x-date-pickers/timeViewRenderers/timeViewRenderers.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var renderTimeViewClock = ({
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  ampmInClock,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  showViewSwitcher,
  disableIgnoringDatePartForTimeValidation,
  timezone
}) => (0, import_jsx_runtime49.jsx)(TimeClock, {
  view,
  onViewChange,
  focusedView: focusedView && isTimeView(focusedView) ? focusedView : null,
  onFocusedViewChange,
  views: views.filter(isTimeView),
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  ampmInClock,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  showViewSwitcher,
  disableIgnoringDatePartForTimeValidation,
  timezone
});
var renderDigitalClockTimeView = ({
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timezone
}) => (0, import_jsx_runtime49.jsx)(DigitalClock, {
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views: views.filter(isTimeView),
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeStep: timeSteps == null ? void 0 : timeSteps.minutes,
  skipDisabled,
  timezone
});
var renderMultiSectionDigitalClockTimeView = ({
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timezone
}) => (0, import_jsx_runtime49.jsx)(MultiSectionDigitalClock, {
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views: views.filter(isTimeView),
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timezone
});

// node_modules/@mui/x-date-pickers/dateTimeViewRenderers/dateTimeViewRenderers.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var renderDesktopDateTimeView = ({
  view,
  onViewChange,
  views,
  focusedView,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minDate,
  minTime,
  maxDate,
  maxTime,
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  shouldDisableTime,
  shouldDisableClock,
  reduceAnimations,
  minutesStep,
  ampm,
  onMonthChange,
  monthsPerRow,
  onYearChange,
  yearsPerRow,
  defaultCalendarMonth,
  components,
  componentsProps,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  sx,
  autoFocus,
  fixedWeekNumber,
  displayWeekNumber,
  timezone,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timeViewsCount,
  shouldRenderTimeInASingleColumn
}) => {
  var _resolveComponentProp, _slotProps$actionBar;
  const isActionBarVisible = !!((_resolveComponentProp = resolveComponentProps((_slotProps$actionBar = slotProps == null ? void 0 : slotProps.actionBar) != null ? _slotProps$actionBar : componentsProps == null ? void 0 : componentsProps.actionBar, {})) != null && (_resolveComponentProp = _resolveComponentProp.actions) != null && _resolveComponentProp.length);
  const commonTimeProps = {
    view: isInternalTimeView(view) ? view : "hours",
    onViewChange,
    focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
    onFocusedViewChange,
    views: views.filter(isInternalTimeView),
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes: classes2,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    shouldDisableClock,
    minutesStep,
    ampm,
    components,
    componentsProps,
    slots,
    slotProps,
    readOnly,
    disabled,
    autoFocus,
    disableIgnoringDatePartForTimeValidation,
    timeSteps,
    skipDisabled,
    timezone
  };
  return (0, import_jsx_runtime51.jsxs)(React54.Fragment, {
    children: [(0, import_jsx_runtime51.jsxs)(DateTimeViewWrapper, {
      children: [(0, import_jsx_runtime50.jsx)(DateCalendar, {
        view: isDatePickerView(view) ? view : "day",
        onViewChange,
        views: views.filter(isDatePickerView),
        focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
        onFocusedViewChange,
        value,
        defaultValue,
        referenceDate,
        onChange,
        className,
        classes: classes2,
        disableFuture,
        disablePast,
        minDate,
        maxDate,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        reduceAnimations,
        onMonthChange,
        monthsPerRow,
        onYearChange,
        yearsPerRow,
        defaultCalendarMonth,
        components,
        componentsProps,
        slots,
        slotProps,
        loading,
        renderLoading,
        disableHighlightToday,
        readOnly,
        disabled,
        showDaysOutsideCurrentMonth,
        dayOfWeekFormatter,
        sx,
        autoFocus,
        fixedWeekNumber,
        displayWeekNumber,
        timezone
      }), timeViewsCount > 0 && (0, import_jsx_runtime51.jsxs)(React54.Fragment, {
        children: [(0, import_jsx_runtime50.jsx)(Divider_default, {
          orientation: "vertical"
        }), shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView(_extends({}, commonTimeProps, {
          view: "hours",
          views: ["hours"],
          focusedView: focusedView && isInternalTimeView(focusedView) ? "hours" : null,
          sx: _extends({
            width: "auto",
            [`&.${digitalClockClasses.root}`]: {
              maxHeight: VIEW_HEIGHT
            }
          }, Array.isArray(sx) ? sx : [sx])
        })) : renderMultiSectionDigitalClockTimeView(_extends({}, commonTimeProps, {
          view: isInternalTimeView(view) ? view : "hours",
          views: views.filter(isInternalTimeView),
          focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
          sx: _extends({
            borderBottom: 0,
            width: "auto",
            [`.${multiSectionDigitalClockSectionClasses.root}`]: {
              maxHeight: "100%"
            }
          }, Array.isArray(sx) ? sx : [sx])
        }))]
      })]
    }), isActionBarVisible && (0, import_jsx_runtime50.jsx)(Divider_default, {})]
  });
};

// node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React55 = __toESM(require_react());
init_useForkRef();
init_useId();
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var _excluded36 = ["props", "getOpenDialogAriaText"];
var _excluded210 = ["ownerState"];
var _excluded37 = ["ownerState"];
var useDesktopPicker = (_ref) => {
  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$inputAdornment, _slots$openPickerButt, _slots$layout;
  let {
    props,
    getOpenDialogAriaText
  } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded36);
  const {
    slots,
    slotProps: innerSlotProps,
    className,
    sx,
    format,
    formatDensity,
    timezone,
    name,
    label,
    inputRef,
    readOnly,
    disabled,
    autoFocus,
    localeText,
    reduceAnimations
  } = props;
  const utils = useUtils();
  const internalInputRef = React55.useRef(null);
  const containerRef = React55.useRef(null);
  const labelId = useId();
  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
  const {
    open,
    actions,
    hasUIView,
    layoutProps,
    renderCurrentView,
    shouldRestoreFocus,
    fieldProps: pickerFieldProps
  } = usePicker(_extends({}, pickerParams, {
    props,
    inputRef: internalInputRef,
    autoFocusView: true,
    additionalViewProps: {},
    wrapperVariant: "desktop"
  }));
  const InputAdornment = (_slots$inputAdornment = slots.inputAdornment) != null ? _slots$inputAdornment : InputAdornment_default;
  const _useSlotProps = useSlotProps({
    elementType: InputAdornment,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.inputAdornment,
    additionalProps: {
      position: "end"
    },
    ownerState: props
  }), inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded210);
  const OpenPickerButton = (_slots$openPickerButt = slots.openPickerButton) != null ? _slots$openPickerButt : IconButton_default;
  const _useSlotProps2 = useSlotProps({
    elementType: OpenPickerButton,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.openPickerButton,
    additionalProps: {
      disabled: disabled || readOnly,
      onClick: open ? actions.onClose : actions.onOpen,
      "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils),
      edge: inputAdornmentProps.position
    },
    ownerState: props
  }), openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded37);
  const OpenPickerIcon = slots.openPickerIcon;
  const Field = slots.field;
  const fieldProps = useSlotProps({
    elementType: Field,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
      id: labelId
    }, {
      readOnly,
      disabled,
      className,
      sx,
      format,
      formatDensity,
      timezone,
      label,
      name,
      autoFocus: autoFocus && !props.open,
      focused: open ? true : void 0
    }),
    ownerState: props
  });
  if (hasUIView) {
    fieldProps.InputProps = _extends({}, fieldProps.InputProps, {
      ref: containerRef,
      [`${inputAdornmentProps.position}Adornment`]: (0, import_jsx_runtime52.jsx)(InputAdornment, _extends({}, inputAdornmentProps, {
        children: (0, import_jsx_runtime52.jsx)(OpenPickerButton, _extends({}, openPickerButtonProps, {
          children: (0, import_jsx_runtime52.jsx)(OpenPickerIcon, _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.openPickerIcon))
        }))
      }))
    });
  }
  const slotsForField = _extends({
    textField: slots.textField,
    clearIcon: slots.clearIcon,
    clearButton: slots.clearButton
  }, fieldProps.slots);
  const Layout8 = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
  let labelledById = labelId;
  if (isToolbarHidden) {
    if (label) {
      labelledById = `${labelId}-label`;
    } else {
      labelledById = void 0;
    }
  }
  const slotProps = _extends({}, innerSlotProps, {
    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
      titleId: labelId
    }),
    popper: _extends({
      "aria-labelledby": labelledById
    }, innerSlotProps == null ? void 0 : innerSlotProps.popper)
  });
  const renderPicker = () => (0, import_jsx_runtime53.jsxs)(LocalizationProvider, {
    localeText,
    children: [(0, import_jsx_runtime52.jsx)(Field, _extends({}, fieldProps, {
      slots: slotsForField,
      slotProps,
      inputRef: handleInputRef
    })), (0, import_jsx_runtime52.jsx)(PickersPopper, _extends({
      role: "dialog",
      placement: "bottom-start",
      anchorEl: containerRef.current
    }, actions, {
      open,
      slots,
      slotProps,
      shouldRestoreFocus,
      reduceAnimations,
      children: (0, import_jsx_runtime52.jsx)(Layout8, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
        slots,
        slotProps,
        children: renderCurrentView()
      }))
    }))]
  });
  return {
    renderPicker
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/date-time-utils.js
init_extends();
init_objectWithoutPropertiesLoose();
var _excluded38 = ["views", "format"];
var resolveDateTimeFormat = (utils, _ref) => {
  let {
    views,
    format
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded38);
  if (format) {
    return format;
  }
  const dateViews2 = [];
  const timeViews2 = [];
  views.forEach((view) => {
    if (isTimeView(view)) {
      timeViews2.push(view);
    } else {
      dateViews2.push(view);
    }
  });
  if (timeViews2.length === 0) {
    return resolveDateFormat(utils, _extends({
      views: dateViews2
    }, other), false);
  }
  if (dateViews2.length === 0) {
    return resolveTimeFormat(utils, _extends({
      views: timeViews2
    }, other));
  }
  const timeFormat = resolveTimeFormat(utils, _extends({
    views: timeViews2
  }, other));
  const dateFormat = resolveDateFormat(utils, _extends({
    views: dateViews2
  }, other), false);
  return `${dateFormat} ${timeFormat}`;
};
var resolveViews = (ampm, views, shouldUseSingleColumn) => {
  if (shouldUseSingleColumn) {
    return views.filter((view) => !isInternalTimeView(view) || view === "hours");
  }
  return ampm ? [...views, "meridiem"] : views;
};
var resolveShouldRenderTimeInASingleColumn = (timeSteps, threshold) => {
  var _timeSteps$hours, _timeSteps$minutes;
  return 24 * 60 / (((_timeSteps$hours = timeSteps.hours) != null ? _timeSteps$hours : 1) * ((_timeSteps$minutes = timeSteps.minutes) != null ? _timeSteps$minutes : 5)) <= threshold;
};
function resolveTimeViewsResponse({
  thresholdToRenderTimeInASingleColumn: inThreshold,
  ampm,
  timeSteps: inTimeSteps,
  views
}) {
  const thresholdToRenderTimeInASingleColumn = inThreshold != null ? inThreshold : 24;
  const timeSteps = _extends({
    hours: 1,
    minutes: 5,
    seconds: 5
  }, inTimeSteps);
  const shouldRenderTimeInASingleColumn = resolveShouldRenderTimeInASingleColumn(timeSteps, thresholdToRenderTimeInASingleColumn);
  return {
    thresholdToRenderTimeInASingleColumn,
    timeSteps,
    shouldRenderTimeInASingleColumn,
    views: resolveViews(ampm, views, shouldRenderTimeInASingleColumn)
  };
}

// node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
var DesktopDateTimePicker = React56.forwardRef(function DesktopDateTimePicker2(inProps, ref) {
  var _defaultizedProps$amp, _defaultizedProps$yea, _defaultizedProps$slo2, _defaultizedProps$slo3, _defaultizedProps$slo4, _props$localeText$ope, _props$localeText;
  const localeText = useLocaleText();
  const utils = useUtils();
  const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiDesktopDateTimePicker");
  const {
    shouldRenderTimeInASingleColumn,
    thresholdToRenderTimeInASingleColumn,
    views,
    timeSteps
  } = resolveTimeViewsResponse(defaultizedProps);
  const shouldUseNewRenderer = !defaultizedProps.viewRenderers || Object.keys(defaultizedProps.viewRenderers).length === 0;
  const viewRenderers = shouldUseNewRenderer ? {
    day: renderDesktopDateTimeView,
    month: renderDesktopDateTimeView,
    year: renderDesktopDateTimeView,
    hours: renderDesktopDateTimeView,
    minutes: renderDesktopDateTimeView,
    seconds: renderDesktopDateTimeView,
    meridiem: renderDesktopDateTimeView
  } : _extends({
    day: renderDateViewCalendar,
    month: renderDateViewCalendar,
    year: renderDateViewCalendar,
    hours: null,
    minutes: null,
    seconds: null,
    meridiem: null
  }, defaultizedProps.viewRenderers);
  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
  const actionBarActions = shouldUseNewRenderer ? ["accept"] : [];
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    format: resolveDateTimeFormat(utils, defaultizedProps),
    views,
    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
    ampmInClock,
    timeSteps,
    thresholdToRenderTimeInASingleColumn,
    shouldRenderTimeInASingleColumn,
    slots: _extends({
      field: DateTimeField,
      openPickerIcon: CalendarIcon
    }, defaultizedProps.slots),
    slotProps: _extends({}, defaultizedProps.slotProps, {
      field: (ownerState) => {
        var _defaultizedProps$slo;
        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        });
      },
      toolbar: _extends({
        hidden: true,
        ampmInClock,
        toolbarVariant: shouldUseNewRenderer ? "desktop" : "mobile"
      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
      tabs: _extends({
        hidden: true
      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs),
      actionBar: _extends({
        actions: actionBarActions
      }, (_defaultizedProps$slo4 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo4.actionBar)
    })
  });
  const {
    renderPicker
  } = useDesktopPicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "date-time",
    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
    validator: validateDateTime
  });
  return renderPicker();
});
DesktopDateTimePicker.propTypes = {
  ampm: import_prop_types16.default.bool,
  ampmInClock: import_prop_types16.default.bool,
  autoFocus: import_prop_types16.default.bool,
  className: import_prop_types16.default.string,
  closeOnSelect: import_prop_types16.default.bool,
  components: import_prop_types16.default.object,
  componentsProps: import_prop_types16.default.object,
  dayOfWeekFormatter: import_prop_types16.default.func,
  defaultCalendarMonth: import_prop_types16.default.any,
  defaultValue: import_prop_types16.default.any,
  disabled: import_prop_types16.default.bool,
  disableFuture: import_prop_types16.default.bool,
  disableHighlightToday: import_prop_types16.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types16.default.bool,
  disableOpenPicker: import_prop_types16.default.bool,
  disablePast: import_prop_types16.default.bool,
  displayWeekNumber: import_prop_types16.default.bool,
  fixedWeekNumber: import_prop_types16.default.number,
  format: import_prop_types16.default.string,
  formatDensity: import_prop_types16.default.oneOf(["dense", "spacious"]),
  inputRef: refType_default,
  label: import_prop_types16.default.node,
  loading: import_prop_types16.default.bool,
  localeText: import_prop_types16.default.object,
  maxDate: import_prop_types16.default.any,
  maxDateTime: import_prop_types16.default.any,
  maxTime: import_prop_types16.default.any,
  minDate: import_prop_types16.default.any,
  minDateTime: import_prop_types16.default.any,
  minTime: import_prop_types16.default.any,
  minutesStep: import_prop_types16.default.number,
  monthsPerRow: import_prop_types16.default.oneOf([3, 4]),
  name: import_prop_types16.default.string,
  onAccept: import_prop_types16.default.func,
  onChange: import_prop_types16.default.func,
  onClose: import_prop_types16.default.func,
  onError: import_prop_types16.default.func,
  onMonthChange: import_prop_types16.default.func,
  onOpen: import_prop_types16.default.func,
  onSelectedSectionsChange: import_prop_types16.default.func,
  onViewChange: import_prop_types16.default.func,
  onYearChange: import_prop_types16.default.func,
  open: import_prop_types16.default.bool,
  openTo: import_prop_types16.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types16.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types16.default.bool,
  reduceAnimations: import_prop_types16.default.bool,
  referenceDate: import_prop_types16.default.any,
  renderLoading: import_prop_types16.default.func,
  selectedSections: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types16.default.number, import_prop_types16.default.shape({
    endIndex: import_prop_types16.default.number.isRequired,
    startIndex: import_prop_types16.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types16.default.func,
  shouldDisableDate: import_prop_types16.default.func,
  shouldDisableMonth: import_prop_types16.default.func,
  shouldDisableTime: import_prop_types16.default.func,
  shouldDisableYear: import_prop_types16.default.func,
  showDaysOutsideCurrentMonth: import_prop_types16.default.bool,
  skipDisabled: import_prop_types16.default.bool,
  slotProps: import_prop_types16.default.object,
  slots: import_prop_types16.default.object,
  sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
  thresholdToRenderTimeInASingleColumn: import_prop_types16.default.number,
  timeSteps: import_prop_types16.default.shape({
    hours: import_prop_types16.default.number,
    minutes: import_prop_types16.default.number,
    seconds: import_prop_types16.default.number
  }),
  timezone: import_prop_types16.default.string,
  value: import_prop_types16.default.any,
  view: import_prop_types16.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  viewRenderers: import_prop_types16.default.shape({
    day: import_prop_types16.default.func,
    hours: import_prop_types16.default.func,
    meridiem: import_prop_types16.default.func,
    minutes: import_prop_types16.default.func,
    month: import_prop_types16.default.func,
    seconds: import_prop_types16.default.func,
    year: import_prop_types16.default.func
  }),
  views: import_prop_types16.default.arrayOf(import_prop_types16.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  yearsPerRow: import_prop_types16.default.oneOf([3, 4])
};

// node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js
init_extends();
var React58 = __toESM(require_react());
var import_prop_types17 = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/useMobilePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React57 = __toESM(require_react());
init_useForkRef();
init_useId();
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var _excluded39 = ["props", "getOpenDialogAriaText"];
var useMobilePicker = (_ref) => {
  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$layout;
  let {
    props,
    getOpenDialogAriaText
  } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded39);
  const {
    slots,
    slotProps: innerSlotProps,
    className,
    sx,
    format,
    formatDensity,
    timezone,
    name,
    label,
    inputRef,
    readOnly,
    disabled,
    localeText
  } = props;
  const utils = useUtils();
  const internalInputRef = React57.useRef(null);
  const labelId = useId();
  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
  const {
    open,
    actions,
    layoutProps,
    renderCurrentView,
    fieldProps: pickerFieldProps
  } = usePicker(_extends({}, pickerParams, {
    props,
    inputRef: internalInputRef,
    autoFocusView: true,
    additionalViewProps: {},
    wrapperVariant: "mobile"
  }));
  const Field = slots.field;
  const fieldProps = useSlotProps({
    elementType: Field,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
      id: labelId
    }, !(disabled || readOnly) && {
      onClick: actions.onOpen,
      onKeyDown: onSpaceOrEnter(actions.onOpen)
    }, {
      readOnly: readOnly != null ? readOnly : true,
      disabled,
      className,
      sx,
      format,
      formatDensity,
      timezone,
      label,
      name
    }),
    ownerState: props
  });
  fieldProps.inputProps = _extends({}, fieldProps.inputProps, {
    "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils)
  });
  const slotsForField = _extends({
    textField: slots.textField
  }, fieldProps.slots);
  const Layout8 = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
  let labelledById = labelId;
  if (isToolbarHidden) {
    if (label) {
      labelledById = `${labelId}-label`;
    } else {
      labelledById = void 0;
    }
  }
  const slotProps = _extends({}, innerSlotProps, {
    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
      titleId: labelId
    }),
    mobilePaper: _extends({
      "aria-labelledby": labelledById
    }, innerSlotProps == null ? void 0 : innerSlotProps.mobilePaper)
  });
  const renderPicker = () => (0, import_jsx_runtime55.jsxs)(LocalizationProvider, {
    localeText,
    children: [(0, import_jsx_runtime54.jsx)(Field, _extends({}, fieldProps, {
      slots: slotsForField,
      slotProps,
      inputRef: handleInputRef
    })), (0, import_jsx_runtime54.jsx)(PickersModalDialog, _extends({}, actions, {
      open,
      slots,
      slotProps,
      children: (0, import_jsx_runtime54.jsx)(Layout8, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
        slots,
        slotProps,
        children: renderCurrentView()
      }))
    }))]
  });
  return {
    renderPicker
  };
};

// node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js
var MobileDateTimePicker = React58.forwardRef(function MobileDateTimePicker2(inProps, ref) {
  var _defaultizedProps$amp, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;
  const localeText = useLocaleText();
  const utils = useUtils();
  const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
  const viewRenderers = _extends({
    day: renderDateViewCalendar,
    month: renderDateViewCalendar,
    year: renderDateViewCalendar,
    hours: renderTimeViewClock,
    minutes: renderTimeViewClock,
    seconds: renderTimeViewClock
  }, defaultizedProps.viewRenderers);
  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    format: resolveDateTimeFormat(utils, defaultizedProps),
    ampmInClock,
    slots: _extends({
      field: DateTimeField
    }, defaultizedProps.slots),
    slotProps: _extends({}, defaultizedProps.slotProps, {
      field: (ownerState) => {
        var _defaultizedProps$slo;
        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        });
      },
      toolbar: _extends({
        hidden: false,
        ampmInClock
      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
      tabs: _extends({
        hidden: false
      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs)
    })
  });
  const {
    renderPicker
  } = useMobilePicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "date-time",
    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
    validator: validateDateTime
  });
  return renderPicker();
});
MobileDateTimePicker.propTypes = {
  ampm: import_prop_types17.default.bool,
  ampmInClock: import_prop_types17.default.bool,
  autoFocus: import_prop_types17.default.bool,
  className: import_prop_types17.default.string,
  closeOnSelect: import_prop_types17.default.bool,
  components: import_prop_types17.default.object,
  componentsProps: import_prop_types17.default.object,
  dayOfWeekFormatter: import_prop_types17.default.func,
  defaultCalendarMonth: import_prop_types17.default.any,
  defaultValue: import_prop_types17.default.any,
  disabled: import_prop_types17.default.bool,
  disableFuture: import_prop_types17.default.bool,
  disableHighlightToday: import_prop_types17.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types17.default.bool,
  disableOpenPicker: import_prop_types17.default.bool,
  disablePast: import_prop_types17.default.bool,
  displayWeekNumber: import_prop_types17.default.bool,
  fixedWeekNumber: import_prop_types17.default.number,
  format: import_prop_types17.default.string,
  formatDensity: import_prop_types17.default.oneOf(["dense", "spacious"]),
  inputRef: refType_default,
  label: import_prop_types17.default.node,
  loading: import_prop_types17.default.bool,
  localeText: import_prop_types17.default.object,
  maxDate: import_prop_types17.default.any,
  maxDateTime: import_prop_types17.default.any,
  maxTime: import_prop_types17.default.any,
  minDate: import_prop_types17.default.any,
  minDateTime: import_prop_types17.default.any,
  minTime: import_prop_types17.default.any,
  minutesStep: import_prop_types17.default.number,
  monthsPerRow: import_prop_types17.default.oneOf([3, 4]),
  name: import_prop_types17.default.string,
  onAccept: import_prop_types17.default.func,
  onChange: import_prop_types17.default.func,
  onClose: import_prop_types17.default.func,
  onError: import_prop_types17.default.func,
  onMonthChange: import_prop_types17.default.func,
  onOpen: import_prop_types17.default.func,
  onSelectedSectionsChange: import_prop_types17.default.func,
  onViewChange: import_prop_types17.default.func,
  onYearChange: import_prop_types17.default.func,
  open: import_prop_types17.default.bool,
  openTo: import_prop_types17.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types17.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types17.default.bool,
  reduceAnimations: import_prop_types17.default.bool,
  referenceDate: import_prop_types17.default.any,
  renderLoading: import_prop_types17.default.func,
  selectedSections: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types17.default.number, import_prop_types17.default.shape({
    endIndex: import_prop_types17.default.number.isRequired,
    startIndex: import_prop_types17.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types17.default.func,
  shouldDisableDate: import_prop_types17.default.func,
  shouldDisableMonth: import_prop_types17.default.func,
  shouldDisableTime: import_prop_types17.default.func,
  shouldDisableYear: import_prop_types17.default.func,
  showDaysOutsideCurrentMonth: import_prop_types17.default.bool,
  slotProps: import_prop_types17.default.object,
  slots: import_prop_types17.default.object,
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
  timezone: import_prop_types17.default.string,
  value: import_prop_types17.default.any,
  view: import_prop_types17.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  viewRenderers: import_prop_types17.default.shape({
    day: import_prop_types17.default.func,
    hours: import_prop_types17.default.func,
    minutes: import_prop_types17.default.func,
    month: import_prop_types17.default.func,
    seconds: import_prop_types17.default.func,
    year: import_prop_types17.default.func
  }),
  views: import_prop_types17.default.arrayOf(import_prop_types17.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  yearsPerRow: import_prop_types17.default.oneOf([3, 4])
};

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var _excluded40 = ["desktopModeMediaQuery"];
var DateTimePicker = React59.forwardRef(function DateTimePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateTimePicker"
  });
  const {
    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime56.jsx)(DesktopDateTimePicker, _extends({
      ref
    }, other));
  }
  return (0, import_jsx_runtime56.jsx)(MobileDateTimePicker, _extends({
    ref
  }, other));
});
true ? DateTimePicker.propTypes = {
  ampm: import_prop_types18.default.bool,
  ampmInClock: import_prop_types18.default.bool,
  autoFocus: import_prop_types18.default.bool,
  className: import_prop_types18.default.string,
  closeOnSelect: import_prop_types18.default.bool,
  components: import_prop_types18.default.object,
  componentsProps: import_prop_types18.default.object,
  dayOfWeekFormatter: import_prop_types18.default.func,
  defaultCalendarMonth: import_prop_types18.default.any,
  defaultValue: import_prop_types18.default.any,
  desktopModeMediaQuery: import_prop_types18.default.string,
  disabled: import_prop_types18.default.bool,
  disableFuture: import_prop_types18.default.bool,
  disableHighlightToday: import_prop_types18.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types18.default.bool,
  disableOpenPicker: import_prop_types18.default.bool,
  disablePast: import_prop_types18.default.bool,
  displayWeekNumber: import_prop_types18.default.bool,
  fixedWeekNumber: import_prop_types18.default.number,
  format: import_prop_types18.default.string,
  formatDensity: import_prop_types18.default.oneOf(["dense", "spacious"]),
  inputRef: refType_default,
  label: import_prop_types18.default.node,
  loading: import_prop_types18.default.bool,
  localeText: import_prop_types18.default.object,
  maxDate: import_prop_types18.default.any,
  maxDateTime: import_prop_types18.default.any,
  maxTime: import_prop_types18.default.any,
  minDate: import_prop_types18.default.any,
  minDateTime: import_prop_types18.default.any,
  minTime: import_prop_types18.default.any,
  minutesStep: import_prop_types18.default.number,
  monthsPerRow: import_prop_types18.default.oneOf([3, 4]),
  name: import_prop_types18.default.string,
  onAccept: import_prop_types18.default.func,
  onChange: import_prop_types18.default.func,
  onClose: import_prop_types18.default.func,
  onError: import_prop_types18.default.func,
  onMonthChange: import_prop_types18.default.func,
  onOpen: import_prop_types18.default.func,
  onSelectedSectionsChange: import_prop_types18.default.func,
  onViewChange: import_prop_types18.default.func,
  onYearChange: import_prop_types18.default.func,
  open: import_prop_types18.default.bool,
  openTo: import_prop_types18.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types18.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types18.default.bool,
  reduceAnimations: import_prop_types18.default.bool,
  referenceDate: import_prop_types18.default.any,
  renderLoading: import_prop_types18.default.func,
  selectedSections: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types18.default.number, import_prop_types18.default.shape({
    endIndex: import_prop_types18.default.number.isRequired,
    startIndex: import_prop_types18.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types18.default.func,
  shouldDisableDate: import_prop_types18.default.func,
  shouldDisableMonth: import_prop_types18.default.func,
  shouldDisableTime: import_prop_types18.default.func,
  shouldDisableYear: import_prop_types18.default.func,
  showDaysOutsideCurrentMonth: import_prop_types18.default.bool,
  skipDisabled: import_prop_types18.default.bool,
  slotProps: import_prop_types18.default.object,
  slots: import_prop_types18.default.object,
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
  thresholdToRenderTimeInASingleColumn: import_prop_types18.default.number,
  timeSteps: import_prop_types18.default.shape({
    hours: import_prop_types18.default.number,
    minutes: import_prop_types18.default.number,
    seconds: import_prop_types18.default.number
  }),
  timezone: import_prop_types18.default.string,
  value: import_prop_types18.default.any,
  view: import_prop_types18.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  viewRenderers: import_prop_types18.default.shape({
    day: import_prop_types18.default.func,
    hours: import_prop_types18.default.func,
    meridiem: import_prop_types18.default.func,
    minutes: import_prop_types18.default.func,
    month: import_prop_types18.default.func,
    seconds: import_prop_types18.default.func,
    year: import_prop_types18.default.func
  }),
  views: import_prop_types18.default.arrayOf(import_prop_types18.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  yearsPerRow: import_prop_types18.default.oneOf([3, 4])
} : void 0;

// node_modules/@devexpress/dx-react-scheduler-material-ui/dist/dx-react-scheduler-material-ui.es.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var _excluded41 = ["children", "className"];
var PREFIX = "Container";
var classes = {
  container: "".concat(PREFIX, "-container")
};
var ContainerBase = function ContainerBase2(_ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded41);
  return (0, import_react.createElement)("div", _extends2({
    className: clsx_m_default(classes.container, className)
  }, restProps), children);
};
true ? ContainerBase.propTypes = {
  children: import_prop_types19.default.node.isRequired,
  className: import_prop_types19.default.string
} : void 0;
ContainerBase.defaultProps = {
  className: void 0
};
var _excluded$1 = ["height", "style"];
var StyledContainerBase = styled_default(ContainerBase)(_defineProperty({}, "&.".concat(classes.container), {
  WebkitOverflowScrolling: "touch",
  width: "100%",
  height: "100%",
  position: "relative",
  display: "flex",
  flexDirection: "column"
}));
var Root = function Root2(_ref) {
  var height = _ref.height, style = _ref.style, restProps = _objectWithoutProperties(_ref, _excluded$1);
  var containerStyle = height === AUTO_HEIGHT ? {
    height: "100%"
  } : {
    height: "".concat(height, "px")
  };
  return (0, import_react.createElement)(StyledContainerBase, _extends2({
    style: _objectSpread2(_objectSpread2({}, containerStyle), style)
  }, restProps));
};
true ? Root.propTypes = {
  height: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string]).isRequired,
  style: import_prop_types19.default.object
} : void 0;
Root.defaultProps = {
  style: null
};
var _excluded$2 = ["children"];
var Scheduler2 = function Scheduler3(_ref) {
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$2);
  return (0, import_react.createElement)(Scheduler, _extends2({
    rootComponent: Root
  }, restProps), children);
};
Scheduler2.Root = Root;
true ? Scheduler2.propTypes = {
  children: import_prop_types19.default.node.isRequired
} : void 0;
var _SPACING_CELL_HEIGHT;
var _BASIC_CELL_HEIGHT;
var red = colors_exports.red;
var pink = colors_exports.pink;
var purple = colors_exports.purple;
var deepPurple = colors_exports.deepPurple;
var indigo = colors_exports.indigo;
var blue = colors_exports.blue;
var lightBlue = colors_exports.lightBlue;
var cyan = colors_exports.cyan;
var teal = colors_exports.teal;
var green = colors_exports.green;
var lightGreen = colors_exports.lightGreen;
var lime = colors_exports.lime;
var yellow = colors_exports.yellow;
var amber = colors_exports.amber;
var orange = colors_exports.orange;
var deepOrange = colors_exports.deepOrange;
var PRIMARY_COLOR = blue;
var TRANSITIONS_TIME = 400;
var DEFAULT_PALETTE = [red, pink, purple, deepPurple, indigo, blue, lightBlue, cyan, teal, green, lightGreen, lime, yellow, amber, orange, deepOrange];
var XS_CELL_WIDTH = 50;
var SMALL_CELL_WIDTH = 65;
var CELL_WIDTH = 100;
var XS_LAYOUT_WIDTH = 500;
var SMALL_LAYOUT_WIDTH = 700;
var SMALL_LAYOUT_MEDIA_QUERY = "@media (max-width: ".concat(XS_LAYOUT_WIDTH, "px)");
var LAYOUT_MEDIA_QUERY = "@media (max-width: ".concat(SMALL_LAYOUT_WIDTH, "px)");
var GROUPING_PANEL_VERTICAL_CELL_WIDTH = 12.5;
var DEFAULT_SPACING = 8;
var SPACING_CELL_HEIGHT = (_SPACING_CELL_HEIGHT = {}, _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.MONTH, 12.5), _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.WEEK, 6), _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.DAY, 6), _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.ALL_DAY_PANEL, 5.75), _SPACING_CELL_HEIGHT);
var BASIC_CELL_HEIGHT = (_BASIC_CELL_HEIGHT = {}, _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.MONTH, SPACING_CELL_HEIGHT[VIEW_TYPES.MONTH] * DEFAULT_SPACING), _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.WEEK, SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK] * DEFAULT_SPACING), _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.DAY, SPACING_CELL_HEIGHT[VIEW_TYPES.DAY] * DEFAULT_SPACING), _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.ALL_DAY_PANEL, SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL] * DEFAULT_SPACING), _BASIC_CELL_HEIGHT);
var SPACING_LABEL_HEIGHT = SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK];
var LEFT_PANEL_WIDTH_SPACING = 10;
var getBorder = function getBorder2(theme) {
  return "1px solid ".concat(theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68));
};
var getBrightBorder = function getBrightBorder2(theme) {
  return "1px solid ".concat(theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.72) : darken(alpha(theme.palette.divider, 1), 0.5));
};
var cellsMeta = function cellsMeta2(tableElement) {
  var cellElements = Array.from(tableElement.querySelectorAll("td"));
  return {
    parentRect: function parentRect() {
      return tableElement.getBoundingClientRect();
    },
    getCellRects: cellElements.map(function(element) {
      return function() {
        return element.getBoundingClientRect();
      };
    })
  };
};
var scrollingStrategy = function scrollingStrategy2(scrollablePart, fixedPartVertical, fixedPartHorizontal) {
  var fixedPartVerticalRect = fixedPartVertical.getBoundingClientRect();
  var fixedPartHorizontalRect = fixedPartHorizontal && fixedPartHorizontal.getBoundingClientRect();
  var changeVerticalScroll = function changeVerticalScroll2(value) {
    scrollablePart.scrollTop += value;
  };
  var changeHorizontalScroll = function changeHorizontalScroll2(value) {
    scrollablePart.scrollLeft += value;
  };
  return {
    topBoundary: fixedPartVerticalRect.height + fixedPartVerticalRect.top,
    bottomBoundary: scrollablePart.offsetTop + scrollablePart.clientHeight,
    fixedTopHeight: fixedPartVerticalRect.height,
    leftBoundary: fixedPartHorizontalRect ? fixedPartHorizontalRect.width + fixedPartHorizontalRect.left : scrollablePart.offsetLeft,
    rightBoundary: scrollablePart.offsetLeft + scrollablePart.clientWidth,
    fixedLeftWidth: fixedPartHorizontalRect === null || fixedPartHorizontalRect === void 0 ? void 0 : fixedPartHorizontalRect.width,
    changeVerticalScroll,
    changeHorizontalScroll
  };
};
var ensureColor = function ensureColor2(level, color) {
  return color[level] || PRIMARY_COLOR[level];
};
var getResourceColor = function getResourceColor2(resources) {
  if (resources && resources.length) {
    var _resources$find;
    return (_resources$find = resources.find(function(resource) {
      return resource.isMain;
    })) === null || _resources$find === void 0 ? void 0 : _resources$find.color;
  }
  return void 0;
};
var getAppointmentColor = function getAppointmentColor2(level, color, defaultColor) {
  if (!color)
    return ensureColor(level, defaultColor);
  if (typeof color === "string")
    return color;
  return ensureColor(level, color);
};
var getWidthInPixels = function getWidthInPixels2(cellsNumber, cellWidth) {
  return "".concat(cellsNumber * cellWidth, "px");
};
var getViewCellKey = function getViewCellKey2(startDate, groups) {
  if (!groups)
    return startDate.toString();
  return groups.reduce(function(acc, group) {
    return acc.concat(group.id);
  }, startDate.toString());
};
var addCommaAndSpaceToString = function addCommaAndSpaceToString2(string) {
  return string && "".concat(string, ",\xA0");
};
var getEmptyCellWidth = function getEmptyCellWidth2(theme, width, calculatedWidth) {
  return width ? "".concat(width, "px") : "calc(".concat(theme.spacing(calculatedWidth), " + 1px)");
};
var _excluded$3 = ["timeScaleComponent", "dayScaleComponent", "timeTableComponent", "dayScaleEmptyCellComponent", "groupingPanelComponent", "groupingPanelSize", "setScrollingStrategy", "className", "forwardedRef"];
var PREFIX$1 = "MainLayout";
var classes$1 = {
  container: "".concat(PREFIX$1, "-container"),
  stickyElement: "".concat(PREFIX$1, "-stickyElement"),
  header: "".concat(PREFIX$1, "-header"),
  leftPanel: "".concat(PREFIX$1, "-leftPanel"),
  ordinaryLeftPanelBorder: "".concat(PREFIX$1, "-ordinaryLeftPanelBorder"),
  brightLeftPanelBorder: "".concat(PREFIX$1, "-brightLeftPanelBorder"),
  ordinaryHeaderBorder: "".concat(PREFIX$1, "-ordinaryHeaderBorder"),
  brightHeaderBorder: "".concat(PREFIX$1, "-brightHeaderBorder"),
  dayScaleEmptyCell: "".concat(PREFIX$1, "-dayScaleEmptyCell"),
  flexRow: "".concat(PREFIX$1, "-flexRow"),
  relativeContainer: "".concat(PREFIX$1, "-relativeContainer"),
  inlineFlex: "".concat(PREFIX$1, "-inlineFlex"),
  background: "".concat(PREFIX$1, "-background")
};
var StyledDiv = styled_default("div", {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== "leftPanelWidth" && prop !== "calculatedLeftPanelWidth";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, leftPanelWidth = _ref.leftPanelWidth, calculatedLeftPanelWidth = _ref.calculatedLeftPanelWidth;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$1.container), {
    overflowY: "auto",
    position: "relative",
    tableLayout: "fixed"
  }), _defineProperty(_ref2, "& .".concat(classes$1.stickyElement), {
    tableLayout: "fixed",
    position: "sticky",
    overflow: "visible",
    background: theme.palette.background.paper
  }), _defineProperty(_ref2, "& .".concat(classes$1.header), {
    top: 0,
    zIndex: 2
  }), _defineProperty(_ref2, "& .".concat(classes$1.leftPanel), {
    left: 0,
    zIndex: 1,
    boxSizing: "border-box"
  }), _defineProperty(_ref2, "& .".concat(classes$1.ordinaryLeftPanelBorder), {
    borderRight: getBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.brightLeftPanelBorder), {
    borderRight: getBrightBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.ordinaryHeaderBorder), {
    borderBottom: getBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.brightHeaderBorder), {
    borderBottom: getBrightBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.dayScaleEmptyCell), {
    display: "flex",
    alignItems: "flex-end",
    width: getEmptyCellWidth(theme, leftPanelWidth, calculatedLeftPanelWidth),
    minWidth: getEmptyCellWidth(theme, leftPanelWidth, calculatedLeftPanelWidth)
  }), _defineProperty(_ref2, "& .".concat(classes$1.flexRow), {
    display: "flex",
    flexDirection: "row"
  }), _defineProperty(_ref2, "& .".concat(classes$1.relativeContainer), {
    position: "relative"
  }), _defineProperty(_ref2, "& .".concat(classes$1.inlineFlex), {
    display: "inline-flex"
  }), _defineProperty(_ref2, "& .".concat(classes$1.background), {
    background: theme.palette.background.paper
  }), _ref2;
});
var MainLayout = (0, import_react.memo)(function(_ref3) {
  var _classNames, _classNames2, _classNames3;
  var TimeScale = _ref3.timeScaleComponent, DayScale = _ref3.dayScaleComponent, TimeTable = _ref3.timeTableComponent, DayScaleEmptyCell3 = _ref3.dayScaleEmptyCellComponent, GroupingPanel3 = _ref3.groupingPanelComponent, groupingPanelSize = _ref3.groupingPanelSize, setScrollingStrategy = _ref3.setScrollingStrategy, className = _ref3.className, forwardedRef = _ref3.forwardedRef, restProps = _objectWithoutProperties(_ref3, _excluded$3);
  var layoutRef = (0, import_react.useRef)(null);
  var layoutHeaderRef = (0, import_react.useRef)(null);
  var leftPanelRef = (0, import_react.useRef)(null);
  var _React$useState = (0, import_react.useState)(false), _React$useState2 = _slicedToArray(_React$useState, 2), isLeftBorderSet = _React$useState2[0], setIsLeftBorderSet = _React$useState2[1];
  var _React$useState3 = (0, import_react.useState)(false), _React$useState4 = _slicedToArray(_React$useState3, 2), isTopBorderSet = _React$useState4[0], setIsTopBorderSet = _React$useState4[1];
  var _React$useState5 = (0, import_react.useState)(0), _React$useState6 = _slicedToArray(_React$useState5, 2), leftPanelWidth = _React$useState6[0], setLeftPanelWidth = _React$useState6[1];
  (0, import_react.useEffect)(function() {
    var leftPanel = leftPanelRef.current;
    setScrollingStrategy(scrollingStrategy(layoutRef.current, layoutHeaderRef.current, leftPanel));
    leftPanel && setLeftPanelWidth(leftPanel.getBoundingClientRect().width);
  }, [layoutRef, layoutHeaderRef, leftPanelRef, setScrollingStrategy, setLeftPanelWidth]);
  var renderTimeScale = !!TimeScale;
  var renderLeftPanel = renderTimeScale || !!groupingPanelSize;
  var calculatedGroupPanelWidth = groupingPanelSize ? groupingPanelSize * GROUPING_PANEL_VERTICAL_CELL_WIDTH : 0;
  var calculatedLeftPanelWidth = LEFT_PANEL_WIDTH_SPACING + calculatedGroupPanelWidth;
  var setBorders = (0, import_react.useCallback)(function(event) {
    if (!!event.target.scrollLeft ^ isLeftBorderSet) {
      setIsLeftBorderSet(!isLeftBorderSet);
    }
    if (!!event.target.scrollTop ^ isTopBorderSet) {
      setIsTopBorderSet(!isTopBorderSet);
    }
  }, [isLeftBorderSet, isTopBorderSet]);
  return (0, import_react.createElement)(StyledDiv, _extends2({
    leftPanelWidth,
    calculatedLeftPanelWidth,
    ref: function ref(node) {
      layoutRef.current = node;
      if (typeof forwardedRef === "function") {
        forwardedRef(node);
      } else if (forwardedRef) {
        forwardedRef.current = node;
      }
    },
    className: clsx_m_default(classes$1.container, className),
    onScroll: setBorders
  }, restProps), (0, import_react.createElement)("div", null, (0, import_react.createElement)("div", {
    ref: layoutHeaderRef,
    className: clsx_m_default(classes$1.stickyElement, classes$1.header, classes$1.flexRow)
  }, (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$1.background, true), _defineProperty(_classNames, classes$1.inlineFlex, true), _defineProperty(_classNames, classes$1.ordinaryHeaderBorder, !isTopBorderSet), _defineProperty(_classNames, classes$1.brightHeaderBorder, isTopBorderSet), _classNames))
  }, renderLeftPanel && (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$1.stickyElement, true), _defineProperty(_classNames2, classes$1.leftPanel, true), _defineProperty(_classNames2, classes$1.dayScaleEmptyCell, true), _defineProperty(_classNames2, classes$1.ordinaryLeftPanelBorder, !isLeftBorderSet), _defineProperty(_classNames2, classes$1.brightLeftPanelBorder, isLeftBorderSet), _classNames2))
  }, (0, import_react.createElement)(DayScaleEmptyCell3, null)), (0, import_react.createElement)("div", null, (0, import_react.createElement)(DayScale, null)))), (0, import_react.createElement)("div", {
    className: classes$1.flexRow
  }, (0, import_react.createElement)("div", {
    className: classes$1.inlineFlex
  }, renderLeftPanel && (0, import_react.createElement)("div", {
    ref: leftPanelRef,
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$1.flexRow, true), _defineProperty(_classNames3, classes$1.stickyElement, true), _defineProperty(_classNames3, classes$1.leftPanel, true), _defineProperty(_classNames3, classes$1.ordinaryLeftPanelBorder, !isLeftBorderSet), _defineProperty(_classNames3, classes$1.brightLeftPanelBorder, isLeftBorderSet), _classNames3))
  }, (0, import_react.createElement)(GroupingPanel3, null), renderTimeScale && (0, import_react.createElement)(TimeScale, null)), (0, import_react.createElement)("div", {
    className: classes$1.relativeContainer
  }, (0, import_react.createElement)(TimeTable, null))))));
});
true ? MainLayout.propTypes = {
  timeScaleComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  dayScaleComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  timeTableComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  dayScaleEmptyCellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  groupingPanelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  groupingPanelSize: import_prop_types19.default.number,
  setScrollingStrategy: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  forwardedRef: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
} : void 0;
MainLayout.defaultProps = {
  groupingPanelComponent: function groupingPanelComponent() {
    return null;
  },
  timeScaleComponent: void 0,
  groupingPanelSize: 0,
  className: void 0,
  forwardedRef: void 0
};
var _excluded$4 = ["children"];
var Row = function Row2(_ref) {
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$4);
  return (0, import_react.createElement)(TableRow_default, restProps, children);
};
true ? Row.propTypes = {
  children: import_prop_types19.default.node
} : void 0;
Row.defaultProps = {
  children: null
};
var _excluded$5 = ["className", "children"];
var PREFIX$2 = "DayScaleEmptyCell";
var classes$2 = {
  emptyCell: "".concat(PREFIX$2, "-emptyCell")
};
var StyledDiv$1 = styled_default("div")(_defineProperty({}, "&.".concat(classes$2.emptyCell), {
  height: "100%",
  width: "100%"
}));
var DayScaleEmptyCell = function DayScaleEmptyCell2(_ref) {
  var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$5);
  return (0, import_react.createElement)(StyledDiv$1, _extends2({}, restProps, {
    className: clsx_m_default(classes$2.emptyCell, className)
  }), children);
};
true ? DayScaleEmptyCell.propTypes = {
  className: import_prop_types19.default.string,
  children: import_prop_types19.default.node
} : void 0;
DayScaleEmptyCell.defaultProps = {
  className: void 0,
  children: void 0
};
var Container = styled_default(ContainerBase)(_defineProperty({}, "&.".concat(classes.container), {
  position: "absolute",
  width: "100%",
  top: 0,
  left: 0
}));
var _excluded$6 = ["cellComponent", "rowComponent", "cellsData", "groupOrientation", "className", "groupCount", "includeAllDayCell"];
var PREFIX$3 = "TicksLayout";
var classes$3 = {
  table: "".concat(PREFIX$3, "-table")
};
var StyledTable = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$3.table), {
  tableLayout: "fixed",
  boxSizing: "border-box"
}));
var TicksLayout = function TicksLayout2(_ref) {
  var Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, cellsData = _ref.cellsData, groupOrientation = _ref.groupOrientation, className = _ref.className, groupCount = _ref.groupCount, includeAllDayCell = _ref.includeAllDayCell, restProps = _objectWithoutProperties(_ref, _excluded$6);
  var groupHeight = cellsData.length / groupCount;
  return (0, import_react.createElement)(StyledTable, _extends2({}, restProps, {
    className: clsx_m_default(classes$3.table, className)
  }), (0, import_react.createElement)(TableBody_default, null, cellsData.map(function(_ref2, index) {
    var _ref3 = _slicedToArray(_ref2, 1), firstDay = _ref3[0];
    return (0, import_react.createElement)(import_react.Fragment, {
      key: index.toString()
    }, index % groupHeight === 0 && includeAllDayCell && (0, import_react.createElement)(Row4, {
      key: (index / groupHeight).toString()
    }, (0, import_react.createElement)(Cell7, {
      key: "all-day-tick ".concat(index / groupHeight),
      isAllDay: true,
      startDate: firstDay.startDate,
      endDate: firstDay.endDate,
      endOfGroup: false,
      groupingInfo: firstDay.groupingInfo
    })), (0, import_react.createElement)(Row4, {
      key: (firstDay.startDate + index).toString()
    }, (0, import_react.createElement)(Cell7, {
      key: index.toString(),
      startDate: firstDay.startDate,
      endDate: firstDay.endDate,
      endOfGroup: firstDay.endOfGroup && groupOrientation === VERTICAL_GROUP_ORIENTATION,
      groupingInfo: firstDay.groupingInfo
    })));
  })));
};
true ? TicksLayout.propTypes = {
  cellsData: import_prop_types19.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  groupOrientation: import_prop_types19.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION]),
  groupCount: import_prop_types19.default.number,
  includeAllDayCell: import_prop_types19.default.bool,
  className: import_prop_types19.default.string
} : void 0;
TicksLayout.defaultProps = {
  className: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION,
  groupCount: 1,
  includeAllDayCell: false
};
var _excluded$7 = ["labelComponent", "rowComponent", "tickCellComponent", "allDayTitleComponent", "cellsData", "formatDate", "groupOrientation", "groups", "showAllDayTitle", "height", "className"];
var PREFIX$4 = "Layout";
var classes$4 = {
  timeScaleContainer: "".concat(PREFIX$4, "-timeScaleContainer"),
  ticks: "".concat(PREFIX$4, "-ticks"),
  cell: "".concat(PREFIX$4, "-cell"),
  verticalCell: "".concat(PREFIX$4, "-verticalCell"),
  flexRow: "".concat(PREFIX$4, "-flexRow")
};
var StyledDiv$2 = styled_default("div", {
  shouldForwardProp: function shouldForwardProp2(prop) {
    return prop !== "height" && prop !== "defaultHeight";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, height = _ref.height, defaultHeight = _ref.defaultHeight;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$4.timeScaleContainer), {
    width: theme.spacing(LEFT_PANEL_WIDTH_SPACING - 1)
  }), _defineProperty(_ref2, "& .".concat(classes$4.ticks), {
    width: theme.spacing(1)
  }), _defineProperty(_ref2, "& .".concat(classes$4.cell), {
    boxSizing: "border-box",
    padding: 0,
    borderBottom: "none"
  }), _defineProperty(_ref2, "& .".concat(classes$4.verticalCell), {
    borderBottom: getBrightBorder(theme),
    "tr:last-child &": {
      borderBottom: "none"
    },
    height: height ? "".concat(height, "px") : theme.spacing(defaultHeight)
  }), _defineProperty(_ref2, "&.".concat(classes$4.flexRow), {
    display: "flex",
    flexDirection: "row"
  }), _ref2;
});
var Layout = function Layout2(_ref3) {
  var Label3 = _ref3.labelComponent, rowComponent = _ref3.rowComponent, tickCellComponent = _ref3.tickCellComponent, AllDayTitle = _ref3.allDayTitleComponent, cellsData = _ref3.cellsData, formatDate3 = _ref3.formatDate, groupOrientation = _ref3.groupOrientation, groups = _ref3.groups, showAllDayTitle = _ref3.showAllDayTitle, height = _ref3.height, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$7);
  var groupCount = getGroupsLastRow(groups).length;
  var cellsCount = cellsData.length / groupCount;
  var heightWithoutAllDayTitle = SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK] * cellsCount;
  var defaultHeight = showAllDayTitle ? heightWithoutAllDayTitle + SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL] : heightWithoutAllDayTitle;
  var calculatedHeight = height / groupCount;
  return (0, import_react.createElement)(StyledDiv$2, _extends2({
    height: calculatedHeight,
    defaultHeight,
    className: clsx_m_default(classes$4.flexRow, className)
  }, restProps), (0, import_react.createElement)(Table_default, {
    className: classes$4.timeScaleContainer
  }, (0, import_react.createElement)(TableBody_default, null, getLabelsForAllGroups(cellsData, groups, groupOrientation).map(function(groupedLabels, groupIndex) {
    var _classNames;
    var firstDataLabel = groupedLabels[0];
    var lastDataLabel = groupedLabels[groupedLabels.length - 1];
    return (0, import_react.createElement)(TableRow_default, {
      key: groupIndex.toString()
    }, (0, import_react.createElement)(TableCell_default, {
      className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$4.cell, true), _defineProperty(_classNames, classes$4.verticalCell, groupOrientation === VERTICAL_GROUP_ORIENTATION), _classNames))
    }, (0, import_react.createElement)(AllDayTitle, {
      fixedHeight: true
    }), (0, import_react.createElement)(Label3, {
      key: firstDataLabel.startDate,
      groupingInfo: firstDataLabel.groupingInfo
    }), groupedLabels.map(function(label, index) {
      return index !== cellsData.length - 1 && (0, import_react.createElement)(Label3, {
        time: label.endDate,
        formatDate: formatDate3,
        key: label.key,
        groupingInfo: label.groupingInfo
      });
    }), (0, import_react.createElement)(Label3, {
      key: lastDataLabel.endDate,
      groupingInfo: lastDataLabel.groupingInfo
    })));
  }))), (0, import_react.createElement)(TicksLayout, {
    rowComponent,
    cellComponent: tickCellComponent,
    cellsData,
    className: classes$4.ticks,
    groupOrientation,
    groupCount,
    includeAllDayCell: showAllDayTitle
  }));
};
true ? Layout.propTypes = {
  cellsData: import_prop_types19.default.arrayOf(Array).isRequired,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  allDayTitleComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  tickCellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  groups: import_prop_types19.default.arrayOf(import_prop_types19.default.arrayOf(import_prop_types19.default.object)),
  groupOrientation: import_prop_types19.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION]),
  showAllDayTitle: import_prop_types19.default.bool,
  height: import_prop_types19.default.number,
  className: import_prop_types19.default.string
} : void 0;
Layout.defaultProps = {
  groups: [[{}]],
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION,
  allDayTitleComponent: function allDayTitleComponent() {
    return null;
  },
  showAllDayTitle: false,
  height: 0,
  className: void 0
};
var _excluded$8 = ["className", "time", "formatDate", "groupingInfo", "endOfGroup"];
var PREFIX$5 = "Label";
var classes$5 = {
  label: "".concat(PREFIX$5, "-label"),
  text: "".concat(PREFIX$5, "-text"),
  emptyLabel: "".concat(PREFIX$5, "-emptyLabel")
};
var StyledDiv$3 = styled_default("div")(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$5.label), {
    userSelect: "none",
    border: 0,
    height: theme.spacing(SPACING_LABEL_HEIGHT),
    lineHeight: theme.spacing(SPACING_LABEL_HEIGHT),
    padding: 0,
    overflow: "hidden",
    textOverflow: "ellipsis",
    textAlign: "right",
    paddingLeft: theme.spacing(0.25),
    paddingRight: theme.spacing(1)
  }), _defineProperty(_ref2, "& .".concat(classes$5.text), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    fontSize: "0.7rem",
    whiteSpace: "nowrap",
    color: theme.palette.text.secondary
  })), _defineProperty(_ref2, "&.".concat(classes$5.emptyLabel), {
    height: theme.spacing(SPACING_LABEL_HEIGHT / 2),
    "&:last-child": {
      height: "calc(".concat(theme.spacing(SPACING_LABEL_HEIGHT / 2), " - 1px)")
    }
  }), _ref2;
});
var Label = function Label2(_ref3) {
  var _classNames;
  var className = _ref3.className, time = _ref3.time, formatDate3 = _ref3.formatDate, groupingInfo = _ref3.groupingInfo, endOfGroup = _ref3.endOfGroup, restProps = _objectWithoutProperties(_ref3, _excluded$8);
  return (0, import_react.createElement)(StyledDiv$3, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$5.label, true), _defineProperty(_classNames, classes$5.emptyLabel, !time), _classNames), className)
  }, restProps), time && (0, import_react.createElement)("span", {
    className: classes$5.text
  }, formatDate3(time, HOUR_MINUTE_OPTIONS)));
};
true ? Label.propTypes = {
  formatDate: import_prop_types19.default.func,
  time: import_prop_types19.default.instanceOf(Date),
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object),
  endOfGroup: import_prop_types19.default.bool,
  className: import_prop_types19.default.string
} : void 0;
Label.defaultProps = {
  className: void 0,
  time: void 0,
  formatDate: function formatDate() {
    return void 0;
  },
  groupingInfo: void 0,
  endOfGroup: false
};
var _excluded$9 = ["className", "startDate", "endDate", "endOfGroup", "groupingInfo", "isAllDay"];
var PREFIX$6 = "TickCell";
var classes$6 = {
  cell: "".concat(PREFIX$6, "-cell"),
  brightBottomBorder: "".concat(PREFIX$6, "-brightBottomBorder"),
  allDayCell: "".concat(PREFIX$6, "-allDayCell")
};
var StyledTableCell = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$6.cell), {
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK]),
    padding: 0,
    boxSizing: "border-box",
    borderBottom: getBorder(theme),
    "tr:last-child &": {
      borderBottom: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$6.brightBottomBorder), {
    borderBottom: getBrightBorder(theme)
  }), _defineProperty(_ref2, "&.".concat(classes$6.allDayCell), {
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL])
  }), _ref2;
});
var TickCell = function TickCell2(_ref3) {
  var _classNames;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, isAllDay = _ref3.isAllDay, restProps = _objectWithoutProperties(_ref3, _excluded$9);
  return (0, import_react.createElement)(StyledTableCell, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$6.cell, true), _defineProperty(_classNames, classes$6.brightBottomBorder, endOfGroup), _defineProperty(_classNames, classes$6.allDayCell, isAllDay), _classNames), className)
  }, restProps));
};
true ? TickCell.propTypes = {
  startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  endOfGroup: import_prop_types19.default.bool,
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object),
  isAllDay: import_prop_types19.default.bool,
  className: import_prop_types19.default.string
} : void 0;
TickCell.defaultProps = {
  className: void 0,
  startDate: void 0,
  endDate: void 0,
  endOfGroup: false,
  groupingInfo: void 0,
  isAllDay: false
};
var _excluded$a = ["className", "cellsNumber", "children"];
var PREFIX$7 = "Table";
var classes$7 = {
  table: "".concat(PREFIX$7, "-table")
};
var StyledTableMUI = styled_default(Table_default, {
  shouldForwardProp: function shouldForwardProp3(prop) {
    return prop !== "cellsNumber";
  }
})(function(_ref) {
  var _$concat;
  var cellsNumber = _ref.cellsNumber;
  return _defineProperty({}, "&.".concat(classes$7.table), (_$concat = {
    tableLayout: "fixed",
    minWidth: getWidthInPixels(cellsNumber, CELL_WIDTH),
    width: "100%"
  }, _defineProperty(_$concat, "".concat(LAYOUT_MEDIA_QUERY), {
    minWidth: getWidthInPixels(cellsNumber, SMALL_CELL_WIDTH)
  }), _defineProperty(_$concat, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    minWidth: getWidthInPixels(cellsNumber, XS_CELL_WIDTH)
  }), _$concat));
});
var Table = (0, import_react.forwardRef)(function(_ref3, ref) {
  var className = _ref3.className, cellsNumber = _ref3.cellsNumber, children = _ref3.children, restProps = _objectWithoutProperties(_ref3, _excluded$a);
  return (0, import_react.createElement)(StyledTableMUI, _extends2({
    cellsNumber,
    ref,
    className: clsx_m_default(classes$7.table, className)
  }, restProps), (0, import_react.createElement)(TableBody_default, null, children));
});
Table.propTypes = {
  cellsNumber: import_prop_types19.default.number.isRequired,
  className: import_prop_types19.default.string,
  children: import_prop_types19.default.node.isRequired
};
Table.defaultProps = {
  className: void 0
};
var _excluded$b = ["setCellElementsMeta", "cellsNumber", "children"];
var Layout$1 = (0, import_react.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, cellsNumber = _ref.cellsNumber, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$b);
  var tableRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    var tableElement = tableRef.current;
    setCellElementsMeta(cellsMeta(tableElement));
  });
  return (0, import_react.createElement)(Table, _extends2({
    ref: tableRef,
    cellsNumber
  }, restProps), children);
});
true ? Layout$1.propTypes = {
  setCellElementsMeta: import_prop_types19.default.func.isRequired,
  cellsNumber: import_prop_types19.default.number.isRequired,
  children: import_prop_types19.default.node.isRequired
} : void 0;
var _excluded$c = ["setCellElementsMeta", "cellComponent", "allDayCellComponent", "rowComponent", "allDayRowComponent", "cellsData", "allDayCellsData", "formatDate"];
var renderCell = function renderCell2(Cell7, startDate, endDate, endOfGroup, groupingInfo, groupOrientation) {
  return (0, import_react.createElement)(Cell7, {
    key: getViewCellKey(startDate, groupingInfo),
    startDate,
    endDate,
    endOfGroup,
    hasRightBorder: endOfGroup,
    groupingInfo,
    groupOrientation
  });
};
var Layout$2 = (0, import_react.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, cellComponent = _ref.cellComponent, allDayCellComponent2 = _ref.allDayCellComponent, Row4 = _ref.rowComponent, AllDayRow = _ref.allDayRowComponent, cellsData = _ref.cellsData, allDayCellsData = _ref.allDayCellsData, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$c);
  return (0, import_react.createElement)(Layout$1, _extends2({
    setCellElementsMeta,
    cellsNumber: cellsData[0].length
  }, restProps), prepareVerticalViewCellsData(cellsData, allDayCellsData).map(function(group, groupIndex) {
    return (0, import_react.createElement)(import_react.Fragment, {
      key: groupIndex.toString()
    }, allDayCellsData && (0, import_react.createElement)(AllDayRow, null, allDayCellsData[groupIndex].map(function(_ref2) {
      var startDate = _ref2.startDate, endDate = _ref2.endDate, endOfGroup = _ref2.endOfGroup, groupingInfo = _ref2.groupingInfo, groupOrientation = _ref2.groupOrientation;
      return renderCell(allDayCellComponent2, startDate, endDate, endOfGroup, groupingInfo, groupOrientation);
    })), group.map(function(days, index) {
      return (0, import_react.createElement)(Row4, {
        key: index.toString()
      }, days.map(function(_ref3) {
        var startDate = _ref3.startDate, endDate = _ref3.endDate, groupingInfo = _ref3.groupingInfo, endOfGroup = _ref3.endOfGroup, groupOrientation = _ref3.groupOrientation;
        return renderCell(cellComponent, startDate, endDate, endOfGroup, groupingInfo, groupOrientation);
      }));
    }));
  }));
});
Layout$2.propTypes = {
  cellsData: import_prop_types19.default.arrayOf(Array).isRequired,
  allDayCellsData: import_prop_types19.default.arrayOf(Array),
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  allDayCellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  allDayRowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  formatDate: import_prop_types19.default.func.isRequired,
  setCellElementsMeta: import_prop_types19.default.func.isRequired
};
Layout$2.defaultProps = {
  allDayCellComponent: function allDayCellComponent() {
    return null;
  },
  allDayRowComponent: function allDayRowComponent() {
    return null;
  },
  allDayCellsData: void 0
};
var _excluded$d = ["className", "children", "startDate", "endDate", "currentTimeIndicatorPosition", "currentTimeIndicatorComponent", "isShaded", "endOfGroup", "groupingInfo", "groupOrientation", "hasRightBorder"];
var PREFIX$8 = "Cell";
var classes$8 = {
  cell: "".concat(PREFIX$8, "-cell"),
  shadedCell: "".concat(PREFIX$8, "-shadedCell"),
  shadedPart: "".concat(PREFIX$8, "-shadedPart"),
  brightRightBorder: "".concat(PREFIX$8, "-brightRightBorder"),
  brightBorderBottom: "".concat(PREFIX$8, "-brightBorderBottom")
};
var StyledTableCell$1 = styled_default(TableCell_default, {
  shouldForwardProp: function shouldForwardProp4(prop) {
    return prop !== "shadedHeight";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, shadedHeight = _ref.shadedHeight;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$8.cell), {
    position: "relative",
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK]),
    padding: 0,
    boxSizing: "border-box",
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none",
      paddingRight: 0
    },
    "tr:last-child &": {
      borderBottom: "none"
    },
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$8.shadedCell), {
    backgroundColor: alpha(theme.palette.action.disabledBackground, 0.04),
    "&:hover": {
      backgroundColor: theme.palette.action.selected
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    }
  }), _defineProperty(_ref2, "& .".concat(classes$8.shadedPart), {
    backgroundColor: alpha(theme.palette.action.disabledBackground, 0.04),
    position: "absolute",
    height: shadedHeight,
    width: "100%",
    left: 0,
    top: 0,
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "td:focus &": {
      opacity: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$8.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$8.brightBorderBottom), {
    borderBottom: getBrightBorder(theme)
  }), _ref2;
});
var Cell = function Cell2(_ref3) {
  var _classNames;
  var className = _ref3.className, children = _ref3.children, startDate = _ref3.startDate, endDate = _ref3.endDate, currentTimeIndicatorPosition = _ref3.currentTimeIndicatorPosition, CurrentTimeIndicator3 = _ref3.currentTimeIndicatorComponent, isShaded = _ref3.isShaded, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, groupOrientation = _ref3.groupOrientation, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$d);
  var isNow = !!currentTimeIndicatorPosition;
  return (0, import_react.createElement)(StyledTableCell$1, _extends2({
    shadedHeight: currentTimeIndicatorPosition,
    tabIndex: 0,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$8.cell, true), _defineProperty(_classNames, classes$8.shadedCell, isShaded && !isNow), _defineProperty(_classNames, classes$8.brightRightBorder, (endOfGroup || hasRightBorder) && groupOrientation === HORIZONTAL_GROUP_ORIENTATION), _defineProperty(_classNames, classes$8.brightBorderBottom, endOfGroup && groupOrientation === VERTICAL_GROUP_ORIENTATION), _classNames), className)
  }, restProps), isNow && isShaded && (0, import_react.createElement)("div", {
    className: classes$8.shadedPart
  }), isNow && (0, import_react.createElement)(CurrentTimeIndicator3, {
    top: currentTimeIndicatorPosition
  }), children);
};
true ? Cell.propTypes = {
  startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  currentTimeIndicatorPosition: import_prop_types19.default.string,
  currentTimeIndicatorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  isShaded: import_prop_types19.default.bool,
  endOfGroup: import_prop_types19.default.bool,
  hasRightBorder: import_prop_types19.default.bool,
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object),
  groupOrientation: import_prop_types19.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION])
} : void 0;
Cell.defaultProps = {
  children: null,
  className: void 0,
  startDate: new Date(),
  endDate: new Date(),
  currentTimeIndicatorPosition: void 0,
  currentTimeIndicatorComponent: function currentTimeIndicatorComponent() {
    return null;
  },
  isShaded: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION
};
var _excluded$e = ["cellComponent", "rowComponent", "groupingPanelComponent", "cellsData", "formatDate", "groupedByDate"];
var Layout$3 = (0, import_react.memo)(function(_ref) {
  var Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, GroupingPanel3 = _ref.groupingPanelComponent, cellsData = _ref.cellsData, formatDate3 = _ref.formatDate, groupedByDate = _ref.groupedByDate, restProps = _objectWithoutProperties(_ref, _excluded$e);
  return (0, import_react.createElement)(Table, _extends2({
    cellsNumber: cellsData[0].length
  }, restProps), !groupedByDate && (0, import_react.createElement)(GroupingPanel3, null), (0, import_react.createElement)(Row4, null, getDayScaleCells(cellsData, groupedByDate).map(function(_ref2) {
    var startDate = _ref2.startDate, endDate = _ref2.endDate, today = _ref2.today, key = _ref2.key, endOfGroup = _ref2.endOfGroup, groupingInfo = _ref2.groupingInfo, colSpan = _ref2.colSpan;
    return (0, import_react.createElement)(Cell7, {
      key,
      startDate,
      endDate,
      today,
      formatDate: formatDate3,
      endOfGroup,
      hasRightBorder: endOfGroup,
      groupingInfo,
      colSpan
    });
  })), groupedByDate && (0, import_react.createElement)(GroupingPanel3, null));
});
Layout$3.propTypes = {
  cellsData: import_prop_types19.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  groupingPanelComponent: import_prop_types19.default.func,
  formatDate: import_prop_types19.default.func.isRequired,
  groupedByDate: import_prop_types19.default.bool
};
Layout$3.defaultProps = {
  groupingPanelComponent: function groupingPanelComponent2() {
    return null;
  },
  groupedByDate: false
};
var _excluded$f = ["className", "startDate", "endDate", "today", "formatDate", "endOfGroup", "groupingInfo", "hasRightBorder"];
var PREFIX$9 = "Cell";
var classes$9 = {
  cell: "".concat(PREFIX$9, "-cell"),
  dayOfWeek: "".concat(PREFIX$9, "-dayOfWeek"),
  dayOfMonth: "".concat(PREFIX$9, "-dayOfMonth"),
  highlightedText: "".concat(PREFIX$9, "-highlightedText"),
  dayView: "".concat(PREFIX$9, "-dayView"),
  brightRightBorder: "".concat(PREFIX$9, "-brightRightBorder")
};
var StyledTableCell$2 = styled_default(TableCell_default)(function(_ref) {
  var _$concat, _objectSpread2$1, _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$9.cell), (_$concat = {
    userSelect: "none",
    paddingBottom: theme.spacing(0.5),
    textAlign: "center",
    borderBottom: "none",
    paddingRight: 0,
    paddingLeft: 0,
    boxSizing: "border-box"
  }, _defineProperty(_$concat, "".concat(LAYOUT_MEDIA_QUERY), {
    padding: theme.spacing(1),
    paddingBottom: 0
  }), _defineProperty(_$concat, "&:only-child", {
    textAlign: "left",
    paddingLeft: theme.spacing(2)
  }), _defineProperty(_$concat, "paddingTop", theme.spacing(0.5)), _$concat)), _defineProperty(_ref2, "& .".concat(classes$9.dayOfWeek), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    margin: 0,
    color: theme.palette.text.secondary,
    lineHeight: 1.17
  })), _defineProperty(_ref2, "& .".concat(classes$9.dayOfMonth), _objectSpread2(_objectSpread2({}, theme.typography.h4), {}, (_objectSpread2$1 = {}, _defineProperty(_objectSpread2$1, "".concat(LAYOUT_MEDIA_QUERY), _objectSpread2({}, theme.typography.h6)), _defineProperty(_objectSpread2$1, "color", theme.palette.text.secondary), _defineProperty(_objectSpread2$1, "lineHeight", 1.2), _defineProperty(_objectSpread2$1, "fontSize", "1.8rem"), _objectSpread2$1))), _defineProperty(_ref2, "& .".concat(classes$9.highlightedText), {
    color: theme.palette.primary.main,
    fontWeight: "bold"
  }), _defineProperty(_ref2, "& .".concat(classes$9.dayView), {
    "td:only-child &": {
      textAlign: "center",
      width: "auto",
      display: "inline-block"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$9.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _ref2;
});
var Cell$1 = function Cell3(_ref3) {
  var _classNames, _classNames2, _classNames3;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, today = _ref3.today, formatDate3 = _ref3.formatDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$f);
  return (0, import_react.createElement)(StyledTableCell$2, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$9.cell, true), _defineProperty(_classNames, classes$9.brightRightBorder, endOfGroup || hasRightBorder), _classNames), className)
  }, restProps), (0, import_react.createElement)("div", {
    className: classes$9.dayView
  }, (0, import_react.createElement)("p", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$9.dayOfWeek, true), _defineProperty(_classNames2, classes$9.highlightedText, today), _classNames2))
  }, formatDate3(startDate, WEEK_DAY_OPTIONS)), (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$9.dayOfMonth, true), _defineProperty(_classNames3, classes$9.highlightedText, today), _classNames3))
  }, formatDate3(startDate, DAY_OPTIONS))));
};
true ? Cell$1.propTypes = {
  formatDate: import_prop_types19.default.func.isRequired,
  startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]).isRequired,
  endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  className: import_prop_types19.default.string,
  today: import_prop_types19.default.bool,
  endOfGroup: import_prop_types19.default.bool,
  hasRightBorder: import_prop_types19.default.bool,
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object)
} : void 0;
Cell$1.defaultProps = {
  className: void 0,
  endDate: void 0,
  today: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0
};
var DayView2 = withComponents({
  Layout: MainLayout,
  AppointmentLayer: Container,
  DayScaleEmptyCell,
  TimeScaleLayout: Layout,
  TimeScaleLabel: Label,
  TimeScaleTickCell: TickCell,
  TimeScaleTicksRow: Row,
  DayScaleLayout: Layout$3,
  DayScaleCell: Cell$1,
  DayScaleRow: Row,
  TimeTableLayout: Layout$2,
  TimeTableCell: Cell,
  TimeTableRow: Row
})(DayView);
var WeekView2 = withComponents({
  Layout: MainLayout,
  AppointmentLayer: Container,
  DayScaleEmptyCell,
  TimeScaleLayout: Layout,
  TimeScaleLabel: Label,
  TimeScaleTickCell: TickCell,
  TimeScaleTicksRow: Row,
  DayScaleLayout: Layout$3,
  DayScaleCell: Cell$1,
  DayScaleRow: Row,
  TimeTableLayout: Layout$2,
  TimeTableCell: Cell,
  TimeTableRow: Row
})(WeekView);
var _excluded$g = ["setCellElementsMeta", "cellComponent", "rowComponent", "cellsData", "formatDate"];
var Layout$4 = (0, import_react.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, cellsData = _ref.cellsData, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$g);
  return (0, import_react.createElement)(Layout$1, _extends2({
    setCellElementsMeta,
    cellsNumber: cellsData[0].length
  }, restProps), cellsData.map(function(row, index) {
    return (0, import_react.createElement)(Row4, {
      key: index.toString()
    }, row.map(function(_ref2) {
      var startDate = _ref2.startDate, endDate = _ref2.endDate, today = _ref2.today, otherMonth = _ref2.otherMonth, groupingInfo = _ref2.groupingInfo, endOfGroup = _ref2.endOfGroup, groupOrientation = _ref2.groupOrientation;
      return (0, import_react.createElement)(Cell7, {
        key: getViewCellKey(startDate, groupingInfo),
        startDate,
        endDate,
        today,
        otherMonth,
        formatDate: formatDate3,
        endOfGroup,
        hasRightBorder: endOfGroup,
        groupingInfo,
        groupOrientation
      });
    }));
  }));
});
Layout$4.propTypes = {
  cellsData: import_prop_types19.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  setCellElementsMeta: import_prop_types19.default.func.isRequired
};
var _excluded$h = ["className", "startDate", "endDate", "today", "otherMonth", "formatDate", "isShaded", "endOfGroup", "groupingInfo", "groupOrientation", "hasRightBorder"];
var PREFIX$a = "Cell";
var classes$a = {
  cell: "".concat(PREFIX$a, "-cell"),
  text: "".concat(PREFIX$a, "-text"),
  today: "".concat(PREFIX$a, "-today"),
  otherMonth: "".concat(PREFIX$a, "-otherMonth"),
  shadedCell: "".concat(PREFIX$a, "-shadedCell"),
  brightRightBorder: "".concat(PREFIX$a, "-brightRightBorder"),
  brightBorderBottom: "".concat(PREFIX$a, "-brightBorderBottom")
};
var StyledTableCell$3 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$a.cell), {
    userSelect: "none",
    verticalAlign: "top",
    padding: 0,
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.MONTH]),
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none",
      paddingRight: 0
    },
    "tr:last-child &": {
      borderBottom: "none"
    },
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    },
    boxSizing: "border-box"
  }), _defineProperty(_ref2, "& .".concat(classes$a.text), _defineProperty({
    padding: "1em",
    paddingTop: "0.5em",
    textAlign: "center"
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    padding: "0.5em"
  })), _defineProperty(_ref2, "& .".concat(classes$a.today), {
    marginTop: "0.33em",
    width: "1.72em",
    height: "1.72em",
    lineHeight: 1.72,
    textAlign: "center",
    borderRadius: "50%",
    background: theme.palette.primary.main,
    color: theme.palette.primary.contrastText,
    cursor: "default",
    marginRight: "auto",
    marginLeft: "auto"
  }), _defineProperty(_ref2, "& .".concat(classes$a.otherMonth), {
    color: theme.palette.text.disabled
  }), _defineProperty(_ref2, "&.".concat(classes$a.shadedCell), {
    backgroundColor: alpha(theme.palette.action.disabledBackground, 0.04),
    "&:hover": {
      backgroundColor: theme.palette.action.selected
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$a.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$a.brightBorderBottom), {
    borderBottom: getBrightBorder(theme)
  }), _ref2;
});
var CellBase = (0, import_react.memo)(function(_ref3) {
  var _classNames, _classNames2;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, today = _ref3.today, otherMonth = _ref3.otherMonth, formatDate3 = _ref3.formatDate, isShaded = _ref3.isShaded, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, groupOrientation = _ref3.groupOrientation, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$h);
  var isFirstMonthDay = startDate.getDate() === 1;
  var formatOptions = isFirstMonthDay && !today ? DAY_SHORT_MONTH_OPTIONS : DAY_OPTIONS;
  return (0, import_react.createElement)(StyledTableCell$3, _extends2({
    tabIndex: 0,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$a.cell, true), _defineProperty(_classNames, classes$a.shadedCell, isShaded), _defineProperty(_classNames, classes$a.brightRightBorder, (endOfGroup || hasRightBorder) && groupOrientation === HORIZONTAL_GROUP_ORIENTATION), _defineProperty(_classNames, classes$a.brightBorderBottom, endOfGroup && groupOrientation === VERTICAL_GROUP_ORIENTATION), _classNames), className)
  }, restProps), (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$a.text, !today), _defineProperty(_classNames2, classes$a.today, today), _defineProperty(_classNames2, classes$a.otherMonth, otherMonth && !today), _classNames2))
  }, formatDate3(startDate, formatOptions)));
});
true ? CellBase.propTypes = {
  formatDate: import_prop_types19.default.func.isRequired,
  startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]).isRequired,
  endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  className: import_prop_types19.default.string,
  today: import_prop_types19.default.bool,
  otherMonth: import_prop_types19.default.bool,
  isShaded: import_prop_types19.default.bool,
  endOfGroup: import_prop_types19.default.bool,
  hasRightBorder: import_prop_types19.default.bool,
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object),
  groupOrientation: import_prop_types19.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION])
} : void 0;
CellBase.defaultProps = {
  endDate: void 0,
  className: void 0,
  today: false,
  otherMonth: false,
  isShaded: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION
};
var Cell$2 = CellBase;
var _excluded$i = ["className", "startDate", "endDate", "today", "formatDate", "endOfGroup", "groupingInfo", "hasRightBorder"];
var PREFIX$b = "Cell";
var classes$b = {
  cell: "".concat(PREFIX$b, "-cell"),
  dayOfWeek: "".concat(PREFIX$b, "-dayOfWeek"),
  brightRightBorder: "".concat(PREFIX$b, "-brightRightBorder")
};
var StyledTableCell$4 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$b.cell), {
    userSelect: "none",
    padding: 0,
    borderBottom: "none",
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none",
      paddingRight: 0
    },
    textAlign: "center",
    boxSizing: "border-box"
  }), _defineProperty(_ref2, "& .".concat(classes$b.dayOfWeek), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    margin: 0,
    padding: theme.spacing(1),
    paddingBottom: 0,
    color: theme.palette.text.secondary,
    fontWeight: "bold"
  })), _defineProperty(_ref2, "&.".concat(classes$b.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _ref2;
});
var Cell$3 = function Cell4(_ref3) {
  var _classNames;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, today = _ref3.today, formatDate3 = _ref3.formatDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$i);
  return (0, import_react.createElement)(StyledTableCell$4, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$b.cell, true), _defineProperty(_classNames, classes$b.brightRightBorder, endOfGroup || hasRightBorder), _classNames), className)
  }, restProps), (0, import_react.createElement)("div", {
    className: classes$b.dayOfWeek
  }, formatDate3(startDate, WEEK_DAY_OPTIONS)));
};
true ? Cell$3.propTypes = {
  formatDate: import_prop_types19.default.func.isRequired,
  startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]).isRequired,
  endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  className: import_prop_types19.default.string,
  today: import_prop_types19.default.bool,
  endOfGroup: import_prop_types19.default.bool,
  hasRightBorder: import_prop_types19.default.bool,
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object)
} : void 0;
Cell$3.defaultProps = {
  className: void 0,
  endDate: void 0,
  today: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0
};
var MonthView2 = withComponents({
  Layout: MainLayout,
  AppointmentLayer: Container,
  DayScaleEmptyCell,
  DayScaleLayout: Layout$3,
  DayScaleCell: Cell$3,
  DayScaleRow: Row,
  TimeTableLayout: Layout$4,
  TimeTableCell: Cell$2,
  TimeTableRow: Row
})(MonthView);
var _excluded$j = ["data", "children", "className", "recurringIconComponent", "formatDate", "durationType"];
var PREFIX$c = "HorizontalAppointment";
var classes$c = {
  title: "".concat(PREFIX$c, "-title"),
  content: "".concat(PREFIX$c, "-content"),
  container: "".concat(PREFIX$c, "-container"),
  recurringContainer: "".concat(PREFIX$c, "-recurringContainer"),
  imageContainer: "".concat(PREFIX$c, "-imageContainer"),
  image: "".concat(PREFIX$c, "-image")
};
var StyledDiv$4 = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$c.title), {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }), _defineProperty(_ref2, "&.".concat(classes$c.content), {
    color: palette.common.white,
    padding: spacing(0.5),
    paddingTop: spacing(0.125),
    paddingLeft: spacing(0.75),
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    display: "flex"
  }), _defineProperty(_ref2, "& .".concat(classes$c.container), {
    width: "100%"
  }), _defineProperty(_ref2, "& .".concat(classes$c.recurringContainer), {
    width: "calc(100% - ".concat(spacing(2), ")")
  }), _defineProperty(_ref2, "& .".concat(classes$c.imageContainer), {
    width: spacing(2),
    height: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$c.image), {
    width: "100%",
    height: "100%"
  }), _ref2;
});
var HorizontalAppointment = function HorizontalAppointment2(_ref3) {
  var data = _ref3.data, children = _ref3.children, className = _ref3.className, RecurringIcon = _ref3.recurringIconComponent, formatDate3 = _ref3.formatDate, durationType = _ref3.durationType, restProps = _objectWithoutProperties(_ref3, _excluded$j);
  var repeat = !!data.rRule;
  return (0, import_react.createElement)(StyledDiv$4, _extends2({
    className: clsx_m_default(classes$c.content, className)
  }, restProps), children || (0, import_react.createElement)(import_react.Fragment, null, (0, import_react.createElement)("div", {
    className: repeat ? classes$c.recurringContainer : classes$c.container
  }, (0, import_react.createElement)("div", {
    className: classes$c.title
  }, data.title)), repeat ? (0, import_react.createElement)("div", {
    className: classes$c.imageContainer
  }, (0, import_react.createElement)(RecurringIcon, {
    className: classes$c.image
  })) : void 0));
};
true ? HorizontalAppointment.propTypes = {
  recurringIconComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  data: import_prop_types19.default.object.isRequired,
  durationType: import_prop_types19.default.string,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  formatDate: import_prop_types19.default.func
} : void 0;
HorizontalAppointment.defaultProps = {
  formatDate: function formatDate2() {
    return "";
  },
  children: void 0,
  className: void 0,
  durationType: void 0
};
var _excluded$k = ["data", "children", "className", "formatDate", "recurringIconComponent", "durationType"];
var PREFIX$d = "VerticalAppointment";
var classes$d = {
  title: "".concat(PREFIX$d, "-title"),
  textContainer: "".concat(PREFIX$d, "-textContainer"),
  middleContainer: "".concat(PREFIX$d, "-middleContainer"),
  time: "".concat(PREFIX$d, "-time"),
  content: "".concat(PREFIX$d, "-content"),
  shortContent: "".concat(PREFIX$d, "-shortContent"),
  shortContainer: "".concat(PREFIX$d, "-shortContainer"),
  shortTime: "".concat(PREFIX$d, "-shortTime"),
  shortTitle: "".concat(PREFIX$d, "-shortTitle"),
  container: "".concat(PREFIX$d, "-container"),
  recurringContainer: "".concat(PREFIX$d, "-recurringContainer"),
  imageContainer: "".concat(PREFIX$d, "-imageContainer"),
  image: "".concat(PREFIX$d, "-image")
};
var StyledDiv$5 = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$d.title), {
    fontWeight: "bold",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }), _defineProperty(_ref2, "& .".concat(classes$d.textContainer), {
    lineHeight: 1,
    whiteSpace: "pre-wrap",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }), _defineProperty(_ref2, "& .".concat(classes$d.middleContainer), {
    lineHeight: "0.9!important"
  }), _defineProperty(_ref2, "& .".concat(classes$d.time), {
    display: "inline-block",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }), _defineProperty(_ref2, "&.".concat(classes$d.content), _defineProperty({
    color: palette.common.white,
    padding: spacing(0.5, 1),
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    display: "flex"
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    paddingLeft: spacing(0.5),
    paddingRight: spacing(0.5)
  })), _defineProperty(_ref2, "&.".concat(classes$d.shortContent), _defineProperty({
    padding: spacing(0.25, 1)
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    paddingLeft: spacing(0.5),
    paddingRight: spacing(0.5)
  })), _defineProperty(_ref2, "& .".concat(classes$d.shortContainer), {
    display: "flex"
  }), _defineProperty(_ref2, "& .".concat(classes$d.shortTime), {
    textOverflow: "initial",
    flexShrink: 0
  }), _defineProperty(_ref2, "& .".concat(classes$d.shortTitle), {
    flexShrink: 3
  }), _defineProperty(_ref2, "& .".concat(classes$d.container), {
    width: "100%"
  }), _defineProperty(_ref2, "& .".concat(classes$d.recurringContainer), {
    width: "calc(100% - ".concat(spacing(2), ")")
  }), _defineProperty(_ref2, "& .".concat(classes$d.imageContainer), {
    width: spacing(2),
    height: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$d.image), {
    width: "100%",
    height: "100%"
  }), _ref2;
});
var VerticalAppointment = function VerticalAppointment2(_ref3) {
  var _classNames, _classNames2, _classNames3;
  var data = _ref3.data, children = _ref3.children, className = _ref3.className, formatDate3 = _ref3.formatDate, RecurringIcon = _ref3.recurringIconComponent, durationType = _ref3.durationType, restProps = _objectWithoutProperties(_ref3, _excluded$k);
  var repeat = !!data.rRule;
  var isShortHeight = durationType === "short";
  var isMiddleHeight = durationType === "middle";
  return (0, import_react.createElement)(StyledDiv$5, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$d.content, true), _defineProperty(_classNames, classes$d.shortContent, isShortHeight || isMiddleHeight), _classNames), className)
  }, restProps), children || (0, import_react.createElement)(import_react.Fragment, null, (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$d.container, !repeat), _defineProperty(_classNames2, classes$d.recurringContainer, repeat), _classNames2))
  }, isShortHeight ? (0, import_react.createElement)("div", {
    className: classes$d.shortContainer
  }, (0, import_react.createElement)("div", {
    className: clsx_m_default(classes$d.title, classes$d.shortTitle)
  }, addCommaAndSpaceToString(data.title)), (0, import_react.createElement)("div", {
    className: clsx_m_default(classes$d.time, classes$d.shortTime)
  }, formatDate3(data.startDate, HOUR_MINUTE_OPTIONS))) : (0, import_react.createElement)(import_react.Fragment, null, (0, import_react.createElement)("div", {
    className: classes$d.title
  }, data.title), (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$d.textContainer, true), _defineProperty(_classNames3, classes$d.middleContainer, isMiddleHeight), _classNames3))
  }, (0, import_react.createElement)("div", {
    className: classes$d.time
  }, formatDate3(data.startDate, HOUR_MINUTE_OPTIONS)), (0, import_react.createElement)("div", {
    className: classes$d.time
  }, "\xA0 - \xA0"), (0, import_react.createElement)("div", {
    className: classes$d.time
  }, formatDate3(data.endDate, HOUR_MINUTE_OPTIONS))))), repeat ? (0, import_react.createElement)("div", {
    className: classes$d.imageContainer
  }, (0, import_react.createElement)(RecurringIcon, {
    className: classes$d.image
  })) : void 0));
};
true ? VerticalAppointment.propTypes = {
  recurringIconComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  data: import_prop_types19.default.object.isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  durationType: import_prop_types19.default.string.isRequired,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string
} : void 0;
VerticalAppointment.defaultProps = {
  children: void 0,
  className: void 0
};
var _excluded$l = ["type"];
var AppointmentContent = function AppointmentContent2(_ref) {
  var type = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded$l);
  return type === HORIZONTAL_TYPE ? (0, import_react.createElement)(HorizontalAppointment, restProps) : (0, import_react.createElement)(VerticalAppointment, restProps);
};
true ? AppointmentContent.propTypes = {
  type: import_prop_types19.default.oneOf([HORIZONTAL_TYPE, VERTICAL_TYPE]).isRequired
} : void 0;
var _excluded$m = ["className", "children", "data", "onClick", "draggable", "isShaded", "resources", "forwardedRef"];
var PREFIX$e = "Appointment";
var classes$e = {
  appointment: "".concat(PREFIX$e, "-appointment"),
  clickableAppointment: "".concat(PREFIX$e, "-clickableAppointment"),
  shadedAppointment: "".concat(PREFIX$e, "-shadedAppointment")
};
var StyledDiv$6 = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, typography = _ref$theme.typography, spacing = _ref$theme.spacing, resources = _ref.resources;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$e.appointment), _objectSpread2(_objectSpread2({
    userSelect: "none",
    position: "absolute",
    height: "100%",
    width: "100%",
    overflow: "hidden",
    boxSizing: "border-box",
    border: "1px solid ".concat(palette.background.paper),
    backgroundClip: "padding-box",
    borderRadius: spacing(0.5),
    backgroundColor: getAppointmentColor(300, getResourceColor(resources), palette.primary)
  }, typography.caption), {}, {
    "&:hover": {
      backgroundColor: getAppointmentColor(400, getResourceColor(resources), palette.primary)
    },
    "&:focus": {
      backgroundColor: getAppointmentColor(100, getResourceColor(resources), palette.primary),
      outline: 0
    }
  })), _defineProperty(_ref2, "&.".concat(classes$e.clickableAppointment), {
    cursor: "pointer"
  }), _defineProperty(_ref2, "&.".concat(classes$e.shadedAppointment), {
    backgroundColor: getAppointmentColor(200, getResourceColor(resources), palette.primary),
    "&:hover": {
      backgroundColor: getAppointmentColor(300, getResourceColor(resources), palette.primary)
    }
  }), _ref2;
});
var Appointment = function Appointment2(_ref3) {
  var _classNames;
  var className = _ref3.className, children = _ref3.children, data = _ref3.data, handleClick = _ref3.onClick, draggable = _ref3.draggable, isShaded = _ref3.isShaded, resources = _ref3.resources, forwardedRef = _ref3.forwardedRef, restProps = _objectWithoutProperties(_ref3, _excluded$m);
  var onClick2 = handleClick ? {
    onClick: function onClick3(_ref4) {
      var target = _ref4.target;
      handleClick({
        target,
        data
      });
    }
  } : null;
  var clickable = onClick2 || restProps.onDoubleClick || draggable;
  return (0, import_react.createElement)(StyledDiv$6, _extends2({
    resources,
    ref: forwardedRef,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$e.appointment, true), _defineProperty(_classNames, classes$e.clickableAppointment, clickable), _defineProperty(_classNames, classes$e.shadedAppointment, isShaded), _classNames), className)
  }, onClick2, restProps), children);
};
true ? Appointment.propTypes = {
  children: import_prop_types19.default.node.isRequired,
  resources: import_prop_types19.default.array,
  className: import_prop_types19.default.string,
  data: import_prop_types19.default.object,
  onClick: import_prop_types19.default.func,
  draggable: import_prop_types19.default.bool,
  isShaded: import_prop_types19.default.bool,
  forwardedRef: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
} : void 0;
Appointment.defaultProps = {
  resources: [],
  onClick: void 0,
  className: void 0,
  data: {},
  draggable: false,
  isShaded: false,
  forwardedRef: void 0
};
var _excluded$n = ["position", "appointmentType", "className"];
var _styled;
var PREFIX$f = "AppointmentsContainer";
var classes$f = {
  slice: "".concat(PREFIX$f, "-slice"),
  verticalStart: "".concat(PREFIX$f, "-verticalStart"),
  verticalEnd: "".concat(PREFIX$f, "-verticalEnd"),
  horizontalStart: "".concat(PREFIX$f, "-horizontalStart"),
  horizontalEnd: "".concat(PREFIX$f, "-horizontalEnd")
};
var verticalStyles = {
  width: "100%",
  height: "10px"
};
var horizontalStyles = {
  top: 0,
  width: "10px",
  height: "100%"
};
var StyledDiv$7 = styled_default("div")((_styled = {}, _defineProperty(_styled, "&.".concat(classes$f.slice), {
  position: "absolute",
  zIndex: 50
}), _defineProperty(_styled, "&.".concat(classes$f.verticalStart), _objectSpread2(_objectSpread2({}, verticalStyles), {}, {
  top: "-10px",
  boxShadow: "0 10px 15px rgba(0,0,0,0.2)"
})), _defineProperty(_styled, "&.".concat(classes$f.verticalEnd), _objectSpread2(_objectSpread2({}, verticalStyles), {}, {
  bottom: "-10px",
  boxShadow: "0 -10px 15px rgba(0,0,0,0.2)"
})), _defineProperty(_styled, "&.".concat(classes$f.horizontalStart), _objectSpread2(_objectSpread2({}, horizontalStyles), {}, {
  left: "-10px",
  boxShadow: "10px 0 15px rgba(0,0,0,0.2)"
})), _defineProperty(_styled, "&.".concat(classes$f.horizontalEnd), _objectSpread2(_objectSpread2({}, horizontalStyles), {}, {
  right: "-10px",
  boxShadow: "-10px 0 15px rgba(0,0,0,0.2)"
})), _styled));
var SplitIndicator = (0, import_react.memo)(function(_ref) {
  var _classNames;
  var position = _ref.position, appointmentType = _ref.appointmentType, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$n);
  var vertical = appointmentType === VERTICAL_TYPE;
  var start = position === POSITION_START;
  return (0, import_react.createElement)(StyledDiv$7, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$f.slice, true), _defineProperty(_classNames, classes$f.verticalStart, vertical && start), _defineProperty(_classNames, classes$f.verticalEnd, vertical && !start), _defineProperty(_classNames, classes$f.horizontalStart, !vertical && start), _defineProperty(_classNames, classes$f.horizontalEnd, !vertical && !start), _classNames), className)
  }, restProps));
});
true ? SplitIndicator.propTypes = {
  appointmentType: import_prop_types19.default.oneOf([VERTICAL_TYPE, HORIZONTAL_TYPE]).isRequired,
  position: import_prop_types19.default.oneOf([POSITION_START, POSITION_END]).isRequired,
  className: import_prop_types19.default.string
} : void 0;
SplitIndicator.defaultProps = {
  className: void 0
};
var _excluded$o = ["style", "children"];
var AppointmentContainer = function AppointmentContainer2(_ref) {
  var style = _ref.style, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$o);
  return (0, import_react.createElement)("div", _extends2({
    style
  }, restProps), children);
};
true ? AppointmentContainer.propTypes = {
  children: import_prop_types19.default.node.isRequired,
  style: import_prop_types19.default.object.isRequired
} : void 0;
var Appointments2 = withComponents({
  Appointment,
  AppointmentContent,
  Container: AppointmentContainer,
  SplitIndicator,
  RecurringIcon: Repeat_default
})(Appointments);
var _excluded$p = ["children", "className"];
var PREFIX$g = "Toolbar";
var classes$g = {
  toolbar: "".concat(PREFIX$g, "-toolbar")
};
var StyledToolbarMUI = styled_default(Toolbar_default)(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "&.".concat(classes$g.toolbar), {
    borderBottom: getBorder(theme)
  });
});
var Toolbar2 = function Toolbar3(_ref3) {
  var children = _ref3.children, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$p);
  return (0, import_react.createElement)(StyledToolbarMUI, _extends2({
    className: clsx_m_default(classes$g.toolbar, className)
  }, restProps), children);
};
true ? Toolbar2.propTypes = {
  children: import_prop_types19.default.node.isRequired,
  className: import_prop_types19.default.string
} : void 0;
Toolbar2.defaultProps = {
  className: void 0
};
var _excluded$q = ["children", "className"];
var PREFIX$h = "FlexibleSpace";
var classes$h = {
  flexibleSpace: "".concat(PREFIX$h, "-flexibleSpace")
};
var StyledDiv$8 = styled_default("div")(_defineProperty({}, "&.".concat(classes$h.flexibleSpace), {
  flex: "0 0 0",
  marginLeft: "auto"
}));
var FlexibleSpace = function FlexibleSpace2(_ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$q);
  return (0, import_react.createElement)(StyledDiv$8, _extends2({
    className: clsx_m_default(classes$h.flexibleSpace, className)
  }, restProps), children);
};
true ? FlexibleSpace.propTypes = {
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string
} : void 0;
FlexibleSpace.defaultProps = {
  children: null,
  className: void 0
};
var Toolbar$1 = withComponents({
  Root: Toolbar2,
  FlexibleSpace
})(Toolbar);
var _excluded$r = ["navigationButtonComponent", "openButtonComponent", "navigatorText", "rootRef", "onVisibilityToggle", "onNavigate", "className"];
var PREFIX$i = "Root";
var classes$i = {
  root: "".concat(PREFIX$i, "-root")
};
var StyledDiv$9 = styled_default("div")(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$i.root), {
    marginLeft: spacing(0.5),
    "&:first-of-type": {
      marginLeft: 0
    }
  });
});
var RootBase = function RootBase2(_ref3) {
  var NavigationButton2 = _ref3.navigationButtonComponent, OpenButton2 = _ref3.openButtonComponent, navigatorText = _ref3.navigatorText, rootRef = _ref3.rootRef, onVisibilityToggle = _ref3.onVisibilityToggle, onNavigate2 = _ref3.onNavigate, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$r);
  var navigateBack = (0, import_react.useCallback)(function() {
    return onNavigate2("back");
  }, [onNavigate2]);
  var navigateForward = (0, import_react.useCallback)(function() {
    return onNavigate2("forward");
  }, [onNavigate2]);
  return (0, import_react.createElement)(StyledDiv$9, _extends2({
    className: clsx_m_default(classes$i.root, className),
    ref: rootRef
  }, restProps), (0, import_react.createElement)(NavigationButton2, {
    type: "back",
    onClick: navigateBack
  }), (0, import_react.createElement)(NavigationButton2, {
    type: "forward",
    onClick: navigateForward
  }), (0, import_react.createElement)(OpenButton2, {
    onVisibilityToggle,
    text: navigatorText
  }));
};
true ? RootBase.propTypes = {
  navigationButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  openButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  onVisibilityToggle: import_prop_types19.default.func.isRequired,
  onNavigate: import_prop_types19.default.func.isRequired,
  rootRef: import_prop_types19.default.func.isRequired,
  navigatorText: import_prop_types19.default.string,
  className: import_prop_types19.default.string
} : void 0;
RootBase.defaultProps = {
  navigatorText: "",
  className: void 0
};
var Root$1 = RootBase;
var _excluded$s = ["visible", "onHide", "children", "target"];
var origin = {
  vertical: "top",
  horizontal: "right"
};
var Overlay = function Overlay2(_ref) {
  var visible = _ref.visible, onHide3 = _ref.onHide, children = _ref.children, target = _ref.target, restProps = _objectWithoutProperties(_ref, _excluded$s);
  return (0, import_react.createElement)(Popover_default, _extends2({
    open: visible,
    anchorEl: target,
    onClose: onHide3,
    anchorOrigin: origin,
    transformOrigin: origin
  }, restProps), children);
};
true ? Overlay.propTypes = {
  onHide: import_prop_types19.default.func.isRequired,
  children: import_prop_types19.default.node.isRequired,
  visible: import_prop_types19.default.bool,
  target: import_prop_types19.default.oneOfType([import_prop_types19.default.object, import_prop_types19.default.func])
} : void 0;
Overlay.defaultProps = {
  visible: false,
  target: null
};
var _excluded$t = ["text", "onVisibilityToggle", "className"];
var PREFIX$j = "OpenButton";
var classes$j = {
  textButton: "".concat(PREFIX$j, "-textButton"),
  iconButton: "".concat(PREFIX$j, "-iconButton")
};
var StyledButton = styled_default(Button_default)(function() {
  return _defineProperty({}, "&.".concat(classes$j.textButton), _defineProperty({}, "".concat(LAYOUT_MEDIA_QUERY), {
    display: "none"
  }));
});
var StyledIconButton = styled_default(IconButton_default)(function(_ref2) {
  var spacing = _ref2.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$j.iconButton), _defineProperty({
    "@media (min-width: 700px)": {
      display: "none"
    }
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    width: spacing(4),
    height: spacing(4),
    padding: 0
  }));
});
var OpenButton = (0, import_react.memo)(function(_ref4) {
  var text = _ref4.text, onVisibilityToggle = _ref4.onVisibilityToggle, className = _ref4.className, restProps = _objectWithoutProperties(_ref4, _excluded$t);
  return (0, import_react.createElement)(import_react.Fragment, null, (0, import_react.createElement)(StyledButton, _extends2({
    onClick: onVisibilityToggle,
    className: clsx_m_default(classes$j.textButton, className)
  }, restProps), text), (0, import_react.createElement)(StyledIconButton, _extends2({
    onClick: onVisibilityToggle,
    className: clsx_m_default(classes$j.iconButton, className)
  }, restProps, {
    size: "large"
  }), (0, import_react.createElement)(CalendarToday_default, null)));
});
OpenButton.propTypes = {
  onVisibilityToggle: import_prop_types19.default.func.isRequired,
  text: import_prop_types19.default.string,
  className: import_prop_types19.default.string
};
OpenButton.defaultProps = {
  text: "",
  className: void 0
};
var _excluded$u = ["type", "onClick", "className"];
var PREFIX$k = "NavigationButton";
var classes$k = {
  button: "".concat(PREFIX$k, "-button")
};
var StyledIconButton$1 = styled_default(IconButton_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$k.button), _defineProperty({}, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    width: spacing(4),
    height: spacing(4),
    padding: 0
  }));
});
var NavigationButton = (0, import_react.memo)(function(_ref3) {
  var type = _ref3.type, onClick2 = _ref3.onClick, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$u);
  return (0, import_react.createElement)(StyledIconButton$1, _extends2({
    onClick: onClick2,
    color: "primary",
    className: clsx_m_default(classes$k.button, className)
  }, restProps, {
    size: "large"
  }), type === "back" ? (0, import_react.createElement)(ChevronLeft_default, null) : (0, import_react.createElement)(ChevronRight_default, null));
});
NavigationButton.propTypes = {
  type: import_prop_types19.default.oneOf(["forward", "back"]).isRequired,
  onClick: import_prop_types19.default.func,
  className: import_prop_types19.default.string
};
NavigationButton.defaultProps = {
  onClick: function onClick() {
  },
  className: void 0
};
var _excluded$v = ["rowComponent", "cellComponent", "headerRowComponent", "headerCellComponent", "className", "cells", "headerCells", "selectedDate", "onCellClick", "formatDate"];
var PREFIX$l = "Table";
var classes$l = {
  table: "".concat(PREFIX$l, "-table")
};
var StyledTableMUI$1 = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$l.table), {
  width: "320px",
  tableLayout: "fixed"
}));
var Table$1 = function Table2(_ref) {
  var Row4 = _ref.rowComponent, Cell7 = _ref.cellComponent, HeaderRow = _ref.headerRowComponent, HeaderCell3 = _ref.headerCellComponent, className = _ref.className, cells = _ref.cells, headerCells = _ref.headerCells, selectedDate = _ref.selectedDate, onCellClick2 = _ref.onCellClick, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$v);
  return (0, import_react.createElement)(StyledTableMUI$1, _extends2({
    className: clsx_m_default(classes$l.table, className)
  }, restProps), (0, import_react.createElement)(TableHead_default, null, (0, import_react.createElement)(HeaderRow, null, headerCells.map(function(cell) {
    var key = formatDate3(cell.startDate, WEEK_DAY_OPTIONS);
    return (0, import_react.createElement)(HeaderCell3, {
      key
    }, key);
  }))), (0, import_react.createElement)(TableBody_default, null, cells.map(function(row) {
    return (0, import_react.createElement)(Row4, {
      key: row[0].startDate.toString()
    }, row.map(function(_ref2) {
      var startDate = _ref2.startDate, otherMonth = _ref2.otherMonth, today = _ref2.today;
      var selected = areDatesSame(selectedDate, startDate);
      return (0, import_react.createElement)(Cell7, {
        key: startDate.toString(),
        otherMonth,
        selected,
        today,
        onClick: function onClick2() {
          onCellClick2(startDate);
        }
      }, formatDate3(startDate, DAY_OPTIONS));
    }));
  })));
};
true ? Table$1.propTypes = {
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  headerRowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  headerCellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  cells: import_prop_types19.default.array.isRequired,
  selectedDate: import_prop_types19.default.oneOfType([import_prop_types19.default.instanceOf(Date), import_prop_types19.default.string, import_prop_types19.default.number]),
  formatDate: import_prop_types19.default.func.isRequired,
  headerCells: import_prop_types19.default.array,
  className: import_prop_types19.default.string,
  onCellClick: import_prop_types19.default.func
} : void 0;
Table$1.defaultProps = {
  className: void 0,
  headerCells: [],
  onCellClick: function onCellClick() {
  },
  selectedDate: void 0
};
var _excluded$w = ["selectedDate", "firstDayOfWeek", "getCells", "textComponent", "navigationButtonComponent", "navigatorComponent", "rowComponent", "cellComponent", "headerRowComponent", "headerCellComponent", "onSelectedDateChange", "formatDate"];
var Root$2 = function(_React$PureComponent) {
  _inherits(Root3, _React$PureComponent);
  var _super = _createSuper(Root3);
  function Root3(props) {
    var _this;
    _classCallCheck(this, Root3);
    _this = _super.call(this, props);
    var selectedDate = _this.props.selectedDate;
    _this.state = {
      selectedDate,
      currentDate: selectedDate
    };
    _this.onNavigate = _this.onNavigate.bind(_assertThisInitialized(_this));
    _this.onCellClick = _this.onCellClick.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Root3, [{
    key: "onNavigate",
    value: function onNavigate2(_ref) {
      var back = _ref.back;
      var currentDateState = this.state.currentDate;
      var nextDate = navigateByOneMonth(currentDateState, back);
      this.setState({
        currentDate: nextDate
      });
    }
  }, {
    key: "onCellClick",
    value: function onCellClick2(nextDate) {
      var onSelectedDateChange2 = this.props.onSelectedDateChange;
      this.setState({
        selectedDate: nextDate,
        currentDate: nextDate
      });
      onSelectedDateChange2(nextDate);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, selectedDate = _this$props.selectedDate, firstDayOfWeek = _this$props.firstDayOfWeek, getCells = _this$props.getCells, Text3 = _this$props.textComponent, NavigationButton2 = _this$props.navigationButtonComponent, Navigator3 = _this$props.navigatorComponent, Row4 = _this$props.rowComponent, Cell7 = _this$props.cellComponent, HeaderRow = _this$props.headerRowComponent, HeaderCell3 = _this$props.headerCellComponent, onSelectedDateChange2 = _this$props.onSelectedDateChange, formatDate3 = _this$props.formatDate, restProps = _objectWithoutProperties(_this$props, _excluded$w);
      var _this$state = this.state, selectedDateState = _this$state.selectedDate, currentDate = _this$state.currentDate;
      var cellsData = getCells(currentDate, firstDayOfWeek, 1, Date.now());
      return (0, import_react.createElement)("div", restProps, (0, import_react.createElement)(Navigator3, {
        currentDate,
        textComponent: Text3,
        navigationButtonComponent: NavigationButton2,
        onNavigate: this.onNavigate,
        formatDate: formatDate3
      }), (0, import_react.createElement)(Table$1, {
        headerCells: cellsData[0],
        selectedDate: selectedDateState,
        cells: cellsData,
        rowComponent: Row4,
        cellComponent: Cell7,
        headerRowComponent: HeaderRow,
        headerCellComponent: HeaderCell3,
        onCellClick: this.onCellClick,
        formatDate: formatDate3
      }));
    }
  }]);
  return Root3;
}(import_react.PureComponent);
true ? Root$2.propTypes = {
  textComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  navigationButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  headerRowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  headerCellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  navigatorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  getCells: import_prop_types19.default.func.isRequired,
  selectedDate: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number,
  onSelectedDateChange: import_prop_types19.default.func
} : void 0;
Root$2.defaultProps = {
  onSelectedDateChange: function onSelectedDateChange() {
  },
  firstDayOfWeek: 0
};
var _excluded$x = ["otherMonth", "selected", "today", "children", "className"];
var PREFIX$m = "Cell";
var classes$m = {
  cell: "".concat(PREFIX$m, "-cell"),
  otherMonth: "".concat(PREFIX$m, "-otherMonth"),
  selected: "".concat(PREFIX$m, "-selected"),
  today: "".concat(PREFIX$m, "-today")
};
var StyledTableCell$5 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$m.cell), {
    userSelect: "none",
    border: "none",
    cursor: "pointer",
    padding: 0,
    height: spacing(6),
    textAlign: "center",
    verticalAlign: "middle",
    "&:last-child": {
      padding: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$m.otherMonth), {
    color: palette.text.disabled
  }), _defineProperty(_ref2, "& .".concat(classes$m.selected), {
    background: palette.primary.main,
    color: palette.primary.contrastText,
    display: "inline-block",
    width: "2.3em",
    lineHeight: 2.3,
    borderRadius: "50%",
    cursor: "default"
  }), _defineProperty(_ref2, "& .".concat(classes$m.today), {
    color: palette.primary.main,
    fontWeight: "bold"
  }), _ref2;
});
var Cell$4 = function Cell5(_ref3) {
  var _classNames, _classNames2;
  var otherMonth = _ref3.otherMonth, selected = _ref3.selected, today = _ref3.today, children = _ref3.children, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$x);
  return (0, import_react.createElement)(StyledTableCell$5, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$m.cell, true), _defineProperty(_classNames, classes$m.otherMonth, otherMonth), _classNames), className)
  }, restProps), (0, import_react.createElement)("span", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$m.selected, selected), _defineProperty(_classNames2, classes$m.today, today && !selected), _classNames2))
  }, children));
};
true ? Cell$4.propTypes = {
  children: import_prop_types19.default.node,
  otherMonth: import_prop_types19.default.bool,
  selected: import_prop_types19.default.bool,
  today: import_prop_types19.default.bool,
  className: import_prop_types19.default.string
} : void 0;
Cell$4.defaultProps = {
  children: void 0,
  otherMonth: false,
  selected: false,
  today: false,
  className: void 0
};
var _excluded$y = ["children", "className"];
var PREFIX$n = "HeaderCell";
var classes$n = {
  cell: "".concat(PREFIX$n, "-cell")
};
var StyledTableCell$6 = styled_default(TableCell_default)(_defineProperty({}, "&.".concat(classes$n.cell), {
  userSelect: "none",
  border: "none",
  padding: 0,
  textAlign: "center",
  verticalAlign: "middle",
  "&:last-child": {
    padding: 0
  }
}));
var HeaderCell = function HeaderCell2(_ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$y);
  return (0, import_react.createElement)(StyledTableCell$6, _extends2({
    className: clsx_m_default(_defineProperty({}, classes$n.cell, true), className)
  }, restProps), children);
};
true ? HeaderCell.propTypes = {
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string
} : void 0;
HeaderCell.defaultProps = {
  children: void 0,
  className: void 0
};
var _excluded$z = ["children"];
var Row$1 = function Row3(_ref) {
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$z);
  return (0, import_react.createElement)(TableRow_default, restProps, children);
};
true ? Row$1.propTypes = {
  children: import_prop_types19.default.node.isRequired
} : void 0;
var _excluded$A = ["className", "currentDate", "textComponent", "navigationButtonComponent", "onNavigate", "formatDate"];
var PREFIX$o = "Navigator";
var classes$o = {
  navigator: "".concat(PREFIX$o, "-navigator")
};
var StyledToolbar = styled_default(Toolbar_default)(_defineProperty({}, "&.".concat(classes$o.navigator), {
  paddingLeft: 0,
  paddingRight: 0
}));
var Navigator = function Navigator2(_ref) {
  var className = _ref.className, currentDate = _ref.currentDate, Text3 = _ref.textComponent, NavigationButton2 = _ref.navigationButtonComponent, onNavigate2 = _ref.onNavigate, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$A);
  return (0, import_react.createElement)(StyledToolbar, _extends2({
    className: clsx_m_default(classes$o.navigator, className)
  }, restProps), (0, import_react.createElement)(NavigationButton2, {
    type: "back",
    onClick: function onClick2() {
      onNavigate2({
        back: true
      });
    }
  }), (0, import_react.createElement)(Text3, {
    currentDate,
    formatDate: formatDate3
  }), (0, import_react.createElement)(NavigationButton2, {
    type: "forward",
    onClick: function onClick2() {
      onNavigate2({
        back: false
      });
    }
  }));
};
true ? Navigator.propTypes = {
  textComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  navigationButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  currentDate: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  onNavigate: import_prop_types19.default.func
} : void 0;
Navigator.defaultProps = {
  className: void 0,
  onNavigate: function onNavigate() {
  }
};
var _excluded$B = ["className", "currentDate", "formatDate"];
var PREFIX$p = "Text";
var classes$p = {
  text: "".concat(PREFIX$p, "-text")
};
var StyledTypography = styled_default(Typography_default)(_defineProperty({}, "&.".concat(classes$p.text), {
  userSelect: "none",
  flex: 1,
  textAlign: "center"
}));
var Text = function Text2(_ref) {
  var className = _ref.className, currentDate = _ref.currentDate, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$B);
  return (0, import_react.createElement)(StyledTypography, _extends2({
    variant: "h6",
    className: clsx_m_default(_defineProperty({}, classes$p.text, true), className)
  }, restProps), formatDate3(currentDate, MONTH_YEAR_OPTIONS));
};
true ? Text.propTypes = {
  currentDate: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string
} : void 0;
Text.defaultProps = {
  className: void 0
};
var DateNavigator2 = withComponents({
  Root: Root$1,
  OpenButton,
  Overlay,
  NavigationButton,
  Calendar: Root$2,
  CalendarNavigator: Navigator,
  CalendarCell: Cell$4,
  CalendarRow: Row$1,
  CalendarHeaderCell: HeaderCell,
  CalendarHeaderRow: Row$1,
  CalendarText: Text,
  CalendarNavigationButton: NavigationButton
})(DateNavigator);
var _excluded$C = ["headerComponent", "contentComponent", "commandButtonComponent", "recurringIconComponent", "appointmentMeta", "appointmentResources", "showOpenButton", "showCloseButton", "showDeleteButton", "visible", "onHide", "commandButtonIds", "onOpenButtonClick", "onDeleteButtonClick", "formatDate"];
var PREFIX$q = "Layout";
var classes$q = {
  popover: "".concat(PREFIX$q, "-popover")
};
var StyledPopover = styled_default(Popover_default)(_defineProperty({}, "& .".concat(classes$q.popover), _defineProperty({
  borderRadius: "8px",
  width: "400px"
}, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
  width: "300px"
})));
var verticalTopHorizontalCenterOptions = {
  vertical: "top",
  horizontal: "center"
};
var Layout$5 = function Layout3(_ref) {
  var Header3 = _ref.headerComponent, Content3 = _ref.contentComponent, commandButtonComponent = _ref.commandButtonComponent, recurringIconComponent = _ref.recurringIconComponent, appointmentMeta = _ref.appointmentMeta, appointmentResources = _ref.appointmentResources, showOpenButton = _ref.showOpenButton, showCloseButton = _ref.showCloseButton, showDeleteButton = _ref.showDeleteButton, visible = _ref.visible, onHide3 = _ref.onHide, commandButtonIds = _ref.commandButtonIds, onOpenButtonClick3 = _ref.onOpenButtonClick, onDeleteButtonClick = _ref.onDeleteButtonClick, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$C);
  var target = appointmentMeta.target, _appointmentMeta$data = appointmentMeta.data, data = _appointmentMeta$data === void 0 ? {} : _appointmentMeta$data;
  return (0, import_react.createElement)(StyledPopover, _extends2({
    open: visible,
    anchorEl: target,
    onClose: onHide3,
    anchorOrigin: verticalTopHorizontalCenterOptions,
    transformOrigin: verticalTopHorizontalCenterOptions,
    PaperProps: {
      className: classes$q.popover
    }
  }, restProps), (0, import_react.createElement)(Header3, {
    appointmentData: data,
    commandButtonComponent,
    showOpenButton,
    showCloseButton,
    showDeleteButton,
    commandButtonIds,
    onOpenButtonClick: onOpenButtonClick3,
    onDeleteButtonClick,
    onHide: onHide3
  }), (0, import_react.createElement)(Content3, {
    appointmentData: data,
    appointmentResources,
    formatDate: formatDate3,
    recurringIconComponent
  }));
};
true ? Layout$5.propTypes = {
  commandButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  headerComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  contentComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  recurringIconComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  showOpenButton: import_prop_types19.default.bool.isRequired,
  showCloseButton: import_prop_types19.default.bool.isRequired,
  showDeleteButton: import_prop_types19.default.bool.isRequired,
  commandButtonIds: import_prop_types19.default.object.isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  onOpenButtonClick: import_prop_types19.default.func,
  onDeleteButtonClick: import_prop_types19.default.func.isRequired,
  appointmentMeta: import_prop_types19.default.shape({
    target: import_prop_types19.default.oneOfType([import_prop_types19.default.object, import_prop_types19.default.func]),
    data: import_prop_types19.default.object
  }),
  appointmentResources: import_prop_types19.default.array,
  visible: import_prop_types19.default.bool,
  onHide: import_prop_types19.default.func
} : void 0;
Layout$5.defaultProps = {
  onOpenButtonClick: function onOpenButtonClick() {
    return void 0;
  },
  onHide: function onHide() {
    return void 0;
  },
  appointmentMeta: {},
  appointmentResources: [],
  visible: false
};
var _excluded$D = ["appointmentData", "commandButtonComponent", "showOpenButton", "showCloseButton", "showDeleteButton", "commandButtonIds", "onOpenButtonClick", "onDeleteButtonClick", "onHide", "className", "children"];
var PREFIX$r = "Header";
var classes$r = {
  head: "".concat(PREFIX$r, "-head"),
  line: "".concat(PREFIX$r, "-line"),
  flexContainer: "".concat(PREFIX$r, "-flexContainer")
};
var StyledDiv$a = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$r.head), {
    position: "relative",
    paddingLeft: spacing(1),
    paddingRight: spacing(0.5),
    paddingTop: spacing(0.25),
    minHeight: spacing(1.5)
  }), _defineProperty(_ref2, "&.".concat(classes$r.flexContainer), {
    display: "flex",
    flexDirection: "row",
    justifyContent: "flex-end",
    alignItems: "flex-start"
  }), _defineProperty(_ref2, "& .".concat(classes$r.line), {
    backgroundColor: palette.action.disabledBackground,
    height: spacing(3.5),
    marginLeft: spacing(1),
    marginRight: spacing(1),
    marginTop: spacing(1.25),
    width: "1px"
  }), _ref2;
});
var Header = function Header2(_ref3) {
  var appointmentData = _ref3.appointmentData, CommandButton3 = _ref3.commandButtonComponent, showOpenButton = _ref3.showOpenButton, showCloseButton = _ref3.showCloseButton, showDeleteButton = _ref3.showDeleteButton, commandButtonIds = _ref3.commandButtonIds, onOpenButtonClick3 = _ref3.onOpenButtonClick, onDeleteButtonClick = _ref3.onDeleteButtonClick, onHide3 = _ref3.onHide, className = _ref3.className, children = _ref3.children, restProps = _objectWithoutProperties(_ref3, _excluded$D);
  var handleOpenButtonClick = function handleOpenButtonClick2() {
    onHide3();
    onOpenButtonClick3();
  };
  return (0, import_react.createElement)(StyledDiv$a, _extends2({
    className: clsx_m_default(classes$r.head, classes$r.flexContainer, className)
  }, restProps), showOpenButton && (0, import_react.createElement)(CommandButton3, {
    id: commandButtonIds.open,
    onExecute: handleOpenButtonClick
  }), showDeleteButton && (0, import_react.createElement)(CommandButton3, {
    id: commandButtonIds.delete,
    onExecute: onDeleteButtonClick
  }), children, showCloseButton && (0, import_react.createElement)(StyledDiv$a, {
    className: classes$r.flexContainer
  }, (0, import_react.createElement)("div", {
    className: classes$r.line
  }), (0, import_react.createElement)(CommandButton3, {
    id: commandButtonIds.close,
    onExecute: onHide3
  })));
};
true ? Header.propTypes = {
  appointmentData: import_prop_types19.default.object,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  commandButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  showOpenButton: import_prop_types19.default.bool.isRequired,
  showCloseButton: import_prop_types19.default.bool.isRequired,
  showDeleteButton: import_prop_types19.default.bool.isRequired,
  commandButtonIds: import_prop_types19.default.object.isRequired,
  onOpenButtonClick: import_prop_types19.default.func,
  onDeleteButtonClick: import_prop_types19.default.func.isRequired,
  onHide: import_prop_types19.default.func
} : void 0;
Header.defaultProps = {
  appointmentData: void 0,
  className: void 0,
  children: void 0,
  onOpenButtonClick: function onOpenButtonClick2() {
    return void 0;
  },
  onHide: function onHide2() {
    return void 0;
  }
};
var _excluded$E = ["className", "children", "appointmentData", "appointmentResources", "formatDate", "recurringIconComponent"];
var PREFIX$s = "Content";
var classes$s = {
  content: "".concat(PREFIX$s, "-content"),
  text: "".concat(PREFIX$s, "-text"),
  title: "".concat(PREFIX$s, "-title"),
  icon: "".concat(PREFIX$s, "-icon"),
  lens: "".concat(PREFIX$s, "-lens"),
  lensMini: "".concat(PREFIX$s, "-lensMini"),
  textCenter: "".concat(PREFIX$s, "-textCenter"),
  dateAndTitle: "".concat(PREFIX$s, "-dateAndTitle"),
  titleContainer: "".concat(PREFIX$s, "-titleContainer"),
  contentContainer: "".concat(PREFIX$s, "-contentContainer"),
  resourceContainer: "".concat(PREFIX$s, "-resourceContainer"),
  recurringIcon: "".concat(PREFIX$s, "-recurringIcon"),
  relativeContainer: "".concat(PREFIX$s, "-relativeContainer")
};
var StyledDiv$b = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette, typography = _ref$theme.typography, resources = _ref.resources;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$s.content), _objectSpread2({
    padding: spacing(1.5, 1),
    paddingTop: spacing(1),
    backgroundColor: palette.background.paper,
    boxSizing: "border-box"
  }, typography.body2)), _defineProperty(_ref2, "& .".concat(classes$s.text), {
    display: "inline-block"
  }), _defineProperty(_ref2, "& .".concat(classes$s.title), _objectSpread2(_objectSpread2({}, typography.h6), {}, {
    color: palette.text.secondary,
    fontWeight: typography.fontWeightBold,
    overflow: "hidden",
    textOverflow: "ellipsis"
  })), _defineProperty(_ref2, "& .".concat(classes$s.icon), {
    verticalAlign: "middle",
    color: palette.action.active
  }), _defineProperty(_ref2, "& .".concat(classes$s.lens), {
    color: getAppointmentColor(300, getResourceColor(resources), palette.primary),
    width: spacing(4.5),
    height: spacing(4.5),
    verticalAlign: "super",
    position: "absolute",
    left: "50%",
    transform: "translate(-50%,0)"
  }), _defineProperty(_ref2, "& .".concat(classes$s.lensMini), {
    width: spacing(2.5),
    height: spacing(2.5)
  }), _defineProperty(_ref2, "& .".concat(classes$s.textCenter), {
    textAlign: "center",
    height: spacing(2.5)
  }), _defineProperty(_ref2, "& .".concat(classes$s.dateAndTitle), {
    lineHeight: 1.4
  }), _defineProperty(_ref2, "& .".concat(classes$s.titleContainer), {
    paddingBottom: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$s.contentContainer), {
    paddingBottom: spacing(1.5)
  }), _defineProperty(_ref2, "& .".concat(classes$s.resourceContainer), {
    paddingBottom: spacing(0.25)
  }), _defineProperty(_ref2, "& .".concat(classes$s.recurringIcon), {
    position: "absolute",
    paddingTop: spacing(0.875),
    left: "50%",
    transform: "translate(-50%,0)",
    color: palette.background.paper,
    width: spacing(2.625),
    height: spacing(2.625)
  }), _defineProperty(_ref2, "& .".concat(classes$s.relativeContainer), {
    position: "relative",
    width: "100%",
    height: "100%"
  }), _ref2;
});
var Content = function Content2(_ref3) {
  var className = _ref3.className, children = _ref3.children, appointmentData = _ref3.appointmentData, appointmentResources = _ref3.appointmentResources, formatDate3 = _ref3.formatDate, RecurringIcon = _ref3.recurringIconComponent, restProps = _objectWithoutProperties(_ref3, _excluded$E);
  var weekDays = viewBoundText(appointmentData.startDate, appointmentData.endDate, WEEKDAY_INTERVAL, appointmentData.startDate, 1, formatDate3);
  return (0, import_react.createElement)(StyledDiv$b, _extends2({
    resources: appointmentResources,
    className: clsx_m_default(classes$s.content, className)
  }, restProps), (0, import_react.createElement)(Grid_default, {
    container: true,
    alignItems: "flex-start",
    className: classes$s.titleContainer
  }, (0, import_react.createElement)(Grid_default, {
    item: true,
    xs: 2
  }, (0, import_react.createElement)("div", {
    className: classes$s.relativeContainer
  }, (0, import_react.createElement)(Lens_default, {
    className: classes$s.lens
  }), !!appointmentData.rRule && (0, import_react.createElement)(RecurringIcon, {
    className: classes$s.recurringIcon
  }))), (0, import_react.createElement)(Grid_default, {
    item: true,
    xs: 10
  }, (0, import_react.createElement)("div", null, (0, import_react.createElement)("div", {
    className: clsx_m_default(classes$s.title, classes$s.dateAndTitle)
  }, appointmentData.title), (0, import_react.createElement)("div", {
    className: clsx_m_default(classes$s.text, classes$s.dateAndTitle)
  }, weekDays)))), (0, import_react.createElement)(Grid_default, {
    container: true,
    alignItems: "center",
    className: classes$s.contentContainer
  }, (0, import_react.createElement)(Grid_default, {
    item: true,
    xs: 2,
    className: classes$s.textCenter
  }, (0, import_react.createElement)(AccessTime_default, {
    className: classes$s.icon
  })), (0, import_react.createElement)(Grid_default, {
    item: true,
    xs: 10
  }, (0, import_react.createElement)("div", {
    className: classes$s.text
  }, "".concat(formatDate3(appointmentData.startDate, HOUR_MINUTE_OPTIONS), "\n              - ").concat(formatDate3(appointmentData.endDate, HOUR_MINUTE_OPTIONS))))), appointmentResources.map(function(resourceItem) {
    return (0, import_react.createElement)(Grid_default, {
      container: true,
      alignItems: "center",
      className: classes$s.resourceContainer,
      key: "".concat(resourceItem.fieldName, "_").concat(resourceItem.id)
    }, (0, import_react.createElement)(Grid_default, {
      item: true,
      xs: 2,
      className: classes$s.textCenter
    }, (0, import_react.createElement)("div", {
      className: classes$s.relativeContainer
    }, (0, import_react.createElement)(Lens_default, {
      className: clsx_m_default(classes$s.lens, classes$s.lensMini),
      style: {
        color: getAppointmentColor(300, resourceItem.color)
      }
    }))), (0, import_react.createElement)(Grid_default, {
      item: true,
      xs: 10
    }, (0, import_react.createElement)("div", {
      className: classes$s.text
    }, resourceItem.text)));
  }), children);
};
true ? Content.propTypes = {
  appointmentData: import_prop_types19.default.object,
  appointmentResources: import_prop_types19.default.array,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  formatDate: import_prop_types19.default.func.isRequired,
  recurringIconComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired
} : void 0;
Content.defaultProps = {
  appointmentData: void 0,
  appointmentResources: [],
  className: void 0,
  children: void 0
};
var _excluded$F = ["id", "onExecute"];
var getIcon = function getIcon2(id) {
  if (id === OPEN_COMMAND_BUTTON) {
    return (0, import_react.createElement)(Edit_default, null);
  }
  if (id === CLOSE_COMMAND_BUTTON) {
    return (0, import_react.createElement)(Close_default, null);
  }
  if (id === DELETE_COMMAND_BUTTON) {
    return (0, import_react.createElement)(Delete_default, null);
  }
  return null;
};
var CommandButton = function CommandButton2(_ref) {
  var id = _ref.id, onExecute2 = _ref.onExecute, restProps = _objectWithoutProperties(_ref, _excluded$F);
  return (0, import_react.createElement)(IconButton_default, _extends2({
    onClick: onExecute2
  }, restProps, {
    size: "large"
  }), getIcon(id));
};
true ? CommandButton.propTypes = {
  id: import_prop_types19.default.string,
  onExecute: import_prop_types19.default.func
} : void 0;
CommandButton.defaultProps = {
  onExecute: function onExecute() {
    return void 0;
  },
  id: ""
};
var AppointmentTooltip2 = withComponents({
  Layout: Layout$5,
  Header,
  Content,
  CommandButton,
  RecurringIcon: Repeat_default
})(AppointmentTooltip);
var _excluded$G = ["value", "availableOptions", "onValueChange", "readOnly", "inputClasses"];
var PREFIX$t = "OutlinedSelect";
var classes$t = {
  root: "".concat(PREFIX$t, "-root"),
  input: "".concat(PREFIX$t, "-input"),
  menuItem: "".concat(PREFIX$t, "-menuItem"),
  inputRoot: "".concat(PREFIX$t, "-inputRoot")
};
var StyledSelect = styled_default(Select_default)(function(_ref) {
  var typography = _ref.theme.typography;
  return _defineProperty({}, "&.".concat(classes$t.root), {
    fontSize: typography.fontSize + 2
  });
});
var StyledOutlinedInput = styled_default(OutlinedInput_default)(function() {
  var _ref3;
  return _ref3 = {}, _defineProperty(_ref3, "& .".concat(classes$t.input), {
    fontWeight: "bold",
    textTransform: "uppercase"
  }), _defineProperty(_ref3, "&.".concat(classes$t.inputRoot), {
    width: "100%"
  }), _ref3;
});
var OutlinedSelect = (0, import_react.memo)(function(_ref4) {
  var value = _ref4.value, availableOptions = _ref4.availableOptions, onValueChange5 = _ref4.onValueChange, readOnly = _ref4.readOnly, inputClasses = _ref4.inputClasses, restProps = _objectWithoutProperties(_ref4, _excluded$G);
  var handleChange = function handleChange2(event) {
    if (event.target.value !== value)
      onValueChange5(event.target.value);
  };
  return (0, import_react.createElement)(StyledSelect, _extends2({
    disabled: readOnly,
    classes: {
      root: classes$t.root
    },
    value,
    onChange: handleChange,
    input: (0, import_react.createElement)(StyledOutlinedInput, {
      classes: inputClasses || {
        input: classes$t.input,
        root: classes$t.inputRoot
      }
    })
  }, restProps), availableOptions.map(function(option) {
    return (0, import_react.createElement)(MenuItem_default, {
      value: option.id,
      key: option.id,
      className: classes$t.menuItem
    }, option.text);
  }));
});
true ? OutlinedSelect.propTypes = {
  onValueChange: import_prop_types19.default.func,
  value: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]).isRequired,
  availableOptions: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]),
    text: import_prop_types19.default.string.isRequired
  })),
  readOnly: import_prop_types19.default.bool,
  inputClasses: import_prop_types19.default.object
} : void 0;
OutlinedSelect.defaultProps = {
  readOnly: false,
  onValueChange: function onValueChange() {
    return void 0;
  },
  availableOptions: [],
  inputClasses: null
};
var _excluded$H = ["currentView", "availableViews", "onChange"];
var PREFIX$u = "Switcher";
var classes$u = {
  input: "".concat(PREFIX$u, "-input"),
  inputRoot: "".concat(PREFIX$u, "-inputRoot")
};
var StyledOutlinedSelect = styled_default(OutlinedSelect)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$u.input), _defineProperty({
    padding: spacing(1.25, 1.75),
    paddingRight: spacing(4),
    textTransform: "uppercase"
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    fontSize: "0.75rem"
  })), _defineProperty(_ref2, "& .".concat(classes$u.inputRoot), {
    marginLeft: spacing(0.5),
    "&:first-of-type": {
      marginLeft: 0
    }
  }), _ref2;
});
var Switcher = (0, import_react.memo)(function(_ref3) {
  var currentView = _ref3.currentView, availableViews = _ref3.availableViews, onChange = _ref3.onChange, restProps = _objectWithoutProperties(_ref3, _excluded$H);
  var availableOptions = availableViews.map(function(_ref4) {
    var name = _ref4.name, displayName = _ref4.displayName;
    return {
      id: name,
      text: displayName
    };
  });
  return (0, import_react.createElement)(StyledOutlinedSelect, _extends2({
    value: currentView.name,
    availableOptions,
    onValueChange: onChange,
    inputClasses: {
      input: classes$u.input,
      root: classes$u.inputRoot
    }
  }, restProps));
});
true ? Switcher.propTypes = {
  onChange: import_prop_types19.default.func.isRequired,
  currentView: import_prop_types19.default.shape({
    name: import_prop_types19.default.string.isRequired,
    displayName: import_prop_types19.default.string.isRequired
  }).isRequired,
  availableViews: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    name: import_prop_types19.default.string.isRequired,
    displayName: import_prop_types19.default.string.isRequired
  }))
} : void 0;
Switcher.defaultProps = {
  availableViews: []
};
var ViewSwitcher2 = withComponents({
  Switcher
})(ViewSwitcher);
var _excluded$I = ["setCellElementsMeta", "cellsData", "className", "cellComponent", "rowComponent", "formatDate"];
var PREFIX$v = "Layout";
var classes$v = {
  table: "".concat(PREFIX$v, "-table")
};
var StyledTable$1 = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$v.table), {
  tableLayout: "fixed"
}));
var Layout$6 = (0, import_react.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, cellsData = _ref.cellsData, className = _ref.className, Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$I);
  var tableRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    var tableElement = tableRef.current;
    setCellElementsMeta(cellsMeta(tableElement));
  });
  return (0, import_react.createElement)(StyledTable$1, _extends2({
    ref: tableRef,
    className: clsx_m_default(classes$v.table, className)
  }, restProps), (0, import_react.createElement)(TableBody_default, null, (0, import_react.createElement)(Row4, null, cellsData.map(function(_ref2) {
    var startDate = _ref2.startDate, endDate = _ref2.endDate, endOfGroup = _ref2.endOfGroup, groupingInfo = _ref2.groupingInfo;
    return (0, import_react.createElement)(Cell7, {
      key: getViewCellKey(startDate, groupingInfo),
      startDate,
      endDate,
      endOfGroup,
      hasRightBorder: endOfGroup,
      groupingInfo
    });
  }))));
});
true ? Layout$6.propTypes = {
  formatDate: import_prop_types19.default.func.isRequired,
  cellsData: import_prop_types19.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  setCellElementsMeta: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string
} : void 0;
Layout$6.defaultProps = {
  className: void 0
};
var _excluded$J = ["className", "children", "startDate", "endDate", "endOfGroup", "groupingInfo", "groupOrientation", "hasRightBorder"];
var PREFIX$w = "Cell";
var classes$w = {
  cell: "".concat(PREFIX$w, "-cell"),
  brightRightBorder: "".concat(PREFIX$w, "-brightRightBorder")
};
var StyledTableCell$7 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$w.cell), {
    padding: 0,
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL]),
    boxSizing: "border-box",
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none"
    },
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    },
    "tr:last-child &": {
      borderBottom: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$w.brightRightBorder), {
    borderRight: getBrightBorder(theme)
  }), _ref2;
});
var Cell$5 = function Cell6(_ref3) {
  var _classNames;
  var className = _ref3.className, children = _ref3.children, startDate = _ref3.startDate, endDate = _ref3.endDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, groupOrientation = _ref3.groupOrientation, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$J);
  return (0, import_react.createElement)(StyledTableCell$7, _extends2({
    tabIndex: 0,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$w.cell, true), _defineProperty(_classNames, classes$w.brightRightBorder, groupOrientation === HORIZONTAL_GROUP_ORIENTATION && (endOfGroup || hasRightBorder)), _classNames), className)
  }, restProps), children);
};
true ? Cell$5.propTypes = {
  startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  hasRightBorder: import_prop_types19.default.bool,
  endOfGroup: import_prop_types19.default.bool,
  groupingInfo: import_prop_types19.default.arrayOf(import_prop_types19.default.object),
  groupOrientation: import_prop_types19.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION])
} : void 0;
Cell$5.defaultProps = {
  children: null,
  startDate: void 0,
  endDate: void 0,
  className: void 0,
  hasRightBorder: false,
  endOfGroup: false,
  groupingInfo: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION
};
var _excluded$K = ["getMessage", "className", "fixedHeight"];
var PREFIX$x = "TitleCell";
var classes$x = {
  container: "".concat(PREFIX$x, "-container"),
  content: "".concat(PREFIX$x, "-content"),
  title: "".concat(PREFIX$x, "-title"),
  fixedHeight: "".concat(PREFIX$x, "-fixedHeight")
};
var StyledDiv$c = styled_default("div")(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$x.container), {
    userSelect: "none",
    height: "100%",
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-end",
    position: "relative"
  }), _defineProperty(_ref2, "&.".concat(classes$x.fixedHeight), {
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL]),
    width: "100%"
  }), _defineProperty(_ref2, "&.".concat(classes$x.content), {
    width: theme.spacing(10),
    boxSizing: "border-box",
    height: theme.spacing(5.75),
    textAlign: "right",
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end"
  }), _ref2;
});
var StyledTypography$1 = styled_default(Typography_default)(function(_ref3) {
  var theme = _ref3.theme;
  return _defineProperty({}, "&.".concat(classes$x.title), _objectSpread2(_objectSpread2({
    paddingRight: theme.spacing(2)
  }, theme.typography.caption), {}, {
    color: theme.palette.text.secondary
  }));
});
var TitleCell = (0, import_react.memo)(function(_ref5) {
  var _classNames, _classNames2;
  var getMessage8 = _ref5.getMessage, className = _ref5.className, fixedHeight = _ref5.fixedHeight, restProps = _objectWithoutProperties(_ref5, _excluded$K);
  return (0, import_react.createElement)(StyledDiv$c, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$x.container, true), _defineProperty(_classNames, classes$x.fixedHeight, fixedHeight), _classNames), className)
  }, restProps), (0, import_react.createElement)(StyledDiv$c, {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$x.content, true), _defineProperty(_classNames2, classes$x.fixedHeight, fixedHeight), _classNames2), className)
  }, (0, import_react.createElement)(StyledTypography$1, {
    className: classes$x.title,
    variant: "body1"
  }, getMessage8("allDay"))));
});
TitleCell.propTypes = {
  getMessage: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  fixedHeight: import_prop_types19.default.bool
};
TitleCell.defaultProps = {
  className: void 0,
  fixedHeight: false
};
var Container$1 = styled_default(ContainerBase)(function() {
  return _defineProperty({}, "&.".concat(classes.container), {
    position: "relative",
    display: "table",
    minWidth: "100%"
  });
});
var AllDayPanel2 = withComponents({
  AppointmentLayer: Container,
  Layout: Layout$6,
  Cell: Cell$5,
  Row,
  TitleCell,
  Container: Container$1
})(AllDayPanel);
var _excluded$L = ["basicLayoutComponent", "commandLayoutComponent", "recurrenceLayoutComponent", "isRecurrence", "children", "className"];
var _styled$1;
var PREFIX$y = "Layout";
var classes$y = {
  root: "".concat(PREFIX$y, "-root"),
  container: "".concat(PREFIX$y, "-container"),
  stickyContainer: "".concat(PREFIX$y, "-stickyContainer")
};
var StyledDiv$d = styled_default("div")((_styled$1 = {}, _defineProperty(_styled$1, "&.".concat(classes$y.root), {
  height: "100%",
  margin: "0 auto",
  overflowY: "auto"
}), _defineProperty(_styled$1, "& .".concat(classes$y.container), _defineProperty({
  display: "flex"
}, "".concat(LAYOUT_MEDIA_QUERY), {
  flexDirection: "column"
})), _defineProperty(_styled$1, "& .".concat(classes$y.stickyContainer), {
  display: "flex",
  position: "sticky",
  top: 0,
  zIndex: 1
}), _styled$1));
var Layout$7 = function Layout4(_ref) {
  var BasicLayout = _ref.basicLayoutComponent, CommandLayout = _ref.commandLayoutComponent, RecurrenceLayout = _ref.recurrenceLayoutComponent, isRecurrence = _ref.isRecurrence, children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$L);
  return (0, import_react.createElement)(StyledDiv$d, _extends2({
    className: clsx_m_default(classes$y.root, className)
  }, restProps), (0, import_react.createElement)("div", {
    className: classes$y.stickyContainer
  }, (0, import_react.createElement)(CommandLayout, null)), (0, import_react.createElement)("div", {
    className: classes$y.container
  }, (0, import_react.createElement)(BasicLayout, null), (0, import_react.createElement)(RecurrenceLayout, null)), children);
};
true ? Layout$7.propTypes = {
  basicLayoutComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  commandLayoutComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  recurrenceLayoutComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  isRecurrence: import_prop_types19.default.bool
} : void 0;
Layout$7.defaultProps = {
  className: void 0,
  isRecurrence: false,
  children: null
};
var _excluded$M = ["value", "placeholder", "className", "readOnly", "onValueChange", "type"];
var PREFIX$z = "TextEditor";
var classes$z = {
  editor: "".concat(PREFIX$z, "-editor"),
  title: "".concat(PREFIX$z, "-title")
};
var StyledTextField = styled_default(TextField_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$z.editor), {
    width: "100%",
    marginTop: theme.spacing(0.375),
    marginBottom: theme.spacing(0.125)
  }), _defineProperty(_ref2, "& .".concat(classes$z.title), _objectSpread2({}, theme.typography.h6)), _ref2;
});
var TextEditor = (0, import_react.memo)(function(_ref3) {
  var value = _ref3.value, placeholder = _ref3.placeholder, className = _ref3.className, readOnly = _ref3.readOnly, onValueChange5 = _ref3.onValueChange, type = _ref3.type, restProps = _objectWithoutProperties(_ref3, _excluded$M);
  var textFieldType = type === NUMBER_EDITOR ? "number" : "text";
  var notesTextEditor = type === MULTILINE_TEXT_EDITOR;
  return (0, import_react.createElement)(StyledTextField, _extends2({
    className: clsx_m_default(classes$z.editor, className),
    value,
    variant: notesTextEditor ? "outlined" : void 0,
    disabled: readOnly,
    onChange: function onChange(_ref4) {
      var target = _ref4.target;
      return onValueChange5(target.value);
    },
    InputProps: {
      className: clsx_m_default(_defineProperty({}, classes$z.title, type === TITLE_TEXT_EDITOR))
    },
    multiline: notesTextEditor,
    rows: "5",
    type: textFieldType,
    hiddenLabel: true,
    margin: "normal",
    placeholder
  }, restProps));
});
true ? TextEditor.propTypes = {
  value: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]),
  placeholder: import_prop_types19.default.string,
  className: import_prop_types19.default.string,
  readOnly: import_prop_types19.default.bool,
  onValueChange: import_prop_types19.default.func,
  type: import_prop_types19.default.string
} : void 0;
TextEditor.defaultProps = {
  value: "",
  placeholder: void 0,
  className: void 0,
  readOnly: false,
  onValueChange: function onValueChange2() {
    return void 0;
  },
  type: ORDINARY_TEXT_EDITOR
};
var _excluded$N = ["children", "locale", "className", "getMessage", "readOnly", "onFieldChange", "appointmentData", "fullSize", "resources", "appointmentResources", "textEditorComponent", "dateEditorComponent", "selectComponent", "labelComponent", "booleanEditorComponent", "resourceEditorComponent"];
var PREFIX$A = "Layout";
var classes$A = {
  root: "".concat(PREFIX$A, "-root"),
  fullSize: "".concat(PREFIX$A, "-fullSize"),
  halfSize: "".concat(PREFIX$A, "-halfSize"),
  labelWithMargins: "".concat(PREFIX$A, "-labelWithMargins"),
  notesEditor: "".concat(PREFIX$A, "-notesEditor"),
  dateEditor: "".concat(PREFIX$A, "-dateEditor"),
  dividerLabel: "".concat(PREFIX$A, "-dividerLabel"),
  booleanEditors: "".concat(PREFIX$A, "-booleanEditors"),
  dateEditors: "".concat(PREFIX$A, "-dateEditors")
};
var StyledDiv$e = styled_default("div")(function(_ref) {
  var _mediaMaxWidth, _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, typography = _ref$theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$A.root), _defineProperty({
    width: "650px",
    paddingTop: spacing(3),
    paddingBottom: spacing(3),
    paddingLeft: spacing(4),
    paddingRight: spacing(4),
    boxSizing: "border-box",
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)")
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px",
    paddingRight: spacing(2),
    paddingLeft: spacing(2),
    paddingBottom: 0
  })), _defineProperty(_ref2, "&.".concat(classes$A.fullSize), {
    paddingBottom: spacing(3)
  }), _defineProperty(_ref2, "&.".concat(classes$A.halfSize), {
    "@media (min-width: 700px) and (max-width: 850px)": {
      width: "400px"
    },
    "@media (min-width: 850px) and (max-width: 1000px)": {
      width: "480px"
    },
    "@media (min-width: 1000px) and (max-width: 1150px)": {
      width: "560px"
    }
  }), _defineProperty(_ref2, "& .".concat(classes$A.labelWithMargins), {
    marginTop: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$A.notesEditor), {
    marginBottom: spacing(0.5),
    marginTop: spacing(0.5)
  }), _defineProperty(_ref2, "& .".concat(classes$A.dateEditor), {
    width: "45%",
    paddingTop: "0px!important",
    marginTop: spacing(2),
    paddingBottom: "0px!important",
    marginBottom: 0
  }), _defineProperty(_ref2, "& .".concat(classes$A.dividerLabel), _objectSpread2(_objectSpread2({}, typography.body2), {}, {
    width: "10%",
    textAlign: "center",
    paddingTop: spacing(2)
  })), _defineProperty(_ref2, "& .".concat(classes$A.booleanEditors), {
    marginTop: spacing(0.875)
  }), _defineProperty(_ref2, "@media (max-width: 570px)", (_mediaMaxWidth = {}, _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.dateEditors), {
    flexDirection: "column"
  }), _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.booleanEditors), {
    flexDirection: "column",
    marginTop: spacing(1.875)
  }), _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.dateEditor), {
    width: "100%",
    "&:first-of-type": {
      marginBottom: 0
    },
    "&:last-child": {
      marginTop: spacing(2)
    }
  }), _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.dividerLabel), {
    display: "none"
  }), _mediaMaxWidth)), _ref2;
});
var Layout$8 = function Layout5(_ref3) {
  var _classNames;
  var children = _ref3.children, locale = _ref3.locale, className = _ref3.className, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, fullSize = _ref3.fullSize, resources = _ref3.resources, appointmentResources = _ref3.appointmentResources, TextEditor2 = _ref3.textEditorComponent, DateEditor2 = _ref3.dateEditorComponent, Select2 = _ref3.selectComponent, Label3 = _ref3.labelComponent, BooleanEditor2 = _ref3.booleanEditorComponent, ResourceEditor2 = _ref3.resourceEditorComponent, restProps = _objectWithoutProperties(_ref3, _excluded$N);
  var changeTitle = (0, import_react.useCallback)(function(title) {
    return onFieldChange10({
      title
    });
  }, [onFieldChange10]);
  var changeNotes = (0, import_react.useCallback)(function(notes) {
    return onFieldChange10({
      notes
    });
  }, [onFieldChange10]);
  var changeStartDate = (0, import_react.useCallback)(function(startDate2) {
    return onFieldChange10({
      startDate: startDate2
    });
  }, [onFieldChange10]);
  var changeEndDate = (0, import_react.useCallback)(function(endDate) {
    return onFieldChange10({
      endDate
    });
  }, [onFieldChange10]);
  var changeAllDay = (0, import_react.useCallback)(function(allDay) {
    return onFieldChange10({
      allDay
    });
  }, [onFieldChange10]);
  var changeResources = (0, import_react.useCallback)(function(resource) {
    return onFieldChange10(resource);
  }, [onFieldChange10]);
  var rRule = appointmentData.rRule, startDate = appointmentData.startDate;
  var changeFrequency = (0, import_react.useCallback)(function(value) {
    return handleChangeFrequency(value ? REPEAT_TYPES.DAILY : REPEAT_TYPES.NEVER, rRule, startDate, onFieldChange10);
  }, [rRule, startDate, onFieldChange10]);
  return (0, import_react.createElement)(StyledDiv$e, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$A.root, true), _defineProperty(_classNames, classes$A.fullSize, fullSize), _defineProperty(_classNames, classes$A.halfSize, !fullSize), _classNames), className)
  }, restProps), (0, import_react.createElement)(Label3, {
    text: getMessage8("detailsLabel"),
    type: TITLE
  }), (0, import_react.createElement)(TextEditor2, {
    placeholder: getMessage8("titleLabel"),
    readOnly,
    type: TITLE_TEXT_EDITOR,
    value: appointmentData.title,
    onValueChange: changeTitle
  }), (0, import_react.createElement)(Grid_default, {
    container: true,
    alignItems: "center",
    className: classes$A.dateEditors
  }, (0, import_react.createElement)(DateEditor2, {
    className: classes$A.dateEditor,
    readOnly,
    value: appointmentData.startDate,
    onValueChange: changeStartDate,
    locale,
    excludeTime: appointmentData.allDay
  }), (0, import_react.createElement)(Label3, {
    text: "-",
    className: classes$A.dividerLabel
  }), (0, import_react.createElement)(DateEditor2, {
    className: classes$A.dateEditor,
    readOnly,
    value: appointmentData.endDate,
    onValueChange: changeEndDate,
    locale,
    excludeTime: appointmentData.allDay
  })), (0, import_react.createElement)(Grid_default, {
    container: true,
    className: classes$A.booleanEditors
  }, (0, import_react.createElement)(BooleanEditor2, {
    label: getMessage8("allDayLabel"),
    readOnly,
    value: appointmentData.allDay,
    onValueChange: changeAllDay
  }), (0, import_react.createElement)(BooleanEditor2, {
    label: getMessage8("repeatLabel"),
    readOnly,
    value: !!appointmentData.rRule,
    onValueChange: changeFrequency
  })), (0, import_react.createElement)(Label3, {
    text: getMessage8("moreInformationLabel"),
    type: TITLE,
    className: classes$A.labelWithMargins
  }), (0, import_react.createElement)(TextEditor2, {
    placeholder: getMessage8("notesLabel"),
    readOnly,
    type: MULTILINE_TEXT_EDITOR,
    value: appointmentData.notes,
    onValueChange: changeNotes,
    className: classes$A.notesEditor
  }), resources.map(function(resource) {
    return (0, import_react.createElement)(import_react.Fragment, {
      key: resource.fieldName
    }, (0, import_react.createElement)(ResourceEditor2, {
      label: resource.title,
      readOnly,
      resource,
      appointmentResources,
      onResourceChange: changeResources
    }));
  }), children);
};
true ? Layout$8.propTypes = {
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  dateEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  booleanEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  resourceEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  locale: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.arrayOf(import_prop_types19.default.string)]).isRequired,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  getMessage: import_prop_types19.default.func.isRequired,
  onFieldChange: import_prop_types19.default.func,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  resources: import_prop_types19.default.array,
  appointmentResources: import_prop_types19.default.array,
  readOnly: import_prop_types19.default.bool,
  fullSize: import_prop_types19.default.bool.isRequired
} : void 0;
Layout$8.defaultProps = {
  onFieldChange: function onFieldChange() {
    return void 0;
  },
  resources: [],
  appointmentResources: [],
  className: void 0,
  readOnly: false,
  children: null
};
var _excluded$O = ["commandButtonComponent", "onCommitButtonClick", "onCancelButtonClick", "onDeleteButtonClick", "getMessage", "children", "className", "fullSize", "readOnly", "disableSaveButton", "hideDeleteButton"];
var PREFIX$B = "Layout";
var classes$B = {
  root: "".concat(PREFIX$B, "-root"),
  basic: "".concat(PREFIX$B, "-basic"),
  fullSize: "".concat(PREFIX$B, "-fullSize"),
  line: "".concat(PREFIX$B, "-line")
};
var StyledGrid = styled_default(Grid_default)(function(_ref) {
  var _$concat, _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$B.root), {
    display: "flex",
    justifyContent: "flex-end",
    paddingTop: spacing(2),
    paddingLeft: spacing(2),
    paddingRight: spacing(4),
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)"),
    backgroundColor: palette.background.paper
  }), _defineProperty(_ref2, "&.".concat(classes$B.basic), {
    width: "650px"
  }), _defineProperty(_ref2, "&.".concat(classes$B.fullSize), {
    width: "1150px",
    "@media (min-width: 700px) and (max-width: 850px)": {
      width: "700px"
    },
    "@media (min-width: 850px) and (max-width: 1000px)": {
      width: "850px"
    },
    "@media (min-width: 1000px) and (max-width: 1150px)": {
      width: "1000px"
    }
  }), _defineProperty(_ref2, "".concat(LAYOUT_MEDIA_QUERY), (_$concat = {}, _defineProperty(_$concat, "&.".concat(classes$B.basic), {
    maxWidth: "700px",
    width: "100%"
  }), _defineProperty(_$concat, "&.".concat(classes$B.root), {
    paddingRight: spacing(2),
    paddingLeft: 0,
    paddingTop: spacing(1),
    maxWidth: "700px",
    width: "100%"
  }), _$concat)), _ref2;
});
var StyledDiv$f = styled_default("div")(function(_ref3) {
  var _ref3$theme = _ref3.theme, palette = _ref3$theme.palette, spacing = _ref3$theme.spacing;
  return _defineProperty({}, "&.".concat(classes$B.line), {
    backgroundColor: palette.action.disabledBackground,
    height: spacing(4.5),
    width: "1px"
  });
});
var Layout$9 = function Layout6(_ref5) {
  var _classNames;
  var CommandButton3 = _ref5.commandButtonComponent, onCommitButtonClick = _ref5.onCommitButtonClick, onCancelButtonClick = _ref5.onCancelButtonClick, onDeleteButtonClick = _ref5.onDeleteButtonClick, getMessage8 = _ref5.getMessage, children = _ref5.children, className = _ref5.className, fullSize = _ref5.fullSize, readOnly = _ref5.readOnly, disableSaveButton = _ref5.disableSaveButton, hideDeleteButton = _ref5.hideDeleteButton, restProps = _objectWithoutProperties(_ref5, _excluded$O);
  return (0, import_react.createElement)(StyledGrid, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$B.root, true), _defineProperty(_classNames, classes$B.basic, !fullSize), _defineProperty(_classNames, classes$B.fullSize, fullSize), _classNames), className),
    container: true,
    alignItems: "center"
  }, restProps), (0, import_react.createElement)(CommandButton3, {
    onExecute: onCancelButtonClick,
    getMessage: getMessage8,
    id: CANCEL_BUTTON
  }), !readOnly && (0, import_react.createElement)(import_react.Fragment, null, !hideDeleteButton && (0, import_react.createElement)(import_react.Fragment, null, (0, import_react.createElement)(CommandButton3, {
    onExecute: onDeleteButtonClick,
    getMessage: getMessage8,
    id: DELETE_BUTTON
  }), (0, import_react.createElement)(StyledDiv$f, {
    className: classes$B.line
  })), (0, import_react.createElement)(CommandButton3, {
    getMessage: getMessage8,
    disabled: disableSaveButton,
    onExecute: onCommitButtonClick,
    id: SAVE_BUTTON
  })), children);
};
true ? Layout$9.propTypes = {
  commandButtonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  onCommitButtonClick: import_prop_types19.default.func.isRequired,
  onCancelButtonClick: import_prop_types19.default.func.isRequired,
  onDeleteButtonClick: import_prop_types19.default.func.isRequired,
  getMessage: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  fullSize: import_prop_types19.default.bool,
  readOnly: import_prop_types19.default.bool,
  children: import_prop_types19.default.node,
  disableSaveButton: import_prop_types19.default.bool,
  hideDeleteButton: import_prop_types19.default.bool
} : void 0;
Layout$9.defaultProps = {
  className: void 0,
  children: void 0,
  fullSize: false,
  readOnly: false,
  disableSaveButton: false,
  hideDeleteButton: false
};
var _excluded$P = ["getMessage", "className", "onExecute"];
var PREFIX$C = "SaveButton";
var classes$C = {
  button: "".concat(PREFIX$C, "-button"),
  textButton: "".concat(PREFIX$C, "-textButton")
};
var StyledButton$1 = styled_default(Button_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$C.button), {
    padding: spacing(0.5, 3.5),
    marginLeft: spacing(3),
    height: spacing(4.5),
    "&:first-of-type": {
      marginLeft: 0
    },
    backgroundColor: ensureColor(300, palette.primary),
    "&:hover": {
      backgroundColor: ensureColor(400, palette.primary)
    }
  }), _defineProperty(_ref2, "&.".concat(classes$C.textButton), {
    color: palette.primary.contrastText
  }), _ref2;
});
var SaveButton = (0, import_react.memo)(function(_ref3) {
  var _classNames;
  var getMessage8 = _ref3.getMessage, className = _ref3.className, onExecute2 = _ref3.onExecute, restProps = _objectWithoutProperties(_ref3, _excluded$P);
  return (0, import_react.createElement)(StyledButton$1, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$C.button, true), _defineProperty(_classNames, classes$C.textButton, !restProps.disabled), _classNames), className),
    onClick: onExecute2
  }, restProps), getMessage8("commitCommand"));
});
SaveButton.propTypes = {
  className: import_prop_types19.default.string,
  getMessage: import_prop_types19.default.func.isRequired,
  onExecute: import_prop_types19.default.func.isRequired
};
SaveButton.defaultProps = {
  className: void 0
};
var _excluded$Q = ["onExecute", "className"];
var PREFIX$D = "DeleteButton";
var classes$D = {
  button: "".concat(PREFIX$D, "-button")
};
var StyledIconButton$2 = styled_default(IconButton_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$D.button), {
    marginRight: spacing(0.5)
  });
});
var DeleteButton = (0, import_react.memo)(function(_ref3) {
  var onExecute2 = _ref3.onExecute, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$Q);
  return (0, import_react.createElement)(StyledIconButton$2, _extends2({
    className: clsx_m_default(classes$D.button, className),
    onClick: onExecute2
  }, restProps, {
    size: "large"
  }), (0, import_react.createElement)(Delete_default, null));
});
DeleteButton.propTypes = {
  className: import_prop_types19.default.string,
  onExecute: import_prop_types19.default.func.isRequired
};
DeleteButton.defaultProps = {
  className: void 0
};
var _excluded$R = ["onExecute", "className"];
var PREFIX$E = "CancelButton";
var classes$E = {
  button: "".concat(PREFIX$E, "-button")
};
var StyledIconButton$3 = styled_default(IconButton_default)(function() {
  return _defineProperty({}, "&.".concat(classes$E.button), {
    marginRight: "auto"
  });
});
var CancelButton = (0, import_react.memo)(function(_ref2) {
  var onExecute2 = _ref2.onExecute, className = _ref2.className, restProps = _objectWithoutProperties(_ref2, _excluded$R);
  return (0, import_react.createElement)(StyledIconButton$3, _extends2({
    className: clsx_m_default(classes$E.button, className),
    onClick: onExecute2
  }, restProps, {
    size: "large"
  }), (0, import_react.createElement)(Close_default, null));
});
CancelButton.propTypes = {
  className: import_prop_types19.default.string,
  onExecute: import_prop_types19.default.func.isRequired
};
CancelButton.defaultProps = {
  className: void 0
};
var _excluded$S = ["id", "getMessage", "onExecute"];
var CommandButton$1 = (0, import_react.memo)(function(_ref) {
  var id = _ref.id, getMessage8 = _ref.getMessage, onExecute2 = _ref.onExecute, restProps = _objectWithoutProperties(_ref, _excluded$S);
  switch (id) {
    case SAVE_BUTTON:
      return (0, import_react.createElement)(SaveButton, _extends2({
        getMessage: getMessage8,
        onExecute: onExecute2
      }, restProps));
    case DELETE_BUTTON:
      return (0, import_react.createElement)(DeleteButton, _extends2({
        onExecute: onExecute2
      }, restProps));
    case CANCEL_BUTTON:
      return (0, import_react.createElement)(CancelButton, _extends2({
        onExecute: onExecute2
      }, restProps));
    default:
      return null;
  }
});
true ? CommandButton$1.propTypes = {
  id: import_prop_types19.default.string.isRequired,
  onExecute: import_prop_types19.default.func.isRequired,
  getMessage: import_prop_types19.default.func.isRequired
} : void 0;
var _excluded$T = ["children", "visible", "className", "fullSize", "target", "onHide"];
var PREFIX$F = "Overlay";
var classes$F = {
  root: "".concat(PREFIX$F, "-root"),
  absolutePosition: "".concat(PREFIX$F, "-absolutePosition"),
  paper: "".concat(PREFIX$F, "-paper"),
  fullSize: "".concat(PREFIX$F, "-fullSize"),
  halfSize: "".concat(PREFIX$F, "-halfSize"),
  transition: "".concat(PREFIX$F, "-transition")
};
var StyledDrawer = styled_default(Drawer_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$F.root), {
    overflow: "hidden",
    paddingTop: spacing(2),
    position: "absolute"
  }), _defineProperty(_ref2, "& .".concat(classes$F.absolutePosition), {
    position: "absolute"
  }), _defineProperty(_ref2, "& .".concat(classes$F.paper), {
    outline: "none"
  }), _defineProperty(_ref2, "& .".concat(classes$F.fullSize), _defineProperty({
    height: "100%",
    width: "1150px",
    "@media (min-width: 700px) and (max-width: 850px)": {
      width: "700px"
    },
    "@media (min-width: 850px) and (max-width: 1000px)": {
      width: "850px"
    },
    "@media (min-width: 1000px) and (max-width: 1150px)": {
      width: "1000px"
    }
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px"
  })), _defineProperty(_ref2, "& .".concat(classes$F.halfSize), _defineProperty({
    height: "100%",
    width: "650px"
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px"
  })), _defineProperty(_ref2, "& .".concat(classes$F.transition), {
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)!important")
  }), _ref2;
});
var Overlay$1 = function Overlay3(_ref3) {
  var _classNames;
  var children = _ref3.children, visible = _ref3.visible, className = _ref3.className, fullSize = _ref3.fullSize, target = _ref3.target, onHide3 = _ref3.onHide, restProps = _objectWithoutProperties(_ref3, _excluded$T);
  var _React$useState = (0, import_react.useState)(false), _React$useState2 = _slicedToArray(_React$useState, 2), previouslyOpen = _React$useState2[0], setPreviouslyOpen = _React$useState2[1];
  var paperClasses = clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$F.absolutePosition, true), _defineProperty(_classNames, classes$F.paper, true), _defineProperty(_classNames, classes$F.fullSize, fullSize), _defineProperty(_classNames, classes$F.halfSize, !fullSize), _defineProperty(_classNames, classes$F.transition, visible && previouslyOpen), _classNames));
  return (0, import_react.createElement)(StyledDrawer, _extends2({
    className: clsx_m_default(classes$F.root, className),
    PaperProps: {
      className: paperClasses
    },
    BackdropProps: {
      className: classes$F.absolutePosition
    },
    ModalProps: {
      container: target.current
    },
    SlideProps: {
      onEntered: function onEntered() {
        return setPreviouslyOpen(true);
      },
      onExited: function onExited() {
        return setPreviouslyOpen(false);
      }
    },
    open: visible,
    variant: "temporary",
    anchor: "left",
    transitionDuration: TRANSITIONS_TIME,
    onBackdropClick: onHide3
  }, restProps), children);
};
true ? Overlay$1.propTypes = {
  children: import_prop_types19.default.node.isRequired,
  fullSize: import_prop_types19.default.bool.isRequired,
  onHide: import_prop_types19.default.func.isRequired,
  visible: import_prop_types19.default.bool,
  className: import_prop_types19.default.string,
  target: import_prop_types19.default.object
} : void 0;
Overlay$1.defaultProps = {
  className: void 0,
  visible: false,
  target: null
};
var _excluded$U = ["onValueChange", "value", "readOnly", "className", "locale", "excludeTime"];
var DateEditorBase = (0, import_react.memo)(function(_ref) {
  var onValueChange5 = _ref.onValueChange, value = _ref.value, readOnly = _ref.readOnly, className = _ref.className, locale = _ref.locale, excludeTime = _ref.excludeTime, restProps = _objectWithoutProperties(_ref, _excluded$U);
  var memoizedChangeHandler = (0, import_react.useCallback)(function(nextDate) {
    return nextDate && onValueChange5(nextDate.toDate());
  }, [onValueChange5]);
  var dateFormat = excludeTime ? "DD/MM/YYYY" : "DD/MM/YYYY hh:mm A";
  return (0, import_react.createElement)(LocalizationProvider, {
    dateAdapter: AdapterMoment
  }, (0, import_react.createElement)(DateTimePicker, _extends2({
    disabled: readOnly,
    renderInput: function renderInput(props) {
      return (0, import_react.createElement)(TextField_default, _extends2({
        className,
        margin: "normal"
      }, props));
    },
    value,
    onChange: memoizedChangeHandler,
    inputFormat: dateFormat
  }, restProps)));
});
true ? DateEditorBase.propTypes = {
  value: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
  className: import_prop_types19.default.string,
  readOnly: import_prop_types19.default.bool,
  onValueChange: import_prop_types19.default.func.isRequired,
  locale: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.arrayOf(import_prop_types19.default.string)]),
  excludeTime: import_prop_types19.default.bool
} : void 0;
DateEditorBase.defaultProps = {
  locale: "en-US",
  value: void 0,
  className: void 0,
  readOnly: false,
  excludeTime: false
};
var DateEditor = DateEditorBase;
var _excluded$V = ["text", "className", "type"];
var PREFIX$G = "Label";
var classes$G = {
  label: "".concat(PREFIX$G, "-label"),
  titleLabel: "".concat(PREFIX$G, "-titleLabel")
};
var StyledTypography$2 = styled_default(Typography_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$G.label), {
    overflow: "hidden",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis"
  }), _defineProperty(_ref2, "&.".concat(classes$G.titleLabel), {
    fontWeight: theme.typography.fontWeightBold,
    fontSize: theme.typography.fontSize + 5,
    paddingBottom: theme.spacing(1)
  }), _ref2;
});
var Label$1 = (0, import_react.memo)(function(_ref3) {
  var _classNames;
  var text = _ref3.text, className = _ref3.className, type = _ref3.type, restProps = _objectWithoutProperties(_ref3, _excluded$V);
  return (0, import_react.createElement)(StyledTypography$2, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$G.label, true), _defineProperty(_classNames, classes$G.titleLabel, type === TITLE), _classNames), className)
  }, restProps), text);
});
Label$1.propTypes = {
  text: import_prop_types19.default.string,
  className: import_prop_types19.default.string,
  type: import_prop_types19.default.string
};
Label$1.defaultProps = {
  text: void 0,
  className: void 0,
  type: ORDINARY_LABEL
};
var _excluded$W = ["label", "value", "readOnly", "onValueChange"];
var PREFIX$H = "BooleanEditor";
var classes$H = {
  label: "".concat(PREFIX$H, "-label")
};
var StyledFormControlLabel = styled_default(FormControlLabel_default)(_defineProperty({}, "&.".concat(classes$H.label), {
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis",
  userSelect: "none"
}));
var BooleanEditor = (0, import_react.memo)(function(_ref) {
  var label = _ref.label, value = _ref.value, readOnly = _ref.readOnly, onValueChange5 = _ref.onValueChange, restProps = _objectWithoutProperties(_ref, _excluded$W);
  return (0, import_react.createElement)(StyledFormControlLabel, _extends2({
    classes: {
      label: classes$H.label
    },
    control: (0, import_react.createElement)(Checkbox_default, {
      color: "primary",
      checked: value,
      onChange: function onChange(_ref2) {
        var target = _ref2.target;
        return onValueChange5(target.checked);
      }
    }),
    disabled: readOnly,
    label
  }, restProps));
});
BooleanEditor.propTypes = {
  label: import_prop_types19.default.string,
  readOnly: import_prop_types19.default.bool,
  value: import_prop_types19.default.bool,
  onValueChange: import_prop_types19.default.func.isRequired
};
BooleanEditor.defaultProps = {
  label: void 0,
  readOnly: false,
  value: false
};
var _excluded$X = ["value", "availableOptions", "onValueChange", "readOnly", "className"];
var PREFIX$I = "FilledSelect";
var classes$I = {
  filledSelect: "".concat(PREFIX$I, "-filledSelect"),
  menuItem: "".concat(PREFIX$I, "-menuItem")
};
var StyledTextField$1 = styled_default(TextField_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, typography = _ref$theme.typography, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$I.filledSelect), {
    marginTop: spacing(0.375),
    marginBottom: spacing(0.125)
  }), _defineProperty(_ref2, "& .".concat(classes$I.menuItem), {
    fontSize: typography.fontSize,
    textTransform: "uppercase"
  }), _ref2;
});
var FilledSelect = (0, import_react.memo)(function(_ref3) {
  var value = _ref3.value, availableOptions = _ref3.availableOptions, onValueChange5 = _ref3.onValueChange, readOnly = _ref3.readOnly, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$X);
  var handleChange = function handleChange2(event) {
    if (event.target.value !== value)
      onValueChange5(event.target.value);
  };
  return (0, import_react.createElement)(StyledTextField$1, _extends2({
    select: true,
    className: clsx_m_default(classes$I.filledSelect, className),
    value,
    onChange: handleChange,
    margin: "normal",
    hiddenLabel: true,
    disabled: readOnly
  }, restProps), availableOptions.map(function(option) {
    return (0, import_react.createElement)(MenuItem_default, {
      value: option.id,
      key: option.id,
      className: classes$I.menuItem
    }, option.text);
  }));
});
true ? FilledSelect.propTypes = {
  onValueChange: import_prop_types19.default.func,
  value: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]).isRequired,
  availableOptions: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]),
    text: import_prop_types19.default.string.isRequired
  })),
  readOnly: import_prop_types19.default.bool,
  className: import_prop_types19.default.string
} : void 0;
FilledSelect.defaultProps = {
  readOnly: false,
  onValueChange: function onValueChange3() {
    return void 0;
  },
  availableOptions: [],
  className: void 0
};
var _excluded$Y = ["value", "availableOptions", "onValueChange", "readOnly", "type"];
var Select = (0, import_react.memo)(function(_ref) {
  var value = _ref.value, availableOptions = _ref.availableOptions, onValueChange5 = _ref.onValueChange, readOnly = _ref.readOnly, type = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded$Y);
  var ResultingSelect = type === STANDARD_SELECT ? FilledSelect : OutlinedSelect;
  return (0, import_react.createElement)(ResultingSelect, _extends2({
    value,
    availableOptions,
    onValueChange: onValueChange5,
    readOnly
  }, restProps));
});
true ? Select.propTypes = {
  onValueChange: import_prop_types19.default.func.isRequired,
  value: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]).isRequired,
  availableOptions: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.number]),
    text: import_prop_types19.default.string.isRequired
  })),
  readOnly: import_prop_types19.default.bool,
  type: import_prop_types19.default.string
} : void 0;
Select.defaultProps = {
  readOnly: false,
  availableOptions: [],
  type: STANDARD_SELECT
};
var _excluded$Z = ["className", "labelComponent", "textEditorComponent", "repeatEveryLabel", "repeatIntervalLabel", "readOnly", "interval", "changeRecurrenceInterval"];
var PREFIX$J = "IntervalEditor";
var classes$J = {
  grid: "".concat(PREFIX$J, "-grid"),
  label: "".concat(PREFIX$J, "-label"),
  labelWithMargin: "".concat(PREFIX$J, "-labelWithMargin"),
  textEditor: "".concat(PREFIX$J, "-textEditor")
};
var StyledGrid$1 = styled_default(Grid_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$J.grid), {
    marginTop: spacing(1.75)
  }), _defineProperty(_ref2, "& .".concat(classes$J.label), {
    width: "6.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$J.labelWithMargin), {
    marginLeft: "1em",
    width: "calc((100% - 7.5em) * 4 / 7)"
  }), _defineProperty(_ref2, "& .".concat(classes$J.textEditor), {
    width: "calc((100% - 7.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _ref2;
});
var IntervalEditor = function IntervalEditor2(_ref3) {
  var className = _ref3.className, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, repeatEveryLabel = _ref3.repeatEveryLabel, repeatIntervalLabel = _ref3.repeatIntervalLabel, readOnly = _ref3.readOnly, interval = _ref3.interval, changeRecurrenceInterval = _ref3.changeRecurrenceInterval, restProps = _objectWithoutProperties(_ref3, _excluded$Z);
  return (0, import_react.createElement)(StyledGrid$1, _extends2({
    container: true,
    direction: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    className: clsx_m_default(classes$J.grid, className)
  }, restProps), (0, import_react.createElement)(Label3, {
    text: repeatEveryLabel,
    className: classes$J.label
  }), (0, import_react.createElement)(TextEditor2, {
    readOnly,
    value: interval,
    className: classes$J.textEditor,
    type: NUMBER_EDITOR,
    onValueChange: changeRecurrenceInterval
  }), (0, import_react.createElement)(Label3, {
    text: repeatIntervalLabel,
    className: classes$J.labelWithMargin
  }));
};
true ? IntervalEditor.propTypes = {
  className: import_prop_types19.default.string,
  repeatEveryLabel: import_prop_types19.default.string.isRequired,
  repeatIntervalLabel: import_prop_types19.default.string.isRequired,
  readOnly: import_prop_types19.default.bool.isRequired,
  interval: import_prop_types19.default.number,
  changeRecurrenceInterval: import_prop_types19.default.func.isRequired,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired
} : void 0;
IntervalEditor.defaultProps = {
  className: void 0,
  interval: 1
};
var _excluded$_ = ["weeklyRecurrenceSelectorComponent", "radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "formatDate", "firstDayOfWeek"];
var Daily = function Daily2(_ref) {
  var weeklyRecurrenceSelectorComponent = _ref.weeklyRecurrenceSelectorComponent, radioGroupComponent = _ref.radioGroupComponent, textEditorComponent = _ref.textEditorComponent, labelComponent = _ref.labelComponent, getMessage8 = _ref.getMessage, readOnly = _ref.readOnly, onFieldChange10 = _ref.onFieldChange, appointmentData = _ref.appointmentData, selectComponent = _ref.selectComponent, formatDate3 = _ref.formatDate, firstDayOfWeek = _ref.firstDayOfWeek, restProps = _objectWithoutProperties(_ref, _excluded$_);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react.createElement)(IntervalEditor, _extends2({
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("daysLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps));
};
true ? Daily.propTypes = {
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  radioGroupComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  onFieldChange: import_prop_types19.default.func,
  getMessage: import_prop_types19.default.func.isRequired,
  readOnly: import_prop_types19.default.bool,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
Daily.defaultProps = {
  onFieldChange: function onFieldChange2() {
    return void 0;
  },
  readOnly: false
};
var _excluded$$ = ["radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "weeklyRecurrenceSelectorComponent", "formatDate", "firstDayOfWeek"];
var PREFIX$K = "Weekly";
var classes$K = {
  container: "".concat(PREFIX$K, "-container")
};
var StyledDiv$g = styled_default("div")(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "& .".concat(classes$K.container), {
    marginBottom: theme.spacing(2)
  });
});
var Weekly = function Weekly2(_ref3) {
  var radioGroupComponent = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, labelComponent = _ref3.labelComponent, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, selectComponent = _ref3.selectComponent, WeeklyRecurrenceSelector2 = _ref3.weeklyRecurrenceSelectorComponent, formatDate3 = _ref3.formatDate, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$$);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react.createElement)(StyledDiv$g, restProps, (0, import_react.createElement)(IntervalEditor, _extends2({
    className: classes$K.container,
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("weeksOnLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps)), (0, import_react.createElement)(WeeklyRecurrenceSelector2, {
    rRule: appointmentData.rRule,
    onValueChange: onFieldChange10,
    readOnly,
    formatDate: formatDate3,
    firstDayOfWeek
  }));
};
true ? Weekly.propTypes = {
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  radioGroupComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  onFieldChange: import_prop_types19.default.func,
  getMessage: import_prop_types19.default.func.isRequired,
  readOnly: import_prop_types19.default.bool,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
Weekly.defaultProps = {
  onFieldChange: function onFieldChange3() {
    return void 0;
  },
  readOnly: false
};
var _excluded$10 = ["radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "weeklyRecurrenceSelectorComponent", "formatDate", "firstDayOfWeek"];
var PREFIX$L = "Monthly";
var classes$L = {
  container: "".concat(PREFIX$L, "-container")
};
var StyledDiv$h = styled_default("div")(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "&.".concat(classes$L.container), {
    marginBottom: theme.spacing(1)
  });
});
var Monthly = function Monthly2(_ref3) {
  var RadioGroup3 = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, labelComponent = _ref3.labelComponent, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, selectComponent = _ref3.selectComponent, weeklyRecurrenceSelectorComponent = _ref3.weeklyRecurrenceSelectorComponent, formatDate3 = _ref3.formatDate, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$10);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react.createElement)(StyledDiv$h, restProps, (0, import_react.createElement)(IntervalEditor, _extends2({
    className: classes$L.container,
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("monthsLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps)), (0, import_react.createElement)(RadioGroup3, {
    type: MONTHLY_RADIO_GROUP,
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent,
    onFieldChange: onFieldChange10,
    appointmentData,
    selectComponent,
    formatDate: formatDate3,
    dateEditorComponent: function dateEditorComponent() {
      return null;
    },
    firstDayOfWeek
  }));
};
true ? Monthly.propTypes = {
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  radioGroupComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  onFieldChange: import_prop_types19.default.func,
  getMessage: import_prop_types19.default.func.isRequired,
  readOnly: import_prop_types19.default.bool,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
Monthly.defaultProps = {
  onFieldChange: function onFieldChange4() {
    return void 0;
  },
  readOnly: false
};
var _excluded$11 = ["radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "weeklyRecurrenceSelectorComponent", "formatDate", "firstDayOfWeek"];
var PREFIX$M = "Yearly";
var classes$M = {
  radioGroup: "".concat(PREFIX$M, "-radioGroup")
};
var StyledDiv$i = styled_default("div")(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "& .".concat(classes$M.radioGroup), {
    marginTop: theme.spacing(1)
  });
});
var Yearly = function Yearly2(_ref3) {
  var RadioGroup3 = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, labelComponent = _ref3.labelComponent, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, selectComponent = _ref3.selectComponent, weeklyRecurrenceSelectorComponent = _ref3.weeklyRecurrenceSelectorComponent, formatDate3 = _ref3.formatDate, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$11);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react.createElement)(StyledDiv$i, restProps, (0, import_react.createElement)(IntervalEditor, _extends2({
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("yearsLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps)), (0, import_react.createElement)(RadioGroup3, {
    type: YEARLY_RADIO_GROUP,
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent,
    onFieldChange: onFieldChange10,
    appointmentData,
    selectComponent,
    formatDate: formatDate3,
    className: classes$M.radioGroup,
    dateEditorComponent: function dateEditorComponent() {
      return null;
    },
    firstDayOfWeek
  }));
};
true ? Yearly.propTypes = {
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  radioGroupComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  onFieldChange: import_prop_types19.default.func,
  getMessage: import_prop_types19.default.func.isRequired,
  readOnly: import_prop_types19.default.bool,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
Yearly.defaultProps = {
  onFieldChange: function onFieldChange5() {
    return void 0;
  },
  readOnly: false
};
var _excluded$12 = ["radioGroupComponent", "textEditorComponent", "labelComponent", "dateEditorComponent", "selectComponent", "weeklyRecurrenceSelectorComponent", "children", "className", "getMessage", "readOnly", "onFieldChange", "appointmentData", "formatDate", "locale", "visible", "firstDayOfWeek"];
var PREFIX$N = "Layout";
var classes$N = {
  root: "".concat(PREFIX$N, "-root"),
  visible: "".concat(PREFIX$N, "-visible"),
  invisible: "".concat(PREFIX$N, "-invisible"),
  label: "".concat(PREFIX$N, "-label"),
  repeatLabel: "".concat(PREFIX$N, "-repeatLabel"),
  radioGroup: "".concat(PREFIX$N, "-radioGroup"),
  endRepeatLabel: "".concat(PREFIX$N, "-endRepeatLabel"),
  select: "".concat(PREFIX$N, "-select")
};
var StyledDiv$j = styled_default("div")(function(_ref) {
  var _$concat2, _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$N.root), _defineProperty({
    padding: 0,
    paddingTop: spacing(3),
    overflow: "hidden",
    width: 0,
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)"),
    boxSizing: "border-box",
    maxWidth: 0,
    opacity: 0
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    minWidth: "100%",
    maxHeight: 0
  })), _defineProperty(_ref2, "&.".concat(classes$N.visible), (_$concat2 = {
    maxWidth: "500px",
    width: "500px",
    padding: spacing(3),
    paddingRight: spacing(4),
    paddingLeft: spacing(1),
    opacity: 1
  }, _defineProperty(_$concat2, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px",
    paddingRight: spacing(2),
    paddingLeft: spacing(2),
    maxHeight: 1e3
  }), _defineProperty(_$concat2, "@media (min-width: 700px) and (max-width: 850px)", {
    width: "300px"
  }), _defineProperty(_$concat2, "@media (min-width: 850px) and (max-width: 1000px)", {
    width: "370px"
  }), _defineProperty(_$concat2, "@media (min-width: 1000px) and (max-width: 1150px)", {
    width: "440px"
  }), _$concat2)), _defineProperty(_ref2, "&.".concat(classes$N.invisible), {
    maxHeight: 0,
    "@media (min-width: 700px)": {
      maxHeight: "500px"
    }
  }), _defineProperty(_ref2, "& .".concat(classes$N.label), {
    width: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$N.repeatLabel), {
    marginBottom: spacing(0.375)
  }), _defineProperty(_ref2, "& .".concat(classes$N.radioGroup), {
    marginTop: spacing(0.5)
  }), _defineProperty(_ref2, "& .".concat(classes$N.endRepeatLabel), {
    marginTop: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$N.select), {
    height: "3.8em"
  }), _ref2;
});
var getLayoutComponent = function getLayoutComponent2(recurrenceOptions) {
  if (recurrenceOptions) {
    switch (recurrenceOptions.freq) {
      case RRULE_REPEAT_TYPES.DAILY:
        return Daily;
      case RRULE_REPEAT_TYPES.WEEKLY:
        return Weekly;
      case RRULE_REPEAT_TYPES.MONTHLY:
        return Monthly;
      case RRULE_REPEAT_TYPES.YEARLY:
        return Yearly;
    }
  }
  return function() {
    return null;
  };
};
var Layout$a = function Layout7(_ref3) {
  var _classNames;
  var RadioGroup3 = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, Label3 = _ref3.labelComponent, dateEditorComponent = _ref3.dateEditorComponent, Select2 = _ref3.selectComponent, weeklyRecurrenceSelectorComponent = _ref3.weeklyRecurrenceSelectorComponent, children = _ref3.children, className = _ref3.className, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, formatDate3 = _ref3.formatDate, locale = _ref3.locale, visible = _ref3.visible, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$12);
  if (!appointmentData.rRule) {
    return null;
  }
  var recurrenceOptions = getRecurrenceOptions(appointmentData.rRule) || {};
  var MainLayoutComponent = getLayoutComponent(recurrenceOptions);
  var frequency = getFrequencyString(recurrenceOptions.freq);
  var rRule = appointmentData.rRule, startDate = appointmentData.startDate;
  var changeFrequency = (0, import_react.useCallback)(function(repeatType) {
    return handleChangeFrequency(repeatType, rRule, startDate, onFieldChange10);
  }, [rRule, startDate, onFieldChange10]);
  var selectOptions = (0, import_react.useMemo)(function() {
    return getAvailableRecurrenceOptions(getMessage8);
  }, [getMessage8]);
  return (0, import_react.createElement)(StyledDiv$j, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$N.root, true), _defineProperty(_classNames, classes$N.visible, visible), _defineProperty(_classNames, classes$N.invisible, !visible), _defineProperty(_classNames, "className", className), _classNames))
  }, restProps), (0, import_react.createElement)(Label3, {
    text: getMessage8("repeatLabel"),
    type: TITLE,
    className: classes$N.repeatLabel
  }), (0, import_react.createElement)(Select2, {
    onValueChange: changeFrequency,
    availableOptions: selectOptions,
    value: frequency,
    type: OUTLINED_SELECT,
    className: classes$N.select,
    readOnly
  }), (0, import_react.createElement)(MainLayoutComponent, {
    textEditorComponent,
    labelComponent: Label3,
    getMessage: getMessage8,
    readOnly,
    radioGroupComponent: RadioGroup3,
    appointmentData,
    onFieldChange: onFieldChange10,
    selectComponent: Select2,
    weeklyRecurrenceSelectorComponent,
    formatDate: formatDate3,
    firstDayOfWeek
  }), (0, import_react.createElement)(Label3, {
    text: getMessage8("endRepeatLabel"),
    className: classes$N.endRepeatLabel
  }), (0, import_react.createElement)(RadioGroup3, {
    className: classes$N.radioGroup,
    type: END_REPEAT_RADIO_GROUP,
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent: Label3,
    dateEditorComponent,
    appointmentData,
    onFieldChange: onFieldChange10,
    selectComponent: Select2,
    formatDate: formatDate3,
    locale,
    firstDayOfWeek
  }), children);
};
true ? Layout$a.propTypes = {
  locale: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.arrayOf(import_prop_types19.default.string)]),
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  radioGroupComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  dateEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  onFieldChange: import_prop_types19.default.func,
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  getMessage: import_prop_types19.default.func.isRequired,
  readOnly: import_prop_types19.default.bool,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  visible: import_prop_types19.default.bool.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
Layout$a.defaultProps = {
  locale: "en-US",
  onFieldChange: function onFieldChange6() {
    return void 0;
  },
  className: void 0,
  readOnly: false,
  children: null
};
var _excluded$13 = ["getMessage", "labelComponent", "textEditorComponent", "dateEditorComponent", "onFieldChange", "appointmentData", "locale", "readOnly"];
var PREFIX$O = "EndRepeatEditor";
var classes$O = {
  occurenceTextEditor: "".concat(PREFIX$O, "-occurenceTextEditor"),
  occurenceLabel: "".concat(PREFIX$O, "-occurenceLabel"),
  label: "".concat(PREFIX$O, "-label"),
  input: "".concat(PREFIX$O, "-input"),
  radioLabel: "".concat(PREFIX$O, "-radioLabel"),
  dateEditor: "".concat(PREFIX$O, "-dateEditor"),
  formControl: "".concat(PREFIX$O, "-formControl"),
  controlLabel: "".concat(PREFIX$O, "-controlLabel")
};
var StyledRadioGroup = styled_default(RadioGroup_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, typography = _ref$theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$O.occurenceTextEditor), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$O.occurenceLabel), {
    marginLeft: "1em",
    width: "calc((100% - 5.5em) * 4 / 7)"
  }), _defineProperty(_ref2, "& .".concat(classes$O.label), {
    width: "4.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$O.input), {
    paddingBottom: spacing(2.75)
  }), _defineProperty(_ref2, "& .".concat(classes$O.radioLabel), {
    fontSize: typography.fontSize + 1
  }), _defineProperty(_ref2, "& .".concat(classes$O.dateEditor), {
    width: "calc(100% - 4.5em)"
  }), _defineProperty(_ref2, "& .".concat(classes$O.formControl), {
    marginRight: 0
  }), _defineProperty(_ref2, "& .".concat(classes$O.controlLabel), {
    width: "100%"
  }), _ref2;
});
var EndRepeatEditor = function EndRepeatEditor2(_ref3) {
  var getMessage8 = _ref3.getMessage, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, DateEditor2 = _ref3.dateEditorComponent, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, locale = _ref3.locale, readOnly = _ref3.readOnly, restProps = _objectWithoutProperties(_ref3, _excluded$13);
  var _React$useState = (0, import_react.useState)(1), _React$useState2 = _slicedToArray(_React$useState, 2), count = _React$useState2[0], setCount = _React$useState2[1];
  var _React$useState3 = (0, import_react.useState)(appointmentData.endDate), _React$useState4 = _slicedToArray(_React$useState3, 2), endDate = _React$useState4[0], setEndDate = _React$useState4[1];
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceCount = (0, import_react.useCallback)(function(nextCount) {
    return checkIsNaturalNumber(nextCount) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        count: nextCount
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  var changeRecurrenceEndDate = (0, import_react.useCallback)(function(date) {
    if (isDateValid(date)) {
      onFieldChange10({
        rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
          until: date
        }))
      });
    }
  }, [recurrenceOptions, onFieldChange10]);
  var recurrenceCount = recurrenceOptions.count || count;
  var recurrenceEndDate = recurrenceOptions.until || endDate;
  var value;
  if (recurrenceOptions.count) {
    value = "endAfter";
  } else if (recurrenceOptions.until) {
    value = "endBy";
  } else {
    value = "never";
  }
  var onRadioGroupValueChange = function onRadioGroupValueChange2(event) {
    var change;
    switch (event.target.value) {
      case "endAfter":
        setEndDate(recurrenceOptions.until || endDate);
        change = {
          count,
          until: void 0
        };
        break;
      case "endBy":
        setCount(recurrenceOptions.count || count);
        change = {
          count: void 0,
          until: endDate
        };
        break;
      case "never":
        setEndDate(recurrenceOptions.until || endDate);
        setCount(recurrenceOptions.count || count);
        change = {
          count: void 0,
          until: void 0
        };
        break;
    }
    onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), change))
    });
  };
  return (0, import_react.createElement)(StyledRadioGroup, _extends2({
    onChange: onRadioGroupValueChange,
    value
  }, restProps), (0, import_react.createElement)(FormControlLabel_default, {
    value: "never",
    control: (0, import_react.createElement)(Radio_default, {
      color: "primary"
    }),
    label: getMessage8("never"),
    classes: {
      label: classes$O.radioLabel
    },
    disabled: readOnly
  }), (0, import_react.createElement)(FormControlLabel_default, {
    className: classes$O.formControl,
    value: "endAfter",
    classes: {
      label: classes$O.controlLabel
    },
    control: (0, import_react.createElement)(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly,
    label: (0, import_react.createElement)(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center"
    }, (0, import_react.createElement)(Label3, {
      className: classes$O.label,
      text: getMessage8("onLabel")
    }), (0, import_react.createElement)(TextEditor2, {
      readOnly: readOnly || value !== "endAfter",
      className: classes$O.occurenceTextEditor,
      value: recurrenceCount,
      type: NUMBER_EDITOR,
      onValueChange: changeRecurrenceCount
    }), (0, import_react.createElement)(Label3, {
      className: classes$O.occurenceLabel,
      text: getMessage8("occurrencesLabel")
    }))
  }), (0, import_react.createElement)(FormControlLabel_default, {
    className: classes$O.formControl,
    classes: {
      label: classes$O.controlLabel
    },
    value: "endBy",
    disabled: readOnly,
    control: (0, import_react.createElement)(Radio_default, {
      color: "primary"
    }),
    label: (0, import_react.createElement)(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center"
    }, (0, import_react.createElement)(Label3, {
      className: classes$O.label,
      text: getMessage8("afterLabel")
    }), (0, import_react.createElement)(DateEditor2, {
      className: classes$O.dateEditor,
      readOnly: readOnly || value !== "endBy",
      value: recurrenceEndDate,
      onValueChange: changeRecurrenceEndDate,
      allowKeyboardControl: false,
      locale,
      excludeTime: appointmentData.allDay
    }))
  }));
};
true ? EndRepeatEditor.propTypes = {
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  dateEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  locale: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.arrayOf(import_prop_types19.default.string)]).isRequired,
  getMessage: import_prop_types19.default.func,
  onFieldChange: import_prop_types19.default.func,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  readOnly: import_prop_types19.default.bool
} : void 0;
EndRepeatEditor.defaultProps = {
  onFieldChange: function onFieldChange7() {
    return void 0;
  },
  getMessage: function getMessage() {
    return void 0;
  },
  readOnly: false
};
var _excluded$14 = ["getMessage", "labelComponent", "textEditorComponent", "selectComponent", "readOnly", "appointmentData", "formatDate", "onFieldChange", "firstDayOfWeek"];
var PREFIX$P = "MonthlyEditor";
var classes$P = {
  textEditor: "".concat(PREFIX$P, "-textEditor"),
  input: "".concat(PREFIX$P, "-input"),
  select: "".concat(PREFIX$P, "-select"),
  longSelect: "".concat(PREFIX$P, "-longSelect"),
  label: "".concat(PREFIX$P, "-label"),
  longLabel: "".concat(PREFIX$P, "-longLabel"),
  grid: "".concat(PREFIX$P, "-grid"),
  formControl: "".concat(PREFIX$P, "-formControl"),
  controlLabel: "".concat(PREFIX$P, "-controlLabel")
};
var StyledRadioGroup$1 = styled_default(RadioGroup_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$P.textEditor), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "12em",
    marginRight: "1em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.input), {
    paddingBottom: spacing(2.75)
  }), _defineProperty(_ref2, "& .".concat(classes$P.select), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.longSelect), {
    width: "calc((100% - 5.5em) * 4 / 7)",
    minWidth: "calc(100% - 13.5em)",
    marginLeft: "1em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.label), {
    width: "4.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.longLabel), {
    width: "calc((100% - 5.5em) * 4 / 7)",
    minWidth: "calc(100% - 14em)"
  }), _defineProperty(_ref2, "& .".concat(classes$P.grid), {
    marginTop: spacing(1),
    marginBottom: spacing(1)
  }), _defineProperty(_ref2, "& .".concat(classes$P.formControl), {
    marginRight: 0
  }), _defineProperty(_ref2, "& .".concat(classes$P.controlLabel), {
    width: "100%"
  }), _ref2;
});
var MonthlyEditor = function MonthlyEditor2(_ref3) {
  var getMessage8 = _ref3.getMessage, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, Select2 = _ref3.selectComponent, readOnly = _ref3.readOnly, appointmentData = _ref3.appointmentData, formatDate3 = _ref3.formatDate, onFieldChange10 = _ref3.onFieldChange, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$14);
  var _useState = (0, import_react.useState)(appointmentData.startDate.getDate()), _useState2 = _slicedToArray(_useState, 2), dayNumber = _useState2[0], setDayNumber = _useState2[1];
  var _useState3 = (0, import_react.useState)(Math.trunc((appointmentData.startDate.getDate() - 1) / 7)), _useState4 = _slicedToArray(_useState3, 2), stateWeekNumber = _useState4[0], setStateWeekNumber = _useState4[1];
  var _useState5 = (0, import_react.useState)(appointmentData.startDate.getDay()), _useState6 = _slicedToArray(_useState5, 2), stateDayOfWeek = _useState6[0], setStateDayOfWeek = _useState6[1];
  var rRule = appointmentData.rRule;
  var recurrenceOptions = import_react.default.useMemo(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeByMonthDay = import_react.default.useCallback(function(nextByMonthDay) {
    return onFieldChange10({
      rRule: handleStartDateChange(nextByMonthDay, recurrenceOptions)
    });
  }, [recurrenceOptions]);
  var _getRadioGroupDisplay = getRadioGroupDisplayData(recurrenceOptions, stateDayOfWeek, stateWeekNumber, dayNumber, "onDayNumber", "onDayOfWeek"), dayOfWeek = _getRadioGroupDisplay.dayOfWeek, weekNumber = _getRadioGroupDisplay.weekNumber, dayNumberTextField = _getRadioGroupDisplay.dayNumberTextField, value = _getRadioGroupDisplay.radioGroupValue;
  var changeWeekNumber = import_react.default.useCallback(function(nextWeekNumber) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(nextWeekNumber, dayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, dayOfWeek]);
  var weekNumbers = import_react.default.useMemo(function() {
    return getWeekNumberLabels(getMessage8);
  }, [getMessage8]);
  var changeDayOfWeek = import_react.default.useCallback(function(nextDayOfWeek) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(weekNumber, nextDayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, weekNumber]);
  var daysOfWeek = import_react.default.useMemo(function() {
    return getDaysOfWeek(formatDate3, firstDayOfWeek);
  }, [formatDate3, firstDayOfWeek]);
  var onDayNumberReadOnly = readOnly || value !== "onDayNumber";
  var onDayOfWeekReadOnly = readOnly || value !== "onDayOfWeek";
  var onRadioGroupValueChange = function onRadioGroupValueChange2(event) {
    switch (event.target.value) {
      case "onDayNumber":
        setStateWeekNumber(weekNumber);
        setStateDayOfWeek(dayOfWeek);
        onFieldChange10({
          rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
            bymonthday: dayNumber,
            byweekday: void 0
          }))
        });
        break;
      case "onDayOfWeek":
        setDayNumber(recurrenceOptions.bymonthday || dayNumber);
        onFieldChange10({
          rRule: handleToDayOfWeekChange(stateWeekNumber, stateDayOfWeek, recurrenceOptions)
        });
        break;
    }
  };
  return import_react.default.createElement(StyledRadioGroup$1, _extends2({
    onChange: onRadioGroupValueChange,
    value
  }, restProps), import_react.default.createElement(FormControlLabel_default, {
    className: classes$P.formControl,
    value: "onDayNumber",
    control: import_react.default.createElement(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly,
    label: import_react.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center",
      className: classes$P.grid
    }, import_react.default.createElement(Label3, {
      text: getMessage8("onLabel"),
      className: classes$P.label
    }), import_react.default.createElement(TextEditor2, {
      readOnly: onDayNumberReadOnly,
      value: dayNumberTextField,
      className: classes$P.textEditor,
      type: NUMBER_EDITOR,
      onValueChange: changeByMonthDay
    }), import_react.default.createElement(Label3, {
      text: getMessage8("ofEveryMonthLabel"),
      className: classes$P.longLabel
    }))
  }), import_react.default.createElement(FormControlLabel_default, {
    value: "onDayOfWeek",
    className: classes$P.formControl,
    classes: {
      label: classes$P.controlLabel
    },
    control: import_react.default.createElement(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly,
    label: import_react.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center",
      className: classes$P.grid
    }, import_react.default.createElement(Label3, {
      text: getMessage8("theLabel"),
      className: classes$P.label
    }), import_react.default.createElement(Select2, {
      readOnly: onDayOfWeekReadOnly,
      onValueChange: changeWeekNumber,
      value: weekNumber,
      availableOptions: weekNumbers,
      className: classes$P.select
    }), import_react.default.createElement(Select2, {
      readOnly: onDayOfWeekReadOnly,
      onValueChange: changeDayOfWeek,
      value: dayOfWeek,
      availableOptions: daysOfWeek,
      className: classes$P.longSelect
    }))
  }));
};
true ? MonthlyEditor.propTypes = {
  getMessage: import_prop_types19.default.func,
  onFieldChange: import_prop_types19.default.func,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  readOnly: import_prop_types19.default.bool,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
MonthlyEditor.defaultProps = {
  getMessage: function getMessage2() {
    return void 0;
  },
  onFieldChange: function onFieldChange8() {
    return void 0;
  },
  readOnly: false
};
var _excluded$15 = ["getMessage", "labelComponent", "textEditorComponent", "selectComponent", "readOnly", "readOnlyEditors", "month", "changeMonth", "months", "dayNumber", "changeByMonthDay", "className"];
var PREFIX$Q = "ChangeMonthEditor";
var classes$Q = {
  textEditor: "".concat(PREFIX$Q, "-textEditor"),
  label: "".concat(PREFIX$Q, "-label"),
  select: "".concat(PREFIX$Q, "-select"),
  formControl: "".concat(PREFIX$Q, "-formControl"),
  controlLabel: "".concat(PREFIX$Q, "-controlLabel")
};
var StyledFormControlLabel$1 = styled_default(FormControlLabel_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$Q.formControl), {
    marginRight: 0,
    marginTop: spacing(1),
    marginBottom: spacing(1)
  }), _defineProperty(_ref2, "&.".concat(classes$Q.controlLabel), {
    width: "100%"
  }), _ref2;
});
var ChangeMonthEditor = import_react.default.memo(function(_ref3) {
  var getMessage8 = _ref3.getMessage, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, Select2 = _ref3.selectComponent, readOnly = _ref3.readOnly, readOnlyEditors = _ref3.readOnlyEditors, month = _ref3.month, changeMonth = _ref3.changeMonth, months = _ref3.months, dayNumber = _ref3.dayNumber, changeByMonthDay = _ref3.changeByMonthDay, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$15);
  var StyledLabel = styled_default(Label3)(function() {
    return _defineProperty({}, "&.".concat(classes$Q.label), {
      width: "4.5em"
    });
  });
  var StyledSelect2 = styled_default(Select2)(function() {
    return _defineProperty({}, "&.".concat(classes$Q.select), {
      width: "calc((100% - 5.5em) * 3 / 7)",
      maxWidth: "8em"
    });
  });
  var StyledTextEditor = styled_default(TextEditor2)(function() {
    return _defineProperty({}, "&.".concat(classes$Q.textEditor), {
      width: "calc((100% - 5.5em) * 4 / 7)",
      minWidth: "calc(100% - 13.5em)",
      marginLeft: "1em"
    });
  });
  return import_react.default.createElement(StyledFormControlLabel$1, _extends2({
    value: "onDayAndMonth",
    className: clsx_m_default(classes$Q.formControl, className),
    classes: {
      label: classes$Q.controlLabel
    },
    control: import_react.default.createElement(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly
  }, restProps, {
    label: import_react.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justifyContent: "flex-start",
      alignItems: "center"
    }, import_react.default.createElement(StyledLabel, {
      text: getMessage8("everyLabel"),
      className: classes$Q.label
    }), import_react.default.createElement(StyledSelect2, {
      className: classes$Q.select,
      value: month,
      onValueChange: changeMonth,
      readOnly: readOnlyEditors,
      availableOptions: months
    }), import_react.default.createElement(StyledTextEditor, {
      className: classes$Q.textEditor,
      readOnly: readOnlyEditors,
      value: dayNumber,
      type: NUMBER_EDITOR,
      onValueChange: changeByMonthDay
    }))
  }));
});
true ? ChangeMonthEditor.propTypes = {
  getMessage: import_prop_types19.default.func,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  readOnly: import_prop_types19.default.bool,
  month: import_prop_types19.default.number.isRequired,
  changeMonth: import_prop_types19.default.func.isRequired,
  months: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.number.isRequired,
    text: import_prop_types19.default.string.isRequired
  })).isRequired,
  dayNumber: import_prop_types19.default.number.isRequired,
  changeByMonthDay: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  readOnlyEditors: import_prop_types19.default.bool
} : void 0;
ChangeMonthEditor.defaultProps = {
  getMessage: function getMessage3() {
    return void 0;
  },
  readOnly: false,
  className: void 0,
  readOnlyEditors: false
};
var _excluded$16 = ["getMessage", "labelComponent", "selectComponent", "readOnly", "readOnlyEditors", "className", "weekNumber", "weekNumbers", "changeWeekNumber", "month", "months", "changeMonth", "dayOfWeek", "daysOfWeek", "changeDayOfWeek"];
var PREFIX$R = "ChangeWeekNumberEditor";
var classes$R = {
  label: "".concat(PREFIX$R, "-label"),
  select: "".concat(PREFIX$R, "-select"),
  longSelect: "".concat(PREFIX$R, "-longSelect"),
  formControlLabel: "".concat(PREFIX$R, "-formControlLabel"),
  formControl: "".concat(PREFIX$R, "-formControl"),
  doubleSelect: "".concat(PREFIX$R, "-doubleSelect"),
  radioButton: "".concat(PREFIX$R, "-radioButton"),
  controlLabel: "".concat(PREFIX$R, "-controlLabel")
};
var StyledDiv$k = styled_default("div")(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$R.label), {
    width: "4.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$R.select), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$R.longSelect), {
    width: "calc((100% - 5.5em) * 4 / 7)",
    minWidth: "calc(100% - 13.5em)",
    marginLeft: "1em"
  }), _defineProperty(_ref2, "& .".concat(classes$R.doubleSelect), {
    marginLeft: "4.5em",
    width: "calc(100% - 4.5em)",
    marginTop: spacing(1)
  }), _ref2;
});
var StyledFormControlLabel$2 = styled_default(FormControlLabel_default)(function(_ref3) {
  var _ref4;
  var spacing = _ref3.theme.spacing;
  return _ref4 = {}, _defineProperty(_ref4, "&.".concat(classes$R.formControlLabel), {
    alignItems: "flex-start"
  }), _defineProperty(_ref4, "&.".concat(classes$R.formControl), {
    marginRight: 0,
    marginTop: spacing(1),
    marginBottom: spacing(1)
  }), _defineProperty(_ref4, "&.".concat(classes$R.controlLabel), {
    width: "100%"
  }), _ref4;
});
var StyledRadio = styled_default(Radio_default)(function(_ref5) {
  var spacing = _ref5.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$R.radioButton), {
    marginTop: spacing(0.75)
  });
});
var ChangeWeekNumberEditor = import_react.default.memo(function(_ref7) {
  var getMessage8 = _ref7.getMessage, Label3 = _ref7.labelComponent, Select2 = _ref7.selectComponent, readOnly = _ref7.readOnly, readOnlyEditors = _ref7.readOnlyEditors, className = _ref7.className, weekNumber = _ref7.weekNumber, weekNumbers = _ref7.weekNumbers, changeWeekNumber = _ref7.changeWeekNumber, month = _ref7.month, months = _ref7.months, changeMonth = _ref7.changeMonth, dayOfWeek = _ref7.dayOfWeek, daysOfWeek = _ref7.daysOfWeek, changeDayOfWeek = _ref7.changeDayOfWeek, restProps = _objectWithoutProperties(_ref7, _excluded$16);
  return import_react.default.createElement(StyledFormControlLabel$2, _extends2({
    value: "onDayOfWeek",
    className: clsx_m_default(classes$R.formControlLabel, classes$R.formControl, className),
    classes: {
      label: classes$R.controlLabel
    },
    control: import_react.default.createElement(StyledRadio, {
      color: "primary",
      className: classes$R.radioButton
    }),
    disabled: readOnly
  }, restProps, {
    label: import_react.default.createElement(StyledDiv$k, null, import_react.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justifyContent: "flex-start",
      alignItems: "center"
    }, import_react.default.createElement(Label3, {
      className: classes$R.label,
      text: getMessage8("theLabel")
    }), import_react.default.createElement(Select2, {
      className: classes$R.select,
      value: weekNumber,
      onValueChange: changeWeekNumber,
      readOnly: readOnlyEditors,
      availableOptions: weekNumbers
    }), import_react.default.createElement(Select2, {
      className: classes$R.longSelect,
      value: dayOfWeek,
      onValueChange: changeDayOfWeek,
      readOnly: readOnlyEditors,
      availableOptions: daysOfWeek
    })), import_react.default.createElement(Select2, {
      className: classes$R.doubleSelect,
      value: month,
      onValueChange: changeMonth,
      readOnly: readOnlyEditors,
      availableOptions: months
    }))
  }));
});
ChangeWeekNumberEditor.propTypes = {
  getMessage: import_prop_types19.default.func,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  readOnly: import_prop_types19.default.bool,
  month: import_prop_types19.default.number.isRequired,
  changeMonth: import_prop_types19.default.func.isRequired,
  months: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.number.isRequired,
    text: import_prop_types19.default.string.isRequired
  })).isRequired,
  weekNumber: import_prop_types19.default.number.isRequired,
  changeWeekNumber: import_prop_types19.default.func.isRequired,
  weekNumbers: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.number.isRequired,
    text: import_prop_types19.default.string.isRequired
  })).isRequired,
  dayOfWeek: import_prop_types19.default.number.isRequired,
  changeDayOfWeek: import_prop_types19.default.func.isRequired,
  daysOfWeek: import_prop_types19.default.arrayOf(import_prop_types19.default.shape({
    id: import_prop_types19.default.number.isRequired,
    text: import_prop_types19.default.string.isRequired
  })).isRequired,
  className: import_prop_types19.default.string,
  readOnlyEditors: import_prop_types19.default.bool
};
ChangeWeekNumberEditor.defaultProps = {
  getMessage: function getMessage4() {
    return void 0;
  },
  readOnly: false,
  className: void 0,
  readOnlyEditors: false
};
var _excluded$17 = ["getMessage", "labelComponent", "textEditorComponent", "selectComponent", "readOnly", "appointmentData", "formatDate", "onFieldChange", "firstDayOfWeek"];
var getCurrentMonth = function getCurrentMonth2(recurrenceOptions, appointmentData) {
  if (recurrenceOptions.bymonth) {
    return recurrenceOptions.bymonth;
  }
  return appointmentData.startDate.getMonth() + 1;
};
var YearlyEditor = function YearlyEditor2(_ref) {
  var getMessage8 = _ref.getMessage, Label3 = _ref.labelComponent, TextEditor2 = _ref.textEditorComponent, Select2 = _ref.selectComponent, readOnly = _ref.readOnly, appointmentData = _ref.appointmentData, formatDate3 = _ref.formatDate, onFieldChange10 = _ref.onFieldChange, firstDayOfWeek = _ref.firstDayOfWeek, restProps = _objectWithoutProperties(_ref, _excluded$17);
  var _useState = (0, import_react.useState)(appointmentData.startDate.getDate()), _useState2 = _slicedToArray(_useState, 2), dayNumber = _useState2[0], setDayNumber = _useState2[1];
  var _useState3 = (0, import_react.useState)(Math.trunc((appointmentData.startDate.getDate() - 1) / 7)), _useState4 = _slicedToArray(_useState3, 2), stateWeekNumber = _useState4[0], setStateWeekNumber = _useState4[1];
  var _useState5 = (0, import_react.useState)(appointmentData.startDate.getDay()), _useState6 = _slicedToArray(_useState5, 2), stateDayOfWeek = _useState6[0], setStateDayOfWeek = _useState6[1];
  var rRule = appointmentData.rRule;
  var recurrenceOptions = import_react.default.useMemo(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeByMonthDay = import_react.default.useCallback(function(nextByMonthDay) {
    return onFieldChange10({
      rRule: handleStartDateChange(nextByMonthDay, recurrenceOptions)
    });
  }, [recurrenceOptions]);
  var _getRadioGroupDisplay = getRadioGroupDisplayData(recurrenceOptions, stateDayOfWeek, stateWeekNumber, dayNumber, "onDayAndMonth", "onDayOfWeek"), dayOfWeek = _getRadioGroupDisplay.dayOfWeek, weekNumber = _getRadioGroupDisplay.weekNumber, dayNumberTextField = _getRadioGroupDisplay.dayNumberTextField, value = _getRadioGroupDisplay.radioGroupValue;
  var month = getCurrentMonth(recurrenceOptions, appointmentData);
  var changeMonth = import_react.default.useCallback(function(nextMonth) {
    return onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        bymonth: nextMonth
      }))
    });
  }, [recurrenceOptions]);
  var months = import_react.default.useMemo(function() {
    return getMonths(formatDate3);
  }, [formatDate3]);
  var monthsWithOf = import_react.default.useMemo(function() {
    return getMonthsWithOf(getMessage8, formatDate3);
  }, [getMessage8, formatDate3]);
  var changeWeekNumber = import_react.default.useCallback(function(nextWeekNumber) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(nextWeekNumber, dayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, dayOfWeek]);
  var weekNumbers = import_react.default.useMemo(function() {
    return getWeekNumberLabels(getMessage8);
  }, [getMessage8]);
  var changeDayOfWeek = import_react.default.useCallback(function(nextDayOfWeek) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(weekNumber, nextDayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, weekNumber]);
  var daysOfWeek = import_react.default.useMemo(function() {
    return getDaysOfWeek(formatDate3, firstDayOfWeek);
  }, [formatDate3, firstDayOfWeek]);
  var onDayAndMonthReadOnly = readOnly || value !== "onDayAndMonth";
  var onDayOfWeekReadOnly = readOnly || value !== "onDayOfWeek";
  var onRadioGroupValueChange = function onRadioGroupValueChange2(event) {
    switch (event.target.value) {
      case "onDayAndMonth":
        setStateWeekNumber(weekNumber);
        setStateDayOfWeek(dayOfWeek);
        onFieldChange10({
          rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
            bymonthday: dayNumber,
            byweekday: void 0
          }))
        });
        break;
      case "onDayOfWeek":
        setDayNumber(recurrenceOptions.bymonthday || dayNumber);
        onFieldChange10({
          rRule: handleToDayOfWeekChange(stateWeekNumber, stateDayOfWeek, recurrenceOptions)
        });
        break;
    }
  };
  return import_react.default.createElement(RadioGroup_default, _extends2({
    onChange: onRadioGroupValueChange,
    value
  }, restProps), import_react.default.createElement(ChangeMonthEditor, {
    getMessage: getMessage8,
    labelComponent: Label3,
    textEditorComponent: TextEditor2,
    selectComponent: Select2,
    readOnly,
    readOnlyEditors: onDayAndMonthReadOnly,
    month,
    changeMonth,
    months,
    dayNumber: dayNumberTextField,
    changeByMonthDay
  }), import_react.default.createElement(ChangeWeekNumberEditor, {
    getMessage: getMessage8,
    labelComponent: Label3,
    selectComponent: Select2,
    readOnly,
    readOnlyEditors: onDayOfWeekReadOnly,
    month,
    changeMonth,
    months: monthsWithOf,
    weekNumber,
    weekNumbers,
    changeWeekNumber,
    dayOfWeek,
    daysOfWeek,
    changeDayOfWeek
  }));
};
true ? YearlyEditor.propTypes = {
  getMessage: import_prop_types19.default.func,
  onFieldChange: import_prop_types19.default.func,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  readOnly: import_prop_types19.default.bool,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
YearlyEditor.defaultProps = {
  onFieldChange: function onFieldChange9() {
    return void 0;
  },
  getMessage: function getMessage5() {
    return void 0;
  },
  readOnly: false
};
var _excluded$18 = ["dateEditorComponent", "textEditorComponent", "selectComponent", "labelComponent", "getMessage", "readOnly", "appointmentData", "formatDate", "onFieldChange", "type", "locale", "firstDayOfWeek"];
var RadioGroup = function RadioGroup2(_ref) {
  var dateEditorComponent = _ref.dateEditorComponent, textEditorComponent = _ref.textEditorComponent, selectComponent = _ref.selectComponent, labelComponent = _ref.labelComponent, getMessage8 = _ref.getMessage, readOnly = _ref.readOnly, appointmentData = _ref.appointmentData, formatDate3 = _ref.formatDate, onFieldChange10 = _ref.onFieldChange, type = _ref.type, locale = _ref.locale, firstDayOfWeek = _ref.firstDayOfWeek, restProps = _objectWithoutProperties(_ref, _excluded$18);
  var commonProps = {
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent,
    appointmentData,
    onFieldChange: onFieldChange10
  };
  switch (type) {
    case END_REPEAT_RADIO_GROUP:
      return (0, import_react.createElement)(EndRepeatEditor, _extends2({
        dateEditorComponent,
        locale
      }, commonProps, restProps));
    case MONTHLY_RADIO_GROUP:
      return (0, import_react.createElement)(MonthlyEditor, _extends2({
        selectComponent,
        formatDate: formatDate3,
        firstDayOfWeek
      }, commonProps, restProps));
    case YEARLY_RADIO_GROUP:
      return (0, import_react.createElement)(YearlyEditor, _extends2({
        selectComponent,
        formatDate: formatDate3,
        firstDayOfWeek
      }, commonProps, restProps));
    default:
      return function() {
        return null;
      };
  }
};
true ? RadioGroup.propTypes = {
  getMessage: import_prop_types19.default.func.isRequired,
  labelComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  textEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  dateEditorComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  selectComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  locale: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.arrayOf(import_prop_types19.default.string)]),
  readOnly: import_prop_types19.default.bool,
  type: import_prop_types19.default.string.isRequired,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  }).isRequired,
  onFieldChange: import_prop_types19.default.func.isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
RadioGroup.defaultProps = {
  locale: void 0,
  readOnly: false
};
var _excluded$19 = ["formatDate", "rRule", "readOnly", "className", "onValueChange", "firstDayOfWeek"];
var PREFIX$S = "WeeklyRecurrenceSelector";
var classes$S = {
  selectedButton: "".concat(PREFIX$S, "-selectedButton"),
  button: "".concat(PREFIX$S, "-button"),
  buttonGroup: "".concat(PREFIX$S, "-buttonGroup")
};
var StyledButtonGroup = styled_default(ButtonGroup_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$S.buttonGroup), {
    marginBottom: spacing(2)
  });
});
var StyledButton$2 = styled_default(Button_default)(function(_ref3) {
  var _ref4;
  var _ref3$theme = _ref3.theme, palette = _ref3$theme.palette, spacing = _ref3$theme.spacing;
  return _ref4 = {}, _defineProperty(_ref4, "&.".concat(classes$S.selectedButton), {
    backgroundColor: ensureColor(400, palette.primary),
    "&:hover": {
      backgroundColor: ensureColor(500, palette.primary)
    },
    border: "1px solid ".concat(ensureColor(400, palette.primary), "!important"),
    borderLeft: "1px solid ".concat(ensureColor(50, palette.primary), "!important"),
    "&:first-of-type": {
      borderLeft: "1px solid ".concat(ensureColor(400, palette.primary), "!important")
    },
    color: ensureColor(50, palette.primary)
  }), _defineProperty(_ref4, "&.".concat(classes$S.button), {
    minWidth: spacing(3)
  }), _ref4;
});
var isCurrentWeekDay = function isCurrentWeekDay2(_ref5, currentWeekDay) {
  var byweekday = _ref5.byweekday;
  return byweekday && byweekday.findIndex(function(_ref6) {
    var weekday = _ref6.weekday;
    return weekday === currentWeekDay;
  }) > -1;
};
var WeeklyRecurrenceSelector = import_react.default.memo(function(_ref7) {
  var formatDate3 = _ref7.formatDate, rRule = _ref7.rRule, readOnly = _ref7.readOnly, className = _ref7.className, onValueChange5 = _ref7.onValueChange, firstDayOfWeek = _ref7.firstDayOfWeek, restProps = _objectWithoutProperties(_ref7, _excluded$19);
  var recurrenceOptions = getRecurrenceOptions(rRule);
  var daysOfWeekArray = getDaysOfWeekArray(firstDayOfWeek);
  var daysOfWeekDates = getDaysOfWeekDates(firstDayOfWeek);
  return import_react.default.createElement(StyledButtonGroup, _extends2({
    variant: "outlined",
    size: "small",
    disabled: readOnly,
    className: clsx_m_default(classes$S.buttonGroup, className),
    fullWidth: true
  }, restProps), daysOfWeekArray.map(function(dayOfWeek, index) {
    var _classNames;
    return import_react.default.createElement(StyledButton$2, {
      className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$S.button, true), _defineProperty(_classNames, classes$S.selectedButton, isCurrentWeekDay(recurrenceOptions, dayOfWeek)), _classNames)),
      key: dayOfWeek,
      onClick: function onClick2() {
        return onValueChange5({
          rRule: changeRecurrenceOptions(handleWeekDaysChange(recurrenceOptions, dayOfWeek, onValueChange5))
        });
      }
    }, formatDate3(daysOfWeekDates[index], WEEK_DAY_OPTIONS));
  }));
});
true ? WeeklyRecurrenceSelector.propTypes = {
  formatDate: import_prop_types19.default.func.isRequired,
  rRule: import_prop_types19.default.string.isRequired,
  onValueChange: import_prop_types19.default.func,
  readOnly: import_prop_types19.default.bool,
  className: import_prop_types19.default.string,
  firstDayOfWeek: import_prop_types19.default.number.isRequired
} : void 0;
WeeklyRecurrenceSelector.defaultProps = {
  onValueChange: function onValueChange4() {
    return void 0;
  },
  readOnly: false,
  className: void 0
};
var _excluded$1a = ["children", "className"];
var PREFIX$T = "OverlayContainer";
var classes$T = {
  container: "".concat(PREFIX$T, "-container")
};
var StyledDiv$l = styled_default("div")(_defineProperty({}, "&.".concat(classes$T.container), {
  position: "absolute",
  width: "100%",
  height: "100%"
}));
var OverlayContainer = (0, import_react.forwardRef)(function(_ref, ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$1a);
  return (0, import_react.createElement)(StyledDiv$l, _extends2({
    ref,
    className: clsx_m_default(classes$T.container, className)
  }, restProps), children);
});
OverlayContainer.propTypes = {
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string
};
OverlayContainer.defaultProps = {
  children: null,
  className: void 0
};
var _excluded$1b = ["readOnly", "resource", "appointmentResources", "onResourceChange", "className"];
var PREFIX$U = "ResourceEditor";
var classes$U = {
  select: "".concat(PREFIX$U, "-select"),
  selectBox: "".concat(PREFIX$U, "-selectBox"),
  chips: "".concat(PREFIX$U, "-chips"),
  chip: "".concat(PREFIX$U, "-chip"),
  resourceCircle: "".concat(PREFIX$U, "-resourceCircle"),
  itemContainer: "".concat(PREFIX$U, "-itemContainer"),
  circleContainer: "".concat(PREFIX$U, "-circleContainer")
};
var StyledTextField$2 = styled_default(TextField_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$U.select), {
    padding: spacing(1)
  }), _defineProperty(_ref2, "&.".concat(classes$U.selectBox), {
    minHeight: spacing(6.5),
    width: "100%"
  }), _ref2;
});
var StyledDiv$m = styled_default("div")(function(_ref3) {
  var _ref4;
  var spacing = _ref3.theme.spacing;
  return _ref4 = {}, _defineProperty(_ref4, "&.".concat(classes$U.resourceCircle), {
    height: spacing(2),
    width: spacing(2),
    borderRadius: "50%",
    marginRight: spacing(1)
  }), _defineProperty(_ref4, "&.".concat(classes$U.itemContainer), {
    display: "flex",
    padding: spacing(0.75)
  }), _defineProperty(_ref4, "& .".concat(classes$U.circleContainer), {
    display: "flex",
    alignItems: "center"
  }), _defineProperty(_ref4, "&.".concat(classes$U.chips), {
    display: "flex",
    flexWrap: "wrap"
  }), _defineProperty(_ref4, "& .".concat(classes$U.chip), {
    color: "white",
    margin: 2
  }), _ref4;
});
var getResourceInstance = function getResourceInstance2(resourceInstances, id) {
  return resourceInstances.find(function(item) {
    return item.id === id;
  });
};
var ResourceEditor = (0, import_react.memo)(function(_ref5) {
  var readOnly = _ref5.readOnly, resource = _ref5.resource, appointmentResources = _ref5.appointmentResources, onResourceChange2 = _ref5.onResourceChange, className = _ref5.className, restProps = _objectWithoutProperties(_ref5, _excluded$1b);
  var values = appointmentResources.reduce(function(acc, resourceItem) {
    return resourceItem.fieldName === resource.fieldName ? [].concat(_toConsumableArray(acc), [resourceItem.id]) : acc;
  }, []);
  var _onChange = function onChange(nextValue) {
    onResourceChange2(_defineProperty({}, resource.fieldName, nextValue));
  };
  return (0, import_react.createElement)(StyledTextField$2, _extends2({
    select: true,
    disabled: readOnly,
    variant: "outlined",
    margin: "normal",
    value: values,
    SelectProps: {
      multiple: resource.allowMultiple,
      renderValue: function renderValue() {
        var selected = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        return resource.allowMultiple ? (0, import_react.createElement)(StyledDiv$m, {
          className: classes$U.chips
        }, selected.map(function(value) {
          var resourceItem = getResourceInstance(resource.instances, value);
          return (0, import_react.createElement)(Chip_default, {
            key: value,
            label: resourceItem.text,
            className: classes$U.chip,
            style: {
              backgroundColor: getAppointmentColor(300, resourceItem.color)
            }
          });
        })) : (0, import_react.createElement)(StyledDiv$m, {
          className: classes$U.itemContainer
        }, (0, import_react.createElement)("div", {
          className: classes$U.circleContainer
        }, (0, import_react.createElement)(StyledDiv$m, {
          className: classes$U.resourceCircle,
          style: {
            backgroundColor: getAppointmentColor(400, getResourceInstance(resource.instances, selected[0]).color)
          }
        })), getResourceInstance(resource.instances, selected[0]).text);
      }
    },
    onChange: function onChange(event) {
      return _onChange(event.target.value);
    },
    className: clsx_m_default(classes$U.selectBox, className),
    classes: {
      select: classes$U.select
    }
  }, restProps), resource.instances.map(function(resourceItem) {
    return (0, import_react.createElement)(MenuItem_default, {
      key: resourceItem.id,
      value: resourceItem.id
    }, (0, import_react.createElement)(StyledDiv$m, {
      className: classes$U.resourceCircle,
      style: {
        backgroundColor: getAppointmentColor(400, resourceItem.color)
      }
    }), resourceItem.text);
  }));
});
true ? ResourceEditor.propTypes = {
  readOnly: import_prop_types19.default.bool,
  appointmentResources: import_prop_types19.default.array,
  onResourceChange: import_prop_types19.default.func,
  resource: import_prop_types19.default.object,
  className: import_prop_types19.default.string
} : void 0;
ResourceEditor.defaultProps = {
  className: void 0,
  readOnly: false,
  appointmentResources: [],
  onResourceChange: function onResourceChange() {
    return void 0;
  },
  resource: {}
};
var AppointmentForm2 = withComponents({
  Overlay: Overlay$1,
  Layout: Layout$7,
  TextEditor,
  BasicLayout: Layout$8,
  CommandLayout: Layout$9,
  CommandButton: CommandButton$1,
  DateEditor,
  Label: Label$1,
  BooleanEditor,
  Select,
  RecurrenceLayout: Layout$a,
  RadioGroup,
  WeeklyRecurrenceSelector,
  Container: OverlayContainer,
  ResourceEditor
})(AppointmentForm);
var _excluded$1c = ["className", "data", "formatDate", "type", "fromPrev", "toNext", "durationType", "isShaded"];
var _excluded211 = ["className", "resources", "isShaded"];
var _excluded310 = ["className"];
var PREFIX$V = "DraftAppointment";
var classes$V = {
  appointment: "".concat(PREFIX$V, "-appointment"),
  shadedAppointment: "".concat(PREFIX$V, "-shadedAppointment")
};
var AppointmentBase = function AppointmentBase2(_ref) {
  var className = _ref.className, data = _ref.data, formatDate3 = _ref.formatDate, type = _ref.type, fromPrev = _ref.fromPrev, toNext = _ref.toNext, durationType = _ref.durationType, isShaded = _ref.isShaded, restProps = _objectWithoutProperties(_ref, _excluded$1c);
  return (0, import_react.createElement)(Appointment, _extends2({
    className,
    type,
    isShaded
  }, restProps), fromPrev && (0, import_react.createElement)(SplitIndicator, {
    position: POSITION_START,
    appointmentType: type
  }), (0, import_react.createElement)(AppointmentContent, {
    data,
    type,
    recurringIconComponent: Repeat_default,
    formatDate: formatDate3,
    durationType
  }), toNext && (0, import_react.createElement)(SplitIndicator, {
    position: POSITION_END,
    appointmentType: type
  }));
};
true ? AppointmentBase.propTypes = {
  data: import_prop_types19.default.object.isRequired,
  fromPrev: import_prop_types19.default.bool.isRequired,
  toNext: import_prop_types19.default.bool.isRequired,
  formatDate: import_prop_types19.default.func.isRequired,
  durationType: import_prop_types19.default.string,
  className: import_prop_types19.default.string,
  type: import_prop_types19.default.string,
  isShaded: import_prop_types19.default.bool
} : void 0;
AppointmentBase.defaultProps = {
  durationType: void 0,
  className: void 0,
  type: void 0,
  isShaded: false
};
var StyledDraftAppointmentBase = styled_default(AppointmentBase)(function(_ref2) {
  var _ref3;
  var theme = _ref2.theme, resources = _ref2.resources;
  return _ref3 = {}, _defineProperty(_ref3, "&.".concat(classes$V.appointment), {
    boxShadow: theme.shadows[3],
    cursor: "move",
    overflow: "hidden",
    backgroundColor: getAppointmentColor(600, getResourceColor(resources), theme.palette.primary),
    border: 0
  }), _defineProperty(_ref3, "&.".concat(classes$V.shadedAppointment), {
    backgroundColor: getAppointmentColor(400, getResourceColor(resources), theme.palette.primary)
  }), _ref3;
});
var DraftAppointment = function DraftAppointment2(_ref4) {
  var _classNames;
  var className = _ref4.className, resources = _ref4.resources, isShaded = _ref4.isShaded, restProps = _objectWithoutProperties(_ref4, _excluded211);
  return (0, import_react.createElement)(StyledDraftAppointmentBase, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$V.appointment, true), _defineProperty(_classNames, classes$V.shadedAppointment, isShaded), _classNames), className),
    resources
  }, restProps));
};
true ? DraftAppointment.propTypes = {
  resources: import_prop_types19.default.array,
  className: import_prop_types19.default.string,
  isShaded: import_prop_types19.default.bool
} : void 0;
DraftAppointment.defaultProps = {
  className: void 0,
  resources: [],
  isShaded: false
};
var StyledSourceAppointmentBase = styled_default(AppointmentBase)(function() {
  return _defineProperty({}, "&.".concat(classes$V.appointment), {
    opacity: 0.5
  });
});
var SourceAppointment = function SourceAppointment2(_ref6) {
  var className = _ref6.className, restProps = _objectWithoutProperties(_ref6, _excluded310);
  return (0, import_react.createElement)(StyledSourceAppointmentBase, _extends2({
    className: clsx_m_default(classes$V.appointment, className)
  }, restProps));
};
true ? SourceAppointment.propTypes = {
  className: import_prop_types19.default.string
} : void 0;
SourceAppointment.defaultProps = {
  className: void 0
};
var Container$2 = styled_default(ContainerBase)(function() {
  return _defineProperty({}, "&.".concat(classes.container), {
    position: "absolute",
    left: 0,
    top: 0,
    height: "100%",
    width: "100%",
    cursor: "move"
  });
});
var _excluded$1d = ["className", "position", "appointmentType", "forwardedRef"];
var PREFIX$W = "Resize";
var classes$W = {
  resize: "".concat(PREFIX$W, "-resize"),
  verticalStart: "".concat(PREFIX$W, "-verticalStart"),
  verticalEnd: "".concat(PREFIX$W, "-verticalEnd"),
  horizontalStart: "".concat(PREFIX$W, "-horizontalStart"),
  horizontalEnd: "".concat(PREFIX$W, "-horizontalEnd")
};
var verticalStyles$1 = function verticalStyles2(spacing) {
  return {
    width: "100%",
    height: spacing(1),
    cursor: "ns-resize"
  };
};
var horizontalStyles$1 = function horizontalStyles2(spacing) {
  return {
    width: spacing(1),
    height: "100%",
    cursor: "ew-resize"
  };
};
var StyledDiv$n = styled_default("div")(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  var vertical = verticalStyles$1(spacing);
  var horizontal = horizontalStyles$1(spacing);
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$W.resize), {
    position: "absolute",
    zIndex: 100
  }), _defineProperty(_ref2, "&.".concat(classes$W.verticalStart), _objectSpread2(_objectSpread2({}, vertical), {}, {
    top: 0
  })), _defineProperty(_ref2, "&.".concat(classes$W.verticalEnd), _objectSpread2(_objectSpread2({}, vertical), {}, {
    bottom: 0
  })), _defineProperty(_ref2, "&.".concat(classes$W.horizontalStart), _objectSpread2(_objectSpread2({}, horizontal), {}, {
    left: 0
  })), _defineProperty(_ref2, "&.".concat(classes$W.horizontalEnd), _objectSpread2(_objectSpread2({}, horizontal), {}, {
    right: 0
  })), _ref2;
});
var Resize = (0, import_react.memo)(function(_ref3) {
  var _classNames;
  var className = _ref3.className, position = _ref3.position, appointmentType = _ref3.appointmentType, forwardedRef = _ref3.forwardedRef, restProps = _objectWithoutProperties(_ref3, _excluded$1d);
  var vertical = appointmentType === VERTICAL_TYPE;
  var start = position === POSITION_START;
  return (0, import_react.createElement)(StyledDiv$n, _extends2({
    ref: forwardedRef,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$W.resize, true), _defineProperty(_classNames, classes$W.verticalStart, vertical && start), _defineProperty(_classNames, classes$W.verticalEnd, vertical && !start), _defineProperty(_classNames, classes$W.horizontalStart, !vertical && start), _defineProperty(_classNames, classes$W.horizontalEnd, !vertical && !start), _classNames), className)
  }, restProps));
});
true ? Resize.propTypes = {
  position: import_prop_types19.default.oneOf([POSITION_START, POSITION_END]).isRequired,
  appointmentType: import_prop_types19.default.oneOf([HORIZONTAL_TYPE, VERTICAL_TYPE]).isRequired,
  className: import_prop_types19.default.string,
  forwardedRef: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
} : void 0;
Resize.defaultProps = {
  className: void 0,
  forwardedRef: void 0
};
var DragDropProvider2 = withComponents({
  DraftAppointment,
  SourceAppointment,
  Container: Container$2,
  Resize
})(DragDropProvider);
var _excluded$1e = ["setCurrentDate", "getMessage", "className"];
var PREFIX$X = "TodayButton";
var classes$X = {
  button: "".concat(PREFIX$X, "-button")
};
var StyledButton$3 = styled_default(Button_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$X.button), _defineProperty({
    padding: spacing(0.8, 2),
    marginLeft: spacing(0.5),
    "&:first-of-type": {
      marginLeft: 0
    }
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    fontSize: "0.75rem"
  }));
});
var TodayButton2 = function TodayButton3(_ref3) {
  var setCurrentDate = _ref3.setCurrentDate, getMessage8 = _ref3.getMessage, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$1e);
  var handleClick = function handleClick2() {
    setCurrentDate(new Date());
  };
  return (0, import_react.createElement)(StyledButton$3, _extends2({
    className: clsx_m_default(classes$X.button, className),
    variant: "outlined",
    onClick: handleClick
  }, restProps), getMessage8("today"));
};
true ? TodayButton2.propTypes = {
  setCurrentDate: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  getMessage: import_prop_types19.default.func.isRequired
} : void 0;
TodayButton2.defaultProps = {
  className: void 0
};
var TodayButton$1 = withComponents({
  Button: TodayButton2
})(TodayButton);
var _excluded$1f = ["children", "visible", "onHide", "target", "className"];
var _styled$2;
var PREFIX$Y = "Overlay";
var classes$Y = {
  modal: "".concat(PREFIX$Y, "-modal"),
  paper: "".concat(PREFIX$Y, "-paper"),
  root: "".concat(PREFIX$Y, "-root")
};
var StyledDialog = styled_default(Dialog_default)((_styled$2 = {}, _defineProperty(_styled$2, "& .".concat(classes$Y.modal), {
  position: "absolute!important"
}), _defineProperty(_styled$2, "& .".concat(classes$Y.paper), {
  zIndex: "1302!important"
}), _defineProperty(_styled$2, "&.".concat(classes$Y.root), {
  zIndex: "1301!important"
}), _styled$2));
var Overlay$2 = function Overlay4(_ref) {
  var children = _ref.children, visible = _ref.visible, onHide3 = _ref.onHide, target = _ref.target, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$1f);
  return (0, import_react.createElement)(StyledDialog, _extends2({
    open: visible,
    onClose: onHide3,
    className: clsx_m_default(classes$Y.modal, classes$Y.root, className),
    BackdropProps: {
      className: classes$Y.modal
    },
    PaperProps: {
      className: classes$Y.paper
    },
    container: target.current,
    onBackdropClick: onHide3
  }, restProps), children);
};
true ? Overlay$2.propTypes = {
  children: import_prop_types19.default.node.isRequired,
  onHide: import_prop_types19.default.func.isRequired,
  target: import_prop_types19.default.object.isRequired,
  visible: import_prop_types19.default.bool,
  className: import_prop_types19.default.string
} : void 0;
Overlay$2.defaultProps = {
  className: void 0,
  visible: false
};
var _excluded$1g = ["buttonComponent", "handleClose", "commit", "availableOperations", "getMessage", "isDeleting"];
var PREFIX$Z = "Layout";
var classes$Z = {
  title: "".concat(PREFIX$Z, "-title"),
  content: "".concat(PREFIX$Z, "-content")
};
var StyledDiv$o = styled_default("div")(function(_ref) {
  var _$concat, _ref2;
  var typography = _ref.theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$Z.title), typography.h6), _defineProperty(_ref2, "& .".concat(classes$Z.content), {
    fontSize: "1rem"
  }), _defineProperty(_ref2, "".concat(SMALL_LAYOUT_MEDIA_QUERY), (_$concat = {}, _defineProperty(_$concat, "& .".concat(classes$Z.title), {
    fontSize: "1.1rem"
  }), _defineProperty(_$concat, "& .".concat(classes$Z.content), {
    fontSize: "0.9rem"
  }), _$concat)), _ref2;
});
var Layout$b = (0, import_react.memo)(function(_ref3) {
  var Button3 = _ref3.buttonComponent, handleClose2 = _ref3.handleClose, commit2 = _ref3.commit, availableOperations = _ref3.availableOperations, getMessage8 = _ref3.getMessage, isDeleting = _ref3.isDeleting, restProps = _objectWithoutProperties(_ref3, _excluded$1g);
  var _React$useState = (0, import_react.useState)(availableOperations[0].value), _React$useState2 = _slicedToArray(_React$useState, 2), currentValue = _React$useState2[0], setCurrentValue = _React$useState2[1];
  var handleChange = (0, import_react.useCallback)(function(event) {
    setCurrentValue(event.target.value);
  });
  var onCommitButtonClick = function onCommitButtonClick2() {
    commit2(currentValue);
  };
  return (0, import_react.createElement)(StyledDiv$o, restProps, (0, import_react.createElement)(DialogTitle_default, {
    className: classes$Z.title
  }, getMessage8(isDeleting ? "menuDeletingTitle" : "menuEditingTitle")), (0, import_react.createElement)(DialogContent_default, null, (0, import_react.createElement)(RadioGroup_default, {
    value: currentValue,
    onChange: handleChange
  }, availableOperations.map(function(operation) {
    return (0, import_react.createElement)(FormControlLabel_default, {
      value: operation.value,
      control: (0, import_react.createElement)(Radio_default, null),
      label: operation.title,
      key: operation.value,
      classes: {
        label: classes$Z.content
      }
    });
  }))), (0, import_react.createElement)(DialogActions_default, null, (0, import_react.createElement)(Button3, {
    onClick: handleClose2,
    title: getMessage8("cancelButton")
  }), (0, import_react.createElement)(Button3, {
    onClick: onCommitButtonClick,
    title: getMessage8("commitButton"),
    color: "primary"
  })));
});
true ? Layout$b.propTypes = {
  buttonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  availableOperations: import_prop_types19.default.array.isRequired,
  handleClose: import_prop_types19.default.func,
  commit: import_prop_types19.default.func,
  getMessage: import_prop_types19.default.func,
  isDeleting: import_prop_types19.default.bool
} : void 0;
Layout$b.defaultProps = {
  handleClose: function handleClose() {
    return void 0;
  },
  commit: function commit() {
    return void 0;
  },
  getMessage: function getMessage6() {
    return void 0;
  },
  isDeleting: false
};
var _excluded$1h = ["onClick", "title"];
var Button = function Button2(_ref) {
  var onClick2 = _ref.onClick, title = _ref.title, restProps = _objectWithoutProperties(_ref, _excluded$1h);
  return (0, import_react.createElement)(Button_default, _extends2({
    onClick: onClick2
  }, restProps), title);
};
true ? Button.propTypes = {
  onClick: import_prop_types19.default.func.isRequired,
  title: import_prop_types19.default.string
} : void 0;
Button.defaultProps = {
  title: ""
};
var EditRecurrenceMenu2 = withComponents({
  Layout: Layout$b,
  Overlay: Overlay$2,
  Button,
  Container: OverlayContainer
})(EditRecurrenceMenu);
var _excluded$1i = ["buttonComponent", "handleCancel", "handleConfirm", "getMessage", "isDeleting", "appointmentData"];
var PREFIX$_ = "Layout";
var classes$_ = {
  title: "".concat(PREFIX$_, "-title")
};
var StyledDialogTitle = styled_default(DialogTitle_default)(function(_ref) {
  var _ref2;
  var typography = _ref.theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$_.title), _objectSpread2({}, typography.h6)), _defineProperty(_ref2, "".concat(SMALL_LAYOUT_MEDIA_QUERY), _defineProperty({}, "&.".concat(classes$_.title), {
    fontSize: "1.1rem"
  })), _ref2;
});
var Layout$c = (0, import_react.memo)(function(_ref3) {
  var Button3 = _ref3.buttonComponent, handleCancel2 = _ref3.handleCancel, handleConfirm2 = _ref3.handleConfirm, getMessage8 = _ref3.getMessage, isDeleting = _ref3.isDeleting, appointmentData = _ref3.appointmentData, restProps = _objectWithoutProperties(_ref3, _excluded$1i);
  return (0, import_react.createElement)("div", restProps, (0, import_react.createElement)(StyledDialogTitle, {
    className: classes$_.title
  }, getMessage8(isDeleting ? "confirmDeleteMessage" : "confirmCancelMessage")), (0, import_react.createElement)(DialogActions_default, null, (0, import_react.createElement)(Button3, {
    onClick: handleCancel2,
    title: getMessage8("cancelButton")
  }), (0, import_react.createElement)(Button3, {
    onClick: handleConfirm2,
    title: getMessage8(isDeleting ? "deleteButton" : "discardButton"),
    color: "primary"
  })));
});
Layout$c.propTypes = {
  buttonComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  handleCancel: import_prop_types19.default.func,
  handleConfirm: import_prop_types19.default.func,
  getMessage: import_prop_types19.default.func,
  isDeleting: import_prop_types19.default.bool,
  appointmentData: import_prop_types19.default.shape({
    title: import_prop_types19.default.string,
    startDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    endDate: import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.instanceOf(Date)]),
    rRule: import_prop_types19.default.string,
    notes: import_prop_types19.default.string,
    additionalInformation: import_prop_types19.default.string,
    allDay: import_prop_types19.default.bool
  })
};
Layout$c.defaultProps = {
  handleCancel: function handleCancel() {
    return void 0;
  },
  handleConfirm: function handleConfirm() {
    return void 0;
  },
  getMessage: function getMessage7() {
    return void 0;
  },
  isDeleting: false,
  appointmentData: {
    startDate: new Date(),
    endDate: new Date()
  }
};
var ConfirmationDialog2 = withComponents({
  Overlay: Overlay$2,
  Layout: Layout$c,
  Container: OverlayContainer,
  Button
})(ConfirmationDialog);
var _excluded$1j = ["top"];
var PREFIX$$ = "Indicator";
var classes$$ = {
  line: "".concat(PREFIX$$, "-line"),
  circle: "".concat(PREFIX$$, "-circle"),
  nowIndicator: "".concat(PREFIX$$, "-nowIndicator")
};
var StyledDiv$p = styled_default("div", {
  shouldForwardProp: function shouldForwardProp5(prop) {
    return prop !== "topValue";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, topValue = _ref.topValue;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$$.circle), {
    width: theme.spacing(1.5),
    height: theme.spacing(1.5),
    borderRadius: "50%",
    transform: "translate(-50%, -50%)"
  }), _defineProperty(_ref2, "& .".concat(classes$$.line), {
    height: "2px",
    width: "100%",
    transform: "translate(0, -1px)"
  }), _defineProperty(_ref2, "& .".concat(classes$$.nowIndicator), {
    position: "absolute",
    left: 0,
    top: topValue,
    background: theme.palette.secondary.main,
    zIndex: 1
  }), _ref2;
});
var Indicator = function Indicator2(_ref3) {
  var top = _ref3.top, restProps = _objectWithoutProperties(_ref3, _excluded$1j);
  return (0, import_react.createElement)(StyledDiv$p, _extends2({
    topValue: top
  }, restProps), (0, import_react.createElement)("div", {
    className: clsx_m_default(classes$$.nowIndicator, classes$$.circle)
  }), (0, import_react.createElement)("div", {
    className: clsx_m_default(classes$$.nowIndicator, classes$$.line)
  }));
};
true ? Indicator.propTypes = {
  top: import_prop_types19.default.string
} : void 0;
Indicator.defaultProps = {
  top: 0
};
var CurrentTimeIndicator2 = withComponents({
  Indicator
})(CurrentTimeIndicator);
var Resources2 = function Resources3(_ref) {
  var data = _ref.data, mainResourceName = _ref.mainResourceName, palette = _ref.palette;
  return (0, import_react.createElement)(Resources, {
    data,
    mainResourceName,
    palette
  });
};
true ? Resources2.propTypes = {
  data: import_prop_types19.default.array,
  mainResourceName: import_prop_types19.default.string,
  palette: import_prop_types19.default.array
} : void 0;
Resources2.defaultProps = {
  data: [],
  mainResourceName: void 0,
  palette: DEFAULT_PALETTE
};
var _excluded$1k = ["rowComponent", "cellComponent", "groups", "colSpan", "cellStyle", "showHeaderForEveryDate"];
var HorizontalLayout = function HorizontalLayout2(_ref) {
  var Row4 = _ref.rowComponent, Cell7 = _ref.cellComponent, groups = _ref.groups, colSpan = _ref.colSpan, cellStyle = _ref.cellStyle, showHeaderForEveryDate = _ref.showHeaderForEveryDate, restProps = _objectWithoutProperties(_ref, _excluded$1k);
  return (0, import_react.createElement)(import_react.Fragment, null, groups.map(function(groupRow, rowIndex) {
    var cellColSpan = colSpan / groupRow.length;
    return (0, import_react.createElement)(Row4, _extends2({
      key: groups[rowIndex][0].text
    }, restProps), !showHeaderForEveryDate && groupRow.map(function(group, index) {
      return (0, import_react.createElement)(Cell7, {
        group,
        colSpan: cellColSpan,
        key: getCellKey(groups, index, rowIndex),
        left: cellStyle.left,
        endOfGroup: true,
        groupedByDate: false
      });
    }), showHeaderForEveryDate && getRowFromGroups(colSpan, groupRow, cellStyle, groups, rowIndex).map(function(_ref2) {
      var group = _ref2.group, columnSpan = _ref2.colSpan, key = _ref2.key, endOfGroup = _ref2.endOfGroup;
      return (0, import_react.createElement)(Cell7, {
        group,
        colSpan: columnSpan,
        key,
        left: cellStyle.left,
        endOfGroup,
        groupedByDate: true
      });
    }));
  }));
};
true ? HorizontalLayout.propTypes = {
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  groups: import_prop_types19.default.arrayOf(import_prop_types19.default.arrayOf(import_prop_types19.default.object)).isRequired,
  colSpan: import_prop_types19.default.number.isRequired,
  cellStyle: import_prop_types19.default.object.isRequired,
  showHeaderForEveryDate: import_prop_types19.default.bool
} : void 0;
HorizontalLayout.defaultProps = {
  showHeaderForEveryDate: false
};
var _excluded$1l = ["rowComponent", "cellComponent", "groups", "rowSpan", "viewType", "className", "cellTextTopOffset", "alignWithAllDayRow"];
var PREFIX$10 = "VerticalLayout";
var classes$10 = {
  layout: "".concat(PREFIX$10, "-layout")
};
var StyledTable$2 = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$10.layout), {
  width: "auto",
  "&:only-child": {
    width: "100%"
  }
}));
var allDayCellHeight = BASIC_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL];
var VerticalLayout = function VerticalLayout2(_ref) {
  var Row4 = _ref.rowComponent, Cell7 = _ref.cellComponent, groups = _ref.groups, rowSpan = _ref.rowSpan, viewType = _ref.viewType, className = _ref.className, cellTextTopOffset = _ref.cellTextTopOffset, alignWithAllDayRow = _ref.alignWithAllDayRow, restProps = _objectWithoutProperties(_ref, _excluded$1l);
  var timeTableCellHeight = BASIC_CELL_HEIGHT[viewType];
  return (0, import_react.createElement)(StyledTable$2, _extends2({
    className: clsx_m_default(classes$10.layout, className)
  }, restProps), (0, import_react.createElement)(TableBody_default, null, getGroupsLastRow(groups).map(function(_, groupIndex) {
    return (0, import_react.createElement)(Row4, {
      key: groupIndex.toString()
    }, getVerticalRowFromGroups(groups, groupIndex, rowSpan, timeTableCellHeight, alignWithAllDayRow, allDayCellHeight).map(function(_ref2) {
      var cellGroup = _ref2.group, cellRowSpan = _ref2.rowSpan, key = _ref2.key, height = _ref2.height;
      return (0, import_react.createElement)(Cell7, {
        group: cellGroup,
        rowSpan: cellRowSpan,
        height,
        left: 0,
        colSpan: 1,
        groupOrientation: VERTICAL_GROUP_ORIENTATION,
        topOffset: cellTextTopOffset,
        key
      });
    }));
  })));
};
true ? VerticalLayout.propTypes = {
  rowComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  cellComponent: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]).isRequired,
  alignWithAllDayRow: import_prop_types19.default.bool,
  groups: import_prop_types19.default.arrayOf(import_prop_types19.default.arrayOf(import_prop_types19.default.object)).isRequired,
  rowSpan: import_prop_types19.default.number.isRequired,
  viewType: import_prop_types19.default.string.isRequired,
  cellTextTopOffset: import_prop_types19.default.number,
  className: import_prop_types19.default.string
} : void 0;
VerticalLayout.defaultProps = {
  cellTextTopOffset: void 0,
  className: void 0,
  alignWithAllDayRow: false
};
var _excluded$1m = ["className", "group", "colSpan", "rowSpan", "left", "endOfGroup", "groupedByDate", "children", "height", "groupOrientation", "textStyle", "topOffset"];
var PREFIX$11 = "Cell";
var classes$11 = {
  cell: "".concat(PREFIX$11, "-cell"),
  text: "".concat(PREFIX$11, "-text"),
  horizontalCell: "".concat(PREFIX$11, "-horizontalCell"),
  content: "".concat(PREFIX$11, "-content"),
  verticalCell: "".concat(PREFIX$11, "-verticalCell"),
  groupedByDate: "".concat(PREFIX$11, "-groupedByDate"),
  verticalCellText: "".concat(PREFIX$11, "-title"),
  textContainer: "".concat(PREFIX$11, "-title")
};
var StyledTableCell$8 = styled_default(TableCell_default, {
  shouldForwardProp: function shouldForwardProp6(prop) {
    return prop !== "endOfGroup" && prop !== "textStyle" && prop !== "topOffset";
  }
})(function(_ref) {
  var _$concat, _ref2;
  var theme = _ref.theme, left = _ref.left, endOfGroup = _ref.endOfGroup, height = _ref.height, rowSpan = _ref.rowSpan, textStyle = _ref.textStyle, topOffset = _ref.topOffset;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$11.cell), {
    userSelect: "none",
    padding: 0,
    paddingTop: theme.spacing(0.5),
    boxSizing: "border-box",
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    },
    height: height ? theme.spacing(height) : void 0
  }), _defineProperty(_ref2, "& .".concat(classes$11.text), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    padding: theme.spacing(1),
    color: theme.palette.text.secondary,
    fontWeight: "bold",
    fontSize: "1rem",
    position: "sticky",
    display: "inline-block",
    left: "".concat(left, "px"),
    lineHeight: 1.5,
    whiteSpace: "pre-wrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    boxSizing: "border-box"
  }, textStyle)), _defineProperty(_ref2, "&.".concat(classes$11.horizontalCell), {
    borderBottom: "none",
    borderTop: getBrightBorder(theme),
    "tr:first-of-type &": {
      borderTop: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$11.verticalCell), (_$concat = {
    borderBottom: getBrightBorder(theme)
  }, _defineProperty(_$concat, "tr:nth-last-of-type(".concat(rowSpan, ") &"), {
    borderBottom: "none"
  }), _defineProperty(_$concat, "verticalAlign", "top"), _defineProperty(_$concat, "paddingTop", 0), _defineProperty(_$concat, "width", theme.spacing(GROUPING_PANEL_VERTICAL_CELL_WIDTH)), _defineProperty(_$concat, "minWidth", theme.spacing(GROUPING_PANEL_VERTICAL_CELL_WIDTH)), _defineProperty(_$concat, "maxWidth", theme.spacing(GROUPING_PANEL_VERTICAL_CELL_WIDTH)), _defineProperty(_$concat, "maxHeight", height ? theme.spacing(height - 2) : void 0), _$concat)), _defineProperty(_ref2, "&.".concat(classes$11.groupedByDate), {
    borderRight: endOfGroup ? getBrightBorder(theme) : getBorder(theme),
    borderTop: getBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$11.verticalCellText), {
    top: "".concat(topOffset, "px"),
    width: "100%"
  }), _defineProperty(_ref2, "& .".concat(classes$11.textContainer), {
    height: "100%"
  }), _ref2;
});
var Cell$6 = (0, import_react.memo)(function(_ref3) {
  var _classNames, _classNames3;
  var className = _ref3.className, group = _ref3.group, colSpan = _ref3.colSpan, rowSpan = _ref3.rowSpan, left = _ref3.left, endOfGroup = _ref3.endOfGroup, groupedByDate = _ref3.groupedByDate, children = _ref3.children, height = _ref3.height, groupOrientation = _ref3.groupOrientation, textStyle = _ref3.textStyle, topOffset = _ref3.topOffset, restProps = _objectWithoutProperties(_ref3, _excluded$1m);
  var cellHeight = height / DEFAULT_SPACING;
  var isHorizontalGrouping = groupOrientation === HORIZONTAL_GROUP_ORIENTATION;
  var isVerticalGrouping = groupOrientation === VERTICAL_GROUP_ORIENTATION;
  return (0, import_react.createElement)(StyledTableCell$8, _extends2({
    left,
    endOfGroup,
    height: cellHeight,
    textStyle,
    topOffset,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$11.cell, true), _defineProperty(_classNames, classes$11.horizontalCell, isHorizontalGrouping), _defineProperty(_classNames, classes$11.verticalCell, isVerticalGrouping), _defineProperty(_classNames, classes$11.groupedByDate, groupedByDate && !isVerticalGrouping), _classNames), className),
    colSpan,
    rowSpan
  }, restProps), (0, import_react.createElement)("div", {
    className: clsx_m_default(_defineProperty({}, classes$11.textContainer, isVerticalGrouping))
  }, (0, import_react.createElement)("div", {
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$11.text, true), _defineProperty(_classNames3, classes$11.verticalCellText, isVerticalGrouping), _classNames3))
  }, group.text, children)));
});
true ? Cell$6.propTypes = {
  className: import_prop_types19.default.string,
  group: import_prop_types19.default.object.isRequired,
  colSpan: import_prop_types19.default.number.isRequired,
  rowSpan: import_prop_types19.default.number,
  left: import_prop_types19.default.number.isRequired,
  endOfGroup: import_prop_types19.default.bool,
  groupedByDate: import_prop_types19.default.bool,
  height: import_prop_types19.default.number,
  groupOrientation: import_prop_types19.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION]),
  textStyle: import_prop_types19.default.object,
  topOffset: import_prop_types19.default.number,
  children: import_prop_types19.default.node
} : void 0;
Cell$6.defaultProps = {
  className: void 0,
  endOfGroup: true,
  rowSpan: 1,
  height: 48,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION,
  children: null,
  groupedByDate: true,
  textStyle: {},
  topOffset: void 0
};
var GroupingPanel2 = withComponents({
  HorizontalLayout,
  VerticalLayout,
  Cell: Cell$6,
  Row
})(GroupingPanel);
export {
  AllDayPanel2 as AllDayPanel,
  AppointmentForm2 as AppointmentForm,
  AppointmentTooltip2 as AppointmentTooltip,
  Appointments2 as Appointments,
  ConfirmationDialog2 as ConfirmationDialog,
  CurrentTimeIndicator2 as CurrentTimeIndicator,
  DateNavigator2 as DateNavigator,
  DayView2 as DayView,
  DragDropProvider2 as DragDropProvider,
  EditRecurrenceMenu2 as EditRecurrenceMenu,
  GroupingPanel2 as GroupingPanel,
  MonthView2 as MonthView,
  Resources2 as Resources,
  Scheduler2 as Scheduler,
  TodayButton$1 as TodayButton,
  Toolbar$1 as Toolbar,
  ViewSwitcher2 as ViewSwitcher,
  WeekView2 as WeekView
};
//# sourceMappingURL=@devexpress_dx-react-scheduler-material-ui.js.map
