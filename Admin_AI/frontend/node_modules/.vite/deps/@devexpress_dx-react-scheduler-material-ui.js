import {
  ArrowDropDown_default,
  Backdrop_default,
  Checkbox_default,
  Chip_default,
  ClickAwayListener,
  Divider_default,
  Fade_default,
  FirstPage_default,
  FocusTrap,
  FormControlContext_default,
  FormControlLabel_default,
  FormGroup_default,
  GlobalStyles_default,
  Grid_default,
  Grow_default,
  IconButton_default,
  Input_default,
  KeyboardArrowLeft_default,
  KeyboardArrowRight_default,
  LastPage_default,
  ListContext_default,
  List_default,
  MenuItem_default,
  MenuList_default,
  Modal_default,
  NativeSelectInput_default,
  NoSsr,
  OutlinedInput_default,
  Popover_default,
  Popper_default,
  Select_default,
  SwitchBase_default,
  TableBody_default,
  TableCell_default,
  TableHead_default,
  TableRow_default,
  TextField_default,
  Toolbar_default,
  Tooltip_default,
  Typography_default,
  appendOwnerState,
  filledInputClasses_default,
  formControlState,
  getNativeSelectUtilityClasses,
  getTransitionProps,
  init_ArrowDropDown,
  init_Backdrop,
  init_Checkbox,
  init_Chip,
  init_ClickAwayListener,
  init_Divider,
  init_Fade,
  init_FilledInput,
  init_FirstPage,
  init_FormControl,
  init_FormControlContext,
  init_FormControlLabel,
  init_FormGroup,
  init_FormHelperText,
  init_FormLabel,
  init_GlobalStyles,
  init_Grid,
  init_Grow,
  init_IconButton,
  init_Input,
  init_InputBase,
  init_InputLabel,
  init_KeyboardArrowLeft,
  init_KeyboardArrowRight,
  init_LastPage,
  init_List,
  init_ListContext,
  init_ListItemIcon,
  init_ListItemText,
  init_Menu,
  init_MenuItem,
  init_MenuList,
  init_Modal,
  init_NativeSelectInput,
  init_NoSsr,
  init_OutlinedInput,
  init_Popover,
  init_Popper,
  init_Portal,
  init_Select,
  init_Stack,
  init_SwitchBase,
  init_TableBody,
  init_TableCell,
  init_TableFooter,
  init_TableHead,
  init_TablePagination,
  init_TableRow,
  init_TableSortLabel,
  init_TextField,
  init_TextareaAutosize,
  init_Toolbar,
  init_Tooltip,
  init_Typography,
  init_Unstable_TrapFocus,
  init_base,
  init_composeClasses as init_composeClasses2,
  init_filledInputClasses,
  init_formControlState,
  init_inputBaseClasses,
  init_inputClasses,
  init_menuClasses,
  init_nativeSelectClasses,
  init_outlinedInputClasses,
  init_useAutocomplete,
  init_useBadge,
  init_useFormControl,
  init_useSlider,
  init_useSnackbar,
  init_utils as init_utils3,
  init_utils2 as init_utils4,
  inputBaseClasses_default,
  inputClasses_default,
  isHostComponent,
  mergeSlotProps,
  outlinedInputClasses_default,
  reflow,
  require_react_is,
  resolveComponentProps,
  useAutocomplete,
  useBadge,
  useFormControl,
  useSlider,
  useSlotProps,
  useSnackbar,
  valueToPercent
} from "./chunk-NFZRD2LW.js";
import {
  Table_default,
  init_Table
} from "./chunk-X65XQCWD.js";
import {
  SvgIcon_default,
  createChainedFunction_default,
  createSvgIcon,
  debounce_default,
  init_SvgIcon,
  init_createChainedFunction,
  init_createSvgIcon,
  init_debounce,
  init_isMuiElement,
  init_ownerDocument,
  init_ownerWindow,
  init_unsupportedProp,
  init_useControlled as init_useControlled2,
  init_useEnhancedEffect as init_useEnhancedEffect2,
  init_useId as init_useId2,
  init_utils as init_utils2,
  isMuiElement_default,
  ownerDocument_default,
  ownerWindow_default,
  unsupportedProp_default,
  useControlled_default,
  useEnhancedEffect_default as useEnhancedEffect_default2,
  useId_default
} from "./chunk-MXWT5YKG.js";
import {
  ButtonBase_default,
  ButtonGroupButtonContext_default,
  ButtonGroupContext_default,
  Button_default,
  init_Button,
  init_ButtonBase,
  init_ButtonGroupButtonContext,
  init_ButtonGroupContext
} from "./chunk-5KA4QYZ2.js";
import {
  capitalize_default,
  init_capitalize,
  init_useEventCallback as init_useEventCallback2,
  init_useForkRef as init_useForkRef2,
  init_useIsFocusVisible,
  useEventCallback_default as useEventCallback_default2,
  useForkRef_default,
  useIsFocusVisible_default
} from "./chunk-JQ36NPCX.js";
import {
  Paper_default,
  init_Paper
} from "./chunk-EFFSNDOF.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-KWJQ5YMD.js";
import {
  getUnit,
  init_styles,
  toUnitless
} from "./chunk-KLTJFA6J.js";
import {
  init_useTheme,
  useTheme
} from "./chunk-R2E5BPU3.js";
import {
  alpha,
  createBox,
  createContainer,
  createGrid,
  darken,
  init_Unstable_Grid,
  init_esm,
  init_useMediaQuery,
  lighten,
  useMediaQuery
} from "./chunk-6G6PKYLB.js";
import {
  HTMLElementType,
  chainPropTypes,
  detectScrollType,
  elementAcceptingRef_default,
  elementTypeAcceptingRef_default,
  exactProp,
  getNormalizedScrollLeft,
  getValidReactChildren,
  init_HTMLElementType,
  init_chainPropTypes,
  init_elementAcceptingRef,
  init_elementTypeAcceptingRef,
  init_exactProp,
  init_getValidReactChildren,
  init_integerPropType,
  init_refType,
  init_useControlled,
  init_useEnhancedEffect,
  init_useEventCallback,
  init_useForkRef,
  init_useId,
  init_usePreviousProps,
  init_useTimeout,
  init_utils,
  init_visuallyHidden,
  integerPropType_default,
  ownerDocument,
  refType_default,
  useControlled,
  useEnhancedEffect_default,
  useEventCallback_default,
  useForkRef,
  useId,
  usePreviousProps_default,
  useTimeout,
  visuallyHidden_default
} from "./chunk-WNLUYMWP.js";
import {
  ClassNameGenerator_default,
  blue_default,
  clamp_default,
  common_default,
  composeClasses,
  createTheme_default2 as createTheme_default,
  css,
  duration,
  generateUtilityClass,
  generateUtilityClasses,
  getDisplayName,
  getPath,
  getThemeProps,
  green_default,
  grey_default,
  identifier_default,
  init_blue,
  init_clamp,
  init_common,
  init_composeClasses,
  init_createTransitions,
  init_generateUtilityClass,
  init_generateUtilityClasses,
  init_getDisplayName,
  init_green,
  init_grey,
  init_identifier,
  init_lightBlue,
  init_orange,
  init_purple,
  init_red,
  init_resolveProps,
  init_styled,
  init_useThemeProps,
  init_useThemeProps2,
  keyframes,
  lightBlue_default,
  orange_default,
  purple_default,
  red_default,
  require_colorManipulator,
  require_jsx_runtime,
  resolveProps,
  rootShouldForwardProp,
  slotShouldForwardProp,
  styled_default,
  useThemeProps,
  useThemeProps2,
  useTheme_default
} from "./chunk-WKOIMCEJ.js";
import {
  CSSTransition_default,
  TransitionGroup_default,
  Transition_default,
  init_esm as init_esm2
} from "./chunk-SXVILB67.js";
import "./chunk-TUKCLYE6.js";
import {
  require_react_dom
} from "./chunk-AGYRAQNY.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-3QP4YJRI.js";
import "./chunk-4FVB2LYY.js";
import "./chunk-R4K76R74.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-HY777VUD.js";
import {
  _extends,
  init_extends
} from "./chunk-WH2AMN5A.js";
import {
  require_prop_types
} from "./chunk-LWPR4REK.js";
import {
  require_react
} from "./chunk-KL6BCPSF.js";
import {
  __export,
  __require,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@devexpress/dx-react-scheduler-material-ui/dist/dx-react-scheduler-material-ui.es.js
var import_react4 = __toESM(require_react(), 1);
var import_prop_types107 = __toESM(require_prop_types(), 1);

// node_modules/@devexpress/dx-react-scheduler/dist/dx-react-scheduler.es.js
var import_react2 = __toESM(require_react());

// node_modules/@devexpress/dx-react-core/dist/dx-react-core.es.js
var import_react = __toESM(require_react());

// node_modules/@devexpress/dx-core/dist/dx-core.es.js
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to2, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to2.concat(ar || from2);
}
var DELAY = 200;
var compare = function(a, b) {
  var aPosition = a.position();
  var bPosition = b.position();
  for (var i = 0; i < Math.min(aPosition.length, bPosition.length); i += 1) {
    if (aPosition[i] < bPosition[i])
      return -1;
    if (aPosition[i] > bPosition[i])
      return 1;
  }
  return aPosition.length - bPosition.length;
};
var insertPlugin = function(array, newItem) {
  var result = array.slice();
  var nextItemIndex = array.findIndex(function(item) {
    return compare(newItem, item) <= 0;
  });
  var targetIndex = nextItemIndex < 0 ? array.length : nextItemIndex;
  var alreadyExists = targetIndex >= 0 && targetIndex < array.length && compare(newItem, array[targetIndex]) === 0;
  var deletedItems = 0;
  if (alreadyExists) {
    deletedItems = 1;
    var targetItemPosition = result[targetIndex].position();
    if (targetItemPosition.length > 1) {
      for (var i = targetIndex + 1; i < result.length; i += 1) {
        var itemPosition = result[i].position();
        if (targetItemPosition.length === itemPosition.length && targetItemPosition[targetItemPosition.length - 2] === itemPosition[itemPosition.length - 2]) {
          deletedItems += 1;
        } else {
          break;
        }
      }
    }
  }
  result.splice(targetIndex, deletedItems, newItem);
  return result;
};
var removePlugin = function(array, item) {
  var itemIndex = array.indexOf(item);
  return itemIndex >= 0 ? __spreadArray(__spreadArray([], __read(array.slice(0, itemIndex)), false), __read(array.slice(itemIndex + 1)), false) : array;
};
var createClickHandlers = function(click, dblClick) {
  var timeoutId;
  var events = {};
  if (click) {
    events.onClick = function(e) {
      if (!timeoutId) {
        timeoutId = setTimeout(function() {
          clearTimeout(timeoutId);
          click(e);
        }, DELAY);
      }
    };
  }
  if (dblClick) {
    events.onDoubleClick = function(e) {
      clearTimeout(timeoutId);
      dblClick(e);
    };
  }
  return events;
};
var slice = function(arr) {
  return Array.prototype.slice.call(arr);
};
var getDependencyError = function(pluginName, dependencyName) {
  return new Error("The '".concat(pluginName, "' plugin requires '").concat(dependencyName, "' to be defined before it."));
};
var PluginHost = function() {
  function PluginHost3() {
    this.gettersCache = {};
    this.knownKeysCache = {};
    this.validationRequired = true;
    this.plugins = [];
    this.subscriptions = /* @__PURE__ */ new Set();
  }
  PluginHost3.prototype.ensureDependencies = function() {
    var defined = /* @__PURE__ */ new Set();
    var knownOptionals = /* @__PURE__ */ new Map();
    this.plugins.filter(function(plugin) {
      return plugin.container;
    }).forEach(function(plugin) {
      var pluginName = plugin.name || "";
      if (knownOptionals.has(pluginName)) {
        throw getDependencyError(knownOptionals.get(pluginName), pluginName);
      }
      (plugin.dependencies || []).forEach(function(dependency) {
        if (defined.has(dependency.name))
          return;
        if (dependency.optional) {
          if (!knownOptionals.has(dependency.name)) {
            knownOptionals.set(dependency.name, pluginName);
          }
          return;
        }
        throw getDependencyError(pluginName, dependency.name);
      });
      defined.add(pluginName);
    });
  };
  PluginHost3.prototype.registerPlugin = function(plugin) {
    this.plugins = insertPlugin(this.plugins, plugin);
    this.cleanPluginsCache();
  };
  PluginHost3.prototype.unregisterPlugin = function(plugin) {
    this.plugins = removePlugin(this.plugins, plugin);
    this.cleanPluginsCache();
  };
  PluginHost3.prototype.knownKeys = function(postfix) {
    if (!this.knownKeysCache[postfix]) {
      this.knownKeysCache[postfix] = Array.from(this.plugins.map(function(plugin) {
        return Object.keys(plugin);
      }).map(function(keys2) {
        return keys2.filter(function(key) {
          return key.endsWith(postfix);
        })[0];
      }).filter(function(key) {
        return !!key;
      }).reduce(function(acc, key) {
        return acc.add(key);
      }, /* @__PURE__ */ new Set())).map(function(key) {
        return key.replace(postfix, "");
      });
    }
    return this.knownKeysCache[postfix];
  };
  PluginHost3.prototype.collect = function(key, upTo) {
    if (this.validationRequired) {
      this.ensureDependencies();
      this.validationRequired = false;
    }
    var res = this.gettersCache[key];
    if (!res) {
      var indexCache = this.plugins.map(function(plugin, index) {
        return { key: plugin[key], index };
      }).filter(function(plugin) {
        return !!plugin.key;
      });
      this.gettersCache["".concat(key, "_i")] = indexCache;
      res = indexCache.map(function(item) {
        return item.key;
      });
      this.gettersCache[key] = res;
    }
    if (!upTo)
      return res;
    var upToIndex = this.plugins.indexOf(upTo);
    var upToIndexKey = key + upToIndex;
    var upToRes = this.gettersCache[upToIndexKey];
    if (!upToRes) {
      var indexCache_1 = this.gettersCache["".concat(key, "_i")];
      upToRes = this.gettersCache[key].filter(function(getter, index) {
        return indexCache_1[index].index < upToIndex;
      });
      this.gettersCache[upToIndexKey] = upToRes;
    }
    return upToRes;
  };
  PluginHost3.prototype.get = function(key, upTo) {
    var plugins = this.collect(key, upTo);
    if (!plugins.length)
      return void 0;
    var result;
    plugins.forEach(function(plugin) {
      result = plugin(result);
    });
    return result;
  };
  PluginHost3.prototype.registerSubscription = function(subscription) {
    this.subscriptions.add(subscription);
  };
  PluginHost3.prototype.unregisterSubscription = function(subscription) {
    this.subscriptions.delete(subscription);
  };
  PluginHost3.prototype.broadcast = function(event, message) {
    this.subscriptions.forEach(function(subscription) {
      return subscription[event] && subscription[event](message);
    });
  };
  PluginHost3.prototype.cleanPluginsCache = function() {
    this.validationRequired = true;
    this.gettersCache = {};
    this.knownKeysCache = {};
  };
  return PluginHost3;
}();
var EventEmitter = function() {
  function EventEmitter2() {
    this.handlers = [];
  }
  EventEmitter2.prototype.emit = function(e) {
    this.handlers.forEach(function(handler) {
      return handler(e);
    });
  };
  EventEmitter2.prototype.subscribe = function(handler) {
    this.handlers.push(handler);
  };
  EventEmitter2.prototype.unsubscribe = function(handler) {
    this.handlers.splice(this.handlers.indexOf(handler), 1);
  };
  return EventEmitter2;
}();
var shallowEqual = function(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty;
  for (var i = 0; i < keysA.length; i += 1) {
    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
    var valA = objA[keysA[i]];
    var valB = objB[keysA[i]];
    if (valA !== valB) {
      return false;
    }
  }
  return true;
};
var argumentsShallowEqual = function(prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }
  for (var i = 0; i < prev.length; i += 1) {
    if (prev[i] !== next[i]) {
      return false;
    }
  }
  return true;
};
var memoize = function(func) {
  var lastArgs = null;
  var lastResult = null;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (lastArgs === null || !argumentsShallowEqual(lastArgs, args)) {
      lastResult = func.apply(void 0, __spreadArray([], __read(args), false));
    }
    lastArgs = args;
    return lastResult;
  };
};
var processPattern = function(pattern, params) {
  return Object.keys(params).reduce(function(msg, key) {
    return msg.replace("{".concat(key, "}"), params[key]);
  }, pattern);
};
var getMessagesFormatter = function(messages) {
  return function(key, params) {
    var message = messages[key];
    if (typeof message === "function") {
      return message(params);
    }
    if (params) {
      return processPattern(message, params);
    }
    return message !== null && message !== void 0 ? message : "";
  };
};

// node_modules/@devexpress/dx-react-core/dist/dx-react-core.es.js
var import_react_dom = __toESM(require_react_dom());
var import_prop_types = __toESM(require_prop_types());
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray2(to2, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to2.concat(ar || from2);
}
var PluginHostContext = (0, import_react.createContext)(null);
var PositionContext = (0, import_react.createContext)(function() {
  return [];
});
var TemplateHostContext = (0, import_react.createContext)(null);
var PluginIndexer = function(_super) {
  __extends(PluginIndexer2, _super);
  function PluginIndexer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.indexes = {};
    _this.memoize = function(index, positionContext) {
      if (_this.indexes[index])
        return _this.indexes[index];
      var fn = function() {
        var calculatedPosition = positionContext();
        return __spreadArray2(__spreadArray2([], __read2(calculatedPosition), false), [index], false);
      };
      _this.indexes[index] = fn;
      return fn;
    };
    return _this;
  }
  PluginIndexer2.prototype.render = function() {
    var _this = this;
    var children = this.props.children;
    return (0, import_react.createElement)(PositionContext.Consumer, null, function(positionContext) {
      return import_react.Children.map(children, function(child, index) {
        if (!child || !child.type)
          return child;
        var childPosition = _this.memoize(index, positionContext);
        return (0, import_react.createElement)(PositionContext.Provider, { key: String(index), value: childPosition }, child);
      });
    });
  };
  return PluginIndexer2;
}(import_react.PureComponent);
var PLUGIN_HOST_CONTEXT = "dxcore_pluginHost_context";
var POSITION_CONTEXT = "dxcore_position_context";
var TEMPLATE_HOST_CONTEXT = "dxcore_templateHost_context";
var RERENDER_TEMPLATE_EVENT = Symbol("rerenderTemplate");
var RERENDER_TEMPLATE_SCOPE_EVENT = Symbol("rerenderTemplateScope");
var UPDATE_CONNECTION_EVENT = Symbol("updateConnection");
var withContext = function(Context, name) {
  return function(Component2) {
    return function(props) {
      return (0, import_react.createElement)(Context.Consumer, null, function(context) {
        var _a2;
        return (0, import_react.createElement)(Component2, __assign({}, props, (_a2 = {}, _a2[name] = context, _a2)));
      });
    };
  };
};
var withHostAndPosition = function(Component2) {
  return withContext(PluginHostContext, PLUGIN_HOST_CONTEXT)(withContext(PositionContext, POSITION_CONTEXT)(Component2));
};
var PluginBase = function(_super) {
  __extends(PluginBase2, _super);
  function PluginBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PluginBase2.prototype.componentDidMount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b], _c = POSITION_CONTEXT, position = _a2[_c];
    var _d = this.props, name = _d.name, dependencies = _d.dependencies;
    this.plugin = {
      position,
      name,
      dependencies,
      container: true
    };
    pluginHost.registerPlugin(this.plugin);
    pluginHost.ensureDependencies();
  };
  PluginBase2.prototype.componentDidUpdate = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.ensureDependencies();
  };
  PluginBase2.prototype.componentWillUnmount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.unregisterPlugin(this.plugin);
  };
  PluginBase2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(PluginIndexer, null, children);
  };
  return PluginBase2;
}(import_react.PureComponent);
var Plugin = withHostAndPosition(PluginBase);
var getRenderingData = function(props) {
  var name = props.name, params = props.params;
  if (name) {
    var _a2 = props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    return {
      params,
      templates: pluginHost.collect("".concat(name, "Template")).filter(function(template) {
        return template.predicate(params);
      }).reverse()
    };
  }
  var _c = props, _d = TEMPLATE_HOST_CONTEXT, templateHost = _c[_d];
  return {
    params: params || templateHost.params(),
    templates: templateHost.templates()
  };
};
var TemplatePlaceholderBase = function(_super) {
  __extends(TemplatePlaceholderBase2, _super);
  function TemplatePlaceholderBase2() {
    var _a2;
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.subscription = (_a2 = {}, _a2[RERENDER_TEMPLATE_EVENT] = function(id) {
      if (_this.template && _this.template.id === id) {
        _this.forceUpdate();
      }
    }, _a2[RERENDER_TEMPLATE_SCOPE_EVENT] = function(name) {
      var propsName = _this.props.name;
      if (propsName === name) {
        _this.forceUpdate();
      }
    }, _a2);
    _this.template = null;
    _this.params = {};
    return _this;
  }
  TemplatePlaceholderBase2.prototype.componentDidMount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.registerSubscription(this.subscription);
  };
  TemplatePlaceholderBase2.prototype.shouldComponentUpdate = function(nextProps) {
    var _a2 = getRenderingData(nextProps), params = _a2.params, templates = _a2.templates;
    var _b = __read2(templates, 1), template = _b[0];
    var children = this.props.children;
    return children !== nextProps.children || templates.length !== getRenderingData(this.props).templates.length || this.template !== template || !shallowEqual(this.params, params);
  };
  TemplatePlaceholderBase2.prototype.componentWillUnmount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.unregisterSubscription(this.subscription);
  };
  TemplatePlaceholderBase2.prototype.render = function() {
    var _a2;
    var _this = this;
    var _b = getRenderingData(this.props), params = _b.params, templates = _b.templates;
    this.params = params;
    _a2 = __read2(templates, 1), this.template = _a2[0];
    var restTemplates = templates.slice(1);
    var content = null;
    if (this.template) {
      var templateContent = this.template.children;
      content = templateContent() || null;
      if (content && typeof content === "function") {
        content = content(params);
      }
    }
    var templatePlaceholder = this.props.children;
    return (0, import_react.createElement)(TemplateHostContext.Provider, { value: {
      templates: function() {
        return restTemplates;
      },
      params: function() {
        return _this.params;
      }
    } }, templatePlaceholder ? templatePlaceholder(content) : content);
  };
  return TemplatePlaceholderBase2;
}(import_react.Component);
var TemplatePlaceholder = withContext(PluginHostContext, PLUGIN_HOST_CONTEXT)(withContext(TemplateHostContext, TEMPLATE_HOST_CONTEXT)(TemplatePlaceholderBase));
var PlaceholderWithRef = function(_a2) {
  var params = _a2.params, forwardedRef = _a2.forwardedRef;
  return (0, import_react.createElement)(TemplatePlaceholder, { params: __assign(__assign({}, params), { forwardedRef }) });
};
var PluginHostBase = function(_super) {
  __extends(PluginHostBase2, _super);
  function PluginHostBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.host = new PluginHost();
    return _this;
  }
  PluginHostBase2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(
      PluginHostContext.Provider,
      { value: this.host },
      (0, import_react.createElement)(PluginIndexer, null, children),
      (0, import_react.createElement)(TemplatePlaceholder, { name: "root" })
    );
  };
  return PluginHostBase2;
}(import_react.PureComponent);
var PluginHost2 = PluginHostBase;
var getAvailableGetters = function(pluginHost, getGetterValue) {
  if (getGetterValue === void 0) {
    getGetterValue = function(getterName) {
      return pluginHost.get("".concat(getterName, "Getter"));
    };
  }
  var trackedDependencies = {};
  var getters;
  if (typeof Proxy !== "undefined") {
    getters = new Proxy({}, {
      get: function(target, prop) {
        if (typeof prop !== "string")
          return void 0;
        var result = getGetterValue(prop);
        trackedDependencies[prop] = result;
        return result;
      },
      getOwnPropertyDescriptor: function(target, prop) {
        return {
          configurable: true,
          enumerable: true,
          value: this.get(target, prop, void 0)
        };
      },
      ownKeys: function() {
        return pluginHost.knownKeys("Getter");
      }
    });
  } else {
    getters = pluginHost.knownKeys("Getter").reduce(function(acc, getterName) {
      Object.defineProperty(acc, getterName, {
        get: function() {
          var result = getGetterValue(getterName);
          trackedDependencies[getterName] = result;
          return result;
        }
      });
      return acc;
    }, {});
  }
  return { getters, trackedDependencies };
};
var isTrackedDependenciesChanged = function(pluginHost, prevTrackedDependencies, getGetterValue) {
  if (getGetterValue === void 0) {
    getGetterValue = function(getterName) {
      return pluginHost.get("".concat(getterName, "Getter"));
    };
  }
  var trackedDependencies = Object.keys(prevTrackedDependencies).reduce(function(acc, getterName) {
    var _a2;
    return Object.assign(acc, (_a2 = {}, _a2[getterName] = getGetterValue(getterName), _a2));
  }, {});
  return !shallowEqual(prevTrackedDependencies, trackedDependencies);
};
var getAvailableActions = function(pluginHost, getAction) {
  if (getAction === void 0) {
    getAction = function(actionName) {
      return pluginHost.collect("".concat(actionName, "Action")).slice().reverse()[0];
    };
  }
  var actions;
  if (typeof Proxy !== "undefined") {
    actions = new Proxy({}, {
      get: function(target, prop) {
        if (typeof prop !== "string")
          return void 0;
        return getAction(prop);
      },
      getOwnPropertyDescriptor: function(target, prop) {
        return {
          configurable: true,
          enumerable: true,
          value: this.get(target, prop, void 0)
        };
      },
      ownKeys: function() {
        return pluginHost.knownKeys("Action");
      }
    });
  } else {
    actions = pluginHost.knownKeys("Action").reduce(function(acc, actionName) {
      Object.defineProperty(acc, actionName, {
        get: function() {
          return getAction(actionName);
        }
      });
      return acc;
    }, {});
  }
  return actions;
};
var ActionBase = function(_super) {
  __extends(ActionBase2, _super);
  function ActionBase2(props) {
    var _a2;
    var _this = _super.call(this, props) || this;
    var _b = props, _c = PLUGIN_HOST_CONTEXT, pluginHost = _b[_c], _d = POSITION_CONTEXT, positionContext = _b[_d];
    var name = props.name;
    _this.plugin = (_a2 = {
      position: function() {
        return positionContext();
      }
    }, _a2["".concat(name, "Action")] = function(params) {
      var action = _this.props.action;
      var getters = getAvailableGetters(pluginHost, function(getterName) {
        return pluginHost.get("".concat(getterName, "Getter"), _this.plugin);
      }).getters;
      var nextParams = params;
      var actions = getAvailableActions(pluginHost, function(actionName) {
        return actionName === name ? function(newParams) {
          nextParams = newParams;
        } : pluginHost.collect("".concat(actionName, "Action"), _this.plugin).slice().reverse()[0];
      });
      action(params, getters, actions);
      var nextAction = pluginHost.collect("".concat(name, "Action"), _this.plugin).slice().reverse()[0];
      if (nextAction) {
        nextAction(nextParams);
      }
    }, _a2);
    pluginHost.registerPlugin(_this.plugin);
    _this.pluginRegistered = true;
    return _this;
  }
  ActionBase2.prototype.componentDidMount = function() {
    if (this.pluginRegistered) {
      return;
    }
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.registerPlugin(this.plugin);
    this.pluginRegistered = true;
  };
  ActionBase2.prototype.componentWillUnmount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.unregisterPlugin(this.plugin);
    this.pluginRegistered = false;
  };
  ActionBase2.prototype.render = function() {
    return null;
  };
  return ActionBase2;
}(import_react.PureComponent);
var Action = withHostAndPosition(ActionBase);
var GetterBase = function(_super) {
  __extends(GetterBase2, _super);
  function GetterBase2(props) {
    var _a2;
    var _this = _super.call(this, props) || this;
    var _b = props, _c = PLUGIN_HOST_CONTEXT, pluginHost = _b[_c], _d = POSITION_CONTEXT, positionContext = _b[_d];
    var name = props.name;
    var lastComputed;
    var lastTrackedDependencies = {};
    var lastResult;
    _this.plugin = (_a2 = {
      position: function() {
        return positionContext();
      }
    }, _a2["".concat(name, "Getter")] = function(original) {
      var _a3 = _this.props, value = _a3.value, computed2 = _a3.computed;
      if (computed2 === void 0)
        return value;
      var getGetterValue = function(getterName) {
        return getterName === name ? original : pluginHost.get("".concat(getterName, "Getter"), _this.plugin);
      };
      if (computed2 === lastComputed && !isTrackedDependenciesChanged(pluginHost, lastTrackedDependencies, getGetterValue)) {
        return lastResult;
      }
      var _b2 = getAvailableGetters(pluginHost, getGetterValue), getters = _b2.getters, trackedDependencies = _b2.trackedDependencies;
      var actions = getAvailableActions(pluginHost);
      lastComputed = computed2;
      lastTrackedDependencies = trackedDependencies;
      lastResult = computed2(getters, actions);
      return lastResult;
    }, _a2);
    pluginHost.registerPlugin(_this.plugin);
    _this.pluginRegistered = true;
    return _this;
  }
  GetterBase2.prototype.componentDidMount = function() {
    if (this.pluginRegistered) {
      return;
    }
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.registerPlugin(this.plugin);
    this.pluginRegistered = true;
  };
  GetterBase2.prototype.componentDidUpdate = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.broadcast(UPDATE_CONNECTION_EVENT);
  };
  GetterBase2.prototype.componentWillUnmount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.unregisterPlugin(this.plugin);
    this.pluginRegistered = false;
  };
  GetterBase2.prototype.render = function() {
    return null;
  };
  return GetterBase2;
}(import_react.PureComponent);
var Getter = withHostAndPosition(GetterBase);
var globalTemplateId = 0;
var TemplateBase = function(_super) {
  __extends(TemplateBase2, _super);
  function TemplateBase2(props) {
    var _a2;
    var _this = _super.call(this, props) || this;
    _this.children = function() {
      return void 0;
    };
    globalTemplateId += 1;
    _this.id = globalTemplateId;
    var _b = props, _c = PLUGIN_HOST_CONTEXT, pluginHost = _b[_c], _d = POSITION_CONTEXT, positionContext = _b[_d];
    var name = props.name, predicate = props.predicate;
    _this.plugin = (_a2 = {
      position: function() {
        return positionContext();
      }
    }, _a2["".concat(name, "Template")] = {
      id: _this.id,
      predicate: function(params) {
        return predicate ? predicate(params) : true;
      },
      children: function() {
        var children = _this.props.children;
        return children;
      }
    }, _a2);
    pluginHost.registerPlugin(_this.plugin);
    pluginHost.broadcast(RERENDER_TEMPLATE_SCOPE_EVENT, name);
    _this.pluginRegistered = true;
    return _this;
  }
  TemplateBase2.prototype.componentDidMount = function() {
    if (this.pluginRegistered) {
      return;
    }
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    var name = this.props.name;
    pluginHost.registerPlugin(this.plugin);
    pluginHost.broadcast(RERENDER_TEMPLATE_SCOPE_EVENT, name);
    this.pluginRegistered = true;
  };
  TemplateBase2.prototype.componentDidUpdate = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    pluginHost.broadcast(RERENDER_TEMPLATE_EVENT, this.id);
  };
  TemplateBase2.prototype.componentWillUnmount = function() {
    var _a2 = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a2[_b];
    var name = this.props.name;
    pluginHost.unregisterPlugin(this.plugin);
    pluginHost.broadcast(RERENDER_TEMPLATE_SCOPE_EVENT, name);
    this.pluginRegistered = false;
  };
  TemplateBase2.prototype.render = function() {
    return null;
  };
  return TemplateBase2;
}(import_react.PureComponent);
var Template = withHostAndPosition(TemplateBase);
var TemplateConnectorBase = function(_super) {
  __extends(TemplateConnectorBase2, _super);
  function TemplateConnectorBase2(props, context) {
    var _a2;
    var _this = _super.call(this, props, context) || this;
    _this.trackedDependencies = {};
    _this.subscription = (_a2 = {}, _a2[UPDATE_CONNECTION_EVENT] = function() {
      return _this.updateConnection();
    }, _a2);
    return _this;
  }
  TemplateConnectorBase2.prototype.componentDidMount = function() {
    var pluginHost = this.context;
    pluginHost.registerSubscription(this.subscription);
  };
  TemplateConnectorBase2.prototype.componentWillUnmount = function() {
    var pluginHost = this.context;
    pluginHost.unregisterSubscription(this.subscription);
  };
  TemplateConnectorBase2.prototype.updateConnection = function() {
    var pluginHost = this.context;
    if (isTrackedDependenciesChanged(pluginHost, this.trackedDependencies)) {
      this.forceUpdate();
    }
  };
  TemplateConnectorBase2.prototype.render = function() {
    var pluginHost = this.context;
    var children = this.props.children;
    var _a2 = getAvailableGetters(pluginHost), getters = _a2.getters, trackedDependencies = _a2.trackedDependencies;
    this.trackedDependencies = trackedDependencies;
    var actions = getAvailableActions(pluginHost);
    return children(getters, actions);
  };
  return TemplateConnectorBase2;
}(import_react.Component);
TemplateConnectorBase.contextType = PluginHostContext;
var TemplateConnector = TemplateConnectorBase;
var TIMEOUT = 180;
var TouchStrategy = function() {
  function TouchStrategy2(delegate) {
    this.delegate = delegate;
    this.touchStartTimeout = null;
    this.dragging = false;
  }
  TouchStrategy2.prototype.isDragging = function() {
    return this.dragging;
  };
  TouchStrategy2.prototype.isWaiting = function() {
    return !!this.touchStartTimeout;
  };
  TouchStrategy2.prototype.cancelWaiting = function() {
    clearTimeout(this.touchStartTimeout);
    this.touchStartTimeout = void 0;
  };
  TouchStrategy2.prototype.start = function(e) {
    var _this = this;
    var _a2 = e.touches[0], x = _a2.clientX, y = _a2.clientY;
    this.touchStartTimeout = setTimeout(function() {
      _this.delegate.onStart({ x, y });
      _this.dragging = true;
    }, TIMEOUT);
  };
  TouchStrategy2.prototype.move = function(e) {
    this.cancelWaiting();
    if (this.dragging) {
      var _a2 = e.touches[0], clientX = _a2.clientX, clientY = _a2.clientY;
      e.preventDefault();
      this.delegate.onMove({ x: clientX, y: clientY });
    }
  };
  TouchStrategy2.prototype.end = function(e) {
    this.cancelWaiting();
    if (this.dragging) {
      var _a2 = e.changedTouches[0], clientX = _a2.clientX, clientY = _a2.clientY;
      this.delegate.onEnd({ x: clientX, y: clientY });
    }
    this.dragging = false;
  };
  return TouchStrategy2;
}();
var gestureCover;
var toggleGestureCover = function(toggle, cursor) {
  var style = {
    pointerEvents: toggle ? "all" : "none"
  };
  if (toggle && cursor) {
    style = __assign(__assign({}, style), { cursor });
  }
  if (!gestureCover) {
    style = __assign(__assign({}, style), { position: "fixed", top: 0, right: 0, left: 0, bottom: 0, opacity: 0, zIndex: 2147483647 });
    gestureCover = document.createElement("div");
    document.body.appendChild(gestureCover);
  }
  Object.keys(style).forEach(function(key) {
    gestureCover.style[key] = style[key];
  });
};
var clear = function() {
  var selection = window.getSelection && window.getSelection();
  if (selection) {
    if (selection.empty) {
      selection.empty();
    } else if (selection.removeAllRanges) {
      selection.removeAllRanges();
    }
  }
};
var BOUNDARY = 10;
var clamp = function(value, min2, max2) {
  return Math.max(Math.min(value, max2), min2);
};
var isBoundExceeded = function(_a2, _b) {
  var initialX = _a2.x, initialY = _a2.y;
  var x = _b.x, y = _b.y;
  return clamp(x, initialX - BOUNDARY, initialX + BOUNDARY) !== x || clamp(y, initialY - BOUNDARY, initialY + BOUNDARY) !== y;
};
var MouseStrategy = function() {
  function MouseStrategy2(delegate) {
    this.delegate = delegate;
    this.mouseInitialOffset = null;
    this.dragging = false;
  }
  MouseStrategy2.prototype.isDragging = function() {
    return this.dragging;
  };
  MouseStrategy2.prototype.start = function(e) {
    var x = e.clientX, y = e.clientY;
    this.e = e;
    this.mouseInitialOffset = { x, y };
  };
  MouseStrategy2.prototype.move = function(e) {
    var x = e.clientX, y = e.clientY;
    var dragStarted = false;
    if (!this.dragging && this.mouseInitialOffset) {
      if (isBoundExceeded(this.mouseInitialOffset, { x, y })) {
        this.delegate.onStart(this.mouseInitialOffset);
        clear();
        dragStarted = true;
        this.dragging = true;
      }
    }
    if (this.dragging) {
      e.preventDefault();
      this.delegate.onMove({ x, y });
    }
    if (dragStarted) {
      var element = document.elementFromPoint(x, y);
      var cursor = element ? window.getComputedStyle(element).cursor : null;
      toggleGestureCover(true, cursor);
    }
  };
  MouseStrategy2.prototype.end = function(e) {
    if (this.dragging) {
      var x = e.clientX, y = e.clientY;
      toggleGestureCover(false);
      this.delegate.onEnd({ x, y });
    }
    this.mouseInitialOffset = null;
    this.dragging = false;
  };
  return MouseStrategy2;
}();
var eventEmitter;
var getSharedEventEmitter = function() {
  if (!eventEmitter) {
    eventEmitter = new EventEmitter();
    ["mousemove", "mouseup", "touchmove", "touchend", "touchcancel"].forEach(function(name) {
      return window.addEventListener(name, function(e) {
        return eventEmitter.emit([name, e]);
      }, { passive: false });
    });
  }
  return eventEmitter;
};
var RefHolder = (0, import_react.forwardRef)(function(_a2, ref) {
  var _b;
  var children = _a2.children;
  return (0, import_react.isValidElement)(children) ? typeof children.type === "string" ? (0, import_react.cloneElement)(children, { ref }) : (0, import_react.cloneElement)(children, {
    forwardedRef: ((_b = children.props) === null || _b === void 0 ? void 0 : _b.forwardedRef) ? function(node) {
      children.props.forwardedRef(node);
      if (typeof ref === "function") {
        ref(node);
      } else if (ref) {
        ref.current = node;
      }
    } : ref
  }) : (0, import_react.createElement)("div", { ref, style: { display: "contents" } }, children);
});
var draggingHandled = Symbol("draggingHandled");
var Draggable = function(_super) {
  __extends(Draggable2, _super);
  function Draggable2(props) {
    var _this = _super.call(this, props) || this;
    _this.eventParams = null;
    _this.detachNodeEvents = null;
    var delegate = {
      onStart: function(_a2) {
        var x = _a2.x, y = _a2.y;
        var onStart = _this.props.onStart;
        if (!onStart)
          return;
        (0, import_react_dom.unstable_batchedUpdates)(function() {
          onStart({ x, y });
        });
      },
      onMove: function(_a2) {
        var x = _a2.x, y = _a2.y;
        var onUpdate = _this.props.onUpdate;
        if (!onUpdate)
          return;
        (0, import_react_dom.unstable_batchedUpdates)(function() {
          onUpdate({ x, y });
        });
      },
      onEnd: function(_a2) {
        var x = _a2.x, y = _a2.y;
        var onEnd = _this.props.onEnd;
        if (!onEnd)
          return;
        (0, import_react_dom.unstable_batchedUpdates)(function() {
          onEnd({ x, y });
        });
      }
    };
    _this.mouseStrategy = new MouseStrategy(delegate);
    _this.touchStrategy = new TouchStrategy(delegate);
    _this.elementRef = (0, import_react.createRef)();
    _this.mouseDownListener = _this.mouseDownListener.bind(_this);
    _this.touchStartListener = _this.touchStartListener.bind(_this);
    _this.globalListener = _this.globalListener.bind(_this);
    return _this;
  }
  Draggable2.prototype.componentDidMount = function() {
    getSharedEventEmitter().subscribe(this.globalListener);
    this.setupNodeSubscription();
  };
  Draggable2.prototype.componentDidUpdate = function() {
    this.setupNodeSubscription();
  };
  Draggable2.prototype.componentWillUnmount = function() {
    var _a2;
    if (this.eventParams) {
      var _b = this.eventParams, isMouseEvent = _b.isMouseEvent, e = _b.e;
      if (isMouseEvent) {
        this.mouseStrategy.end(e);
      } else {
        this.touchStrategy.end(e);
      }
      this.eventParams = null;
    }
    (_a2 = this.detachNodeEvents) === null || _a2 === void 0 ? void 0 : _a2.call(this);
    getSharedEventEmitter().unsubscribe(this.globalListener);
  };
  Draggable2.prototype.setupNodeSubscription = function() {
    var _this = this;
    var _a2;
    var node = this.elementRef.current;
    if (!node)
      return;
    (_a2 = this.detachNodeEvents) === null || _a2 === void 0 ? void 0 : _a2.call(this);
    node.addEventListener("mousedown", this.mouseDownListener);
    node.addEventListener("touchstart", this.touchStartListener, { passive: true });
    this.detachNodeEvents = function() {
      node.removeEventListener("mousedown", _this.mouseDownListener);
      node.removeEventListener("touchstart", _this.touchStartListener);
    };
  };
  Draggable2.prototype.mouseDownListener = function(e) {
    if (this.touchStrategy.isWaiting() || e[draggingHandled])
      return;
    e.preventDefault();
    this.mouseStrategy.start(e);
    e[draggingHandled] = true;
  };
  Draggable2.prototype.touchStartListener = function(e) {
    if (e[draggingHandled])
      return;
    this.touchStrategy.start(e);
    e[draggingHandled] = true;
  };
  Draggable2.prototype.saveEvent = function(e, isMouseEvent) {
    this.eventParams = {
      e,
      isMouseEvent
    };
  };
  Draggable2.prototype.globalListener = function(_a2) {
    var _b = __read2(_a2, 2), name = _b[0], e = _b[1];
    switch (name) {
      case "mousemove":
        this.saveEvent(e, true);
        this.mouseStrategy.move(e);
        break;
      case "mouseup":
        this.eventParams = null;
        this.mouseStrategy.end(e);
        break;
      case "touchmove": {
        this.saveEvent(e, false);
        this.touchStrategy.move(e);
        break;
      }
      case "touchend":
      case "touchcancel": {
        this.eventParams = null;
        this.touchStrategy.end(e);
        break;
      }
    }
    if (this.mouseStrategy.isDragging() || this.touchStrategy.isDragging()) {
      clear();
    }
  };
  Draggable2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, children = _a2.children, dragItem = _a2.dragItem;
    return (0, import_react.createElement)(RefHolder, { ref: function(node) {
      _this.elementRef.current = node;
      if (typeof dragItem === "function") {
        dragItem(node);
      } else if (dragItem) {
        dragItem.current = node;
      }
    } }, children);
  };
  return Draggable2;
}(import_react.PureComponent);
var DragDropContext = (0, import_react.createContext)(null);
var DragDropProviderCore = function() {
  function DragDropProviderCore2() {
    this.payload = null;
    this.dragEmitter = new EventEmitter();
  }
  DragDropProviderCore2.prototype.start = function(payload, clientOffset) {
    this.payload = payload;
    this.dragEmitter.emit({ clientOffset, payload: this.payload });
  };
  DragDropProviderCore2.prototype.update = function(clientOffset) {
    this.dragEmitter.emit({ clientOffset, payload: this.payload });
  };
  DragDropProviderCore2.prototype.end = function(clientOffset) {
    this.dragEmitter.emit({ clientOffset, payload: this.payload, end: true });
    this.payload = null;
  };
  return DragDropProviderCore2;
}();
var defaultProps = {
  onChange: function(_a2) {
    var payload = _a2.payload, clientOffset = _a2.clientOffset;
  }
};
var DragDropProvider = function(_super) {
  __extends(DragDropProvider4, _super);
  function DragDropProvider4(props) {
    var _this = _super.call(this, props) || this;
    var onChange = _this.props.onChange;
    _this.dragDropProvider = new DragDropProviderCore();
    _this.dragDropProvider.dragEmitter.subscribe(function(_a2) {
      var payload = _a2.payload, clientOffset = _a2.clientOffset, end = _a2.end;
      onChange({
        payload: end ? null : payload,
        clientOffset: end ? null : clientOffset
      });
    });
    return _this;
  }
  DragDropProvider4.prototype.shouldComponentUpdate = function(nextProps) {
    var children = this.props.children;
    return nextProps.children !== children;
  };
  DragDropProvider4.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(DragDropContext.Provider, { value: this.dragDropProvider }, children);
  };
  DragDropProvider4.defaultProps = defaultProps;
  return DragDropProvider4;
}(import_react.Component);
var defaultProps$1 = {
  onStart: function(_a2) {
    var clientOffset = _a2.clientOffset;
  },
  onUpdate: function(_a2) {
    var clientOffset = _a2.clientOffset;
  },
  onEnd: function(_a2) {
    var clientOffset = _a2.clientOffset;
  }
};
var DragSource = (0, import_react.forwardRef)(function(_a2, ref) {
  var onStart = _a2.onStart, onUpdate = _a2.onUpdate, onEnd = _a2.onEnd, payload = _a2.payload, children = _a2.children;
  var context = (0, import_react.useContext)(DragDropContext);
  var dragDropProvider = context;
  return (0, import_react.createElement)(Draggable, { onStart: function(_a3) {
    var x = _a3.x, y = _a3.y;
    dragDropProvider === null || dragDropProvider === void 0 ? void 0 : dragDropProvider.start(payload, { x, y });
    onStart === null || onStart === void 0 ? void 0 : onStart({ clientOffset: { x, y } });
  }, onUpdate: function(_a3) {
    var x = _a3.x, y = _a3.y;
    dragDropProvider === null || dragDropProvider === void 0 ? void 0 : dragDropProvider.update({ x, y });
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate({ clientOffset: { x, y } });
  }, onEnd: function(_a3) {
    var x = _a3.x, y = _a3.y;
    dragDropProvider === null || dragDropProvider === void 0 ? void 0 : dragDropProvider.end({ x, y });
    onEnd === null || onEnd === void 0 ? void 0 : onEnd({ clientOffset: { x, y } });
  }, dragItem: ref }, children);
});
DragSource.defaultProps = defaultProps$1;
var clamp$1 = function(value, min2, max2) {
  return Math.max(Math.min(value, max2), min2);
};
var defaultProps$2 = {
  onEnter: function(args) {
  },
  onOver: function(args) {
  },
  onLeave: function(args) {
  },
  onDrop: function(args) {
  }
};
var DropTarget = function(_super) {
  __extends(DropTarget2, _super);
  function DropTarget2(props) {
    var _this = _super.call(this, props) || this;
    _this.isOver = false;
    _this.handleDrag = _this.handleDrag.bind(_this);
    _this.elementRef = (0, import_react.createRef)();
    return _this;
  }
  DropTarget2.prototype.componentDidMount = function() {
    var dragEmitter = this.context.dragEmitter;
    dragEmitter.subscribe(this.handleDrag);
  };
  DropTarget2.prototype.shouldComponentUpdate = function(nextProps) {
    var children = this.props.children;
    return nextProps.children !== children;
  };
  DropTarget2.prototype.componentWillUnmount = function() {
    var dragEmitter = this.context.dragEmitter;
    dragEmitter.unsubscribe(this.handleDrag);
  };
  DropTarget2.prototype.handleDrag = function(_a2) {
    var payload = _a2.payload, clientOffset = _a2.clientOffset, end = _a2.end;
    var _b = this.elementRef.current.getBoundingClientRect(), left = _b.left, top = _b.top, right = _b.right, bottom = _b.bottom;
    var _c = this.props, onDrop = _c.onDrop, onEnter = _c.onEnter, onLeave = _c.onLeave, onOver = _c.onOver;
    var isOver = clientOffset && clamp$1(clientOffset.x, left, right) === clientOffset.x && clamp$1(clientOffset.y, top, bottom) === clientOffset.y;
    if (!this.isOver && isOver)
      onEnter({ payload, clientOffset });
    if (this.isOver && isOver)
      onOver({ payload, clientOffset });
    if (this.isOver && !isOver)
      onLeave({ payload, clientOffset });
    if (isOver && end)
      onDrop({ payload, clientOffset });
    this.isOver = isOver && !end;
  };
  DropTarget2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(RefHolder, { ref: this.elementRef }, import_react.Children.only(children));
  };
  DropTarget2.defaultProps = defaultProps$2;
  return DropTarget2;
}(import_react.Component);
DropTarget.contextType = DragDropContext;
var SCROLL_OFFSET = 2;
var styles = {
  root: {
    position: "relative"
  },
  triggersRoot: {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    overflow: "hidden",
    zIndex: -1,
    visibility: "hidden",
    opacity: 0
  },
  expandTrigger: {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    overflow: "auto"
  },
  contractTrigger: {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    overflow: "auto",
    minHeight: "1px",
    minWidth: "1px"
  },
  contractNotifier: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "200%",
    height: "200%",
    minHeight: "2px",
    minWidth: "2px"
  }
};
var Sizer = function(_super) {
  __extends(Sizer2, _super);
  function Sizer2(props) {
    var _this = _super.call(this, props) || this;
    _this.getSize = function() {
      return {
        height: _this.rootNode.clientHeight,
        width: _this.rootNode.clientWidth
      };
    };
    _this.setupListeners = _this.setupListeners.bind(_this);
    _this.updateScrolling = _this.updateScrolling.bind(_this);
    _this.rootRef = (0, import_react.createRef)();
    return _this;
  }
  Sizer2.prototype.componentDidMount = function() {
    this.rootNode = this.rootRef.current;
    this.createListeners();
    this.expandTrigger.addEventListener("scroll", this.setupListeners);
    this.contractTrigger.addEventListener("scroll", this.setupListeners);
    this.setupListeners();
  };
  Sizer2.prototype.shouldComponentUpdate = function(prevProps) {
    if (prevProps.scrollTop !== this.props.scrollTop || prevProps.scrollLeft !== this.props.scrollLeft || prevProps.style && this.props.style && !shallowEqual(prevProps.style, this.props.style) || prevProps.style && !this.props.style || prevProps.children !== this.props.children) {
      return true;
    }
    return false;
  };
  Sizer2.prototype.componentDidUpdate = function() {
    var _a2 = this.props, scrollTop = _a2.scrollTop, scrollLeft = _a2.scrollLeft;
    if (scrollTop !== void 0 && scrollTop > -1) {
      this.rootNode.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0 && scrollLeft > -1) {
      this.rootNode.scrollLeft = scrollLeft;
    }
    this.updateScrolling(this.getSize());
  };
  Sizer2.prototype.componentWillUnmount = function() {
    this.expandTrigger.removeEventListener("scroll", this.setupListeners);
    this.contractTrigger.removeEventListener("scroll", this.setupListeners);
  };
  Sizer2.prototype.setupListeners = function() {
    var size = this.getSize();
    var width = size.width, height = size.height;
    this.expandNotifier.style.width = "".concat(width + SCROLL_OFFSET, "px");
    this.expandNotifier.style.height = "".concat(height + SCROLL_OFFSET, "px");
    this.updateScrolling(size);
    var onSizeChange = this.props.onSizeChange;
    onSizeChange(size);
  };
  Sizer2.prototype.createListeners = function() {
    this.triggersRoot = document.createElement("div");
    Object.assign(this.triggersRoot.style, styles.triggersRoot);
    this.rootNode.appendChild(this.triggersRoot);
    this.expandTrigger = document.createElement("div");
    Object.assign(this.expandTrigger.style, styles.expandTrigger);
    this.expandTrigger.addEventListener("scroll", this.setupListeners);
    this.triggersRoot.appendChild(this.expandTrigger);
    this.expandNotifier = document.createElement("div");
    this.expandTrigger.appendChild(this.expandNotifier);
    this.contractTrigger = document.createElement("div");
    Object.assign(this.contractTrigger.style, styles.contractTrigger);
    this.contractTrigger.addEventListener("scroll", this.setupListeners);
    this.triggersRoot.appendChild(this.contractTrigger);
    this.contractNotifier = document.createElement("div");
    Object.assign(this.contractNotifier.style, styles.contractNotifier);
    this.contractTrigger.appendChild(this.contractNotifier);
  };
  Sizer2.prototype.updateScrolling = function(size) {
    var width = size.width, height = size.height;
    this.contractTrigger.scrollTop = height;
    this.contractTrigger.scrollLeft = width;
    this.expandTrigger.scrollTop = SCROLL_OFFSET;
    this.expandTrigger.scrollLeft = SCROLL_OFFSET;
  };
  Sizer2.prototype.render = function() {
    var _a2 = this.props, onSizeChange = _a2.onSizeChange, Container3 = _a2.containerComponent, style = _a2.style, scrollTop = _a2.scrollTop, scrollLeft = _a2.scrollLeft, restProps = __rest(_a2, ["onSizeChange", "containerComponent", "style", "scrollTop", "scrollLeft"]);
    return (0, import_react.createElement)(
      Container3,
      __assign({ forwardedRef: this.rootRef, style: style ? __assign(__assign({}, styles.root), style) : styles.root }, restProps)
    );
  };
  Sizer2.defaultProps = {
    containerComponent: "div"
  };
  return Sizer2;
}(import_react.Component);
var createStateHelper = function(component, controlledStateProperties) {
  if (controlledStateProperties === void 0) {
    controlledStateProperties = {};
  }
  var notifyStateChange = function(nextState, state) {
    Object.keys(controlledStateProperties).forEach(function(propertyName) {
      var changeEvent = controlledStateProperties[propertyName]();
      if (changeEvent && nextState[propertyName] !== state[propertyName]) {
        changeEvent(nextState[propertyName]);
      }
    });
  };
  var lastStateUpdater;
  var initialState = null;
  var lastInitialState = null;
  var newState = null;
  var shouldNotify = false;
  var applyReducer = function(reduce, payload, callback) {
    var stateUpdater = function(prevState) {
      if (initialState === null) {
        initialState = prevState;
      }
      var stateChange = reduce(__assign({}, prevState), payload);
      var state = __assign(__assign({}, prevState), stateChange);
      if (typeof callback === "function") {
        callback(state, prevState);
      }
      if (stateUpdater === lastStateUpdater) {
        if (lastInitialState !== initialState) {
          newState = state;
          if (!shouldNotify) {
            lastInitialState = initialState;
            shouldNotify = true;
          }
        }
        initialState = null;
      }
      return stateChange;
    };
    lastStateUpdater = stateUpdater;
    component.setState(stateUpdater, function() {
      if (shouldNotify) {
        notifyStateChange(newState, lastInitialState);
        shouldNotify = false;
      }
    });
  };
  var applyFieldReducer = function(field, reduce, payload) {
    applyReducer(function(state) {
      var _a2;
      return _a2 = {}, _a2[field] = reduce(state[field], payload), _a2;
    });
  };
  return {
    applyReducer,
    applyFieldReducer
  };
};
var makeBoundComponent = function(Target, components, exposed) {
  var Component2 = function(_super) {
    __extends(Component3, _super);
    function Component3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Component3.prototype.render = function() {
      return (0, import_react.createElement)(Target, __assign({}, components, this.props));
    };
    return Component3;
  }(import_react.PureComponent);
  Component2.components = Target.components;
  Object.assign(Component2, exposed);
  return Component2;
};
var withComponents = function(components) {
  return function(Target) {
    var props = {};
    var exposed = {};
    var targetComponents = Target.components;
    Object.entries(targetComponents).forEach(function(_a2) {
      var _b = __read2(_a2, 2), fieldName = _b[0], componentName = _b[1];
      var component = components[componentName];
      if (component && component !== Target[componentName]) {
        props[fieldName] = component;
      }
      exposed[componentName] = component || Target[componentName];
    });
    return Object.keys(props).length > 0 ? makeBoundComponent(Target, props, exposed) : Target;
  };
};
var RefType = import_prop_types.default.shape({
  current: import_prop_types.default.instanceOf(typeof Element !== "undefined" ? Element : Object)
});

// node_modules/moment/dist/moment.js
var hookCallback;
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i, arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
var some;
if (Array.prototype.some) {
  some = Array.prototype.some;
} else {
  some = function(fun) {
    var t = Object(this), len = t.length >>> 0, i;
    for (i = 0; i < len; i++) {
      if (i in t && fun.call(this, t[i], i, t)) {
        return true;
      }
    }
    return false;
  };
}
function isValid(m) {
  var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());
  if (isNowValid) {
    flags = getParsingFlags(m);
    parsedParts = some.call(flags.parsedDateParts, function(i) {
      return i != null;
    });
    isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
  }
  if (Object.isFrozen == null || !Object.isFrozen(m)) {
    m._isValid = isNowValid;
  } else {
    return isNowValid;
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
var momentProperties = hooks.momentProperties = [];
var updateInProgress = false;
function copyConfig(to2, from2) {
  var i, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i, key, argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = "";
        if (typeof arguments[i] === "object") {
          arg += "\n[" + i + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(
        msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
      );
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
var deprecations = {};
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;
function isFunction(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
var keys;
if (Object.keys) {
  keys = Object.keys;
} else {
  keys = function(obj) {
    var i, res = [];
    for (i in obj) {
      if (hasOwnProp(obj, i)) {
        res.push(i);
      }
    }
    return res;
  };
}
var defaultCalendar = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
var formatFunctions = {};
var formatTokenFunctions = {};
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(
        func.apply(this, arguments),
        token2
      );
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens), i, length;
  for (i = 0, length = array.length; i < length; i++) {
    if (formatTokenFunctions[array[i]]) {
      array[i] = formatTokenFunctions[array[i]];
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }
  return function(mom) {
    var output = "", i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(
      localFormattingTokens,
      replaceLongDateFormatTokens
    );
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
var defaultLongDateFormat = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
var defaultInvalidDate = "Invalid date";
function invalidDate() {
  return this._invalidDate;
}
var defaultOrdinal = "%d";
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
function ordinal(number) {
  return this._ordinal.replace("%d", number);
}
var defaultRelativeTime = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function relativeTime(number, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
var aliases = {
  D: "date",
  dates: "date",
  date: "date",
  d: "day",
  days: "day",
  day: "day",
  e: "weekday",
  weekdays: "weekday",
  weekday: "weekday",
  E: "isoWeekday",
  isoweekdays: "isoWeekday",
  isoweekday: "isoWeekday",
  DDD: "dayOfYear",
  dayofyears: "dayOfYear",
  dayofyear: "dayOfYear",
  h: "hour",
  hours: "hour",
  hour: "hour",
  ms: "millisecond",
  milliseconds: "millisecond",
  millisecond: "millisecond",
  m: "minute",
  minutes: "minute",
  minute: "minute",
  M: "month",
  months: "month",
  month: "month",
  Q: "quarter",
  quarters: "quarter",
  quarter: "quarter",
  s: "second",
  seconds: "second",
  second: "second",
  gg: "weekYear",
  weekyears: "weekYear",
  weekyear: "weekYear",
  GG: "isoWeekYear",
  isoweekyears: "isoWeekYear",
  isoweekyear: "isoWeekYear",
  w: "week",
  weeks: "week",
  week: "week",
  W: "isoWeek",
  isoweeks: "isoWeek",
  isoweek: "isoWeek",
  y: "year",
  years: "year",
  year: "year"
};
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
var priorities = {
  date: 9,
  day: 11,
  weekday: 11,
  isoWeekday: 11,
  dayOfYear: 4,
  hour: 13,
  millisecond: 16,
  minute: 14,
  month: 8,
  quarter: 7,
  second: 15,
  weekYear: 1,
  isoWeekYear: 1,
  week: 5,
  isoWeek: 5,
  year: 1
};
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
var match1 = /\d/;
var match2 = /\d\d/;
var match3 = /\d{3}/;
var match4 = /\d{4}/;
var match6 = /[+-]?\d{6}/;
var match1to2 = /\d\d?/;
var match3to4 = /\d\d\d\d?/;
var match5to6 = /\d\d\d\d\d\d?/;
var match1to3 = /\d{1,3}/;
var match1to4 = /\d{1,4}/;
var match1to6 = /[+-]?\d{1,6}/;
var matchUnsigned = /\d+/;
var matchSigned = /[+-]?\d+/;
var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
var match1to2NoLeadingZero = /^[1-9]\d?/;
var match1to2HasZero = /^([1-9]\d|\d)/;
var regexes;
regexes = {};
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }
    )
  );
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function absFloor(number) {
  if (number < 0) {
    return Math.ceil(number) || 0;
  } else {
    return Math.floor(number);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
var tokens = {};
function addParseToken(token2, callback) {
  var i, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;
addFormatToken("Y", 0, 0, function() {
  var y = this.year();
  return y <= 9999 ? zeroFill(y, 4) : "+" + y;
});
addFormatToken(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
addFormatToken(0, ["YYYY", 4], 0, "year");
addFormatToken(0, ["YYYYY", 5], 0, "year");
addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
addRegexToken("Y", matchSigned);
addRegexToken("YY", match1to2, match2);
addRegexToken("YYYY", match1to4, match4);
addRegexToken("YYYYY", match1to6, match6);
addRegexToken("YYYYYY", match1to6, match6);
addParseToken(["YYYYY", "YYYYYY"], YEAR);
addParseToken("YYYY", function(input, array) {
  array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken("YY", function(input, array) {
  array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken("Y", function(input, array) {
  array[YEAR] = parseInt(input, 10);
});
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
hooks.parseTwoDigitYear = function(input) {
  return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
};
var getSetYear = makeGetSet("FullYear", true);
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  if (!mom.isValid()) {
    return NaN;
  }
  var d = mom._d, isUTC = mom._isUTC;
  switch (unit) {
    case "Milliseconds":
      return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
    case "Seconds":
      return isUTC ? d.getUTCSeconds() : d.getSeconds();
    case "Minutes":
      return isUTC ? d.getUTCMinutes() : d.getMinutes();
    case "Hours":
      return isUTC ? d.getUTCHours() : d.getHours();
    case "Date":
      return isUTC ? d.getUTCDate() : d.getDate();
    case "Day":
      return isUTC ? d.getUTCDay() : d.getDay();
    case "Month":
      return isUTC ? d.getUTCMonth() : d.getMonth();
    case "FullYear":
      return isUTC ? d.getUTCFullYear() : d.getFullYear();
    default:
      return NaN;
  }
}
function set$1(mom, unit, value) {
  var d, isUTC, year, month, date;
  if (!mom.isValid() || isNaN(value)) {
    return;
  }
  d = mom._d;
  isUTC = mom._isUTC;
  switch (unit) {
    case "Milliseconds":
      return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
    case "Seconds":
      return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
    case "Minutes":
      return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
    case "Hours":
      return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
    case "Date":
      return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
    case "FullYear":
      break;
    default:
      return;
  }
  year = value;
  month = mom.month();
  date = mom.date();
  date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
  void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
function mod(n, x) {
  return (n % x + x) % x;
}
var indexOf;
if (Array.prototype.indexOf) {
  indexOf = Array.prototype.indexOf;
} else {
  indexOf = function(o) {
    var i;
    for (i = 0; i < this.length; ++i) {
      if (this[i] === o) {
        return i;
      }
    }
    return -1;
  };
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
addFormatToken("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
addFormatToken("MMM", 0, 0, function(format2) {
  return this.localeData().monthsShort(this, format2);
});
addFormatToken("MMMM", 0, 0, function(format2) {
  return this.localeData().months(this, format2);
});
addRegexToken("M", match1to2, match1to2NoLeadingZero);
addRegexToken("MM", match1to2, match2);
addRegexToken("MMM", function(isStrict, locale2) {
  return locale2.monthsShortRegex(isStrict);
});
addRegexToken("MMMM", function(isStrict, locale2) {
  return locale2.monthsRegex(isStrict);
});
addParseToken(["M", "MM"], function(input, array) {
  array[MONTH] = toInt(input) - 1;
});
addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
  var month = config._locale.monthsParse(input, token2, config._strict);
  if (month != null) {
    array[MONTH] = month;
  } else {
    getParsingFlags(config).invalidMonth = input;
  }
});
var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
  "_"
);
var defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultMonthsShortRegex = matchWord;
var defaultMonthsRegex = matchWord;
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp(
        "^" + this.months(mom, "").replace(".", "") + "$",
        "i"
      );
      this._shortMonthsParse[i] = new RegExp(
        "^" + this.monthsShort(mom, "").replace(".", "") + "$",
        "i"
      );
    }
    if (!strict && !this._monthsParse[i]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  var month = value, date = mom.date();
  date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
  void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortP = regexEscape(this.monthsShort(mom, ""));
    longP = regexEscape(this.months(mom, ""));
    shortPieces.push(shortP);
    longPieces.push(longP);
    mixedPieces.push(longP);
    mixedPieces.push(shortP);
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._monthsShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
}
function createDate(y, m, d, h, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
addFormatToken("w", ["ww", 2], "wo", "week");
addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
addRegexToken("w", match1to2, match1to2NoLeadingZero);
addRegexToken("ww", match1to2, match2);
addRegexToken("W", match1to2, match1to2NoLeadingZero);
addRegexToken("WW", match1to2, match2);
addWeekParseToken(
  ["w", "ww", "W", "WW"],
  function(input, week, config, token2) {
    week[token2.substr(0, 1)] = toInt(input);
  }
);
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
var defaultLocaleWeek = {
  dow: 0,
  doy: 6
};
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
addFormatToken("d", 0, "do", "day");
addFormatToken("dd", 0, 0, function(format2) {
  return this.localeData().weekdaysMin(this, format2);
});
addFormatToken("ddd", 0, 0, function(format2) {
  return this.localeData().weekdaysShort(this, format2);
});
addFormatToken("dddd", 0, 0, function(format2) {
  return this.localeData().weekdays(this, format2);
});
addFormatToken("e", 0, 0, "weekday");
addFormatToken("E", 0, 0, "isoWeekday");
addRegexToken("d", match1to2);
addRegexToken("e", match1to2);
addRegexToken("E", match1to2);
addRegexToken("dd", function(isStrict, locale2) {
  return locale2.weekdaysMinRegex(isStrict);
});
addRegexToken("ddd", function(isStrict, locale2) {
  return locale2.weekdaysShortRegex(isStrict);
});
addRegexToken("dddd", function(isStrict, locale2) {
  return locale2.weekdaysRegex(isStrict);
});
addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
  var weekday = config._locale.weekdaysParse(input, token2, config._strict);
  if (weekday != null) {
    week.d = weekday;
  } else {
    getParsingFlags(config).invalidWeekday = input;
  }
});
addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
  week[token2] = toInt(input);
});
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
var defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
var defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
var defaultWeekdaysRegex = matchWord;
var defaultWeekdaysShortRegex = matchWord;
var defaultWeekdaysMinRegex = matchWord;
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(
        mom,
        ""
      ).toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp(
        "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._shortWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._minWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
    }
    if (!this._weekdaysParse[i]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = get(this, "Day");
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._weekdaysShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
  this._weekdaysMinStrictRegex = new RegExp(
    "^(" + minPieces.join("|") + ")",
    "i"
  );
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
addFormatToken("H", ["HH", 2], 0, "hour");
addFormatToken("h", ["hh", 2], 0, hFormat);
addFormatToken("k", ["kk", 2], 0, kFormat);
addFormatToken("hmm", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});
addFormatToken("hmmss", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
addFormatToken("Hmm", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2);
});
addFormatToken("Hmmss", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      lowercase
    );
  });
}
meridiem("a", true);
meridiem("A", false);
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
addRegexToken("a", matchMeridiem);
addRegexToken("A", matchMeridiem);
addRegexToken("H", match1to2, match1to2HasZero);
addRegexToken("h", match1to2, match1to2NoLeadingZero);
addRegexToken("k", match1to2, match1to2NoLeadingZero);
addRegexToken("HH", match1to2, match2);
addRegexToken("hh", match1to2, match2);
addRegexToken("kk", match1to2, match2);
addRegexToken("hmm", match3to4);
addRegexToken("hmmss", match5to6);
addRegexToken("Hmm", match3to4);
addRegexToken("Hmmss", match5to6);
addParseToken(["H", "HH"], HOUR);
addParseToken(["k", "kk"], function(input, array, config) {
  var kInput = toInt(input);
  array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(["a", "A"], function(input, array, config) {
  config._isPm = config._locale.isPM(input);
  config._meridiem = input;
});
addParseToken(["h", "hh"], function(input, array, config) {
  array[HOUR] = toInt(input);
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmm", function(input, array, config) {
  var pos = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos));
  array[MINUTE] = toInt(input.substr(pos));
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmmss", function(input, array, config) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos1));
  array[MINUTE] = toInt(input.substr(pos1, 2));
  array[SECOND] = toInt(input.substr(pos2));
  getParsingFlags(config).bigHour = true;
});
addParseToken("Hmm", function(input, array, config) {
  var pos = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos));
  array[MINUTE] = toInt(input.substr(pos));
});
addParseToken("Hmmss", function(input, array, config) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos1));
  array[MINUTE] = toInt(input.substr(pos1, 2));
  array[SECOND] = toInt(input.substr(pos2));
});
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
var getSetHour = makeGetSet("Hours", true);
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
var baseConfig = {
  calendar: defaultCalendar,
  longDateFormat: defaultLongDateFormat,
  invalidDate: defaultInvalidDate,
  ordinal: defaultOrdinal,
  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
  relativeTime: defaultRelativeTime,
  months: defaultLocaleMonths,
  monthsShort: defaultLocaleMonthsShort,
  week: defaultLocaleWeek,
  weekdays: defaultLocaleWeekdays,
  weekdaysMin: defaultLocaleWeekdaysMin,
  weekdaysShort: defaultLocaleWeekdaysShort,
  meridiemParse: defaultLocaleMeridiemParse
};
var locales = {};
var localeFamilies = {};
var globalLocale;
function commonPrefix(arr1, arr2) {
  var i, minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i = 0, j, next, locale2, split2;
  while (i < names.length) {
    split2 = normalizeLocale(names[i]).split("-");
    j = split2.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split2.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split2, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return !!(name && name.match("^[^/\\\\]*$"));
}
function loadLocale(name) {
  var oldLocale = null, aliasedRequire;
  if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = __require;
      aliasedRequire("./locale/" + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn(
          "Locale " + key + " not found. Did you forget to load it?"
        );
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      );
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name,
            config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
var isoDates = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, false],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, false],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, false],
  ["YYYY", /\d{4}/, false]
];
var isoTimes = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
];
var aspNetJsonRegex = /^\/?Date\((-?\d+)/i;
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
var obsOffsets = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function configFromISO(config) {
  var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
      parsedInput[0],
      parsedInput[1],
      parsedInput[2]
    ).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
    return h * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(
      match[4],
      match[3],
      match[2],
      match[5],
      match[6],
      match[7]
    );
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
hooks.createFromInputFallback = deprecate(
  "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
  function(config) {
    config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
  }
);
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i, date, input = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(
    null,
    input
  );
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(
      w.GG,
      config._a[YEAR],
      weekOfYear(createLocal(), 1, 4).year
    );
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
hooks.ISO_8601 = function() {
};
hooks.RFC_2822 = function() {
};
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(
        string.indexOf(parsedInput) + parsedInput.length
      );
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(
    config._locale,
    config._a[HOUR],
    config._meridiem
  );
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map(
    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    function(obj) {
      return obj && parseInt(obj, 10);
    }
  );
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
var prototypeMin = deprecate(
  "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  }
);
var prototypeMax = deprecate(
  "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  }
);
function pickBy(fn, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
var now = function() {
  return Date.now ? Date.now() : +new Date();
};
var ordering = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function isDurationValid(m) {
  var key, unitHasDecimal = false, i, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration2) {
  var normalizedInput = normalizeObjectUnits(duration2), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number) {
  if (number < 0) {
    return Math.round(-1 * number) * -1;
  } else {
    return Math.round(number);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
offset("Z", ":");
offset("ZZ", "");
addRegexToken("Z", matchShortOffset);
addRegexToken("ZZ", matchShortOffset);
addParseToken(["Z", "ZZ"], function(input, array, config) {
  config._useUTC = true;
  config._tzm = offsetFromString(matchShortOffset, input);
});
var chunkOffset = /([\+\-]|\d\d)/gi;
function offsetFromString(matcher, string) {
  var matches = (string || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
hooks.updateOffset = function() {
};
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(
          this,
          createDuration(input - offset2, "m"),
          1,
          false
        );
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/;
var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function createDuration(input, key) {
  var duration2 = input, match = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration2 = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration2 = {};
    if (key) {
      duration2[key] = +input;
    } else {
      duration2.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration2 = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration2 = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration2 == null) {
    duration2 = {};
  } else if (typeof duration2 === "object" && ("from" in duration2 || "to" in duration2)) {
    diffRes = momentsDifference(
      createLocal(duration2.from),
      createLocal(duration2.to)
    );
    duration2 = {};
    duration2.ms = diffRes.milliseconds;
    duration2.M = diffRes.months;
  }
  ret = new Duration(duration2);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(
        name,
        "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
      );
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration2, isAdding, updateOffset) {
  var milliseconds2 = duration2._milliseconds, days2 = absRound(duration2._days), months2 = absRound(duration2._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
var add = createAdder(1, "add");
var subtract = createAdder(-1, "subtract");
function isString(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, property, propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item) {
      return !isNumber(item) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(
    output || this.localeData().calendar(format2, this, createLocal(now2))
  );
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(
      m,
      utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
    );
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(
    m,
    utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
var lang = deprecate(
  "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
  function(key) {
    if (key === void 0) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  }
);
function localeData() {
  return this._locale;
}
var MS_PER_SECOND = 1e3;
var MS_PER_MINUTE = 60 * MS_PER_SECOND;
var MS_PER_HOUR = 60 * MS_PER_MINUTE;
var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      );
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      ) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
addFormatToken("N", 0, 0, "eraAbbr");
addFormatToken("NN", 0, 0, "eraAbbr");
addFormatToken("NNN", 0, 0, "eraAbbr");
addFormatToken("NNNN", 0, 0, "eraName");
addFormatToken("NNNNN", 0, 0, "eraNarrow");
addFormatToken("y", ["y", 1], "yo", "eraYear");
addFormatToken("y", ["yy", 2], 0, "eraYear");
addFormatToken("y", ["yyy", 3], 0, "eraYear");
addFormatToken("y", ["yyyy", 4], 0, "eraYear");
addRegexToken("N", matchEraAbbr);
addRegexToken("NN", matchEraAbbr);
addRegexToken("NNN", matchEraAbbr);
addRegexToken("NNNN", matchEraName);
addRegexToken("NNNNN", matchEraNarrow);
addParseToken(
  ["N", "NN", "NNN", "NNNN", "NNNNN"],
  function(input, array, config, token2) {
    var era = config._locale.erasParse(input, token2, config._strict);
    if (era) {
      getParsingFlags(config).era = era;
    } else {
      getParsingFlags(config).invalidEra = input;
    }
  }
);
addRegexToken("y", matchUnsigned);
addRegexToken("yy", matchUnsigned);
addRegexToken("yyy", matchUnsigned);
addRegexToken("yyyy", matchUnsigned);
addRegexToken("yo", matchEraYearOrdinal);
addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
addParseToken(["yo"], function(input, array, config, token2) {
  var match;
  if (config._locale._eraYearOrdinalRegex) {
    match = input.match(config._locale._eraYearOrdinalRegex);
  }
  if (config._locale.eraYearOrdinalParse) {
    array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
  } else {
    array[YEAR] = parseInt(input, 10);
  }
});
function localeEras(m, format2) {
  var i, l, date, eras = this._eras || getLocale("en")._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (typeof eras[i].since) {
      case "string":
        date = hooks(eras[i].since).startOf("day");
        eras[i].since = date.valueOf();
        break;
    }
    switch (typeof eras[i].until) {
      case "undefined":
        eras[i].until = Infinity;
        break;
      case "string":
        date = hooks(eras[i].until).startOf("day").valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i, l, eras = this.eras(), name, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case "NNNN":
          if (name === eraName) {
            return eras[i];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i, l, dir, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    erasName = regexEscape(eras[i].name);
    erasAbbr = regexEscape(eras[i].abbr);
    erasNarrow = regexEscape(eras[i].narrow);
    namePieces.push(erasName);
    abbrPieces.push(erasAbbr);
    narrowPieces.push(erasNarrow);
    mixedPieces.push(erasName);
    mixedPieces.push(erasAbbr);
    mixedPieces.push(erasNarrow);
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp(
    "^(" + narrowPieces.join("|") + ")",
    "i"
  );
}
addFormatToken(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
addFormatToken(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
addWeekYearFormatToken("gggg", "weekYear");
addWeekYearFormatToken("ggggg", "weekYear");
addWeekYearFormatToken("GGGG", "isoWeekYear");
addWeekYearFormatToken("GGGGG", "isoWeekYear");
addRegexToken("G", matchSigned);
addRegexToken("g", matchSigned);
addRegexToken("GG", match1to2, match2);
addRegexToken("gg", match1to2, match2);
addRegexToken("GGGG", match1to4, match4);
addRegexToken("gggg", match1to4, match4);
addRegexToken("GGGGG", match1to6, match6);
addRegexToken("ggggg", match1to6, match6);
addWeekParseToken(
  ["gggg", "ggggg", "GGGG", "GGGGG"],
  function(input, week, config, token2) {
    week[token2.substr(0, 2)] = toInt(input);
  }
);
addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
  week[token2] = hooks.parseTwoDigitYear(input);
});
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.week(),
    this.weekday() + this.localeData()._week.dow,
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
addFormatToken("Q", 0, "Qo", "quarter");
addRegexToken("Q", match1);
addParseToken("Q", function(input, array) {
  array[MONTH] = (toInt(input) - 1) * 3;
});
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
addFormatToken("D", ["DD", 2], "Do", "date");
addRegexToken("D", match1to2, match1to2NoLeadingZero);
addRegexToken("DD", match1to2, match2);
addRegexToken("Do", function(isStrict, locale2) {
  return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
});
addParseToken(["D", "DD"], DATE);
addParseToken("Do", function(input, array) {
  array[DATE] = toInt(input.match(match1to2)[0]);
});
var getSetDayOfMonth = makeGetSet("Date", true);
addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
addRegexToken("DDD", match1to3);
addRegexToken("DDDD", match3);
addParseToken(["DDD", "DDDD"], function(input, array, config) {
  config._dayOfYear = toInt(input);
});
function getSetDayOfYear(input) {
  var dayOfYear = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
addFormatToken("m", ["mm", 2], 0, "minute");
addRegexToken("m", match1to2, match1to2HasZero);
addRegexToken("mm", match1to2, match2);
addParseToken(["m", "mm"], MINUTE);
var getSetMinute = makeGetSet("Minutes", false);
addFormatToken("s", ["ss", 2], 0, "second");
addRegexToken("s", match1to2, match1to2HasZero);
addRegexToken("ss", match1to2, match2);
addParseToken(["s", "ss"], SECOND);
var getSetSecond = makeGetSet("Seconds", false);
addFormatToken("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
addFormatToken(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
addFormatToken(0, ["SSS", 3], 0, "millisecond");
addFormatToken(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
addFormatToken(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
addFormatToken(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
addFormatToken(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
addRegexToken("S", match1to3, match1);
addRegexToken("SS", match1to3, match2);
addRegexToken("SSS", match1to3, match3);
var token;
var getSetMillisecond;
for (token = "SSSS"; token.length <= 9; token += "S") {
  addRegexToken(token, matchUnsigned);
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(("0." + input) * 1e3);
}
for (token = "S"; token.length <= 9; token += "S") {
  addParseToken(token, parseMs);
}
getSetMillisecond = makeGetSet("Milliseconds", false);
addFormatToken("z", 0, 0, "zoneAbbr");
addFormatToken("zz", 0, 0, "zoneName");
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var proto = Moment.prototype;
proto.add = add;
proto.calendar = calendar$1;
proto.clone = clone;
proto.diff = diff;
proto.endOf = endOf;
proto.format = format;
proto.from = from;
proto.fromNow = fromNow;
proto.to = to;
proto.toNow = toNow;
proto.get = stringGet;
proto.invalidAt = invalidAt;
proto.isAfter = isAfter;
proto.isBefore = isBefore;
proto.isBetween = isBetween;
proto.isSame = isSame;
proto.isSameOrAfter = isSameOrAfter;
proto.isSameOrBefore = isSameOrBefore;
proto.isValid = isValid$2;
proto.lang = lang;
proto.locale = locale;
proto.localeData = localeData;
proto.max = prototypeMax;
proto.min = prototypeMin;
proto.parsingFlags = parsingFlags;
proto.set = stringSet;
proto.startOf = startOf;
proto.subtract = subtract;
proto.toArray = toArray;
proto.toObject = toObject;
proto.toDate = toDate;
proto.toISOString = toISOString;
proto.inspect = inspect;
if (typeof Symbol !== "undefined" && Symbol.for != null) {
  proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return "Moment<" + this.format() + ">";
  };
}
proto.toJSON = toJSON;
proto.toString = toString;
proto.unix = unix;
proto.valueOf = valueOf;
proto.creationData = creationData;
proto.eraName = getEraName;
proto.eraNarrow = getEraNarrow;
proto.eraAbbr = getEraAbbr;
proto.eraYear = getEraYear;
proto.year = getSetYear;
proto.isLeapYear = getIsLeapYear;
proto.weekYear = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;
proto.quarter = proto.quarters = getSetQuarter;
proto.month = getSetMonth;
proto.daysInMonth = getDaysInMonth;
proto.week = proto.weeks = getSetWeek;
proto.isoWeek = proto.isoWeeks = getSetISOWeek;
proto.weeksInYear = getWeeksInYear;
proto.weeksInWeekYear = getWeeksInWeekYear;
proto.isoWeeksInYear = getISOWeeksInYear;
proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
proto.date = getSetDayOfMonth;
proto.day = proto.days = getSetDayOfWeek;
proto.weekday = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear = getSetDayOfYear;
proto.hour = proto.hours = getSetHour;
proto.minute = proto.minutes = getSetMinute;
proto.second = proto.seconds = getSetSecond;
proto.millisecond = proto.milliseconds = getSetMillisecond;
proto.utcOffset = getSetOffset;
proto.utc = setOffsetToUTC;
proto.local = setOffsetToLocal;
proto.parseZone = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST = isDaylightSavingTime;
proto.isLocal = isLocal;
proto.isUtcOffset = isUtcOffset;
proto.isUtc = isUtc;
proto.isUTC = isUtc;
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;
proto.dates = deprecate(
  "dates accessor is deprecated. Use date instead.",
  getSetDayOfMonth
);
proto.months = deprecate(
  "months accessor is deprecated. Use month instead",
  getSetMonth
);
proto.years = deprecate(
  "years accessor is deprecated. Use year instead",
  getSetYear
);
proto.zone = deprecate(
  "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
  getSetZone
);
proto.isDSTShifted = deprecate(
  "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
  isDaylightSavingTimeShifted
);
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
var proto$1 = Locale.prototype;
proto$1.calendar = calendar;
proto$1.longDateFormat = longDateFormat;
proto$1.invalidDate = invalidDate;
proto$1.ordinal = ordinal;
proto$1.preparse = preParsePostFormat;
proto$1.postformat = preParsePostFormat;
proto$1.relativeTime = relativeTime;
proto$1.pastFuture = pastFuture;
proto$1.set = set;
proto$1.eras = localeEras;
proto$1.erasParse = localeErasParse;
proto$1.erasConvertYear = localeErasConvertYear;
proto$1.erasAbbrRegex = erasAbbrRegex;
proto$1.erasNameRegex = erasNameRegex;
proto$1.erasNarrowRegex = erasNarrowRegex;
proto$1.months = localeMonths;
proto$1.monthsShort = localeMonthsShort;
proto$1.monthsParse = localeMonthsParse;
proto$1.monthsRegex = monthsRegex;
proto$1.monthsShortRegex = monthsShortRegex;
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;
proto$1.weekdays = localeWeekdays;
proto$1.weekdaysMin = localeWeekdaysMin;
proto$1.weekdaysShort = localeWeekdaysShort;
proto$1.weekdaysParse = localeWeekdaysParse;
proto$1.weekdaysRegex = weekdaysRegex;
proto$1.weekdaysShortRegex = weekdaysShortRegex;
proto$1.weekdaysMinRegex = weekdaysMinRegex;
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;
function get$1(format2, index, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index, field) {
  if (isNumber(format2)) {
    index = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index != null) {
    return get$1(format2, index, field, "month");
  }
  var i, out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
  if (index != null) {
    return get$1(format2, (index + shift) % 7, field, "day");
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index) {
  return listMonthsImpl(format2, index, "months");
}
function listMonthsShort(format2, index) {
  return listMonthsImpl(format2, index, "monthsShort");
}
function listWeekdays(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
}
getSetGlobalLocale("en", {
  eras: [
    {
      since: "0001-01-01",
      until: Infinity,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -Infinity,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(number) {
    var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
    return number + output;
  }
});
hooks.lang = deprecate(
  "moment.lang is deprecated. Use moment.locale instead.",
  getSetGlobalLocale
);
hooks.langData = deprecate(
  "moment.langData is deprecated. Use moment.localeData instead.",
  getLocale
);
var mathAbs = Math.abs;
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration2, input, value, direction) {
  var other = createDuration(input, value);
  duration2._milliseconds += direction * other._milliseconds;
  duration2._days += direction * other._days;
  duration2._months += direction * other._months;
  return duration2._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number) {
  if (number < 0) {
    return Math.floor(number);
  } else {
    return Math.ceil(number);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
var asMilliseconds = makeAs("ms");
var asSeconds = makeAs("s");
var asMinutes = makeAs("m");
var asHours = makeAs("h");
var asDays = makeAs("d");
var asWeeks = makeAs("w");
var asMonths = makeAs("M");
var asQuarters = makeAs("Q");
var asYears = makeAs("y");
var valueOf$1 = asMilliseconds;
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name) {
  return function() {
    return this.isValid() ? this._data[name] : NaN;
  };
}
var milliseconds = makeGetter("milliseconds");
var seconds = makeGetter("seconds");
var minutes = makeGetter("minutes");
var hours = makeGetter("hours");
var days = makeGetter("days");
var months = makeGetter("months");
var years = makeGetter("years");
function weeks() {
  return absFloor(this.days() / 7);
}
var round = Math.round;
var thresholds = {
  ss: 44,
  s: 45,
  m: 45,
  h: 22,
  d: 26,
  w: null,
  M: 11
};
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration2 = createDuration(posNegDuration).abs(), seconds2 = round(duration2.as("s")), minutes2 = round(duration2.as("m")), hours2 = round(duration2.as("h")), days2 = round(duration2.as("d")), months2 = round(duration2.as("M")), weeks2 = round(duration2.as("w")), years2 = round(duration2.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
var abs$1 = Math.abs;
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var proto$2 = Duration.prototype;
proto$2.isValid = isValid$1;
proto$2.abs = abs;
proto$2.add = add$1;
proto$2.subtract = subtract$1;
proto$2.as = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds = asSeconds;
proto$2.asMinutes = asMinutes;
proto$2.asHours = asHours;
proto$2.asDays = asDays;
proto$2.asWeeks = asWeeks;
proto$2.asMonths = asMonths;
proto$2.asQuarters = asQuarters;
proto$2.asYears = asYears;
proto$2.valueOf = valueOf$1;
proto$2._bubble = bubble;
proto$2.clone = clone$1;
proto$2.get = get$2;
proto$2.milliseconds = milliseconds;
proto$2.seconds = seconds;
proto$2.minutes = minutes;
proto$2.hours = hours;
proto$2.days = days;
proto$2.weeks = weeks;
proto$2.months = months;
proto$2.years = years;
proto$2.humanize = humanize;
proto$2.toISOString = toISOString$1;
proto$2.toString = toISOString$1;
proto$2.toJSON = toISOString$1;
proto$2.locale = locale;
proto$2.localeData = localeData;
proto$2.toIsoString = deprecate(
  "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
  toISOString$1
);
proto$2.lang = lang;
addFormatToken("X", 0, 0, "unix");
addFormatToken("x", 0, 0, "valueOf");
addRegexToken("x", matchSigned);
addRegexToken("X", matchTimestamp);
addParseToken("X", function(input, array, config) {
  config._d = new Date(parseFloat(input) * 1e3);
});
addParseToken("x", function(input, array, config) {
  config._d = new Date(toInt(input));
});
hooks.version = "2.30.1";
setHookCallback(createLocal);
hooks.fn = proto;
hooks.min = min;
hooks.max = max;
hooks.now = now;
hooks.utc = createUTC;
hooks.unix = createUnix;
hooks.months = listMonths;
hooks.isDate = isDate;
hooks.locale = getSetGlobalLocale;
hooks.invalid = createInvalid;
hooks.duration = createDuration;
hooks.isMoment = isMoment;
hooks.weekdays = listWeekdays;
hooks.parseZone = createInZone;
hooks.localeData = getLocale;
hooks.isDuration = isDuration;
hooks.monthsShort = listMonthsShort;
hooks.weekdaysMin = listWeekdaysMin;
hooks.defineLocale = defineLocale;
hooks.updateLocale = updateLocale;
hooks.locales = listLocales;
hooks.weekdaysShort = listWeekdaysShort;
hooks.normalizeUnits = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat = getCalendarFormat;
hooks.prototype = proto;
hooks.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  DATE: "YYYY-MM-DD",
  TIME: "HH:mm",
  TIME_SECONDS: "HH:mm:ss",
  TIME_MS: "HH:mm:ss.SSS",
  WEEK: "GGGG-[W]WW",
  MONTH: "YYYY-MM"
};
var moment_default = hooks;

// node_modules/rrule/dist/esm/weekday.js
var ALL_WEEKDAYS = [
  "MO",
  "TU",
  "WE",
  "TH",
  "FR",
  "SA",
  "SU"
];
var Weekday = function() {
  function Weekday2(weekday, n) {
    if (n === 0)
      throw new Error("Can't create weekday with n == 0");
    this.weekday = weekday;
    this.n = n;
  }
  Weekday2.fromStr = function(str) {
    return new Weekday2(ALL_WEEKDAYS.indexOf(str));
  };
  Weekday2.prototype.nth = function(n) {
    return this.n === n ? this : new Weekday2(this.weekday, n);
  };
  Weekday2.prototype.equals = function(other) {
    return this.weekday === other.weekday && this.n === other.n;
  };
  Weekday2.prototype.toString = function() {
    var s = ALL_WEEKDAYS[this.weekday];
    if (this.n)
      s = (this.n > 0 ? "+" : "") + String(this.n) + s;
    return s;
  };
  Weekday2.prototype.getJsWeekday = function() {
    return this.weekday === 6 ? 0 : this.weekday + 1;
  };
  return Weekday2;
}();

// node_modules/rrule/dist/esm/helpers.js
var isPresent = function(value) {
  return value !== null && value !== void 0;
};
var isNumber2 = function(value) {
  return typeof value === "number";
};
var isWeekdayStr = function(value) {
  return typeof value === "string" && ALL_WEEKDAYS.includes(value);
};
var isArray2 = Array.isArray;
var range = function(start, end) {
  if (end === void 0) {
    end = start;
  }
  if (arguments.length === 1) {
    end = start;
    start = 0;
  }
  var rang = [];
  for (var i = start; i < end; i++)
    rang.push(i);
  return rang;
};
var repeat = function(value, times) {
  var i = 0;
  var array = [];
  if (isArray2(value)) {
    for (; i < times; i++)
      array[i] = [].concat(value);
  } else {
    for (; i < times; i++)
      array[i] = value;
  }
  return array;
};
var toArray2 = function(item) {
  if (isArray2(item)) {
    return item;
  }
  return [item];
};
function padStart(item, targetLength, padString) {
  if (padString === void 0) {
    padString = " ";
  }
  var str = String(item);
  targetLength = targetLength >> 0;
  if (str.length > targetLength) {
    return String(str);
  }
  targetLength = targetLength - str.length;
  if (targetLength > padString.length) {
    padString += repeat(padString, targetLength / padString.length);
  }
  return padString.slice(0, targetLength) + String(str);
}
var split = function(str, sep, num) {
  var splits = str.split(sep);
  return num ? splits.slice(0, num).concat([splits.slice(num).join(sep)]) : splits;
};
var pymod = function(a, b) {
  var r2 = a % b;
  return r2 * b < 0 ? r2 + b : r2;
};
var divmod = function(a, b) {
  return { div: Math.floor(a / b), mod: pymod(a, b) };
};
var empty = function(obj) {
  return !isPresent(obj) || obj.length === 0;
};
var notEmpty = function(obj) {
  return !empty(obj);
};
var includes = function(arr, val) {
  return notEmpty(arr) && arr.indexOf(val) !== -1;
};

// node_modules/rrule/dist/esm/dateutil.js
var dateutil;
(function(dateutil2) {
  dateutil2.MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  dateutil2.ONE_DAY = 1e3 * 60 * 60 * 24;
  dateutil2.MAXYEAR = 9999;
  dateutil2.ORDINAL_BASE = new Date(Date.UTC(1970, 0, 1));
  dateutil2.PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];
  dateutil2.getYearDay = function(date) {
    var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
    return Math.ceil((dateNoTime.valueOf() - new Date(date.getUTCFullYear(), 0, 1).valueOf()) / dateutil2.ONE_DAY) + 1;
  };
  dateutil2.isLeapYear = function(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  };
  dateutil2.isDate = function(value) {
    return value instanceof Date;
  };
  dateutil2.isValidDate = function(value) {
    return dateutil2.isDate(value) && !isNaN(value.getTime());
  };
  dateutil2.tzOffset = function(date) {
    return date.getTimezoneOffset() * 60 * 1e3;
  };
  dateutil2.daysBetween = function(date1, date2) {
    var date1ms = date1.getTime() - dateutil2.tzOffset(date1);
    var date2ms = date2.getTime() - dateutil2.tzOffset(date2);
    var differencems = date1ms - date2ms;
    return Math.round(differencems / dateutil2.ONE_DAY);
  };
  dateutil2.toOrdinal = function(date) {
    return dateutil2.daysBetween(date, dateutil2.ORDINAL_BASE);
  };
  dateutil2.fromOrdinal = function(ordinal2) {
    return new Date(dateutil2.ORDINAL_BASE.getTime() + ordinal2 * dateutil2.ONE_DAY);
  };
  dateutil2.getMonthDays = function(date) {
    var month = date.getUTCMonth();
    return month === 1 && dateutil2.isLeapYear(date.getUTCFullYear()) ? 29 : dateutil2.MONTH_DAYS[month];
  };
  dateutil2.getWeekday = function(date) {
    return dateutil2.PY_WEEKDAYS[date.getUTCDay()];
  };
  dateutil2.monthRange = function(year, month) {
    var date = new Date(Date.UTC(year, month, 1));
    return [dateutil2.getWeekday(date), dateutil2.getMonthDays(date)];
  };
  dateutil2.combine = function(date, time) {
    time = time || date;
    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));
  };
  dateutil2.clone = function(date) {
    var dolly = new Date(date.getTime());
    return dolly;
  };
  dateutil2.cloneDates = function(dates) {
    var clones = [];
    for (var i = 0; i < dates.length; i++) {
      clones.push(dateutil2.clone(dates[i]));
    }
    return clones;
  };
  dateutil2.sort = function(dates) {
    dates.sort(function(a, b) {
      return a.getTime() - b.getTime();
    });
  };
  dateutil2.timeToUntilString = function(time, utc) {
    if (utc === void 0) {
      utc = true;
    }
    var date = new Date(time);
    return [
      padStart(date.getUTCFullYear().toString(), 4, "0"),
      padStart(date.getUTCMonth() + 1, 2, "0"),
      padStart(date.getUTCDate(), 2, "0"),
      "T",
      padStart(date.getUTCHours(), 2, "0"),
      padStart(date.getUTCMinutes(), 2, "0"),
      padStart(date.getUTCSeconds(), 2, "0"),
      utc ? "Z" : ""
    ].join("");
  };
  dateutil2.untilStringToDate = function(until) {
    var re = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z?)?$/;
    var bits = re.exec(until);
    if (!bits)
      throw new Error("Invalid UNTIL value: ".concat(until));
    return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));
  };
})(dateutil || (dateutil = {}));
var dateutil_default = dateutil;

// node_modules/rrule/dist/esm/iterresult.js
var IterResult = function() {
  function IterResult2(method, args) {
    this.minDate = null;
    this.maxDate = null;
    this._result = [];
    this.total = 0;
    this.method = method;
    this.args = args;
    if (method === "between") {
      this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);
      this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);
    } else if (method === "before") {
      this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);
    } else if (method === "after") {
      this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);
    }
  }
  IterResult2.prototype.accept = function(date) {
    ++this.total;
    var tooEarly = this.minDate && date < this.minDate;
    var tooLate = this.maxDate && date > this.maxDate;
    if (this.method === "between") {
      if (tooEarly)
        return true;
      if (tooLate)
        return false;
    } else if (this.method === "before") {
      if (tooLate)
        return false;
    } else if (this.method === "after") {
      if (tooEarly)
        return true;
      this.add(date);
      return false;
    }
    return this.add(date);
  };
  IterResult2.prototype.add = function(date) {
    this._result.push(date);
    return true;
  };
  IterResult2.prototype.getValue = function() {
    var res = this._result;
    switch (this.method) {
      case "all":
      case "between":
        return res;
      case "before":
      case "after":
      default:
        return res.length ? res[res.length - 1] : null;
    }
  };
  IterResult2.prototype.clone = function() {
    return new IterResult2(this.method, this.args);
  };
  return IterResult2;
}();
var iterresult_default = IterResult;

// node_modules/tslib/tslib.es6.js
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign2 = function() {
  __assign2 = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __spreadArray3(to2, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to2.concat(ar || Array.prototype.slice.call(from2));
}

// node_modules/rrule/dist/esm/callbackiterresult.js
var CallbackIterResult = function(_super) {
  __extends2(CallbackIterResult2, _super);
  function CallbackIterResult2(method, args, iterator) {
    var _this = _super.call(this, method, args) || this;
    _this.iterator = iterator;
    return _this;
  }
  CallbackIterResult2.prototype.add = function(date) {
    if (this.iterator(date, this._result.length)) {
      this._result.push(date);
      return true;
    }
    return false;
  };
  return CallbackIterResult2;
}(iterresult_default);
var callbackiterresult_default = CallbackIterResult;

// node_modules/rrule/dist/esm/nlp/i18n.js
var ENGLISH = {
  dayNames: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  tokens: {
    SKIP: /^[ \r\n\t]+|^\.$/,
    number: /^[1-9][0-9]*/,
    numberAsText: /^(one|two|three)/i,
    every: /^every/i,
    "day(s)": /^days?/i,
    "weekday(s)": /^weekdays?/i,
    "week(s)": /^weeks?/i,
    "hour(s)": /^hours?/i,
    "minute(s)": /^minutes?/i,
    "month(s)": /^months?/i,
    "year(s)": /^years?/i,
    on: /^(on|in)/i,
    at: /^(at)/i,
    the: /^the/i,
    first: /^first/i,
    second: /^second/i,
    third: /^third/i,
    nth: /^([1-9][0-9]*)(\.|th|nd|rd|st)/i,
    last: /^last/i,
    for: /^for/i,
    "time(s)": /^times?/i,
    until: /^(un)?til/i,
    monday: /^mo(n(day)?)?/i,
    tuesday: /^tu(e(s(day)?)?)?/i,
    wednesday: /^we(d(n(esday)?)?)?/i,
    thursday: /^th(u(r(sday)?)?)?/i,
    friday: /^fr(i(day)?)?/i,
    saturday: /^sa(t(urday)?)?/i,
    sunday: /^su(n(day)?)?/i,
    january: /^jan(uary)?/i,
    february: /^feb(ruary)?/i,
    march: /^mar(ch)?/i,
    april: /^apr(il)?/i,
    may: /^may/i,
    june: /^june?/i,
    july: /^july?/i,
    august: /^aug(ust)?/i,
    september: /^sep(t(ember)?)?/i,
    october: /^oct(ober)?/i,
    november: /^nov(ember)?/i,
    december: /^dec(ember)?/i,
    comma: /^(,\s*|(and|or)\s*)+/i
  }
};
var i18n_default = ENGLISH;

// node_modules/rrule/dist/esm/nlp/totext.js
var contains = function(arr, val) {
  return arr.indexOf(val) !== -1;
};
var defaultGetText = function(id) {
  return id.toString();
};
var defaultDateFormatter = function(year, month, day) {
  return "".concat(month, " ").concat(day, ", ").concat(year);
};
var ToText = function() {
  function ToText2(rrule, gettext, language, dateFormatter) {
    if (gettext === void 0) {
      gettext = defaultGetText;
    }
    if (language === void 0) {
      language = i18n_default;
    }
    if (dateFormatter === void 0) {
      dateFormatter = defaultDateFormatter;
    }
    this.text = [];
    this.language = language || i18n_default;
    this.gettext = gettext;
    this.dateFormatter = dateFormatter;
    this.rrule = rrule;
    this.options = rrule.options;
    this.origOptions = rrule.origOptions;
    if (this.origOptions.bymonthday) {
      var bymonthday = [].concat(this.options.bymonthday);
      var bynmonthday = [].concat(this.options.bynmonthday);
      bymonthday.sort(function(a, b) {
        return a - b;
      });
      bynmonthday.sort(function(a, b) {
        return b - a;
      });
      this.bymonthday = bymonthday.concat(bynmonthday);
      if (!this.bymonthday.length)
        this.bymonthday = null;
    }
    if (isPresent(this.origOptions.byweekday)) {
      var byweekday = !isArray2(this.origOptions.byweekday) ? [this.origOptions.byweekday] : this.origOptions.byweekday;
      var days2 = String(byweekday);
      this.byweekday = {
        allWeeks: byweekday.filter(function(weekday) {
          return !weekday.n;
        }),
        someWeeks: byweekday.filter(function(weekday) {
          return Boolean(weekday.n);
        }),
        isWeekdays: days2.indexOf("MO") !== -1 && days2.indexOf("TU") !== -1 && days2.indexOf("WE") !== -1 && days2.indexOf("TH") !== -1 && days2.indexOf("FR") !== -1 && days2.indexOf("SA") === -1 && days2.indexOf("SU") === -1,
        isEveryDay: days2.indexOf("MO") !== -1 && days2.indexOf("TU") !== -1 && days2.indexOf("WE") !== -1 && days2.indexOf("TH") !== -1 && days2.indexOf("FR") !== -1 && days2.indexOf("SA") !== -1 && days2.indexOf("SU") !== -1
      };
      var sortWeekDays = function(a, b) {
        return a.weekday - b.weekday;
      };
      this.byweekday.allWeeks.sort(sortWeekDays);
      this.byweekday.someWeeks.sort(sortWeekDays);
      if (!this.byweekday.allWeeks.length)
        this.byweekday.allWeeks = null;
      if (!this.byweekday.someWeeks.length)
        this.byweekday.someWeeks = null;
    } else {
      this.byweekday = null;
    }
  }
  ToText2.isFullyConvertible = function(rrule) {
    var canConvert = true;
    if (!(rrule.options.freq in ToText2.IMPLEMENTED))
      return false;
    if (rrule.origOptions.until && rrule.origOptions.count)
      return false;
    for (var key in rrule.origOptions) {
      if (contains(["dtstart", "wkst", "freq"], key))
        return true;
      if (!contains(ToText2.IMPLEMENTED[rrule.options.freq], key))
        return false;
    }
    return canConvert;
  };
  ToText2.prototype.isFullyConvertible = function() {
    return ToText2.isFullyConvertible(this.rrule);
  };
  ToText2.prototype.toString = function() {
    var gettext = this.gettext;
    if (!(this.options.freq in ToText2.IMPLEMENTED)) {
      return gettext("RRule error: Unable to fully convert this rrule to text");
    }
    this.text = [gettext("every")];
    this[RRule.FREQUENCIES[this.options.freq]]();
    if (this.options.until) {
      this.add(gettext("until"));
      var until = this.options.until;
      this.add(this.dateFormatter(until.getUTCFullYear(), this.language.monthNames[until.getUTCMonth()], until.getUTCDate()));
    } else if (this.options.count) {
      this.add(gettext("for")).add(this.options.count.toString()).add(this.plural(this.options.count) ? gettext("times") : gettext("time"));
    }
    if (!this.isFullyConvertible())
      this.add(gettext("(~ approximate)"));
    return this.text.join("");
  };
  ToText2.prototype.HOURLY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    this.add(this.plural(this.options.interval) ? gettext("hours") : gettext("hour"));
  };
  ToText2.prototype.MINUTELY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    this.add(this.plural(this.options.interval) ? gettext("minutes") : gettext("minute"));
  };
  ToText2.prototype.DAILY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    if (this.byweekday && this.byweekday.isWeekdays) {
      this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
    } else {
      this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
    }
    if (this.origOptions.bymonth) {
      this.add(gettext("in"));
      this._bymonth();
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday) {
      this._byweekday();
    } else if (this.origOptions.byhour) {
      this._byhour();
    }
  };
  ToText2.prototype.WEEKLY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1) {
      this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? gettext("weeks") : gettext("week"));
    }
    if (this.byweekday && this.byweekday.isWeekdays) {
      if (this.options.interval === 1) {
        this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
      } else {
        this.add(gettext("on")).add(gettext("weekdays"));
      }
    } else if (this.byweekday && this.byweekday.isEveryDay) {
      this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
    } else {
      if (this.options.interval === 1)
        this.add(gettext("week"));
      if (this.origOptions.bymonth) {
        this.add(gettext("in"));
        this._bymonth();
      }
      if (this.bymonthday) {
        this._bymonthday();
      } else if (this.byweekday) {
        this._byweekday();
      }
    }
  };
  ToText2.prototype.MONTHLY = function() {
    var gettext = this.gettext;
    if (this.origOptions.bymonth) {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString()).add(gettext("months"));
        if (this.plural(this.options.interval))
          this.add(gettext("in"));
      } else {
      }
      this._bymonth();
    } else {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
      }
      this.add(this.plural(this.options.interval) ? gettext("months") : gettext("month"));
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday && this.byweekday.isWeekdays) {
      this.add(gettext("on")).add(gettext("weekdays"));
    } else if (this.byweekday) {
      this._byweekday();
    }
  };
  ToText2.prototype.YEARLY = function() {
    var gettext = this.gettext;
    if (this.origOptions.bymonth) {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
        this.add(gettext("years"));
      } else {
      }
      this._bymonth();
    } else {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
      }
      this.add(this.plural(this.options.interval) ? gettext("years") : gettext("year"));
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday) {
      this._byweekday();
    }
    if (this.options.byyearday) {
      this.add(gettext("on the")).add(this.list(this.options.byyearday, this.nth, gettext("and"))).add(gettext("day"));
    }
    if (this.options.byweekno) {
      this.add(gettext("in")).add(this.plural(this.options.byweekno.length) ? gettext("weeks") : gettext("week")).add(this.list(this.options.byweekno, void 0, gettext("and")));
    }
  };
  ToText2.prototype._bymonthday = function() {
    var gettext = this.gettext;
    if (this.byweekday && this.byweekday.allWeeks) {
      this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext("or"))).add(gettext("the")).add(this.list(this.bymonthday, this.nth, gettext("or")));
    } else {
      this.add(gettext("on the")).add(this.list(this.bymonthday, this.nth, gettext("and")));
    }
  };
  ToText2.prototype._byweekday = function() {
    var gettext = this.gettext;
    if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {
      this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext));
    }
    if (this.byweekday.someWeeks) {
      if (this.byweekday.allWeeks)
        this.add(gettext("and"));
      this.add(gettext("on the")).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext("and")));
    }
  };
  ToText2.prototype._byhour = function() {
    var gettext = this.gettext;
    this.add(gettext("at")).add(this.list(this.origOptions.byhour, void 0, gettext("and")));
  };
  ToText2.prototype._bymonth = function() {
    this.add(this.list(this.options.bymonth, this.monthtext, this.gettext("and")));
  };
  ToText2.prototype.nth = function(n) {
    n = parseInt(n.toString(), 10);
    var nth;
    var gettext = this.gettext;
    if (n === -1)
      return gettext("last");
    var npos = Math.abs(n);
    switch (npos) {
      case 1:
      case 21:
      case 31:
        nth = npos + gettext("st");
        break;
      case 2:
      case 22:
        nth = npos + gettext("nd");
        break;
      case 3:
      case 23:
        nth = npos + gettext("rd");
        break;
      default:
        nth = npos + gettext("th");
    }
    return n < 0 ? nth + " " + gettext("last") : nth;
  };
  ToText2.prototype.monthtext = function(m) {
    return this.language.monthNames[m - 1];
  };
  ToText2.prototype.weekdaytext = function(wday) {
    var weekday = isNumber2(wday) ? (wday + 1) % 7 : wday.getJsWeekday();
    return (wday.n ? this.nth(wday.n) + " " : "") + this.language.dayNames[weekday];
  };
  ToText2.prototype.plural = function(n) {
    return n % 100 !== 1;
  };
  ToText2.prototype.add = function(s) {
    this.text.push(" ");
    this.text.push(s);
    return this;
  };
  ToText2.prototype.list = function(arr, callback, finalDelim, delim) {
    var _this = this;
    if (delim === void 0) {
      delim = ",";
    }
    if (!isArray2(arr)) {
      arr = [arr];
    }
    var delimJoin = function(array, delimiter, finalDelimiter) {
      var list = "";
      for (var i = 0; i < array.length; i++) {
        if (i !== 0) {
          if (i === array.length - 1) {
            list += " " + finalDelimiter + " ";
          } else {
            list += delimiter + " ";
          }
        }
        list += array[i];
      }
      return list;
    };
    callback = callback || function(o) {
      return o.toString();
    };
    var realCallback = function(arg) {
      return callback && callback.call(_this, arg);
    };
    if (finalDelim) {
      return delimJoin(arr.map(realCallback), delim, finalDelim);
    } else {
      return arr.map(realCallback).join(delim + " ");
    }
  };
  return ToText2;
}();
var totext_default = ToText;

// node_modules/rrule/dist/esm/nlp/parsetext.js
var Parser = function() {
  function Parser2(rules) {
    this.done = true;
    this.rules = rules;
  }
  Parser2.prototype.start = function(text) {
    this.text = text;
    this.done = false;
    return this.nextSymbol();
  };
  Parser2.prototype.isDone = function() {
    return this.done && this.symbol === null;
  };
  Parser2.prototype.nextSymbol = function() {
    var best;
    var bestSymbol;
    this.symbol = null;
    this.value = null;
    do {
      if (this.done)
        return false;
      var rule = void 0;
      best = null;
      for (var name_1 in this.rules) {
        rule = this.rules[name_1];
        var match = rule.exec(this.text);
        if (match) {
          if (best === null || match[0].length > best[0].length) {
            best = match;
            bestSymbol = name_1;
          }
        }
      }
      if (best != null) {
        this.text = this.text.substr(best[0].length);
        if (this.text === "")
          this.done = true;
      }
      if (best == null) {
        this.done = true;
        this.symbol = null;
        this.value = null;
        return;
      }
    } while (bestSymbol === "SKIP");
    this.symbol = bestSymbol;
    this.value = best;
    return true;
  };
  Parser2.prototype.accept = function(name) {
    if (this.symbol === name) {
      if (this.value) {
        var v = this.value;
        this.nextSymbol();
        return v;
      }
      this.nextSymbol();
      return true;
    }
    return false;
  };
  Parser2.prototype.acceptNumber = function() {
    return this.accept("number");
  };
  Parser2.prototype.expect = function(name) {
    if (this.accept(name))
      return true;
    throw new Error("expected " + name + " but found " + this.symbol);
  };
  return Parser2;
}();
function parseText(text, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  var options = {};
  var ttr = new Parser(language.tokens);
  if (!ttr.start(text))
    return null;
  S();
  return options;
  function S() {
    ttr.expect("every");
    var n = ttr.acceptNumber();
    if (n)
      options.interval = parseInt(n[0], 10);
    if (ttr.isDone())
      throw new Error("Unexpected end");
    switch (ttr.symbol) {
      case "day(s)":
        options.freq = RRule.DAILY;
        if (ttr.nextSymbol()) {
          AT();
          F();
        }
        break;
      case "weekday(s)":
        options.freq = RRule.WEEKLY;
        options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        ttr.nextSymbol();
        F();
        break;
      case "week(s)":
        options.freq = RRule.WEEKLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "hour(s)":
        options.freq = RRule.HOURLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "minute(s)":
        options.freq = RRule.MINUTELY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "month(s)":
        options.freq = RRule.MONTHLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "year(s)":
        options.freq = RRule.YEARLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        options.freq = RRule.WEEKLY;
        var key = ttr.symbol.substr(0, 2).toUpperCase();
        options.byweekday = [RRule[key]];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var wkd = decodeWKD();
          if (!wkd) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected weekday");
          }
          options.byweekday.push(RRule[wkd]);
          ttr.nextSymbol();
        }
        MDAYs();
        F();
        break;
      case "january":
      case "february":
      case "march":
      case "april":
      case "may":
      case "june":
      case "july":
      case "august":
      case "september":
      case "october":
      case "november":
      case "december":
        options.freq = RRule.YEARLY;
        options.bymonth = [decodeM()];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var m = decodeM();
          if (!m) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected month");
          }
          options.bymonth.push(m);
          ttr.nextSymbol();
        }
        ON();
        F();
        break;
      default:
        throw new Error("Unknown symbol");
    }
  }
  function ON() {
    var on = ttr.accept("on");
    var the = ttr.accept("the");
    if (!(on || the))
      return;
    do {
      var nth = decodeNTH();
      var wkd = decodeWKD();
      var m = decodeM();
      if (nth) {
        if (wkd) {
          ttr.nextSymbol();
          if (!options.byweekday)
            options.byweekday = [];
          options.byweekday.push(RRule[wkd].nth(nth));
        } else {
          if (!options.bymonthday)
            options.bymonthday = [];
          options.bymonthday.push(nth);
          ttr.accept("day(s)");
        }
      } else if (wkd) {
        ttr.nextSymbol();
        if (!options.byweekday)
          options.byweekday = [];
        options.byweekday.push(RRule[wkd]);
      } else if (ttr.symbol === "weekday(s)") {
        ttr.nextSymbol();
        if (!options.byweekday) {
          options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        }
      } else if (ttr.symbol === "week(s)") {
        ttr.nextSymbol();
        var n = ttr.acceptNumber();
        if (!n) {
          throw new Error("Unexpected symbol " + ttr.symbol + ", expected week number");
        }
        options.byweekno = [parseInt(n[0], 10)];
        while (ttr.accept("comma")) {
          n = ttr.acceptNumber();
          if (!n) {
            throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
          }
          options.byweekno.push(parseInt(n[0], 10));
        }
      } else if (m) {
        ttr.nextSymbol();
        if (!options.bymonth)
          options.bymonth = [];
        options.bymonth.push(m);
      } else {
        return;
      }
    } while (ttr.accept("comma") || ttr.accept("the") || ttr.accept("on"));
  }
  function AT() {
    var at = ttr.accept("at");
    if (!at)
      return;
    do {
      var n = ttr.acceptNumber();
      if (!n) {
        throw new Error("Unexpected symbol " + ttr.symbol + ", expected hour");
      }
      options.byhour = [parseInt(n[0], 10)];
      while (ttr.accept("comma")) {
        n = ttr.acceptNumber();
        if (!n) {
          throw new Error("Unexpected symbol " + ttr.symbol + "; expected hour");
        }
        options.byhour.push(parseInt(n[0], 10));
      }
    } while (ttr.accept("comma") || ttr.accept("at"));
  }
  function decodeM() {
    switch (ttr.symbol) {
      case "january":
        return 1;
      case "february":
        return 2;
      case "march":
        return 3;
      case "april":
        return 4;
      case "may":
        return 5;
      case "june":
        return 6;
      case "july":
        return 7;
      case "august":
        return 8;
      case "september":
        return 9;
      case "october":
        return 10;
      case "november":
        return 11;
      case "december":
        return 12;
      default:
        return false;
    }
  }
  function decodeWKD() {
    switch (ttr.symbol) {
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        return ttr.symbol.substr(0, 2).toUpperCase();
      default:
        return false;
    }
  }
  function decodeNTH() {
    switch (ttr.symbol) {
      case "last":
        ttr.nextSymbol();
        return -1;
      case "first":
        ttr.nextSymbol();
        return 1;
      case "second":
        ttr.nextSymbol();
        return ttr.accept("last") ? -2 : 2;
      case "third":
        ttr.nextSymbol();
        return ttr.accept("last") ? -3 : 3;
      case "nth":
        var v = parseInt(ttr.value[1], 10);
        if (v < -366 || v > 366)
          throw new Error("Nth out of range: " + v);
        ttr.nextSymbol();
        return ttr.accept("last") ? -v : v;
      default:
        return false;
    }
  }
  function MDAYs() {
    ttr.accept("on");
    ttr.accept("the");
    var nth = decodeNTH();
    if (!nth)
      return;
    options.bymonthday = [nth];
    ttr.nextSymbol();
    while (ttr.accept("comma")) {
      nth = decodeNTH();
      if (!nth) {
        throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
      }
      options.bymonthday.push(nth);
      ttr.nextSymbol();
    }
  }
  function F() {
    if (ttr.symbol === "until") {
      var date = Date.parse(ttr.text);
      if (!date)
        throw new Error("Cannot parse until date:" + ttr.text);
      options.until = new Date(date);
    } else if (ttr.accept("for")) {
      options.count = parseInt(ttr.value[0], 10);
      ttr.expect("number");
    }
  }
}

// node_modules/rrule/dist/esm/types.js
var Frequency;
(function(Frequency2) {
  Frequency2[Frequency2["YEARLY"] = 0] = "YEARLY";
  Frequency2[Frequency2["MONTHLY"] = 1] = "MONTHLY";
  Frequency2[Frequency2["WEEKLY"] = 2] = "WEEKLY";
  Frequency2[Frequency2["DAILY"] = 3] = "DAILY";
  Frequency2[Frequency2["HOURLY"] = 4] = "HOURLY";
  Frequency2[Frequency2["MINUTELY"] = 5] = "MINUTELY";
  Frequency2[Frequency2["SECONDLY"] = 6] = "SECONDLY";
})(Frequency || (Frequency = {}));
function freqIsDailyOrGreater(freq) {
  return freq < Frequency.HOURLY;
}

// node_modules/rrule/dist/esm/nlp/index.js
var fromText = function(text, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  return new RRule(parseText(text, language) || void 0);
};
var common = [
  "count",
  "until",
  "interval",
  "byweekday",
  "bymonthday",
  "bymonth"
];
totext_default.IMPLEMENTED = [];
totext_default.IMPLEMENTED[Frequency.HOURLY] = common;
totext_default.IMPLEMENTED[Frequency.MINUTELY] = common;
totext_default.IMPLEMENTED[Frequency.DAILY] = ["byhour"].concat(common);
totext_default.IMPLEMENTED[Frequency.WEEKLY] = common;
totext_default.IMPLEMENTED[Frequency.MONTHLY] = common;
totext_default.IMPLEMENTED[Frequency.YEARLY] = ["byweekno", "byyearday"].concat(common);
var toText = function(rrule, gettext, language, dateFormatter) {
  return new totext_default(rrule, gettext, language, dateFormatter).toString();
};
var isFullyConvertible = totext_default.isFullyConvertible;

// node_modules/rrule/dist/esm/datetime.js
var Time = function() {
  function Time2(hour, minute, second, millisecond) {
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond || 0;
  }
  Time2.prototype.getHours = function() {
    return this.hour;
  };
  Time2.prototype.getMinutes = function() {
    return this.minute;
  };
  Time2.prototype.getSeconds = function() {
    return this.second;
  };
  Time2.prototype.getMilliseconds = function() {
    return this.millisecond;
  };
  Time2.prototype.getTime = function() {
    return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1e3 + this.millisecond;
  };
  return Time2;
}();
var DateTime = function(_super) {
  __extends2(DateTime2, _super);
  function DateTime2(year, month, day, hour, minute, second, millisecond) {
    var _this = _super.call(this, hour, minute, second, millisecond) || this;
    _this.year = year;
    _this.month = month;
    _this.day = day;
    return _this;
  }
  DateTime2.fromDate = function(date) {
    return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1e3);
  };
  DateTime2.prototype.getWeekday = function() {
    return dateutil.getWeekday(new Date(this.getTime()));
  };
  DateTime2.prototype.getTime = function() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();
  };
  DateTime2.prototype.getDay = function() {
    return this.day;
  };
  DateTime2.prototype.getMonth = function() {
    return this.month;
  };
  DateTime2.prototype.getYear = function() {
    return this.year;
  };
  DateTime2.prototype.addYears = function(years2) {
    this.year += years2;
  };
  DateTime2.prototype.addMonths = function(months2) {
    this.month += months2;
    if (this.month > 12) {
      var yearDiv = Math.floor(this.month / 12);
      var monthMod = pymod(this.month, 12);
      this.month = monthMod;
      this.year += yearDiv;
      if (this.month === 0) {
        this.month = 12;
        --this.year;
      }
    }
  };
  DateTime2.prototype.addWeekly = function(days2, wkst) {
    if (wkst > this.getWeekday()) {
      this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days2 * 7;
    } else {
      this.day += -(this.getWeekday() - wkst) + days2 * 7;
    }
    this.fixDay();
  };
  DateTime2.prototype.addDaily = function(days2) {
    this.day += days2;
    this.fixDay();
  };
  DateTime2.prototype.addHours = function(hours2, filtered, byhour) {
    if (filtered) {
      this.hour += Math.floor((23 - this.hour) / hours2) * hours2;
    }
    for (; ; ) {
      this.hour += hours2;
      var _a2 = divmod(this.hour, 24), dayDiv = _a2.div, hourMod = _a2.mod;
      if (dayDiv) {
        this.hour = hourMod;
        this.addDaily(dayDiv);
      }
      if (empty(byhour) || includes(byhour, this.hour))
        break;
    }
  };
  DateTime2.prototype.addMinutes = function(minutes2, filtered, byhour, byminute) {
    if (filtered) {
      this.minute += Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes2) * minutes2;
    }
    for (; ; ) {
      this.minute += minutes2;
      var _a2 = divmod(this.minute, 60), hourDiv = _a2.div, minuteMod = _a2.mod;
      if (hourDiv) {
        this.minute = minuteMod;
        this.addHours(hourDiv, false, byhour);
      }
      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute))) {
        break;
      }
    }
  };
  DateTime2.prototype.addSeconds = function(seconds2, filtered, byhour, byminute, bysecond) {
    if (filtered) {
      this.second += Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds2) * seconds2;
    }
    for (; ; ) {
      this.second += seconds2;
      var _a2 = divmod(this.second, 60), minuteDiv = _a2.div, secondMod = _a2.mod;
      if (minuteDiv) {
        this.second = secondMod;
        this.addMinutes(minuteDiv, false, byhour, byminute);
      }
      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute)) && (empty(bysecond) || includes(bysecond, this.second))) {
        break;
      }
    }
  };
  DateTime2.prototype.fixDay = function() {
    if (this.day <= 28) {
      return;
    }
    var daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];
    if (this.day <= daysinmonth) {
      return;
    }
    while (this.day > daysinmonth) {
      this.day -= daysinmonth;
      ++this.month;
      if (this.month === 13) {
        this.month = 1;
        ++this.year;
        if (this.year > dateutil.MAXYEAR) {
          return;
        }
      }
      daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];
    }
  };
  DateTime2.prototype.add = function(options, filtered) {
    var freq = options.freq, interval = options.interval, wkst = options.wkst, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
    switch (freq) {
      case Frequency.YEARLY:
        return this.addYears(interval);
      case Frequency.MONTHLY:
        return this.addMonths(interval);
      case Frequency.WEEKLY:
        return this.addWeekly(interval, wkst);
      case Frequency.DAILY:
        return this.addDaily(interval);
      case Frequency.HOURLY:
        return this.addHours(interval, filtered, byhour);
      case Frequency.MINUTELY:
        return this.addMinutes(interval, filtered, byhour, byminute);
      case Frequency.SECONDLY:
        return this.addSeconds(interval, filtered, byhour, byminute, bysecond);
    }
  };
  return DateTime2;
}(Time);

// node_modules/rrule/dist/esm/parseoptions.js
function initializeOptions(options) {
  var invalid = [];
  var keys2 = Object.keys(options);
  for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    if (!includes(defaultKeys, key))
      invalid.push(key);
    if (dateutil_default.isDate(options[key]) && !dateutil_default.isValidDate(options[key])) {
      invalid.push(key);
    }
  }
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign2({}, options);
}
function parseOptions(options) {
  var opts = __assign2(__assign2({}, DEFAULT_OPTIONS), initializeOptions(options));
  if (isPresent(opts.byeaster))
    opts.freq = RRule.YEARLY;
  if (!(isPresent(opts.freq) && RRule.FREQUENCIES[opts.freq])) {
    throw new Error("Invalid frequency: ".concat(opts.freq, " ").concat(options.freq));
  }
  if (!opts.dtstart)
    opts.dtstart = new Date(new Date().setMilliseconds(0));
  if (!isPresent(opts.wkst)) {
    opts.wkst = RRule.MO.weekday;
  } else if (isNumber2(opts.wkst)) {
  } else {
    opts.wkst = opts.wkst.weekday;
  }
  if (isPresent(opts.bysetpos)) {
    if (isNumber2(opts.bysetpos))
      opts.bysetpos = [opts.bysetpos];
    for (var i = 0; i < opts.bysetpos.length; i++) {
      var v = opts.bysetpos[i];
      if (v === 0 || !(v >= -366 && v <= 366)) {
        throw new Error("bysetpos must be between 1 and 366, or between -366 and -1");
      }
    }
  }
  if (!(Boolean(opts.byweekno) || notEmpty(opts.byweekno) || notEmpty(opts.byyearday) || Boolean(opts.bymonthday) || notEmpty(opts.bymonthday) || isPresent(opts.byweekday) || isPresent(opts.byeaster))) {
    switch (opts.freq) {
      case RRule.YEARLY:
        if (!opts.bymonth)
          opts.bymonth = opts.dtstart.getUTCMonth() + 1;
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.MONTHLY:
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.WEEKLY:
        opts.byweekday = [dateutil_default.getWeekday(opts.dtstart)];
        break;
    }
  }
  if (isPresent(opts.bymonth) && !isArray2(opts.bymonth)) {
    opts.bymonth = [opts.bymonth];
  }
  if (isPresent(opts.byyearday) && !isArray2(opts.byyearday) && isNumber2(opts.byyearday)) {
    opts.byyearday = [opts.byyearday];
  }
  if (!isPresent(opts.bymonthday)) {
    opts.bymonthday = [];
    opts.bynmonthday = [];
  } else if (isArray2(opts.bymonthday)) {
    var bymonthday = [];
    var bynmonthday = [];
    for (var i = 0; i < opts.bymonthday.length; i++) {
      var v = opts.bymonthday[i];
      if (v > 0) {
        bymonthday.push(v);
      } else if (v < 0) {
        bynmonthday.push(v);
      }
    }
    opts.bymonthday = bymonthday;
    opts.bynmonthday = bynmonthday;
  } else if (opts.bymonthday < 0) {
    opts.bynmonthday = [opts.bymonthday];
    opts.bymonthday = [];
  } else {
    opts.bynmonthday = [];
    opts.bymonthday = [opts.bymonthday];
  }
  if (isPresent(opts.byweekno) && !isArray2(opts.byweekno)) {
    opts.byweekno = [opts.byweekno];
  }
  if (!isPresent(opts.byweekday)) {
    opts.bynweekday = null;
  } else if (isNumber2(opts.byweekday)) {
    opts.byweekday = [opts.byweekday];
    opts.bynweekday = null;
  } else if (isWeekdayStr(opts.byweekday)) {
    opts.byweekday = [Weekday.fromStr(opts.byweekday).weekday];
    opts.bynweekday = null;
  } else if (opts.byweekday instanceof Weekday) {
    if (!opts.byweekday.n || opts.freq > RRule.MONTHLY) {
      opts.byweekday = [opts.byweekday.weekday];
      opts.bynweekday = null;
    } else {
      opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];
      opts.byweekday = null;
    }
  } else {
    var byweekday = [];
    var bynweekday = [];
    for (var i = 0; i < opts.byweekday.length; i++) {
      var wday = opts.byweekday[i];
      if (isNumber2(wday)) {
        byweekday.push(wday);
        continue;
      } else if (isWeekdayStr(wday)) {
        byweekday.push(Weekday.fromStr(wday).weekday);
        continue;
      }
      if (!wday.n || opts.freq > RRule.MONTHLY) {
        byweekday.push(wday.weekday);
      } else {
        bynweekday.push([wday.weekday, wday.n]);
      }
    }
    opts.byweekday = notEmpty(byweekday) ? byweekday : null;
    opts.bynweekday = notEmpty(bynweekday) ? bynweekday : null;
  }
  if (!isPresent(opts.byhour)) {
    opts.byhour = opts.freq < RRule.HOURLY ? [opts.dtstart.getUTCHours()] : null;
  } else if (isNumber2(opts.byhour)) {
    opts.byhour = [opts.byhour];
  }
  if (!isPresent(opts.byminute)) {
    opts.byminute = opts.freq < RRule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;
  } else if (isNumber2(opts.byminute)) {
    opts.byminute = [opts.byminute];
  }
  if (!isPresent(opts.bysecond)) {
    opts.bysecond = opts.freq < RRule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;
  } else if (isNumber2(opts.bysecond)) {
    opts.bysecond = [opts.bysecond];
  }
  return { parsedOptions: opts };
}
function buildTimeset(opts) {
  var millisecondModulo = opts.dtstart.getTime() % 1e3;
  if (!freqIsDailyOrGreater(opts.freq)) {
    return [];
  }
  var timeset = [];
  opts.byhour.forEach(function(hour) {
    opts.byminute.forEach(function(minute) {
      opts.bysecond.forEach(function(second) {
        timeset.push(new Time(hour, minute, second, millisecondModulo));
      });
    });
  });
  return timeset;
}

// node_modules/rrule/dist/esm/parsestring.js
function parseString(rfcString) {
  var options = rfcString.split("\n").map(parseLine).filter(function(x) {
    return x !== null;
  });
  return __assign2(__assign2({}, options[0]), options[1]);
}
function parseDtstart(line) {
  var options = {};
  var dtstartWithZone = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\s]+)/i.exec(line);
  if (!dtstartWithZone) {
    return options;
  }
  var tzid = dtstartWithZone[1], dtstart = dtstartWithZone[2];
  if (tzid) {
    options.tzid = tzid;
  }
  options.dtstart = dateutil_default.untilStringToDate(dtstart);
  return options;
}
function parseLine(rfcString) {
  rfcString = rfcString.replace(/^\s+|\s+$/, "");
  if (!rfcString.length)
    return null;
  var header = /^([A-Z]+?)[:;]/.exec(rfcString.toUpperCase());
  if (!header) {
    return parseRrule(rfcString);
  }
  var key = header[1];
  switch (key.toUpperCase()) {
    case "RRULE":
    case "EXRULE":
      return parseRrule(rfcString);
    case "DTSTART":
      return parseDtstart(rfcString);
    default:
      throw new Error("Unsupported RFC prop ".concat(key, " in ").concat(rfcString));
  }
}
function parseRrule(line) {
  var strippedLine = line.replace(/^RRULE:/i, "");
  var options = parseDtstart(strippedLine);
  var attrs = line.replace(/^(?:RRULE|EXRULE):/i, "").split(";");
  attrs.forEach(function(attr) {
    var _a2 = attr.split("="), key = _a2[0], value = _a2[1];
    switch (key.toUpperCase()) {
      case "FREQ":
        options.freq = Frequency[value.toUpperCase()];
        break;
      case "WKST":
        options.wkst = Days[value.toUpperCase()];
        break;
      case "COUNT":
      case "INTERVAL":
      case "BYSETPOS":
      case "BYMONTH":
      case "BYMONTHDAY":
      case "BYYEARDAY":
      case "BYWEEKNO":
      case "BYHOUR":
      case "BYMINUTE":
      case "BYSECOND":
        var num = parseNumber(value);
        var optionKey = key.toLowerCase();
        options[optionKey] = num;
        break;
      case "BYWEEKDAY":
      case "BYDAY":
        options.byweekday = parseWeekday2(value);
        break;
      case "DTSTART":
      case "TZID":
        var dtstart = parseDtstart(line);
        options.tzid = dtstart.tzid;
        options.dtstart = dtstart.dtstart;
        break;
      case "UNTIL":
        options.until = dateutil_default.untilStringToDate(value);
        break;
      case "BYEASTER":
        options.byeaster = Number(value);
        break;
      default:
        throw new Error("Unknown RRULE property '" + key + "'");
    }
  });
  return options;
}
function parseNumber(value) {
  if (value.indexOf(",") !== -1) {
    var values = value.split(",");
    return values.map(parseIndividualNumber);
  }
  return parseIndividualNumber(value);
}
function parseIndividualNumber(value) {
  if (/^[+-]?\d+$/.test(value)) {
    return Number(value);
  }
  return value;
}
function parseWeekday2(value) {
  var days2 = value.split(",");
  return days2.map(function(day) {
    if (day.length === 2) {
      return Days[day];
    }
    var parts = day.match(/^([+-]?\d{1,2})([A-Z]{2})$/);
    if (!parts || parts.length < 3) {
      throw new SyntaxError("Invalid weekday string: ".concat(day));
    }
    var n = Number(parts[1]);
    var wdaypart = parts[2];
    var wday = Days[wdaypart].weekday;
    return new Weekday(wday, n);
  });
}

// node_modules/rrule/dist/esm/datewithzone.js
var DateWithZone = function() {
  function DateWithZone2(date, tzid) {
    if (isNaN(date.getTime())) {
      throw new RangeError("Invalid date passed to DateWithZone");
    }
    this.date = date;
    this.tzid = tzid;
  }
  Object.defineProperty(DateWithZone2.prototype, "isUTC", {
    get: function() {
      return !this.tzid || this.tzid.toUpperCase() === "UTC";
    },
    enumerable: false,
    configurable: true
  });
  DateWithZone2.prototype.toString = function() {
    var datestr = dateutil_default.timeToUntilString(this.date.getTime(), this.isUTC);
    if (!this.isUTC) {
      return ";TZID=".concat(this.tzid, ":").concat(datestr);
    }
    return ":".concat(datestr);
  };
  DateWithZone2.prototype.getTime = function() {
    return this.date.getTime();
  };
  DateWithZone2.prototype.rezonedDate = function() {
    var _a2;
    if (this.isUTC) {
      return this.date;
    }
    var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    var dateInLocalTZ = new Date(this.date.toLocaleString(void 0, { timeZone: localTimeZone }));
    var dateInTargetTZ = new Date(this.date.toLocaleString(void 0, { timeZone: (_a2 = this.tzid) !== null && _a2 !== void 0 ? _a2 : "UTC" }));
    var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();
    return new Date(this.date.getTime() - tzOffset);
  };
  return DateWithZone2;
}();

// node_modules/rrule/dist/esm/optionstostring.js
function optionsToString(options) {
  var rrule = [];
  var dtstart = "";
  var keys2 = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS);
  for (var i = 0; i < keys2.length; i++) {
    if (keys2[i] === "tzid")
      continue;
    if (!includes(defaultKeys2, keys2[i]))
      continue;
    var key = keys2[i].toUpperCase();
    var value = options[keys2[i]];
    var outValue = "";
    if (!isPresent(value) || isArray2(value) && !value.length)
      continue;
    switch (key) {
      case "FREQ":
        outValue = RRule.FREQUENCIES[options.freq];
        break;
      case "WKST":
        if (isNumber2(value)) {
          outValue = new Weekday(value).toString();
        } else {
          outValue = value.toString();
        }
        break;
      case "BYWEEKDAY":
        key = "BYDAY";
        outValue = toArray2(value).map(function(wday) {
          if (wday instanceof Weekday) {
            return wday;
          }
          if (isArray2(wday)) {
            return new Weekday(wday[0], wday[1]);
          }
          return new Weekday(wday);
        }).toString();
        break;
      case "DTSTART":
        dtstart = buildDtstart(value, options.tzid);
        break;
      case "UNTIL":
        outValue = dateutil_default.timeToUntilString(value, !options.tzid);
        break;
      default:
        if (isArray2(value)) {
          var strValues = [];
          for (var j = 0; j < value.length; j++) {
            strValues[j] = String(value[j]);
          }
          outValue = strValues.toString();
        } else {
          outValue = String(value);
        }
    }
    if (outValue) {
      rrule.push([key, outValue]);
    }
  }
  var rules = rrule.map(function(_a2) {
    var key2 = _a2[0], value2 = _a2[1];
    return "".concat(key2, "=").concat(value2.toString());
  }).join(";");
  var ruleString = "";
  if (rules !== "") {
    ruleString = "RRULE:".concat(rules);
  }
  return [dtstart, ruleString].filter(function(x) {
    return !!x;
  }).join("\n");
}
function buildDtstart(dtstart, tzid) {
  if (!dtstart) {
    return "";
  }
  return "DTSTART" + new DateWithZone(new Date(dtstart), tzid).toString();
}

// node_modules/rrule/dist/esm/cache.js
function argsMatch(left, right) {
  if (Array.isArray(left)) {
    if (!Array.isArray(right))
      return false;
    if (left.length !== right.length)
      return false;
    return left.every(function(date, i) {
      return date.getTime() === right[i].getTime();
    });
  }
  if (left instanceof Date) {
    return right instanceof Date && left.getTime() === right.getTime();
  }
  return left === right;
}
var Cache = function() {
  function Cache2() {
    this.all = false;
    this.before = [];
    this.after = [];
    this.between = [];
  }
  Cache2.prototype._cacheAdd = function(what, value, args) {
    if (value) {
      value = value instanceof Date ? dateutil_default.clone(value) : dateutil_default.cloneDates(value);
    }
    if (what === "all") {
      this.all = value;
    } else {
      args._value = value;
      this[what].push(args);
    }
  };
  Cache2.prototype._cacheGet = function(what, args) {
    var cached = false;
    var argsKeys = args ? Object.keys(args) : [];
    var findCacheDiff = function(item2) {
      for (var i2 = 0; i2 < argsKeys.length; i2++) {
        var key = argsKeys[i2];
        if (!argsMatch(args[key], item2[key])) {
          return true;
        }
      }
      return false;
    };
    var cachedObject = this[what];
    if (what === "all") {
      cached = this.all;
    } else if (isArray2(cachedObject)) {
      for (var i = 0; i < cachedObject.length; i++) {
        var item = cachedObject[i];
        if (argsKeys.length && findCacheDiff(item))
          continue;
        cached = item._value;
        break;
      }
    }
    if (!cached && this.all) {
      var iterResult = new iterresult_default(what, args);
      for (var i = 0; i < this.all.length; i++) {
        if (!iterResult.accept(this.all[i]))
          break;
      }
      cached = iterResult.getValue();
      this._cacheAdd(what, cached, args);
    }
    return isArray2(cached) ? dateutil_default.cloneDates(cached) : cached instanceof Date ? dateutil_default.clone(cached) : cached;
  };
  return Cache2;
}();

// node_modules/rrule/dist/esm/masks.js
var M365MASK = __spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3([], repeat(1, 31), true), repeat(2, 28), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M366MASK = __spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3([], repeat(1, 31), true), repeat(2, 29), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M28 = range(1, 29);
var M29 = range(1, 30);
var M30 = range(1, 31);
var M31 = range(1, 32);
var MDAY366MASK = __spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3([], M31, true), M29, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var MDAY365MASK = __spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3([], M31, true), M28, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var NM28 = range(-28, 0);
var NM29 = range(-29, 0);
var NM30 = range(-30, 0);
var NM31 = range(-31, 0);
var NMDAY366MASK = __spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3([], NM31, true), NM29, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var NMDAY365MASK = __spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3(__spreadArray3([], NM31, true), NM28, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
var WDAYMASK = function() {
  var wdaymask = [];
  for (var i = 0; i < 55; i++)
    wdaymask = wdaymask.concat(range(7));
  return wdaymask;
}();

// node_modules/rrule/dist/esm/iterinfo/yearinfo.js
function rebuildYear(year, options) {
  var firstyday = new Date(Date.UTC(year, 0, 1));
  var yearlen = dateutil_default.isLeapYear(year) ? 366 : 365;
  var nextyearlen = dateutil_default.isLeapYear(year + 1) ? 366 : 365;
  var yearordinal = dateutil_default.toOrdinal(firstyday);
  var yearweekday = dateutil_default.getWeekday(firstyday);
  var result = __assign2(__assign2({ yearlen, nextyearlen, yearordinal, yearweekday }, baseYearMasks(year)), { wnomask: null });
  if (empty(options.byweekno)) {
    return result;
  }
  result.wnomask = repeat(0, yearlen + 7);
  var firstwkst;
  var wyearlen;
  var no1wkst = firstwkst = pymod(7 - yearweekday + options.wkst, 7);
  if (no1wkst >= 4) {
    no1wkst = 0;
    wyearlen = result.yearlen + pymod(yearweekday - options.wkst, 7);
  } else {
    wyearlen = yearlen - no1wkst;
  }
  var div = Math.floor(wyearlen / 7);
  var mod2 = pymod(wyearlen, 7);
  var numweeks = Math.floor(div + mod2 / 4);
  for (var j = 0; j < options.byweekno.length; j++) {
    var n = options.byweekno[j];
    if (n < 0) {
      n += numweeks + 1;
    }
    if (!(n > 0 && n <= numweeks)) {
      continue;
    }
    var i = void 0;
    if (n > 1) {
      i = no1wkst + (n - 1) * 7;
      if (no1wkst !== firstwkst) {
        i -= 7 - firstwkst;
      }
    } else {
      i = no1wkst;
    }
    for (var k = 0; k < 7; k++) {
      result.wnomask[i] = 1;
      i++;
      if (result.wdaymask[i] === options.wkst)
        break;
    }
  }
  if (includes(options.byweekno, 1)) {
    var i = no1wkst + numweeks * 7;
    if (no1wkst !== firstwkst)
      i -= 7 - firstwkst;
    if (i < yearlen) {
      for (var j = 0; j < 7; j++) {
        result.wnomask[i] = 1;
        i += 1;
        if (result.wdaymask[i] === options.wkst)
          break;
      }
    }
  }
  if (no1wkst) {
    var lnumweeks = void 0;
    if (!includes(options.byweekno, -1)) {
      var lyearweekday = dateutil_default.getWeekday(new Date(Date.UTC(year - 1, 0, 1)));
      var lno1wkst = pymod(7 - lyearweekday.valueOf() + options.wkst, 7);
      var lyearlen = dateutil_default.isLeapYear(year - 1) ? 366 : 365;
      var weekst = void 0;
      if (lno1wkst >= 4) {
        lno1wkst = 0;
        weekst = lyearlen + pymod(lyearweekday - options.wkst, 7);
      } else {
        weekst = yearlen - no1wkst;
      }
      lnumweeks = Math.floor(52 + pymod(weekst, 7) / 4);
    } else {
      lnumweeks = -1;
    }
    if (includes(options.byweekno, lnumweeks)) {
      for (var i = 0; i < no1wkst; i++)
        result.wnomask[i] = 1;
    }
  }
  return result;
}
function baseYearMasks(year) {
  var yearlen = dateutil_default.isLeapYear(year) ? 366 : 365;
  var firstyday = new Date(Date.UTC(year, 0, 1));
  var wday = dateutil_default.getWeekday(firstyday);
  if (yearlen === 365) {
    return {
      mmask: M365MASK,
      mdaymask: MDAY365MASK,
      nmdaymask: NMDAY365MASK,
      wdaymask: WDAYMASK.slice(wday),
      mrange: M365RANGE
    };
  }
  return {
    mmask: M366MASK,
    mdaymask: MDAY366MASK,
    nmdaymask: NMDAY366MASK,
    wdaymask: WDAYMASK.slice(wday),
    mrange: M366RANGE
  };
}

// node_modules/rrule/dist/esm/iterinfo/monthinfo.js
function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {
  var result = {
    lastyear: year,
    lastmonth: month,
    nwdaymask: []
  };
  var ranges = [];
  if (options.freq === RRule.YEARLY) {
    if (empty(options.bymonth)) {
      ranges = [[0, yearlen]];
    } else {
      for (var j = 0; j < options.bymonth.length; j++) {
        month = options.bymonth[j];
        ranges.push(mrange.slice(month - 1, month + 1));
      }
    }
  } else if (options.freq === RRule.MONTHLY) {
    ranges = [mrange.slice(month - 1, month + 1)];
  }
  if (empty(ranges)) {
    return result;
  }
  result.nwdaymask = repeat(0, yearlen);
  for (var j = 0; j < ranges.length; j++) {
    var rang = ranges[j];
    var first = rang[0];
    var last = rang[1] - 1;
    for (var k = 0; k < options.bynweekday.length; k++) {
      var i = void 0;
      var _a2 = options.bynweekday[k], wday = _a2[0], n = _a2[1];
      if (n < 0) {
        i = last + (n + 1) * 7;
        i -= pymod(wdaymask[i] - wday, 7);
      } else {
        i = first + (n - 1) * 7;
        i += pymod(7 - wdaymask[i] + wday, 7);
      }
      if (first <= i && i <= last)
        result.nwdaymask[i] = 1;
    }
  }
  return result;
}

// node_modules/rrule/dist/esm/iterinfo/easter.js
function easter(y, offset2) {
  if (offset2 === void 0) {
    offset2 = 0;
  }
  var a = y % 19;
  var b = Math.floor(y / 100);
  var c = y % 100;
  var d = Math.floor(b / 4);
  var e = b % 4;
  var f = Math.floor((b + 8) / 25);
  var g = Math.floor((b - f + 1) / 3);
  var h = Math.floor(19 * a + b - d - g + 15) % 30;
  var i = Math.floor(c / 4);
  var k = c % 4;
  var l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;
  var m = Math.floor((a + 11 * h + 22 * l) / 451);
  var month = Math.floor((h + l - 7 * m + 114) / 31);
  var day = (h + l - 7 * m + 114) % 31 + 1;
  var date = Date.UTC(y, month - 1, day + offset2);
  var yearStart = Date.UTC(y, 0, 1);
  return [Math.ceil((date - yearStart) / (1e3 * 60 * 60 * 24))];
}

// node_modules/rrule/dist/esm/iterinfo/index.js
var Iterinfo = function() {
  function Iterinfo2(options) {
    this.options = options;
  }
  Iterinfo2.prototype.rebuild = function(year, month) {
    var options = this.options;
    if (year !== this.lastyear) {
      this.yearinfo = rebuildYear(year, options);
    }
    if (notEmpty(options.bynweekday) && (month !== this.lastmonth || year !== this.lastyear)) {
      var _a2 = this.yearinfo, yearlen = _a2.yearlen, mrange = _a2.mrange, wdaymask = _a2.wdaymask;
      this.monthinfo = rebuildMonth(year, month, yearlen, mrange, wdaymask, options);
    }
    if (isPresent(options.byeaster)) {
      this.eastermask = easter(year, options.byeaster);
    }
  };
  Object.defineProperty(Iterinfo2.prototype, "lastyear", {
    get: function() {
      return this.monthinfo ? this.monthinfo.lastyear : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "lastmonth", {
    get: function() {
      return this.monthinfo ? this.monthinfo.lastmonth : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "yearlen", {
    get: function() {
      return this.yearinfo.yearlen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "yearordinal", {
    get: function() {
      return this.yearinfo.yearordinal;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mrange", {
    get: function() {
      return this.yearinfo.mrange;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "wdaymask", {
    get: function() {
      return this.yearinfo.wdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mmask", {
    get: function() {
      return this.yearinfo.mmask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "wnomask", {
    get: function() {
      return this.yearinfo.wnomask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nwdaymask", {
    get: function() {
      return this.monthinfo ? this.monthinfo.nwdaymask : [];
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nextyearlen", {
    get: function() {
      return this.yearinfo.nextyearlen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mdaymask", {
    get: function() {
      return this.yearinfo.mdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nmdaymask", {
    get: function() {
      return this.yearinfo.nmdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Iterinfo2.prototype.ydayset = function() {
    return [range(this.yearlen), 0, this.yearlen];
  };
  Iterinfo2.prototype.mdayset = function(_4, month) {
    var start = this.mrange[month - 1];
    var end = this.mrange[month];
    var set2 = repeat(null, this.yearlen);
    for (var i = start; i < end; i++)
      set2[i] = i;
    return [set2, start, end];
  };
  Iterinfo2.prototype.wdayset = function(year, month, day) {
    var set2 = repeat(null, this.yearlen + 7);
    var i = dateutil_default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;
    var start = i;
    for (var j = 0; j < 7; j++) {
      set2[i] = i;
      ++i;
      if (this.wdaymask[i] === this.options.wkst)
        break;
    }
    return [set2, start, i];
  };
  Iterinfo2.prototype.ddayset = function(year, month, day) {
    var set2 = repeat(null, this.yearlen);
    var i = dateutil_default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;
    set2[i] = i;
    return [set2, i, i + 1];
  };
  Iterinfo2.prototype.htimeset = function(hour, _4, second, millisecond) {
    var _this = this;
    var set2 = [];
    this.options.byminute.forEach(function(minute) {
      set2 = set2.concat(_this.mtimeset(hour, minute, second, millisecond));
    });
    dateutil_default.sort(set2);
    return set2;
  };
  Iterinfo2.prototype.mtimeset = function(hour, minute, _4, millisecond) {
    var set2 = this.options.bysecond.map(function(second) {
      return new Time(hour, minute, second, millisecond);
    });
    dateutil_default.sort(set2);
    return set2;
  };
  Iterinfo2.prototype.stimeset = function(hour, minute, second, millisecond) {
    return [new Time(hour, minute, second, millisecond)];
  };
  Iterinfo2.prototype.getdayset = function(freq) {
    switch (freq) {
      case Frequency.YEARLY:
        return this.ydayset.bind(this);
      case Frequency.MONTHLY:
        return this.mdayset.bind(this);
      case Frequency.WEEKLY:
        return this.wdayset.bind(this);
      case Frequency.DAILY:
        return this.ddayset.bind(this);
      default:
        return this.ddayset.bind(this);
    }
  };
  Iterinfo2.prototype.gettimeset = function(freq) {
    switch (freq) {
      case Frequency.HOURLY:
        return this.htimeset.bind(this);
      case Frequency.MINUTELY:
        return this.mtimeset.bind(this);
      case Frequency.SECONDLY:
        return this.stimeset.bind(this);
    }
  };
  return Iterinfo2;
}();
var iterinfo_default = Iterinfo;

// node_modules/rrule/dist/esm/iter/poslist.js
function buildPoslist(bysetpos, timeset, start, end, ii, dayset) {
  var poslist = [];
  for (var j = 0; j < bysetpos.length; j++) {
    var daypos = void 0;
    var timepos = void 0;
    var pos = bysetpos[j];
    if (pos < 0) {
      daypos = Math.floor(pos / timeset.length);
      timepos = pymod(pos, timeset.length);
    } else {
      daypos = Math.floor((pos - 1) / timeset.length);
      timepos = pymod(pos - 1, timeset.length);
    }
    var tmp = [];
    for (var k = start; k < end; k++) {
      var val = dayset[k];
      if (!isPresent(val))
        continue;
      tmp.push(val);
    }
    var i = void 0;
    if (daypos < 0) {
      i = tmp.slice(daypos)[0];
    } else {
      i = tmp[daypos];
    }
    var time = timeset[timepos];
    var date = dateutil_default.fromOrdinal(ii.yearordinal + i);
    var res = dateutil_default.combine(date, time);
    if (!includes(poslist, res))
      poslist.push(res);
  }
  dateutil_default.sort(poslist);
  return poslist;
}

// node_modules/rrule/dist/esm/iter/index.js
function iter(iterResult, options) {
  var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;
  var count = options.count;
  if (count === 0 || interval === 0) {
    return emitResult(iterResult);
  }
  var counterDate = DateTime.fromDate(dtstart);
  var ii = new iterinfo_default(options);
  ii.rebuild(counterDate.year, counterDate.month);
  var timeset = makeTimeset(ii, counterDate, options);
  for (; ; ) {
    var _a2 = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a2[0], start = _a2[1], end = _a2[2];
    var filtered = removeFilteredDays(dayset, start, end, ii, options);
    if (notEmpty(bysetpos)) {
      var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);
      for (var j = 0; j < poslist.length; j++) {
        var res = poslist[j];
        if (until && res > until) {
          return emitResult(iterResult);
        }
        if (res >= dtstart) {
          var rezonedDate = rezoneIfNeeded(res, options);
          if (!iterResult.accept(rezonedDate)) {
            return emitResult(iterResult);
          }
          if (count) {
            --count;
            if (!count) {
              return emitResult(iterResult);
            }
          }
        }
      }
    } else {
      for (var j = start; j < end; j++) {
        var currentDay = dayset[j];
        if (!isPresent(currentDay)) {
          continue;
        }
        var date = dateutil_default.fromOrdinal(ii.yearordinal + currentDay);
        for (var k = 0; k < timeset.length; k++) {
          var time = timeset[k];
          var res = dateutil_default.combine(date, time);
          if (until && res > until) {
            return emitResult(iterResult);
          }
          if (res >= dtstart) {
            var rezonedDate = rezoneIfNeeded(res, options);
            if (!iterResult.accept(rezonedDate)) {
              return emitResult(iterResult);
            }
            if (count) {
              --count;
              if (!count) {
                return emitResult(iterResult);
              }
            }
          }
        }
      }
    }
    if (options.interval === 0) {
      return emitResult(iterResult);
    }
    counterDate.add(options, filtered);
    if (counterDate.year > dateutil_default.MAXYEAR) {
      return emitResult(iterResult);
    }
    if (!freqIsDailyOrGreater(freq)) {
      timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);
    }
    ii.rebuild(counterDate.year, counterDate.month);
  }
}
function isFiltered(ii, currentDay, options) {
  var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;
  return notEmpty(bymonth) && !includes(bymonth, ii.mmask[currentDay]) || notEmpty(byweekno) && !ii.wnomask[currentDay] || notEmpty(byweekday) && !includes(byweekday, ii.wdaymask[currentDay]) || notEmpty(ii.nwdaymask) && !ii.nwdaymask[currentDay] || byeaster !== null && !includes(ii.eastermask, currentDay) || (notEmpty(bymonthday) || notEmpty(bynmonthday)) && !includes(bymonthday, ii.mdaymask[currentDay]) && !includes(bynmonthday, ii.nmdaymask[currentDay]) || notEmpty(byyearday) && (currentDay < ii.yearlen && !includes(byyearday, currentDay + 1) && !includes(byyearday, -ii.yearlen + currentDay) || currentDay >= ii.yearlen && !includes(byyearday, currentDay + 1 - ii.yearlen) && !includes(byyearday, -ii.nextyearlen + currentDay - ii.yearlen));
}
function rezoneIfNeeded(date, options) {
  return new DateWithZone(date, options.tzid).rezonedDate();
}
function emitResult(iterResult) {
  return iterResult.getValue();
}
function removeFilteredDays(dayset, start, end, ii, options) {
  var filtered = false;
  for (var dayCounter = start; dayCounter < end; dayCounter++) {
    var currentDay = dayset[dayCounter];
    filtered = isFiltered(ii, currentDay, options);
    if (filtered)
      dayset[currentDay] = null;
  }
  return filtered;
}
function makeTimeset(ii, counterDate, options) {
  var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
  if (freqIsDailyOrGreater(freq)) {
    return buildTimeset(options);
  }
  if (freq >= RRule.HOURLY && notEmpty(byhour) && !includes(byhour, counterDate.hour) || freq >= RRule.MINUTELY && notEmpty(byminute) && !includes(byminute, counterDate.minute) || freq >= RRule.SECONDLY && notEmpty(bysecond) && !includes(bysecond, counterDate.second)) {
    return [];
  }
  return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);
}

// node_modules/rrule/dist/esm/rrule.js
var Days = {
  MO: new Weekday(0),
  TU: new Weekday(1),
  WE: new Weekday(2),
  TH: new Weekday(3),
  FR: new Weekday(4),
  SA: new Weekday(5),
  SU: new Weekday(6)
};
var DEFAULT_OPTIONS = {
  freq: Frequency.YEARLY,
  dtstart: null,
  interval: 1,
  wkst: Days.MO,
  count: null,
  until: null,
  tzid: null,
  bysetpos: null,
  bymonth: null,
  bymonthday: null,
  bynmonthday: null,
  byyearday: null,
  byweekno: null,
  byweekday: null,
  bynweekday: null,
  byhour: null,
  byminute: null,
  bysecond: null,
  byeaster: null
};
var defaultKeys = Object.keys(DEFAULT_OPTIONS);
var RRule = function() {
  function RRule2(options, noCache) {
    if (options === void 0) {
      options = {};
    }
    if (noCache === void 0) {
      noCache = false;
    }
    this._cache = noCache ? null : new Cache();
    this.origOptions = initializeOptions(options);
    var parsedOptions = parseOptions(options).parsedOptions;
    this.options = parsedOptions;
  }
  RRule2.parseText = function(text, language) {
    return parseText(text, language);
  };
  RRule2.fromText = function(text, language) {
    return fromText(text, language);
  };
  RRule2.fromString = function(str) {
    return new RRule2(RRule2.parseString(str) || void 0);
  };
  RRule2.prototype._iter = function(iterResult) {
    return iter(iterResult, this.options);
  };
  RRule2.prototype._cacheGet = function(what, args) {
    if (!this._cache)
      return false;
    return this._cache._cacheGet(what, args);
  };
  RRule2.prototype._cacheAdd = function(what, value, args) {
    if (!this._cache)
      return;
    return this._cache._cacheAdd(what, value, args);
  };
  RRule2.prototype.all = function(iterator) {
    if (iterator) {
      return this._iter(new callbackiterresult_default("all", {}, iterator));
    }
    var result = this._cacheGet("all");
    if (result === false) {
      result = this._iter(new iterresult_default("all", {}));
      this._cacheAdd("all", result);
    }
    return result;
  };
  RRule2.prototype.between = function(after, before, inc, iterator) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(after) || !dateutil_default.isValidDate(before)) {
      throw new Error("Invalid date passed in to RRule.between");
    }
    var args = {
      before,
      after,
      inc
    };
    if (iterator) {
      return this._iter(new callbackiterresult_default("between", args, iterator));
    }
    var result = this._cacheGet("between", args);
    if (result === false) {
      result = this._iter(new iterresult_default("between", args));
      this._cacheAdd("between", result, args);
    }
    return result;
  };
  RRule2.prototype.before = function(dt, inc) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(dt)) {
      throw new Error("Invalid date passed in to RRule.before");
    }
    var args = { dt, inc };
    var result = this._cacheGet("before", args);
    if (result === false) {
      result = this._iter(new iterresult_default("before", args));
      this._cacheAdd("before", result, args);
    }
    return result;
  };
  RRule2.prototype.after = function(dt, inc) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(dt)) {
      throw new Error("Invalid date passed in to RRule.after");
    }
    var args = { dt, inc };
    var result = this._cacheGet("after", args);
    if (result === false) {
      result = this._iter(new iterresult_default("after", args));
      this._cacheAdd("after", result, args);
    }
    return result;
  };
  RRule2.prototype.count = function() {
    return this.all().length;
  };
  RRule2.prototype.toString = function() {
    return optionsToString(this.origOptions);
  };
  RRule2.prototype.toText = function(gettext, language, dateFormatter) {
    return toText(this, gettext, language, dateFormatter);
  };
  RRule2.prototype.isFullyConvertibleToText = function() {
    return isFullyConvertible(this);
  };
  RRule2.prototype.clone = function() {
    return new RRule2(this.origOptions);
  };
  RRule2.FREQUENCIES = [
    "YEARLY",
    "MONTHLY",
    "WEEKLY",
    "DAILY",
    "HOURLY",
    "MINUTELY",
    "SECONDLY"
  ];
  RRule2.YEARLY = Frequency.YEARLY;
  RRule2.MONTHLY = Frequency.MONTHLY;
  RRule2.WEEKLY = Frequency.WEEKLY;
  RRule2.DAILY = Frequency.DAILY;
  RRule2.HOURLY = Frequency.HOURLY;
  RRule2.MINUTELY = Frequency.MINUTELY;
  RRule2.SECONDLY = Frequency.SECONDLY;
  RRule2.MO = Days.MO;
  RRule2.TU = Days.TU;
  RRule2.WE = Days.WE;
  RRule2.TH = Days.TH;
  RRule2.FR = Days.FR;
  RRule2.SA = Days.SA;
  RRule2.SU = Days.SU;
  RRule2.parseString = parseString;
  RRule2.optionsToString = optionsToString;
  return RRule2;
}();

// node_modules/rrule/dist/esm/iterset.js
function iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {
  var _exdateHash = {};
  var _accept = iterResult.accept;
  function evalExdate(after, before) {
    _exrule.forEach(function(rrule) {
      rrule.between(after, before, true).forEach(function(date) {
        _exdateHash[Number(date)] = true;
      });
    });
  }
  _exdate.forEach(function(date) {
    var zonedDate2 = new DateWithZone(date, tzid).rezonedDate();
    _exdateHash[Number(zonedDate2)] = true;
  });
  iterResult.accept = function(date) {
    var dt = Number(date);
    if (isNaN(dt))
      return _accept.call(this, date);
    if (!_exdateHash[dt]) {
      evalExdate(new Date(dt - 1), new Date(dt + 1));
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
    }
    return true;
  };
  if (iterResult.method === "between") {
    evalExdate(iterResult.args.after, iterResult.args.before);
    iterResult.accept = function(date) {
      var dt = Number(date);
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
      return true;
    };
  }
  for (var i = 0; i < _rdate.length; i++) {
    var zonedDate = new DateWithZone(_rdate[i], tzid).rezonedDate();
    if (!iterResult.accept(new Date(zonedDate.getTime())))
      break;
  }
  _rrule.forEach(function(rrule) {
    iter(iterResult, rrule.options);
  });
  var res = iterResult._result;
  dateutil_default.sort(res);
  switch (iterResult.method) {
    case "all":
    case "between":
      return res;
    case "before":
      return res.length && res[res.length - 1] || null;
    case "after":
    default:
      return res.length && res[0] || null;
  }
}

// node_modules/rrule/dist/esm/rrulestr.js
var DEFAULT_OPTIONS2 = {
  dtstart: null,
  cache: false,
  unfold: false,
  forceset: false,
  compatible: false,
  tzid: null
};
function parseInput(s, options) {
  var rrulevals = [];
  var rdatevals = [];
  var exrulevals = [];
  var exdatevals = [];
  var parsedDtstart = parseDtstart(s);
  var dtstart = parsedDtstart.dtstart;
  var tzid = parsedDtstart.tzid;
  var lines = splitIntoLines(s, options.unfold);
  lines.forEach(function(line) {
    var _a2;
    if (!line)
      return;
    var _b = breakDownLine(line), name = _b.name, parms = _b.parms, value = _b.value;
    switch (name.toUpperCase()) {
      case "RRULE":
        if (parms.length) {
          throw new Error("unsupported RRULE parm: ".concat(parms.join(",")));
        }
        rrulevals.push(parseString(line));
        break;
      case "RDATE":
        var _c = (_a2 = /RDATE(?:;TZID=([^:=]+))?/i.exec(line)) !== null && _a2 !== void 0 ? _a2 : [], rdateTzid = _c[1];
        if (rdateTzid && !tzid) {
          tzid = rdateTzid;
        }
        rdatevals = rdatevals.concat(parseRDate(value, parms));
        break;
      case "EXRULE":
        if (parms.length) {
          throw new Error("unsupported EXRULE parm: ".concat(parms.join(",")));
        }
        exrulevals.push(parseString(value));
        break;
      case "EXDATE":
        exdatevals = exdatevals.concat(parseRDate(value, parms));
        break;
      case "DTSTART":
        break;
      default:
        throw new Error("unsupported property: " + name);
    }
  });
  return {
    dtstart,
    tzid,
    rrulevals,
    rdatevals,
    exrulevals,
    exdatevals
  };
}
function buildRule(s, options) {
  var _a2 = parseInput(s, options), rrulevals = _a2.rrulevals, rdatevals = _a2.rdatevals, exrulevals = _a2.exrulevals, exdatevals = _a2.exdatevals, dtstart = _a2.dtstart, tzid = _a2.tzid;
  var noCache = options.cache === false;
  if (options.compatible) {
    options.forceset = true;
    options.unfold = true;
  }
  if (options.forceset || rrulevals.length > 1 || rdatevals.length || exrulevals.length || exdatevals.length) {
    var rset_1 = new RRuleSet(noCache);
    rset_1.dtstart(dtstart);
    rset_1.tzid(tzid || void 0);
    rrulevals.forEach(function(val2) {
      rset_1.rrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    rdatevals.forEach(function(date) {
      rset_1.rdate(date);
    });
    exrulevals.forEach(function(val2) {
      rset_1.exrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    exdatevals.forEach(function(date) {
      rset_1.exdate(date);
    });
    if (options.compatible && options.dtstart)
      rset_1.rdate(dtstart);
    return rset_1;
  }
  var val = rrulevals[0] || {};
  return new RRule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);
}
function rrulestr(s, options) {
  if (options === void 0) {
    options = {};
  }
  return buildRule(s, initializeOptions2(options));
}
function groomRruleOptions(val, dtstart, tzid) {
  return __assign2(__assign2({}, val), { dtstart, tzid });
}
function initializeOptions2(options) {
  var invalid = [];
  var keys2 = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS2);
  keys2.forEach(function(key) {
    if (!includes(defaultKeys2, key))
      invalid.push(key);
  });
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign2(__assign2({}, DEFAULT_OPTIONS2), options);
}
function extractName(line) {
  if (line.indexOf(":") === -1) {
    return {
      name: "RRULE",
      value: line
    };
  }
  var _a2 = split(line, ":", 1), name = _a2[0], value = _a2[1];
  return {
    name,
    value
  };
}
function breakDownLine(line) {
  var _a2 = extractName(line), name = _a2.name, value = _a2.value;
  var parms = name.split(";");
  if (!parms)
    throw new Error("empty property name");
  return {
    name: parms[0].toUpperCase(),
    parms: parms.slice(1),
    value
  };
}
function splitIntoLines(s, unfold) {
  if (unfold === void 0) {
    unfold = false;
  }
  s = s && s.trim();
  if (!s)
    throw new Error("Invalid empty string");
  if (!unfold) {
    return s.split(/\s/);
  }
  var lines = s.split("\n");
  var i = 0;
  while (i < lines.length) {
    var line = lines[i] = lines[i].replace(/\s+$/g, "");
    if (!line) {
      lines.splice(i, 1);
    } else if (i > 0 && line[0] === " ") {
      lines[i - 1] += line.slice(1);
      lines.splice(i, 1);
    } else {
      i += 1;
    }
  }
  return lines;
}
function validateDateParm(parms) {
  parms.forEach(function(parm) {
    if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {
      throw new Error("unsupported RDATE/EXDATE parm: " + parm);
    }
  });
}
function parseRDate(rdateval, parms) {
  validateDateParm(parms);
  return rdateval.split(",").map(function(datestr) {
    return dateutil_default.untilStringToDate(datestr);
  });
}

// node_modules/rrule/dist/esm/rruleset.js
function createGetterSetter(fieldName) {
  var _this = this;
  return function(field) {
    if (field !== void 0) {
      _this["_".concat(fieldName)] = field;
    }
    if (_this["_".concat(fieldName)] !== void 0) {
      return _this["_".concat(fieldName)];
    }
    for (var i = 0; i < _this._rrule.length; i++) {
      var field_1 = _this._rrule[i].origOptions[fieldName];
      if (field_1) {
        return field_1;
      }
    }
  };
}
var RRuleSet = function(_super) {
  __extends2(RRuleSet2, _super);
  function RRuleSet2(noCache) {
    if (noCache === void 0) {
      noCache = false;
    }
    var _this = _super.call(this, {}, noCache) || this;
    _this.dtstart = createGetterSetter.apply(_this, ["dtstart"]);
    _this.tzid = createGetterSetter.apply(_this, ["tzid"]);
    _this._rrule = [];
    _this._rdate = [];
    _this._exrule = [];
    _this._exdate = [];
    return _this;
  }
  RRuleSet2.prototype._iter = function(iterResult) {
    return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());
  };
  RRuleSet2.prototype.rrule = function(rrule) {
    _addRule(rrule, this._rrule);
  };
  RRuleSet2.prototype.exrule = function(rrule) {
    _addRule(rrule, this._exrule);
  };
  RRuleSet2.prototype.rdate = function(date) {
    _addDate(date, this._rdate);
  };
  RRuleSet2.prototype.exdate = function(date) {
    _addDate(date, this._exdate);
  };
  RRuleSet2.prototype.rrules = function() {
    return this._rrule.map(function(e) {
      return rrulestr(e.toString());
    });
  };
  RRuleSet2.prototype.exrules = function() {
    return this._exrule.map(function(e) {
      return rrulestr(e.toString());
    });
  };
  RRuleSet2.prototype.rdates = function() {
    return this._rdate.map(function(e) {
      return new Date(e.getTime());
    });
  };
  RRuleSet2.prototype.exdates = function() {
    return this._exdate.map(function(e) {
      return new Date(e.getTime());
    });
  };
  RRuleSet2.prototype.valueOf = function() {
    var result = [];
    if (!this._rrule.length && this._dtstart) {
      result = result.concat(optionsToString({ dtstart: this._dtstart }));
    }
    this._rrule.forEach(function(rrule) {
      result = result.concat(rrule.toString().split("\n"));
    });
    this._exrule.forEach(function(exrule) {
      result = result.concat(exrule.toString().split("\n").map(function(line) {
        return line.replace(/^RRULE:/, "EXRULE:");
      }).filter(function(line) {
        return !/^DTSTART/.test(line);
      }));
    });
    if (this._rdate.length) {
      result.push(rdatesToString("RDATE", this._rdate, this.tzid()));
    }
    if (this._exdate.length) {
      result.push(rdatesToString("EXDATE", this._exdate, this.tzid()));
    }
    return result;
  };
  RRuleSet2.prototype.toString = function() {
    return this.valueOf().join("\n");
  };
  RRuleSet2.prototype.clone = function() {
    var rrs = new RRuleSet2(!!this._cache);
    this._rrule.forEach(function(rule) {
      return rrs.rrule(rule.clone());
    });
    this._exrule.forEach(function(rule) {
      return rrs.exrule(rule.clone());
    });
    this._rdate.forEach(function(date) {
      return rrs.rdate(new Date(date.getTime()));
    });
    this._exdate.forEach(function(date) {
      return rrs.exdate(new Date(date.getTime()));
    });
    return rrs;
  };
  return RRuleSet2;
}(RRule);
function _addRule(rrule, collection) {
  if (!(rrule instanceof RRule)) {
    throw new TypeError(String(rrule) + " is not RRule instance");
  }
  if (!includes(collection.map(String), String(rrule))) {
    collection.push(rrule);
  }
}
function _addDate(date, collection) {
  if (!(date instanceof Date)) {
    throw new TypeError(String(date) + " is not Date instance");
  }
  if (!includes(collection.map(Number), Number(date))) {
    collection.push(date);
    dateutil_default.sort(collection);
  }
}
function rdatesToString(param, rdates, tzid) {
  var isUTC = !tzid || tzid.toUpperCase() === "UTC";
  var header = isUTC ? "".concat(param, ":") : "".concat(param, ";TZID=").concat(tzid, ":");
  var dateString = rdates.map(function(rdate) {
    return dateutil_default.timeToUntilString(rdate.valueOf(), isUTC);
  }).join(",");
  return "".concat(header).concat(dateString);
}

// node_modules/@devexpress/dx-scheduler-core/dist/dx-scheduler-core.es.js
var __assign3 = function() {
  __assign3 = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __read3(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray4(to2, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to2.concat(ar || from2);
}
var computed = function(getters, viewName, baseComputed, defaultValue) {
  if (getters.currentView.name !== viewName && !!defaultValue) {
    return defaultValue;
  }
  return baseComputed(getters, viewName);
};
var toPercentage = function(value, total) {
  return value * 100 / total;
};
var createExcludedInterval = function(day, start) {
  var leftBound = moment_default(start.day(day));
  return [
    leftBound,
    moment_default(leftBound).hour(start.hour()).endOf("day")
  ];
};
var excludedIntervals = function(excludedDays, start) {
  return excludedDays.map(function(day) {
    return day === 0 ? 7 : day;
  }).sort(function(a, b) {
    return a - b;
  }).reduce(function(acc, day, i, allDays) {
    if (i && day === allDays[i - 1] + 1) {
      acc[acc.length - 1][1].day(day);
    } else {
      acc.push(createExcludedInterval(day, start));
    }
    return acc;
  }, []);
};
var inInterval = function(date, interval) {
  return date.isBetween(interval[0], interval[1], void 0, "[]");
};
var viewPredicate = function(appointment, left, right, excludedDays, removeAllDayAppointments) {
  if (excludedDays === void 0) {
    excludedDays = [];
  }
  if (removeAllDayAppointments === void 0) {
    removeAllDayAppointments = false;
  }
  var start = appointment.start, end = appointment.end;
  var isAppointmentInBoundary = end.isAfter(left) && start.isBefore(right);
  var isAppointmentInExcludedDays = !!excludedIntervals(excludedDays, moment_default(left)).find(function(interval) {
    return inInterval(start, interval) && inInterval(end, interval);
  });
  var considerAllDayAppointment = removeAllDayAppointments ? moment_default(end).diff(start, "hours") < 24 && !appointment.allDay : true;
  return isAppointmentInBoundary && !isAppointmentInExcludedDays && considerAllDayAppointment;
};
var calculateFirstDateOfWeek = function(currentDate, firstDayOfWeek, excludedDays) {
  if (excludedDays === void 0) {
    excludedDays = [];
  }
  var currentLocale = moment_default.locale();
  moment_default.updateLocale("tmp-locale", {
    week: { dow: firstDayOfWeek, doy: 1 }
  });
  var firstDateOfWeek = moment_default(currentDate).startOf("week");
  if (excludedDays.indexOf(firstDayOfWeek) !== -1) {
    excludedDays.slice().sort().forEach(function(day) {
      if (day === firstDateOfWeek.day()) {
        firstDateOfWeek.add(1, "days");
      }
    });
  }
  moment_default.locale(currentLocale);
  return firstDateOfWeek.toDate();
};
var getAppointmentStyle = function(_a2) {
  var top = _a2.top, left = _a2.left, width = _a2.width, height = _a2.height;
  var transform = "translateY(".concat(top, "px)");
  return {
    height,
    width: "".concat(width, "%"),
    transform,
    msTransform: transform,
    left: "".concat(left, "%"),
    position: "absolute"
  };
};
var expandRecurrenceAppointment = function(appointment, leftBound, rightBound) {
  var rightBoundUTC = moment_default(getUTCDate(rightBound)).toDate();
  var leftBoundUTC = moment_default(getUTCDate(leftBound)).toDate();
  var appointmentStartDate = moment_default(appointment.start).toDate();
  var options = __assign3(__assign3({}, RRule.parseString(appointment.rRule)), { dtstart: moment_default(getUTCDate(appointmentStartDate)).toDate() });
  var correctedOptions = options.until ? __assign3(__assign3({}, options), { until: moment_default(getUTCDate(options.until)).toDate() }) : options;
  var rruleSet = getRRuleSetWithExDates(appointment.exDate);
  rruleSet.rrule(new RRule(correctedOptions));
  var datesInBoundaries = rruleSet.between(leftBoundUTC, rightBoundUTC, true).map(formatDateToString);
  if (datesInBoundaries.length === 0)
    return [];
  var appointmentDuration = moment_default(appointment.end).diff(appointment.start, "minutes");
  return datesInBoundaries.map(function(startDate, index) {
    return __assign3(__assign3({}, appointment), { dataItem: __assign3(__assign3({}, appointment.dataItem), { startDate: moment_default(startDate).toDate(), endDate: moment_default(startDate).add(appointmentDuration, "minutes").toDate(), parentData: appointment.dataItem }), start: moment_default(startDate), end: moment_default(startDate).add(appointmentDuration, "minutes"), key: "".concat(appointment.key, "_rec_").concat(index) });
  });
};
var filterByViewBoundaries = function(appointment, leftBound, rightBound, excludedDays, removeAllDay) {
  var appointments2 = [appointment];
  if (appointment.rRule) {
    appointments2 = expandRecurrenceAppointment(appointment, leftBound, rightBound);
  }
  return appointments2.filter(function(appt) {
    return viewPredicate(appt, leftBound, rightBound, excludedDays, removeAllDay);
  });
};
var getUTCDate = function(date) {
  return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes());
};
var getRRuleSetWithExDates = function(exDate) {
  var rruleSet = new RRuleSet();
  if (exDate) {
    exDate.split(",").map(function(date) {
      var currentExDate = moment_default(date).toDate();
      rruleSet.exdate(moment_default(getUTCDate(currentExDate)).toDate());
    });
  }
  return rruleSet;
};
var formatDateToString = function(date) {
  return moment_default.utc(date).format("YYYY-MM-DDTHH:mm");
};
var addDateToKey = function(prevKey, momentDate) {
  return "".concat(prevKey, "_").concat(momentDate.toDate().toString());
};
var VERTICAL_TYPE = "vertical";
var HORIZONTAL_TYPE = "horizontal";
var SCROLL_OFFSET2 = 50;
var SCROLL_SPEED_PX = 15;
var SECONDS = "seconds";
var MINUTES = "minutes";
var HOURS = "hours";
var RESIZE_TOP = "resize-start";
var RESIZE_BOTTOM = "resize-end";
var POSITION_START = "start";
var POSITION_END = "end";
var AUTO_HEIGHT = "auto";
var DAY_OPTIONS = { day: "numeric" };
var WEEK_DAY_OPTIONS = { weekday: "short" };
var SHORT_MONTH_OPTIONS = { month: "short" };
var HOUR_MINUTE_OPTIONS = { hour: "numeric", minute: "numeric" };
var MONTH_YEAR_OPTIONS = { month: "long", year: "numeric" };
var DAY_SHORT_MONTH_OPTIONS = { day: "numeric", month: "short" };
var SHORT_MONTH_LONG_YEAR_OPTIONS = { month: "short", year: "numeric" };
var SHORT_MONTH_SHORT_YEAR_OPTIONS = { month: "short", year: "2-digit" };
var DAY_LONG_MONTH_LONG_YEAR_OPTIONS = {
  day: "numeric",
  month: "long",
  year: "numeric"
};
var DAY_SHORT_MONTH_LONG_YEAR_OPTIONS = {
  day: "numeric",
  month: "short",
  year: "numeric"
};
var DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS = {
  day: "numeric",
  month: "short",
  year: "2-digit"
};
var LONG_WEEK_DAY_OPTIONS = { weekday: "long" };
var LONG_MONTH_OPTIONS = { month: "long" };
var DAY_LONG_MONTH_OPTIONS = { day: "numeric", month: "long" };
var EMPTY_OPTIONS = {};
var RECURRENCE_EDIT_SCOPE = {
  ALL: "all",
  CURRENT_AND_FOLLOWING: "currentAndFollowing",
  CURRENT: "current"
};
var TOGGLE_APPOINTMENT_FORM_VISIBILITY = "toggleAppointmentFormVisibility";
var TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY = "toggleAppointmentTooltipVisibility";
var WEEKDAY_INTERVAL = "weekdayInterval";
var VERTICAL_VIEW_LEFT_OFFSET = 80;
var HORIZONTAL_VIEW_LEFT_OFFSET = 0;
var VERTICAL_GROUP_ORIENTATION = "Vertical";
var HORIZONTAL_GROUP_ORIENTATION = "Horizontal";
var VIEW_TYPES = {
  MONTH: "month",
  WEEK: "week",
  DAY: "day",
  ALL_DAY_PANEL: "allDayPanel"
};
var isMidnight = function(date) {
  var momentDate = moment_default(date);
  return momentDate.hours() === 0 && momentDate.minutes() === 0 && momentDate.seconds() === 0;
};
var calculateTextByDays = function(startViewDate2, endViewDate2, formatDate3, additionalOptions) {
  var momentStartViewDate = moment_default(startViewDate2);
  var momentEndViewDate = moment_default(endViewDate2);
  if (momentStartViewDate.isSame(momentEndViewDate, "day")) {
    return formatDate3(momentStartViewDate.toDate(), __assign3(__assign3({}, DAY_LONG_MONTH_LONG_YEAR_OPTIONS), additionalOptions));
  }
  if (momentStartViewDate.isSame(momentEndViewDate, "year")) {
    if (momentStartViewDate.isSame(momentEndViewDate, "month")) {
      return "".concat(formatDate3(momentStartViewDate.toDate(), DAY_OPTIONS), "-").concat(formatDate3(momentEndViewDate.toDate(), DAY_OPTIONS), " ").concat(formatDate3(momentEndViewDate.toDate(), MONTH_YEAR_OPTIONS));
    }
    return "".concat(formatDate3(momentStartViewDate.toDate(), DAY_SHORT_MONTH_OPTIONS), " - ").concat(formatDate3(momentEndViewDate.toDate(), DAY_SHORT_MONTH_LONG_YEAR_OPTIONS));
  }
  return "".concat(formatDate3(momentStartViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS), " - ").concat(formatDate3(momentEndViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS));
};
var calculateTextByMonths = function(currentDate, intervalCount, formatDate3) {
  var momentCurrentDate = moment_default(currentDate);
  if (intervalCount === 1) {
    return formatDate3(momentCurrentDate.toDate(), MONTH_YEAR_OPTIONS);
  }
  var lastMonth = momentCurrentDate.clone().add(intervalCount - 1, "month");
  if (momentCurrentDate.isSame(lastMonth, "year")) {
    return "".concat(formatDate3(momentCurrentDate.toDate(), SHORT_MONTH_OPTIONS), "-").concat(formatDate3(lastMonth.toDate(), SHORT_MONTH_LONG_YEAR_OPTIONS));
  }
  return "".concat(formatDate3(momentCurrentDate.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS), " - ").concat(formatDate3(lastMonth.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS));
};
var viewBoundText = function(startViewDate2, endViewDate2, type, currentDate, intervalCount, formatDate3) {
  return type !== "month" ? calculateTextByDays(startViewDate2, endViewDate2, formatDate3, type === WEEKDAY_INTERVAL ? LONG_WEEK_DAY_OPTIONS : EMPTY_OPTIONS) : calculateTextByMonths(currentDate, intervalCount, formatDate3);
};
var checkCellGroupingInfo = function(cell, appointment) {
  return cell.groupingInfo ? cell.groupingInfo.every(function(group) {
    return group.id === appointment[group.fieldName];
  }) : true;
};
var isDateValid = function(date) {
  return moment_default(date).isValid();
};
var convertToMoment = function(date) {
  return moment_default(date);
};
var areDatesSame = function(firstDate, secondDate) {
  return moment_default(firstDate).isSame(secondDate, "date");
};
var getTimeTableHeight = function(timeTableElementsMeta) {
  var _a2;
  return (_a2 = timeTableElementsMeta.parentRect) === null || _a2 === void 0 ? void 0 : _a2.call(timeTableElementsMeta).height;
};
var containsDSTChange = function(date) {
  var momentDate = moment_default(date);
  momentDate.startOf("day");
  var isStartDST = momentDate.isDST();
  momentDate.endOf("day");
  var isEndDst = momentDate.isDST();
  return isStartDST && !isEndDst || !isStartDST && isEndDst;
};
var subtractSecond = function(date) {
  return moment_default(date).subtract(1, "second").toDate();
};
var dayScale = function(currentDate, firstDayOfWeek, dayCount, excluded) {
  if (excluded === void 0) {
    excluded = [];
  }
  var result = [];
  var date = firstDayOfWeek !== void 0 ? moment_default(calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excluded)) : moment_default(currentDate);
  for (var index = 0; index < dayCount; index += 1) {
    if (excluded.findIndex(function(item) {
      return item === date.day();
    }) === -1) {
      result.push(date.toDate());
    }
    date.add(1, "days");
  }
  return result;
};
var timeScale = function(currentDate, firstDayOfWeek, startDayHour, endDayHour, cellDuration, excludedDays) {
  var result = [];
  var startDateOfView = firstDayOfWeek !== void 0 ? calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excludedDays) : currentDate;
  var isDSTChange = containsDSTChange(startDateOfView);
  var validDate = moment_default(startDateOfView);
  if (isDSTChange) {
    validDate.subtract(1, "day");
  }
  var left = moment_default(validDate).startOf("day").add(startDayHour, "hour");
  var right = moment_default(validDate).startOf("day").add(endDayHour, "hour");
  while (left.isBefore(right)) {
    var startDate = left.toDate();
    left.add(cellDuration, "minutes");
    result.push({ start: startDate, end: left.toDate() });
  }
  var timeScaleLastIndex = result.length - 1;
  if (isMidnight(result[timeScaleLastIndex].end)) {
    result[timeScaleLastIndex].end = subtractSecond(result[timeScaleLastIndex].end);
  }
  return result;
};
var availableViews = function(views, viewName, viewDisplayName) {
  if (!views)
    return [{ name: viewName, displayName: viewDisplayName }];
  if (views.findIndex(function(view) {
    return viewName === view.name;
  }) === -1) {
    var nextViews = views.slice();
    nextViews.push({ name: viewName, displayName: viewDisplayName });
    return nextViews;
  }
  return views;
};
var viewCellsData = function(currentDate, firstDayOfWeek, dayCount, excludedDays, startDayHour, endDayHour, cellDuration, currTime) {
  var days2 = dayScale(currentDate, firstDayOfWeek, dayCount, excludedDays);
  var times = timeScale(currentDate, firstDayOfWeek, startDayHour, endDayHour, cellDuration, excludedDays);
  var currentTime = moment_default(currTime);
  return times.reduce(function(cellsAcc, time) {
    var start = moment_default(time.start);
    var end = moment_default(time.end);
    var rowCells = days2.reduce(function(rowAcc, day) {
      var startDate = moment_default(day).hours(start.hours()).minutes(start.minutes()).toDate();
      var endDate = moment_default(day).hours(end.hours()).minutes(end.minutes()).toDate();
      var today = currentTime.isSame(startDate, "day");
      rowAcc.push({ startDate, endDate, today });
      return rowAcc;
    }, []);
    cellsAcc.push(rowCells);
    return cellsAcc;
  }, []);
};
var timeCellsData = function(cellsData, startDayHour, endDayHour, cellDuration, currentTime) {
  var firstViewDate = cellsData[0][0].startDate;
  if (!containsDSTChange(firstViewDate)) {
    return cellsData;
  }
  var nextDay = moment_default(firstViewDate).add(1, "day").toDate();
  var validCellsData = viewCellsData(nextDay, void 0, 1, [], startDayHour, endDayHour, cellDuration, currentTime);
  return validCellsData;
};
var allDayCells = function(viewCells) {
  return [viewCells[0].map(function(cell) {
    return {
      startDate: moment_default(cell.startDate).startOf("day").toDate(),
      endDate: moment_default(cell.startDate).add(1, "day").startOf("day").toDate(),
      groupingInfo: cell.groupingInfo,
      endOfGroup: cell.endOfGroup
    };
  })];
};
var startViewDate = function(viewCells) {
  return moment_default(viewCells[0][0].startDate).toDate();
};
var endViewDate = function(viewCells) {
  var lastRowIndex = viewCells.length - 1;
  var lastCellIndex = viewCells[lastRowIndex].length - 1;
  return subtractSecond(viewCells[lastRowIndex][lastCellIndex].endDate);
};
var MAX_WIDTH = 1;
var INDIRECT_CHILD_LEFT_OFFSET = 0.05;
var isAllDayElementsMetaActual = function(viewCellsData2, allDayElementsMeta, groupOrientation, groupCount) {
  var numberOfRows = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? 1 : groupCount;
  return isElementsMetaActual(viewCellsData2, allDayElementsMeta, numberOfRows);
};
var isTimeTableElementsMetaActual = function(viewCellsData2, timeTableElementsMeta) {
  return isElementsMetaActual(viewCellsData2, timeTableElementsMeta, viewCellsData2.length);
};
var isElementsMetaActual = function(viewCellsData2, elementsMeta, numberOfRows) {
  if (!(elementsMeta === null || elementsMeta === void 0 ? void 0 : elementsMeta.getCellRects)) {
    return false;
  }
  var tableSize = numberOfRows * viewCellsData2[0].length;
  return tableSize === elementsMeta.getCellRects.length;
};
var appointmentHeightType = function(appointment, cellDuration) {
  var durationRatio = appointment.end.clone().diff(appointment.start, "minutes") / cellDuration;
  if (durationRatio === 1)
    return "middle";
  if (durationRatio > 1)
    return "long";
  return "short";
};
var horizontalRectCalculator = function(appointment, viewMetaData, _a2) {
  var getRectByAppointment = _a2.rectByDates, multiline = _a2.multiline, _b = _a2.rectByDatesMeta, cellElementsMeta = _b.cellElementsMeta, viewCellsData2 = _b.viewCellsData;
  var _c = getRectByAppointment(appointment, viewMetaData, {
    multiline,
    cellElementsMeta,
    viewCellsData: viewCellsData2
  }), top = _c.top, left = _c.left, width = _c.width, height = _c.height, parentWidth = _c.parentWidth;
  return {
    resources: appointment.resources,
    top: top + height / appointment.reduceValue * appointment.offset,
    height: height / appointment.reduceValue,
    left: toPercentage(left, parentWidth),
    width: toPercentage(width, parentWidth),
    dataItem: appointment.dataItem,
    fromPrev: appointment.fromPrev,
    toNext: appointment.toNext,
    type: HORIZONTAL_TYPE,
    key: appointment.key
  };
};
var verticalRectCalculator = function(appointment, viewMetaData, _a2) {
  var getRectByAppointment = _a2.rectByDates, multiline = _a2.multiline, _b = _a2.rectByDatesMeta, viewCellsData2 = _b.viewCellsData, cellDuration = _b.cellDuration, cellElementsMeta = _b.cellElementsMeta, excludedDays = _b.excludedDays;
  var _c = getRectByAppointment(appointment, viewMetaData, {
    multiline,
    viewCellsData: viewCellsData2,
    cellDuration,
    excludedDays,
    cellElementsMeta
  }), top = _c.top, left = _c.left, width = _c.width, height = _c.height, parentWidth = _c.parentWidth;
  var offset2 = appointment.offset, relativeWidth = appointment.width, relativeLeft = appointment.left;
  var widthMultiplier = relativeWidth * 5 / 3 + relativeLeft <= 1 ? 5 / 3 : 1;
  var validWidth = widthMultiplier === 5 / 3 ? widthMultiplier * relativeWidth : relativeWidth + 0.02;
  if (validWidth + relativeLeft > 1) {
    validWidth = 1 - relativeLeft;
  }
  return {
    resources: appointment.resources,
    top,
    height,
    left: toPercentage(left + relativeLeft * width, parentWidth),
    width: toPercentage(validWidth * width, parentWidth),
    dataItem: appointment.dataItem,
    fromPrev: appointment.fromPrev,
    toNext: appointment.toNext,
    durationType: appointmentHeightType(appointment, cellDuration),
    type: VERTICAL_TYPE,
    offset: offset2,
    key: appointment.key
  };
};
var oldVerticalRectCalculator = function(appointment, viewMetaData, _a2) {
  var getRectByAppointment = _a2.rectByDates, multiline = _a2.multiline, _b = _a2.rectByDatesMeta, viewCellsData2 = _b.viewCellsData, cellDuration = _b.cellDuration, cellElementsMeta = _b.cellElementsMeta, excludedDays = _b.excludedDays, placeAppointmentsNextToEachOther = _b.placeAppointmentsNextToEachOther;
  var _c = getRectByAppointment(appointment, viewMetaData, {
    multiline,
    viewCellsData: viewCellsData2,
    cellDuration,
    excludedDays,
    cellElementsMeta,
    placeAppointmentsNextToEachOther
  }), top = _c.top, left = _c.left, width = _c.width, height = _c.height, parentWidth = _c.parentWidth;
  var widthInPx = width / appointment.reduceValue;
  return {
    resources: appointment.resources,
    top,
    height,
    left: toPercentage(left + widthInPx * appointment.offset, parentWidth),
    width: toPercentage(widthInPx, parentWidth),
    dataItem: appointment.dataItem,
    fromPrev: appointment.fromPrev,
    toNext: appointment.toNext,
    durationType: appointmentHeightType(appointment, cellDuration),
    type: VERTICAL_TYPE,
    key: appointment.key
  };
};
var compareByDay = function(first, second) {
  if (first.start.isBefore(second.start, "day"))
    return -1;
  if (first.start.isAfter(second.start, "day"))
    return 1;
  return 0;
};
var compareByAllDay = function(first, second) {
  if (first.allDay && !second.allDay)
    return -1;
  if (!first.allDay && second.allDay)
    return 1;
  return 0;
};
var compareByTime = function(first, second) {
  if (first.start.isBefore(second.start))
    return -1;
  if (first.start.isAfter(second.start))
    return 1;
  if (first.end.isBefore(second.end))
    return 1;
  if (first.end.isAfter(second.end))
    return -1;
  return 0;
};
var sortAppointments = function(appointments2) {
  return appointments2.slice().sort(function(a, b) {
    return compareByDay(a, b) || compareByAllDay(a, b) || compareByTime(a, b);
  });
};
var byDayPredicate = function(boundary, date) {
  return boundary.isSameOrAfter(date, "day") && !boundary.isSame(boundary.clone().startOf("day"));
};
var findOverlappedAppointments = function(sortedAppointments, byDay) {
  if (byDay === void 0) {
    byDay = false;
  }
  var appointments2 = sortedAppointments.slice();
  var groups = [];
  var totalIndex = 0;
  while (totalIndex < appointments2.length) {
    groups.push([]);
    var current = appointments2[totalIndex];
    var currentGroup = groups[groups.length - 1];
    var next = appointments2[totalIndex + 1];
    var maxBoundary = current.end;
    currentGroup.push(current);
    totalIndex += 1;
    while (next && (maxBoundary.isAfter(next.start) || byDay && byDayPredicate(maxBoundary, next.start))) {
      currentGroup.push(next);
      if (maxBoundary.isBefore(next.end))
        maxBoundary = next.end;
      totalIndex += 1;
      next = appointments2[totalIndex];
    }
  }
  return groups;
};
var isMidnight$1 = function(date) {
  return date.isSame(date.clone().startOf("day"));
};
var maxBoundaryPredicate = function(maxBoundary, startDate) {
  return maxBoundary.isBefore(startDate, "day") || isMidnight$1(maxBoundary) && maxBoundary.isSame(startDate, "day");
};
var calculateAppointmentOffsets = function(groups, byDay) {
  if (byDay === void 0) {
    byDay = false;
  }
  return groups.map(function(items) {
    var offset2 = 0;
    var reduceValue = 1;
    var appointments2 = items.map(function(appointment2) {
      return __assign3({}, appointment2);
    });
    var groupLength = appointments2.length;
    for (var startIndex = 0; startIndex < groupLength; startIndex += 1) {
      var appointment = appointments2[startIndex];
      if (appointment.offset === void 0) {
        var maxBoundary = appointment.end;
        appointment.offset = offset2;
        for (var index = startIndex + 1; index < groupLength; index += 1) {
          if (appointments2[index].offset === void 0) {
            if (!byDay && maxBoundary.isSameOrBefore(appointments2[index].start) || byDay && maxBoundaryPredicate(maxBoundary, appointments2[index].start)) {
              maxBoundary = appointments2[index].end;
              appointments2[index].offset = offset2;
            }
          }
        }
        offset2 += 1;
        if (reduceValue < offset2)
          reduceValue = offset2;
      }
    }
    return { items: appointments2, reduceValue };
  });
};
var unwrapAppointmentForest = function(appointmentForests) {
  var forestUnwrapped = appointmentForests.map(function(_a2) {
    var items = _a2.items, reduceValue = _a2.reduceValue;
    return {
      reduceValue,
      items: items.map(function(_a3) {
        var data = _a3.data;
        return __assign3({}, data);
      })
    };
  });
  return unwrapGroups(forestUnwrapped);
};
var unwrapGroups = function(groups) {
  return groups.reduce(function(acc, _a2) {
    var items = _a2.items, reduceValue = _a2.reduceValue;
    acc.push.apply(acc, __spreadArray4([], __read3(items.map(function(_a3) {
      var start = _a3.start, end = _a3.end, dataItem = _a3.dataItem, offset2 = _a3.offset, resources = _a3.resources, key = _a3.key, restProps = __rest2(_a3, ["start", "end", "dataItem", "offset", "resources", "key"]);
      return __assign3({ start, end, dataItem, offset: offset2, reduceValue, resources, fromPrev: moment_default(start).diff(dataItem.startDate, "minutes") > 1, toNext: moment_default(dataItem.endDate).diff(end, "minutes") > 1, key }, restProps);
    })), false));
    return acc;
  }, []);
};
var intervalIncludes = function(intervalStart, intervalEnd, date) {
  return date.isBetween(intervalStart, intervalEnd, void 0, "[)");
};
var createAppointmentForest = function(appointmentGroups, cellDuration) {
  return appointmentGroups.map(function(appointmentGroup) {
    var items = appointmentGroup.items;
    var nextItems;
    var roots;
    if (items.length === 1) {
      nextItems = [{
        data: items[0],
        children: [],
        treeDepth: 0,
        isDirectChild: false,
        hasDirectChild: false
      }];
      roots = [0];
    } else {
      var _a2 = visitRoots(items, cellDuration), appointments2 = _a2.appointments, appointmentTreeRoots = _a2.roots;
      nextItems = appointments2;
      roots = appointmentTreeRoots;
    }
    return __assign3(__assign3({}, appointmentGroup), { items: nextItems, roots });
  });
};
var visitRoots = function(appointmentItems, cellDuration) {
  var appointmentNodes = appointmentItems.map(function(props) {
    return {
      data: props
    };
  });
  var roots = appointmentNodes.reduce(function(acc, appointment, appointmentIndex) {
    var appointmentOffset = appointment.data.offset;
    if (appointmentOffset === 0) {
      if (appointmentIndex + 1 === appointmentNodes.length) {
        appointment.children = [];
        appointment.hasDirectChild = false;
        appointment.treeDepth = 0;
      } else {
        appointment.treeDepth = visitAllChildren(appointmentNodes, appointmentIndex, cellDuration, 0);
      }
      appointment.parent = void 0;
      appointment.isDirectChild = false;
      return __spreadArray4(__spreadArray4([], __read3(acc), false), [appointmentIndex], false);
    }
    return acc;
  }, []);
  return { appointments: appointmentNodes, roots };
};
var visitChild = function(appointmentNodes, index, parentAppointmentIndex, cellDuration, isDirectChild, treeDepth) {
  var appointmentNode = appointmentNodes[index];
  appointmentNode.isDirectChild = isDirectChild;
  appointmentNode.parent = parentAppointmentIndex;
  var nextTreeDepth = treeDepth + 1;
  var end = appointmentNode.data.end;
  if (index === appointmentNodes.length - 1 || end.isSameOrBefore(appointmentNodes[index + 1].data.start)) {
    appointmentNode.children = [];
    appointmentNode.treeDepth = 0;
    appointmentNode.hasDirectChild = false;
    return nextTreeDepth;
  }
  var calculatedTreeDepth = visitAllChildren(appointmentNodes, index, cellDuration, treeDepth);
  appointmentNode.treeDepth = calculatedTreeDepth;
  return calculatedTreeDepth + 1;
};
var visitAllChildren = function(appointmentNodes, appointmentIndex, cellDuration, treeDepth) {
  var appointment = appointmentNodes[appointmentIndex];
  var _a2 = appointment.data, end = _a2.end, appointmentOffset = _a2.offset, start = _a2.start;
  var directChildTimeLimit = moment_default(start).add(cellDuration, "minutes");
  var maxAppointmentTreeDepth = 0;
  var children = [];
  var nextChildIndex = appointmentIndex + 1;
  while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {
    var nextAppointment = appointmentNodes[nextChildIndex];
    var _b = nextAppointment.data, nextOffset = _b.offset, nextStart = _b.start;
    if (nextOffset === appointmentOffset + 1) {
      var isDirectChild = intervalIncludes(start, directChildTimeLimit, nextStart);
      var nextTreeDepth = visitChild(appointmentNodes, nextChildIndex, appointmentIndex, cellDuration, isDirectChild, treeDepth);
      if (maxAppointmentTreeDepth < nextTreeDepth) {
        maxAppointmentTreeDepth = nextTreeDepth;
      }
      children.push(nextChildIndex);
    }
    nextChildIndex += 1;
  }
  appointment.hasDirectChild = children.length !== 0 && appointmentNodes[children[0]].isDirectChild;
  appointment.children = children;
  return maxAppointmentTreeDepth;
};
var isPossibleChild = function(appointments2, possibleChildIndex, parentEnd, parentOffset) {
  var possibleChild = appointments2[possibleChildIndex];
  return possibleChildIndex < appointments2.length && possibleChild.data.offset !== parentOffset && possibleChild.data.start.isBefore(parentEnd);
};
var findMaxReduceValue = function(appointmentGroups) {
  return appointmentGroups.reduce(function(maxReduceValue, group) {
    var currentReduceValue = group.reduceValue;
    return maxReduceValue > currentReduceValue ? maxReduceValue : currentReduceValue;
  }, 1);
};
var calculateAppointmentsMetaData = function(appointmentGroups, indirectChildLeftOffset) {
  return appointmentGroups.map(function(appointmentForest) {
    var items = appointmentForest.items, roots = appointmentForest.roots;
    var firstNode = items[0];
    return __assign3(__assign3({}, appointmentForest), { items: items.length === 1 ? [__assign3(__assign3({}, firstNode), { data: __assign3(__assign3({}, firstNode.data), { left: 0, width: 1 }) })] : calculateRootsMetaData(items, roots, indirectChildLeftOffset) });
  });
};
var calculateRootsMetaData = function(appointmentNodes, roots, indirectChildLeftOffset) {
  var appointments2 = appointmentNodes.map(function(props) {
    return __assign3({}, props);
  });
  roots.forEach(function(appointmentIndex) {
    var appointment = appointments2[appointmentIndex];
    var _a2 = calculateAppointmentLeftAndWidth(appointments2, void 0, appointment, MAX_WIDTH, indirectChildLeftOffset, void 0), left = _a2.left, width = _a2.width;
    appointment.data.left = left;
    appointment.data.width = width;
    calculateChildrenMetaData(appointments2, appointment, MAX_WIDTH, indirectChildLeftOffset);
  });
  return appointments2;
};
var calculateChildMetaData = function(appointmentNodes, appointmentIndex, maxWidth, indirectChildLeftOffset) {
  var appointment = appointmentNodes[appointmentIndex];
  var _a2 = calculateAppointmentLeftAndWidth(appointmentNodes, void 0, appointment, maxWidth, indirectChildLeftOffset, void 0), left = _a2.left, width = _a2.width;
  appointment.data.left = left;
  appointment.data.width = width;
  calculateChildrenMetaData(appointmentNodes, appointment, maxWidth, indirectChildLeftOffset);
};
var calculateChildrenMetaData = function(appointmentNodes, appointmentNode, maxWidth, indirectChildLeftOffset) {
  appointmentNode.children.forEach(function(childIndex) {
    calculateChildMetaData(appointmentNodes, childIndex, maxWidth, indirectChildLeftOffset);
  });
};
var calculateAppointmentLeftAndWidth = function(appointmentNodes, blocks, appointmentNode, maxRight, indirectChildLeftOffset, defaultLeft) {
  var _a2 = appointmentNode, hasDirectChild = _a2.hasDirectChild, treeDepth = _a2.treeDepth, isDirectChild = _a2.isDirectChild, parentIndex = _a2.parent, children = _a2.children, blockIndex = _a2.blockIndex;
  var firstChild = appointmentNodes[children[0]];
  var firstChildBlockIndex = firstChild === null || firstChild === void 0 ? void 0 : firstChild.blockIndex;
  var hasDirectChildAndInSameBlock = hasDirectChild && (firstChildBlockIndex === void 0 || (blockIndex === firstChildBlockIndex || blocks[firstChildBlockIndex].includedInto === blockIndex || maxRight === 1));
  if (parentIndex === void 0) {
    return {
      width: hasDirectChildAndInSameBlock ? maxRight / (treeDepth + 1) : maxRight,
      left: 0
    };
  }
  var parent = appointmentNodes[parentIndex];
  var _b = parent.data, parentWidth = _b.width, parentLeft = _b.left;
  var calculatedLeft = isDirectChild ? parentLeft + parentWidth : parentLeft + indirectChildLeftOffset;
  var left = defaultLeft !== void 0 ? Math.max(defaultLeft, calculatedLeft) : calculatedLeft;
  var unoccupiedSpace = maxRight - left;
  return {
    width: hasDirectChildAndInSameBlock ? unoccupiedSpace / (treeDepth + 1) : unoccupiedSpace,
    left
  };
};
var prepareToGroupIntoBlocks = function(appointments2) {
  return appointments2.map(function(appointmentForest) {
    var nodes = appointmentForest.items;
    var appointmentNodes = nodes.map(function(props) {
      return __assign3({}, props);
    });
    appointmentNodes.forEach(function(appointmentNode, index) {
      if (index === 0) {
        appointmentNode.overlappingSubTreeRoots = [];
        return;
      }
      var overlappingSubTreeRoots = [];
      var _a2 = appointmentNode.data, appointmentOffset = _a2.offset, end = _a2.end;
      var nextChildIndex = index + 1;
      var currentBlockEnd;
      while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {
        var nextAppointment = appointmentNodes[nextChildIndex];
        if (nextAppointment.data.offset < appointmentOffset && nextAppointment.maxOffset === void 0) {
          nextAppointment.maxOffset = appointmentOffset;
        }
        var previousSubTreeRoot = overlappingSubTreeRoots.length > 0 ? appointmentNodes[overlappingSubTreeRoots[overlappingSubTreeRoots.length - 1]] : void 0;
        if (isOverlappingSubTreeRoot(appointmentNode, nextAppointment, previousSubTreeRoot, currentBlockEnd)) {
          overlappingSubTreeRoots.push(nextChildIndex);
          nextAppointment.overlappingSubTreeRoot = true;
          var maxChildDate = findChildrenMaxEndDate(appointmentNodes, nextAppointment);
          if (!currentBlockEnd || currentBlockEnd.isBefore(maxChildDate)) {
            currentBlockEnd = maxChildDate;
          }
        }
        nextChildIndex += 1;
      }
      appointmentNode.overlappingSubTreeRoots = overlappingSubTreeRoots;
    });
    return __assign3(__assign3({}, appointmentForest), { items: appointmentNodes });
  });
};
var isOverlappingSubTreeRoot = function(appointmentNode, nextAppointment, previousSubTreeRoot, previousEndDate) {
  var overlappingSubTreeRoot = nextAppointment.overlappingSubTreeRoot, maxOffset = nextAppointment.maxOffset, nextData = nextAppointment.data;
  var nextOffset = nextData.offset, nextStart = nextData.start;
  var offset2 = appointmentNode.data.offset;
  return nextOffset < offset2 && !overlappingSubTreeRoot && (maxOffset === void 0 || maxOffset >= offset2) && (!previousSubTreeRoot || previousSubTreeRoot.data.offset >= nextOffset && nextStart.isSameOrAfter(previousEndDate));
};
var findChildrenMaxEndDate = function(appointmentNodes, appointmentNode) {
  var children = appointmentNode.children, data = appointmentNode.data;
  var end = data.end;
  var maxDate = children.reduce(function(currentMaxDate, childIndex) {
    var child = appointmentNodes[childIndex];
    var maxChildrenDate = findChildrenMaxEndDate(appointmentNodes, child);
    if (maxChildrenDate.isAfter(currentMaxDate)) {
      return maxChildrenDate;
    }
    return currentMaxDate;
  }, end);
  return maxDate;
};
var groupAppointmentsIntoBlocks = function(appointmentForests) {
  return appointmentForests.map(function(appointmentForest) {
    var items = appointmentForest.items, reduceValue = appointmentForest.reduceValue;
    var _a2 = items.reduce(function(acc, appointment, index) {
      var blocks = acc.blocks.slice();
      var treeDepth = appointment.treeDepth, data = appointment.data, overlappingSubTreeRoots = appointment.overlappingSubTreeRoots;
      var offset2 = data.offset, start = data.start, end = data.end;
      var blockIndex = findBlockIndexByAppointment(blocks, appointment);
      if (blockIndex < 0) {
        blocks.push({
          start,
          end,
          minOffset: offset2,
          maxOffset: offset2 + treeDepth,
          size: treeDepth + 1,
          items: [],
          endForChildren: end
        });
        blockIndex = blocks.length - 1;
      }
      blocks[blockIndex].items.push(index);
      overlappingSubTreeRoots.forEach(function(subTreeRootIndex) {
        var subTreeRoot = items[subTreeRootIndex];
        var subTreeRootData = subTreeRoot.data;
        blocks.push({
          start: subTreeRootData.start,
          end,
          minOffset: subTreeRootData.offset,
          maxOffset: offset2 - 1,
          size: calculateBlockSizeByEndDate(items, subTreeRoot, end),
          items: [],
          endForChildren: subTreeRootData.end
        });
      });
      var appointmentInBlock = __assign3(__assign3({}, appointment), { blockIndex });
      return {
        blocks,
        appointments: __spreadArray4(__spreadArray4([], __read3(acc.appointments), false), [appointmentInBlock], false)
      };
    }, {
      blocks: [{
        start: items[0].data.start,
        end: items[0].data.end,
        minOffset: 0,
        maxOffset: reduceValue - 1,
        size: reduceValue,
        items: [],
        endForChildren: items[0].data.end
      }],
      appointments: []
    }), nextBlocks = _a2.blocks, appointments2 = _a2.appointments;
    return {
      blocks: nextBlocks,
      appointmentForest: __assign3(__assign3({}, appointmentForest), { items: appointments2 })
    };
  });
};
var calculateBlockSizeByEndDate = function(appointmentNodes, subTreeRoot, blockEndDate) {
  var children = subTreeRoot.children, data = subTreeRoot.data;
  var start = data.start;
  if (children.length === 0) {
    if (blockEndDate.isAfter(start)) {
      return 1;
    }
    return 0;
  }
  var maxSize = Math.max.apply(Math, __spreadArray4([], __read3(children.map(function(childIndex) {
    return calculateBlockSizeByEndDate(appointmentNodes, appointmentNodes[childIndex], blockEndDate);
  })), false));
  if (blockEndDate.isSameOrBefore(start) && maxSize === 0) {
    return 0;
  }
  return maxSize + 1;
};
var findBlockIndexByAppointment = function(blocks, appointment) {
  var _a2 = appointment.data, start = _a2.start, offset2 = _a2.offset;
  var blockIndex = blocks.length - 1;
  while (blockIndex >= 0) {
    var currentBlock = blocks[blockIndex];
    if (intervalIncludes(currentBlock.start, currentBlock.end, start) && offset2 >= currentBlock.minOffset && offset2 <= currentBlock.maxOffset && (!appointment.overlappingSubTreeRoot || appointment.overlappingSubTreeRoot && !currentBlock.items.length)) {
      break;
    }
    blockIndex -= 1;
  }
  return blockIndex;
};
var findIncludedBlocks = function(groupedIntoBlocks) {
  return groupedIntoBlocks.map(function(_a2) {
    var blocks = _a2.blocks, appointmentForest = _a2.appointmentForest;
    var nextBlocks = blocks.map(function(props) {
      return __assign3({}, props);
    });
    nextBlocks.forEach(function(block, blockIndex) {
      block.includedBlocks = [];
      for (var currentBlockIndex = blockIndex + 1; currentBlockIndex < nextBlocks.length; currentBlockIndex += 1) {
        var currentBlock = nextBlocks[currentBlockIndex];
        if (isIncludedBlock(block, currentBlock)) {
          block.includedBlocks.push(currentBlockIndex);
          currentBlock.includedInto = blockIndex;
        }
      }
    });
    return {
      blocks: nextBlocks,
      appointmentForest
    };
  });
};
var isIncludedBlock = function(block, possibleIncludedBlock) {
  var start = block.start, end = block.end, minOffset = block.minOffset, maxOffset = block.maxOffset;
  var possibleIncludedStart = possibleIncludedBlock.start, possibleIncludedEnd = possibleIncludedBlock.end, possibleMinOffset = possibleIncludedBlock.minOffset, possibleMaxOffset = possibleIncludedBlock.maxOffset;
  return intervalIncludes(start, end, possibleIncludedStart) && intervalIncludes(start, end, possibleIncludedEnd) && possibleMaxOffset <= maxOffset && possibleMinOffset >= minOffset;
};
var findChildBlocks = function(groupedIntoBlocks) {
  return groupedIntoBlocks.map(function(_a2) {
    var blocks = _a2.blocks, appointmentForest = _a2.appointmentForest;
    var nextBlocks = blocks.map(function(props) {
      return __assign3({}, props);
    });
    nextBlocks.forEach(function(block, index) {
      block.children = [];
      for (var currentIndex = index + 1; currentIndex < nextBlocks.length; currentIndex += 1) {
        var nextBlock = nextBlocks[currentIndex];
        if (isChildBlock(block, nextBlock)) {
          block.children.push(currentIndex);
          nextBlock.parent = index;
        }
      }
      return block;
    });
    return {
      appointmentForest,
      blocks: nextBlocks
    };
  });
};
var isChildBlock = function(block, possibleChildBlock) {
  var start = block.start, endForChildren = block.endForChildren, minOffset = block.minOffset, includedInto = block.includedInto;
  var childStart = possibleChildBlock.start, childIncludedInto = possibleChildBlock.includedInto, childMaxOffset = possibleChildBlock.maxOffset;
  return intervalIncludes(start, endForChildren, childStart) && childMaxOffset + 1 === minOffset && (childIncludedInto === void 0 || childIncludedInto === includedInto);
};
var adjustByBlocks = function(groupedIntoBlocks, indirectChildLeftOffset) {
  var updatedBlocks = groupedIntoBlocks.map(function(_a2) {
    var blocks = _a2.blocks, appointmentForest = _a2.appointmentForest;
    var dimensionsCalculated = calculateBlocksDimensions(blocks, appointmentForest.items);
    return {
      blocks: alignBlocksWithPrevious(dimensionsCalculated, appointmentForest.items),
      appointmentForest
    };
  });
  var adjustedByBlocks = updatedBlocks.map(function(_a2) {
    var blocks = _a2.blocks, appointmentForest = _a2.appointmentForest;
    return __assign3(__assign3({}, appointmentForest), { items: adjustAppointmentsByBlocks(appointmentForest.items, blocks, indirectChildLeftOffset) });
  });
  return adjustedByBlocks;
};
var calculateBlocksDimensions = function(blocks, appointments2) {
  return updateBlocksProportions(calculateBlocksLeftLimit(calculateBlocksTotalSize(blocks), appointments2));
};
var alignBlocksWithPrevious = function(blocks, appointments2) {
  var nextBlocks = blocks.map(function(_a2) {
    var right = _a2.right, restProps = __rest2(_a2, ["right"]);
    return __assign3({}, restProps);
  });
  var leftLimitCalculated = calculateBlocksLeftLimit(updateBlocksLeft(nextBlocks, appointments2), appointments2);
  return updateBlocksProportions(leftLimitCalculated);
};
var adjustAppointmentsByBlocks = function(appointments2, blocks, indirectChildLeftOffset) {
  var nextAppointments = appointments2.map(function(props) {
    return __assign3({}, props);
  });
  var nextBlocks = blocks.map(function(props) {
    return __assign3({}, props);
  });
  nextBlocks.forEach(function(block, index) {
    if (index !== 0) {
      var items = block.items, blockLeft = block.left, right = block.right, children_1 = block.children;
      var maxRight_1 = calculateIncludedBlockMaxRight(nextBlocks, block);
      var finalMaxRight_1 = maxRight_1 * right;
      var defaultLeft_1 = blockLeft * maxRight_1;
      items.forEach(function(appointmentIndex, itemIndex) {
        var appointment = nextAppointments[appointmentIndex];
        if (itemIndex === 0) {
          var _a2 = calculateAppointmentLeftAndWidth(nextAppointments, nextBlocks, appointment, finalMaxRight_1, indirectChildLeftOffset, defaultLeft_1), left_1 = _a2.left, width = _a2.width;
          appointment.data.left = left_1;
          appointment.data.width = width;
          if (defaultLeft_1 !== left_1) {
            children_1.forEach(function(childIndex) {
              redistributeChildBlocks(nextBlocks, childIndex, left_1 / maxRight_1);
            });
          }
        } else {
          var _b = calculateAppointmentLeftAndWidth(nextAppointments, nextBlocks, appointment, finalMaxRight_1, indirectChildLeftOffset, void 0), left = _b.left, width = _b.width;
          appointment.data.left = left;
          appointment.data.width = width;
        }
      });
    }
  });
  blocks[0].items.forEach(function(appointmentIndex) {
    var appointment = nextAppointments[appointmentIndex];
    var _a2 = calculateAppointmentLeftAndWidth(nextAppointments, blocks, appointment, 1, indirectChildLeftOffset, void 0), left = _a2.left, width = _a2.width;
    appointment.data.left = left;
    appointment.data.width = width;
  });
  return nextAppointments;
};
var redistributeChildBlocks = function(blocks, blockIndex, right) {
  var block = blocks[blockIndex];
  var leftOffset = block.leftOffset, size = block.size, leftLimit = block.leftLimit, children = block.children;
  block.right = right;
  var width = size + leftOffset;
  var relativeWidth = right - leftLimit;
  var left = right - relativeWidth * size / width;
  block.left = left;
  children.forEach(function(childIndex) {
    redistributeChildBlocks(blocks, childIndex, left);
  });
};
var calculateIncludedBlockMaxRight = function(blocks, includedBlock) {
  var includedIntoIndex = includedBlock.includedInto;
  if (includedIntoIndex === void 0) {
    return 1;
  }
  var includedInto = blocks[includedIntoIndex];
  var currentMaxRight = includedInto.right;
  return currentMaxRight * calculateIncludedBlockMaxRight(blocks, includedInto);
};
var calculateBlocksTotalSize = function(blocks) {
  var result = blocks.map(function(block) {
    var totalSize = calculateSingleBlockTotalSize(blocks, block);
    return __assign3(__assign3({}, block), { totalSize, leftOffset: totalSize - block.size });
  });
  return result;
};
var calculateSingleBlockTotalSize = function(blocks, block) {
  var children = block.children, size = block.size;
  if (children.length === 0) {
    return size;
  }
  return Math.max.apply(Math, __spreadArray4([], __read3(children.map(function(childIndex) {
    return calculateSingleBlockTotalSize(blocks, blocks[childIndex]);
  })), false)) + size;
};
var calculateBlocksLeftLimit = function(blocks, appointments2) {
  return blocks.map(function(block) {
    var leftLimit = calculateSingleBlockLeftLimit(blocks, appointments2, block);
    return __assign3(__assign3({}, block), { leftLimit });
  });
};
var calculateSingleBlockLeftLimit = function(blocks, appointments2, block) {
  var _a2 = block, children = _a2.children, items = _a2.items, left = _a2.left;
  if (children.length === 0) {
    return left !== void 0 ? Math.min(left, appointments2[items[0]].data.left) : appointments2[items[0]].data.left;
  }
  return Math.min.apply(Math, __spreadArray4([], __read3(children.map(function(childIndex) {
    return calculateSingleBlockLeftLimit(blocks, appointments2, blocks[childIndex]);
  })), false));
};
var updateBlocksProportions = function(blocks) {
  var nextBlocks = blocks.map(function(props) {
    return __assign3({}, props);
  });
  nextBlocks.forEach(function(block) {
    var parentIndex = block.parent, leftLimit = block.leftLimit, leftOffset = block.leftOffset, totalSize = block.totalSize;
    if (parentIndex === void 0) {
      block.right = 1;
      block.left = (1 - leftLimit) * leftOffset / totalSize + leftLimit;
      return;
    }
    var parent = nextBlocks[parentIndex];
    var _a2 = parent, parentLeft = _a2.left, parentTotalSize = _a2.totalSize;
    block.totalSize = parentTotalSize;
    block.right = parentLeft;
    block.left = (1 - leftLimit) * leftOffset / parentTotalSize + leftLimit;
  });
  return nextBlocks;
};
var updateBlocksLeft = function(blocks, appointments2) {
  return blocks.map(function(block) {
    var items = block.items, left = block.left;
    var firstItem = appointments2[items[0]];
    var firstItemParentIndex = firstItem.parent;
    if (firstItemParentIndex === void 0) {
      return block;
    }
    var firstItemParent = appointments2[firstItemParentIndex];
    var parentBlock = blocks[firstItemParent.blockIndex];
    return __assign3(__assign3({}, block), { left: parentBlock.parent === void 0 ? left : blocks[parentBlock.parent].left });
  });
};
var createAndAdjustAppointmentForest = function(appointmentGroups, cellDuration) {
  var appointmentForest = createAppointmentForest(appointmentGroups, cellDuration);
  var indirectChildLeftOffset = Math.min(1 / findMaxReduceValue(appointmentForest), INDIRECT_CHILD_LEFT_OFFSET);
  var baseCalculated = calculateAppointmentsMetaData(appointmentForest, indirectChildLeftOffset);
  var preparedToGroupIntoBlocks = prepareToGroupIntoBlocks(baseCalculated);
  var groupedIntoBlocks = groupAppointmentsIntoBlocks(preparedToGroupIntoBlocks);
  var blocksWithIncluded = findIncludedBlocks(groupedIntoBlocks);
  var blocksWithParents = findChildBlocks(blocksWithIncluded);
  return adjustByBlocks(blocksWithParents, indirectChildLeftOffset);
};
var calculateRectByDateAndGroupIntervals = function(type, intervals, rectByDates, rectByDatesMeta, viewMetaData) {
  var growDirection = type.growDirection, multiline = type.multiline;
  var isHorizontal2 = growDirection === HORIZONTAL_TYPE;
  var sorted = intervals.map(sortAppointments);
  var grouped = sorted.reduce(function(acc, sortedGroup) {
    return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(findOverlappedAppointments(sortedGroup, isHorizontal2)), false);
  }, []);
  var cellDuration = rectByDatesMeta.cellDuration, placeAppointmentsNextToEachOther = rectByDatesMeta.placeAppointmentsNextToEachOther;
  var rectCalculator = isHorizontal2 ? horizontalRectCalculator : placeAppointmentsNextToEachOther ? oldVerticalRectCalculator : verticalRectCalculator;
  var groupsCalculated = calculateAppointmentOffsets(grouped, isHorizontal2);
  var isAppointmentForestNeeded = !isHorizontal2 && !placeAppointmentsNextToEachOther;
  var appointmentForest;
  if (isAppointmentForestNeeded) {
    appointmentForest = createAndAdjustAppointmentForest(groupsCalculated, cellDuration);
  }
  var unwrappedAppointments = isAppointmentForestNeeded ? unwrapAppointmentForest(appointmentForest) : unwrapGroups(groupsCalculated);
  var rects = unwrappedAppointments.map(function(appointment) {
    return rectCalculator(appointment, viewMetaData, { rectByDates, multiline, rectByDatesMeta });
  });
  return rects.sort(function(first, second) {
    return first.offset >= second.offset ? 1 : -1;
  });
};
var sliceAppointmentByDay = function(appointment, cellDuration) {
  var start = appointment.start, end = appointment.end, dataItem = appointment.dataItem, key = appointment.key;
  if (start.isSame(end, "day"))
    return [appointment];
  var minDuration = cellDuration / 2;
  var isShortOnFirstDay = start.clone().endOf("day").diff(start, "minutes") < minDuration;
  var isShortOnSecondDay = end.clone().diff(end.clone().startOf("day"), "minutes") < minDuration;
  var firstAppointmentKey = addDateToKey(key, start);
  var secondAppointmentKey = addDateToKey(key, end);
  return [
    isShortOnFirstDay ? {
      start: start.clone().endOf("day").add(-minDuration, "minutes"),
      end: start.clone().endOf("day"),
      dataItem,
      key: firstAppointmentKey
    } : {
      start,
      end: start.clone().endOf("day"),
      dataItem,
      key: firstAppointmentKey
    },
    isShortOnSecondDay ? {
      start: end.clone().startOf("day"),
      end: end.clone().startOf("day").add(minDuration, "minutes"),
      dataItem,
      key: secondAppointmentKey
    } : {
      start: end.clone().startOf("day"),
      end,
      dataItem,
      key: secondAppointmentKey
    }
  ];
};
var dayBoundaryPredicate = function(appointment, leftBound, rightBound, excludedDays) {
  if (excludedDays === void 0) {
    excludedDays = [];
  }
  var dayStart = moment_default(leftBound);
  var dayEnd = moment_default(rightBound);
  var startDayTime = moment_default(appointment.start).hour(dayStart.hour()).minutes(dayStart.minutes());
  var endDayTime = moment_default(appointment.start).hour(dayEnd.hour()).minutes(dayEnd.minutes());
  if (appointment.end.isBefore(dayStart) || appointment.start.isAfter(dayEnd))
    return false;
  if (excludedDays.findIndex(function(day) {
    return day === moment_default(appointment.start).day();
  }) !== -1)
    return false;
  return appointment.end.isAfter(startDayTime) && appointment.start.isBefore(endDayTime);
};
var reduceAppointmentByDayBounds = function(appointment, leftBound, rightBound, cellDuration) {
  var dayStart = moment_default(leftBound);
  var dayEnd = moment_default(rightBound);
  var startDayTime = moment_default(appointment.start).hour(dayStart.hour()).minutes(dayStart.minutes()).seconds(dayStart.seconds());
  var endDayTime = moment_default(appointment.start).hour(dayEnd.hour()).minutes(dayEnd.minutes()).seconds(dayEnd.seconds());
  var minDuration = cellDuration / 2;
  var isShortOnFirstDay = endDayTime.clone().diff(appointment.start, "minutes") < minDuration;
  var isShortOnSecondDay = appointment.end.clone().diff(startDayTime, "minutes") < minDuration;
  if (isShortOnFirstDay) {
    return __assign3(__assign3({}, appointment), { start: endDayTime.clone().add(-minDuration, "minutes"), end: endDayTime });
  }
  if (isShortOnSecondDay) {
    return __assign3(__assign3({}, appointment), { start: startDayTime, end: startDayTime.clone().add(minDuration, "minutes") });
  }
  return __assign3(__assign3(__assign3({}, appointment), appointment.start.isSameOrBefore(startDayTime) ? { start: startDayTime } : null), appointment.end.isSameOrAfter(endDayTime) ? { end: endDayTime } : null);
};
var normalizeAppointmentDuration = function(appointment, cellDuration) {
  var minDuration = cellDuration / 2;
  var start = moment_default(appointment.start);
  var end = moment_default(appointment.end);
  if (end.diff(start, "minutes") > minDuration) {
    return __assign3(__assign3({}, appointment), { start, end });
  }
  if (end.isSame(start.clone().add(minDuration, "minutes"), "day")) {
    return __assign3(__assign3({}, appointment), { start, end: start.clone().add(minDuration, "minutes") });
  }
  return __assign3(__assign3({}, appointment), { start: start.clone().endOf("day").add(-minDuration, "minutes"), end: start.clone().endOf("day") });
};
var getWeekVerticallyGroupedColumnIndex = function(viewCellsData2, date) {
  return viewCellsData2[0].findIndex(function(timeCell) {
    return moment_default(date).isSame(timeCell.startDate, "date");
  });
};
var getWeekHorizontallyGroupedColumnIndex = function(viewCellsData2, appointment, date) {
  return viewCellsData2[0].findIndex(function(timeCell) {
    var isCorrectGroup = checkCellGroupingInfo(timeCell, appointment);
    return moment_default(date).isSame(timeCell.startDate, "date") && isCorrectGroup;
  });
};
var getWeekVerticallyGroupedRowIndex = function(viewCellsData2, appointment, date, columnIndex, takePrev, groupCount) {
  var timeTableHeight = viewCellsData2.length / groupCount;
  var timeTableRowIndex = getWeekHorizontallyGroupedRowIndex(viewCellsData2, date, columnIndex, takePrev);
  if (!viewCellsData2[0][0].groupingInfo)
    return timeTableRowIndex;
  var isWrongCell = !checkCellGroupingInfo(viewCellsData2[timeTableRowIndex][columnIndex], appointment);
  while (isWrongCell) {
    timeTableRowIndex += timeTableHeight;
    isWrongCell = !checkCellGroupingInfo(viewCellsData2[timeTableRowIndex][columnIndex], appointment);
  }
  return timeTableRowIndex;
};
var getWeekHorizontallyGroupedRowIndex = function(viewCellsData2, date, columnIndex, takePrev) {
  return viewCellsData2.findIndex(function(timeCell) {
    return moment_default(date).isBetween(timeCell[columnIndex].startDate, timeCell[columnIndex].endDate, "seconds", takePrev ? "(]" : "[)");
  });
};
var calculateWeekDateIntervals = function(appointments2, leftBound, rightBound, excludedDays, cellDuration) {
  return [
    appointments2.map(function(appointment) {
      return normalizeAppointmentDuration(appointment, cellDuration);
    }).reduce(function(acc, appointment) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, true)), false);
    }, []).reduce(function(acc, appointment) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(sliceAppointmentByDay(appointment, cellDuration)), false);
    }, []).filter(function(appointment) {
      return dayBoundaryPredicate(appointment, leftBound, rightBound, excludedDays);
    }).map(function(appointment) {
      return reduceAppointmentByDayBounds(appointment, leftBound, rightBound, cellDuration);
    })
  ];
};
var CELL_GAP_PX = 10;
var CELL_BOUND_HORIZONTAL_OFFSET_PX = 1;
var CELL_BOUND_VERTICAL_OFFSET_PX = 4;
var getVerticalCellIndexByAppointmentData = function(appointment, viewCellsData2, viewMetaData, date, takePrev) {
  if (takePrev === void 0) {
    takePrev = false;
  }
  var groupOrientation = viewMetaData.groupOrientation, groupCount = viewMetaData.groupCount;
  var columnIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION ? getWeekVerticallyGroupedColumnIndex(viewCellsData2, date) : getWeekHorizontallyGroupedColumnIndex(viewCellsData2, appointment, date);
  var rowIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION ? getWeekVerticallyGroupedRowIndex(viewCellsData2, appointment, date, columnIndex, takePrev, groupCount) : getWeekHorizontallyGroupedRowIndex(viewCellsData2, date, columnIndex, takePrev);
  var cellIndex2 = rowIndex * viewCellsData2[0].length + columnIndex;
  return {
    index: cellIndex2,
    startDate: viewCellsData2[rowIndex][columnIndex].startDate
  };
};
var getCellRect = function(date, appointment, viewCellsData2, cellDuration, cellElementsMeta, takePrev, viewMetaData) {
  var _a2 = getVerticalCellIndexByAppointmentData(appointment, viewCellsData2, viewMetaData, date, takePrev), cellIndex2 = _a2.index, cellStartDate = _a2.startDate;
  var _b = cellElementsMeta.getCellRects[cellIndex2](), top = _b.top, left = _b.left, width = _b.width, cellHeight = _b.height;
  var timeOffset = moment_default(date).diff(cellStartDate, "minutes");
  var topOffset = cellHeight * (timeOffset / cellDuration);
  var parentRect = cellElementsMeta.parentRect();
  return {
    top,
    left,
    width,
    topOffset,
    parentRect
  };
};
var getVerticalRectByAppointmentData = function(appointment, viewMetaData, _a2) {
  var viewCellsData2 = _a2.viewCellsData, cellDuration = _a2.cellDuration, cellElementsMeta = _a2.cellElementsMeta, placeAppointmentsNextToEachOther = _a2.placeAppointmentsNextToEachOther;
  var firstCellRect = getCellRect(appointment.start.toDate(), appointment, viewCellsData2, cellDuration, cellElementsMeta, false, viewMetaData);
  var lastCellRect = getCellRect(appointment.end.toDate(), appointment, viewCellsData2, cellDuration, cellElementsMeta, true, viewMetaData);
  var top = firstCellRect.top + firstCellRect.topOffset;
  var height = lastCellRect.top + lastCellRect.topOffset - top;
  return {
    width: firstCellRect.width - CELL_GAP_PX - CELL_BOUND_HORIZONTAL_OFFSET_PX,
    top: top - firstCellRect.parentRect.top + CELL_BOUND_HORIZONTAL_OFFSET_PX,
    left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_HORIZONTAL_OFFSET_PX,
    parentWidth: firstCellRect.parentRect.width,
    height: placeAppointmentsNextToEachOther ? height - CELL_BOUND_VERTICAL_OFFSET_PX : height
  };
};
var allDayPredicate = function(appointment) {
  return appointment.end.diff(appointment.start, "hours") > 23 || !!appointment.allDay;
};
var getAllDayCellIndexByAppointmentData = function(viewCellsData2, viewMetaData, date, appointment, takePrev) {
  var currentDate = moment_default(date);
  var groupOrientation = viewMetaData.groupOrientation, groupCount = viewMetaData.groupCount;
  var columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? getAllDayHorizontallyGroupedColumnIndex(viewCellsData2, currentDate, appointment) : getAllDayVerticallyGroupedColumnIndex(viewCellsData2, currentDate);
  var rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? 0 : getAllDayVerticallyGroupedRowIndex(viewCellsData2, appointment, groupCount);
  var cellIndex2 = rowIndex * viewCellsData2[0].length + columnIndex;
  if (takePrev && currentDate.format() === currentDate.startOf("day").format()) {
    cellIndex2 -= 1;
  }
  return cellIndex2;
};
var getAllDayVerticallyGroupedColumnIndex = function(viewCellsData2, date) {
  return viewCellsData2[0].findIndex(function(timeCell) {
    return date.isSame(timeCell.startDate, "date");
  });
};
var getAllDayHorizontallyGroupedColumnIndex = function(viewCellsData2, date, appointment) {
  return viewCellsData2[0].findIndex(function(timeCell) {
    return date.isSame(timeCell.startDate, "date") && checkCellGroupingInfo(timeCell, appointment);
  });
};
var getAllDayVerticallyGroupedRowIndex = function(viewCellsData2, appointment, groupCount) {
  var index = viewCellsData2.findIndex(function(viewCellsDataRow) {
    return checkCellGroupingInfo(viewCellsDataRow[0], appointment);
  });
  return index * groupCount / viewCellsData2.length;
};
var sliceAppointmentsByBoundaries = function(appointment, left, right, excludedDays) {
  if (excludedDays === void 0) {
    excludedDays = [];
  }
  var startDate = appointment.start.clone();
  var endDate = appointment.end.clone();
  var nextStart = startDate.clone();
  var nextEnd = endDate.clone();
  if (startDate.isBefore(left)) {
    nextStart = moment_default(left);
    nextStart.startOf("day");
  }
  if (endDate.isAfter(right)) {
    nextEnd = moment_default(right);
    nextEnd.endOf("day");
  }
  if (excludedDays.findIndex(function(day) {
    return day === startDate.day();
  }) !== -1) {
    while (excludedDays.findIndex(function(day) {
      return day === nextStart.day();
    }) !== -1 && nextStart.isSameOrBefore(endDate, "day")) {
      nextStart.add(1, "days").startOf("day");
    }
  }
  if (excludedDays.findIndex(function(day) {
    return day === endDate.day();
  }) !== -1) {
    while (excludedDays.findIndex(function(day) {
      return day === nextEnd.day();
    }) !== -1 && nextStart.isSameOrAfter(startDate, "day")) {
      nextEnd.add(-1, "days").endOf("day");
    }
  }
  return [__assign3(__assign3({}, appointment), { start: nextStart, end: nextEnd })];
};
var sliceAppointmentsByDays = function(appointment, excludedDays) {
  if (excludedDays === void 0) {
    excludedDays = [];
  }
  var startDate = appointment.start;
  var endDate = appointment.end;
  var nextStart = startDate.clone();
  var appointments2 = [];
  while (nextStart.isBefore(endDate)) {
    if (excludedDays.findIndex(function(day) {
      return day === nextStart.day();
    }) === -1) {
      appointments2.push(__assign3(__assign3({}, appointment), { start: nextStart, end: moment_default(nextStart).endOf("day") }));
    }
    nextStart = moment_default(nextStart).add(1, "day");
  }
  return appointments2;
};
var DEFAULT_RULE_OBJECT = {
  interval: 1
};
var DAYS_OF_WEEK = {
  MONDAY: 0,
  TUESDAY: 1,
  WEDNESDAY: 2,
  THURSDAY: 3,
  FRIDAY: 4,
  SATURDAY: 5,
  SUNDAY: 6
};
var RRULE_DAYS_OF_WEEK = [
  RRule.MO,
  RRule.TU,
  RRule.WE,
  RRule.TH,
  RRule.FR,
  RRule.SA,
  RRule.SU
];
var DAYS_IN_WEEK = 7;
var DAYS_OF_WEEK_ARRAY = [
  DAYS_OF_WEEK.SUNDAY,
  DAYS_OF_WEEK.MONDAY,
  DAYS_OF_WEEK.TUESDAY,
  DAYS_OF_WEEK.WEDNESDAY,
  DAYS_OF_WEEK.THURSDAY,
  DAYS_OF_WEEK.FRIDAY,
  DAYS_OF_WEEK.SATURDAY
];
var RRULE_REPEAT_TYPES = {
  YEARLY: RRule.YEARLY,
  MONTHLY: RRule.MONTHLY,
  WEEKLY: RRule.WEEKLY,
  DAILY: RRule.DAILY,
  HOURLY: RRule.HOURLY,
  MINUTELY: RRule.MINUTELY
};
var REPEAT_TYPES = {
  DAILY: "daily",
  WEEKLY: "weekly",
  MONTHLY: "monthly",
  YEARLY: "yearly",
  NEVER: "never"
};
var REPEAT_TYPES_ARRAY = [
  REPEAT_TYPES.DAILY,
  REPEAT_TYPES.WEEKLY,
  REPEAT_TYPES.MONTHLY,
  REPEAT_TYPES.YEARLY
];
var WEEK_NUMBER_LABELS = [
  "firstLabel",
  "secondLabel",
  "thirdLabel",
  "fourthLabel",
  "lastLabel"
];
var END_REPEAT_RADIO_GROUP = "endRepeat";
var MONTHLY_RADIO_GROUP = "monthlyRadioGroup";
var YEARLY_RADIO_GROUP = "yearlyRadioGroup";
var TITLE_TEXT_EDITOR = "titleTextEditor";
var MULTILINE_TEXT_EDITOR = "multilineTextEditor";
var ORDINARY_TEXT_EDITOR = "ordinaryTextEditor";
var NUMBER_EDITOR = "numberEditor";
var TITLE = "title";
var ORDINARY_LABEL = "ordinaryLabel";
var SAVE_BUTTON = "saveButton";
var DELETE_BUTTON = "deleteButton";
var CANCEL_BUTTON = "cancelButton";
var OUTLINED_SELECT = "outlinedSelect";
var STANDARD_SELECT = "standardSelect";
var SUNDAY_DATE = new Date(2019, 7, 11);
var MONDAY_DATE = new Date(2019, 7, 12);
var TUESDAY_DATE = new Date(2019, 7, 13);
var WEDNESDAY_DATE = new Date(2019, 7, 14);
var THURSDAY_DATE = new Date(2019, 7, 15);
var FRIDAY_DATE = new Date(2019, 7, 16);
var SATURDAY_DATE = new Date(2019, 7, 17);
var DAYS_OF_WEEK_DATES = [
  SUNDAY_DATE,
  MONDAY_DATE,
  TUESDAY_DATE,
  WEDNESDAY_DATE,
  THURSDAY_DATE,
  FRIDAY_DATE,
  SATURDAY_DATE
];
var JANUARY_DATE = new Date(2019, 0, 1);
var FEBRUARY_DATE = new Date(2019, 1, 1);
var MARCH_DATE = new Date(2019, 2, 1);
var APRIL_DATE = new Date(2019, 3, 1);
var MAY_DATE = new Date(2019, 4, 1);
var JUNE_DATE = new Date(2019, 5, 1);
var JULY_DATE = new Date(2019, 6, 1);
var AUGUST_DATE = new Date(2019, 7, 1);
var SEPTEMBER_DATE = new Date(2019, 8, 1);
var OCTOBER_DATE = new Date(2019, 9, 1);
var NOVEMBER_DATE = new Date(2019, 10, 1);
var DECEMBER_DATE = new Date(2019, 11, 1);
var MONTHS_DATES = [
  JANUARY_DATE,
  FEBRUARY_DATE,
  MARCH_DATE,
  APRIL_DATE,
  MAY_DATE,
  JUNE_DATE,
  JULY_DATE,
  AUGUST_DATE,
  SEPTEMBER_DATE,
  OCTOBER_DATE,
  NOVEMBER_DATE,
  DECEMBER_DATE
];
var LAST_WEEK = 4;
var BASIC_YEALY_COUNT = 5;
var BASIC_MONTHLY_COUNT = 12;
var BASIC_WEEKLY_COUNT = 13;
var BASIC_DAILY_COUNT = 30;
var sliceAppointmentByWeek = function(timeBounds, appointment, step) {
  var left = timeBounds.left, right = timeBounds.right;
  var pieces = [];
  var start = appointment.start, end = appointment.end, key = appointment.key, restFields = __rest2(appointment, ["start", "end", "key"]);
  var apptStart = start;
  var apptEnd = end;
  if (apptStart.isBefore(left))
    apptStart = left.clone();
  if (apptEnd.isAfter(right))
    apptEnd = right.clone();
  var pieceFrom = apptStart.clone();
  var pieceTo = apptStart.clone();
  var i = 0;
  while (pieceTo.isBefore(apptEnd)) {
    var currentRightBound = left.clone().add(step * i, "days").subtract(1, "second");
    if (currentRightBound.isAfter(apptStart)) {
      pieceTo = apptStart.clone().add(step * i, "days");
      if (pieceTo.isAfter(currentRightBound)) {
        pieceTo = currentRightBound.clone();
      }
      if (pieceTo.isAfter(apptEnd)) {
        pieceTo = apptEnd.clone();
      }
      if (!pieceFrom.isSameOrAfter(pieceTo)) {
        pieces.push(__assign3({ start: pieceFrom, end: pieceTo, key: addDateToKey(key, pieceFrom) }, restFields));
        pieceFrom = pieceTo.clone().add(1, "second");
      }
    }
    i += 1;
  }
  return pieces;
};
var getMonthCellIndexByAppointmentData = function(viewCellsData2, viewMetaData, date, appointment, takePrev) {
  if (takePrev === void 0) {
    takePrev = false;
  }
  var groupOrientation = viewMetaData.groupOrientation, groupedByDate = viewMetaData.groupedByDate, groupCount = viewMetaData.groupCount;
  var startViewDate2 = moment_default(viewCellsData2[0][0].startDate);
  var currentDate = moment_default(date);
  var dayNumber = currentDate.diff(startViewDate2, "days");
  if (takePrev && currentDate.format() === currentDate.startOf("day").format()) {
    dayNumber -= 1;
  }
  var weekNumber = Math.floor(dayNumber / DAYS_IN_WEEK);
  var dayOfWeek = dayNumber % DAYS_IN_WEEK;
  var columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? getMonthHorizontallyGroupedColumnIndex(viewCellsData2, appointment, weekNumber, dayOfWeek, groupCount, groupedByDate) : dayOfWeek;
  var rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? weekNumber : getMonthVerticallyGroupedRowIndex(viewCellsData2, appointment, weekNumber, dayOfWeek, groupCount);
  var totalCellIndex = rowIndex * viewCellsData2[0].length + columnIndex;
  return totalCellIndex;
};
var getMonthHorizontallyGroupedColumnIndex = function(viewCellsData2, appointment, weekNumber, dayOfWeek, groupCount, groupByDate) {
  var columnIndex = -1;
  var currentColumnIndex = groupByDate ? dayOfWeek * groupCount : dayOfWeek;
  var cellsInGroupRow = groupByDate ? 1 : DAYS_IN_WEEK;
  while (columnIndex === -1) {
    var isCorrectCell = checkCellGroupingInfo(viewCellsData2[weekNumber][currentColumnIndex], appointment);
    if (isCorrectCell) {
      columnIndex = currentColumnIndex;
    }
    currentColumnIndex += cellsInGroupRow;
  }
  return columnIndex;
};
var getMonthVerticallyGroupedRowIndex = function(viewCellsData2, appointment, weekNumber, dayOfWeek, groupCount) {
  var rowsInOneGroup = viewCellsData2.length / groupCount;
  var rowIndex = -1;
  var currentRowIndex = weekNumber;
  while (rowIndex === -1) {
    var isCorrectCell = checkCellGroupingInfo(viewCellsData2[currentRowIndex][dayOfWeek], appointment);
    if (isCorrectCell) {
      rowIndex = currentRowIndex;
    }
    currentRowIndex += rowsInOneGroup;
  }
  return rowIndex;
};
var TOP_CELL_OFFSET = 0.32;
var CELL_BOUND_OFFSET_PX = 1;
var getCellRect$1 = function(date, appointment, viewCellsData2, viewMetaData, cellElementsMeta, takePrev, multiline) {
  var cellIndex2 = multiline ? getMonthCellIndexByAppointmentData(viewCellsData2, viewMetaData, date, appointment, takePrev) : getAllDayCellIndexByAppointmentData(viewCellsData2, viewMetaData, date, appointment, takePrev);
  var _a2 = cellElementsMeta.getCellRects[cellIndex2](), top = _a2.top, left = _a2.left, width = _a2.width, height = _a2.height;
  var parentRect = cellElementsMeta.parentRect();
  return {
    top,
    left,
    width,
    height,
    parentRect
  };
};
var getHorizontalRectByAppointmentData = function(appointment, viewMetaData, _a2) {
  var multiline = _a2.multiline, viewCellsData2 = _a2.viewCellsData, cellElementsMeta = _a2.cellElementsMeta;
  var firstCellRect = getCellRect$1(appointment.start.toDate(), appointment, viewCellsData2, viewMetaData, cellElementsMeta, false, multiline);
  var lastCellRect = getCellRect$1(appointment.end.toDate(), appointment, viewCellsData2, viewMetaData, cellElementsMeta, true, multiline);
  var top = firstCellRect.top + firstCellRect.height * TOP_CELL_OFFSET;
  var height = firstCellRect.height - firstCellRect.height * TOP_CELL_OFFSET;
  return {
    top: top - firstCellRect.parentRect.top,
    left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_OFFSET_PX,
    width: lastCellRect.left - firstCellRect.left + firstCellRect.width - CELL_BOUND_OFFSET_PX,
    height,
    parentWidth: firstCellRect.parentRect.width
  };
};
var DAY_COUNT = 7;
var MONTH_LENGTH = 31;
var monthCellsData = function(currentDate, firstDayOfWeek, intervalCount, today) {
  if (intervalCount === void 0) {
    intervalCount = 1;
  }
  var targetDate = moment_default(currentDate);
  var currentMonths = [targetDate.month()];
  while (currentMonths.length < intervalCount) {
    currentMonths.push(targetDate.add(1, "months").month());
  }
  var firstMonthDate = moment_default(currentDate).date(1);
  var firstMonthDay = firstMonthDate.day() - firstDayOfWeek;
  var prevMonthDayCount = firstMonthDate.day(firstMonthDay).day() || DAY_COUNT;
  var prevMonth = moment_default(currentDate).subtract(1, "months");
  var prevMonthStartDay = prevMonth.daysInMonth() - (prevMonthDayCount - 1);
  var from2 = moment_default().year(prevMonth.year()).month(prevMonth.month()).date(prevMonthStartDay).startOf("day");
  var result = [];
  while (result.length < Math.trunc(MONTH_LENGTH * intervalCount / DAY_COUNT) + 2) {
    var week = [];
    while (week.length < DAY_COUNT) {
      week.push({
        startDate: from2.toDate(),
        endDate: from2.clone().add(1, "day").toDate(),
        otherMonth: currentMonths.findIndex(function(month) {
          return month === from2.month();
        }) === -1,
        today: today ? moment_default(today).isSame(from2, "date") : false
      });
      from2.add(1, "day");
    }
    result.push(week);
  }
  return result;
};
var calculateMonthDateIntervals = function(appointments2, leftBound, rightBound) {
  return [
    appointments2.map(function(_a2) {
      var start = _a2.start, end = _a2.end, restArgs = __rest2(_a2, ["start", "end"]);
      return __assign3({ start: moment_default(start), end: moment_default(end) }, restArgs);
    }).reduce(function(acc, appointment) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(filterByViewBoundaries(appointment, leftBound, rightBound, [], false)), false);
    }, []).reduce(function(acc, appointment) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(sliceAppointmentByWeek({ left: moment_default(leftBound), right: moment_default(rightBound) }, appointment, DAY_COUNT)), false);
    }, [])
  ];
};
var calculateAllDayDateIntervals = function(appointments2, leftBound, rightBound, excludedDays) {
  return [
    appointments2.map(function(_a2) {
      var start = _a2.start, end = _a2.end, restArgs = __rest2(_a2, ["start", "end"]);
      return __assign3({ start: moment_default(start), end: moment_default(end) }, restArgs);
    }).reduce(function(acc, appointment) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, false)), false);
    }, []).filter(function(appointment) {
      return allDayPredicate(appointment);
    }).reduce(function(acc, appointment) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(sliceAppointmentsByBoundaries(appointment, leftBound, rightBound, excludedDays)), false);
    }, [])
  ];
};
var getGroupFromResourceInstance = function(resourceInstance) {
  return {
    id: resourceInstance.id,
    fieldName: resourceInstance.fieldName,
    text: resourceInstance.text
  };
};
var addGroupInfoToCells = function(currentGroup, groups, sortedResources, viewCellRow, index, endOfGroup, groupOrientation) {
  return viewCellRow.map(function(viewCell, cellIndex2) {
    var groupedCell = addGroupInfoToCell(currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation);
    return cellIndex2 === viewCellRow.length - 1 && groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? __assign3(__assign3({}, groupedCell), { endOfGroup: true }) : groupedCell;
  });
};
var addGroupInfoToCell = function(currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation) {
  var previousIndex = index;
  var groupingInfo = groups.reduceRight(function(acc, group, currentIndex) {
    if (currentIndex === groups.length - 1)
      return acc;
    var previousResourceLength = sortedResources[currentIndex + 1].instances.length;
    var currentGroupingInstance = group[Math.floor(previousIndex / previousResourceLength)];
    previousIndex = currentIndex;
    return __spreadArray4(__spreadArray4([], __read3(acc), false), [currentGroupingInstance], false);
  }, [currentGroup]);
  return __assign3(__assign3({}, viewCell), { groupingInfo, endOfGroup, groupOrientation });
};
var getCurrentGroup = function(groups, resources, index, group) {
  var currentIndex = index;
  return groups.reduceRight(function(groupAcc, groupsRow, rowIndex) {
    if (rowIndex === groups.length - 1) {
      return groupAcc;
    }
    currentIndex = Math.floor(currentIndex / resources[rowIndex + 1].instances.length);
    var currentInstance = groupsRow[currentIndex];
    return __spreadArray4(__spreadArray4([], __read3(groupAcc), false), [
      currentInstance
    ], false);
  }, [group]);
};
var groupAppointments = function(appointments2, resources, groups) {
  if (!resources || !groups)
    return [appointments2.slice()];
  var mainResource = resources.find(function(resource) {
    return resource.isMain;
  });
  return groups[groups.length - 1].map(function(group, index) {
    var currentGroup = getCurrentGroup(groups, resources, index, group);
    return appointments2.reduce(function(acc, appointment) {
      var _a2;
      var belongsToGroup = currentGroup.reduce(function(isBelonging, groupItem) {
        return isBelonging && groupItem.id === appointment[groupItem.fieldName];
      }, true);
      if (!belongsToGroup)
        return acc;
      var currentMainResourceId = currentGroup.find(function(groupItem) {
        return groupItem.fieldName === mainResource.fieldName;
      }).id;
      var updatedAppointment = __assign3(__assign3({}, appointment), { dataItem: __assign3(__assign3({}, appointment.dataItem), (_a2 = {}, _a2[mainResource.fieldName] = rearrangeResourceIds(mainResource, appointment, currentMainResourceId), _a2)), resources: appointment.resources && rearrangeResources(mainResource, appointment, currentMainResourceId) });
      return __spreadArray4(__spreadArray4([], __read3(acc), false), [updatedAppointment], false);
    }, []);
  });
};
var rearrangeResourceIds = function(mainResource, appointment, mainResourceId) {
  if (!mainResource.allowMultiple) {
    return mainResourceId;
  }
  return __spreadArray4([
    mainResourceId
  ], __read3(appointment.dataItem[mainResource.fieldName].filter(function(id) {
    return id !== mainResourceId;
  })), false);
};
var rearrangeResources = function(mainResource, appointment, currentResourceInstanceId) {
  var _a2;
  if (!mainResource.allowMultiple) {
    return appointment.resources;
  }
  var resources = appointment.resources.slice();
  var firstMainResource = resources.findIndex(function(el) {
    return el.isMain;
  });
  var currentResourceIndex = resources.findIndex(function(el) {
    return el.isMain && el.id === currentResourceInstanceId;
  });
  _a2 = __read3([resources[currentResourceIndex], resources[firstMainResource]], 2), resources[firstMainResource] = _a2[0], resources[currentResourceIndex] = _a2[1];
  return resources;
};
var expandGroupedAppointment = function(appointment, grouping, resources) {
  if (!resources || !grouping) {
    return [appointment];
  }
  return resources.reduce(function(acc, resource) {
    var isGroupedByResource = grouping.find(function(group) {
      return group.resourceName === resource.fieldName;
    }) !== void 0;
    if (!isGroupedByResource)
      return acc;
    var resourceField = resource.fieldName;
    if (!resource.allowMultiple) {
      return acc.reduce(function(accumulatedAppointments, currentAppointment) {
        var _a2;
        return __spreadArray4(__spreadArray4([], __read3(accumulatedAppointments), false), [
          __assign3(__assign3({}, currentAppointment), (_a2 = {}, _a2[resourceField] = currentAppointment.dataItem[resourceField], _a2))
        ], false);
      }, []);
    }
    return acc.reduce(function(accumulatedAppointments, currentAppointment) {
      return __spreadArray4(__spreadArray4([], __read3(accumulatedAppointments), false), __read3(currentAppointment.dataItem[resourceField].map(function(resourceValue) {
        var _a2;
        return __assign3(__assign3({}, currentAppointment), (_a2 = {}, _a2[resourceField] = resourceValue, _a2.key = generateMultipleResourceKey(currentAppointment.key, resourceValue), _a2));
      })), false);
    }, []);
  }, [appointment]);
};
var generateMultipleResourceKey = function(previousKey, resourceValue) {
  return "".concat(previousKey, "_").concat(resourceValue);
};
var getGroupsLastRow = function(groups) {
  return groups[groups.length - 1];
};
var filterResourcesByGrouping = function(resources, grouping) {
  return resources.filter(function(resource) {
    return grouping.find(function(resourceId) {
      return resource.fieldName === resourceId.resourceName;
    });
  });
};
var sortFilteredResources = function(resources, grouping) {
  return grouping.map(function(_a2) {
    var resourceName = _a2.resourceName;
    return resources.find(function(resource) {
      return resource.fieldName === resourceName;
    });
  });
};
var getGroupsFromResources = function(sortedAndFilteredResources) {
  return sortedAndFilteredResources.reduce(function(acc, resource, index) {
    if (index === 0) {
      return [resource.instances.map(function(instance) {
        return getGroupFromResourceInstance(instance);
      })];
    }
    return __spreadArray4(__spreadArray4([], __read3(acc), false), [
      acc[index - 1].reduce(function(currentResourceNames) {
        return __spreadArray4(__spreadArray4([], __read3(currentResourceNames), false), __read3(resource.instances.map(function(instance) {
          return getGroupFromResourceInstance(instance);
        })), false);
      }, [])
    ], false);
  }, []);
};
var expandViewCellsDataWithGroups = function(viewCellsData2, groups, sortedResources, groupByDate, groupOrientation) {
  if (groups.length === 0)
    return viewCellsData2;
  if (groupByDate) {
    return expandCellsWithGroupedByDateData(viewCellsData2, groups, sortedResources);
  }
  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {
    return expandHorizontallyGroupedCells(viewCellsData2, groups, sortedResources);
  }
  return expandVerticallyGroupedCells(viewCellsData2, groups, sortedResources);
};
var expandCellsWithGroupedByDateData = function(viewCellsData2, groups, sortedResources) {
  return viewCellsData2.map(function(cellsRow) {
    return cellsRow.reduce(function(acc, viewCell) {
      var groupedCells = getGroupsLastRow(groups).map(function(group, index) {
        return addGroupInfoToCell(group, groups, sortedResources, viewCell, index, false, HORIZONTAL_GROUP_ORIENTATION);
      });
      groupedCells[groupedCells.length - 1] = __assign3(__assign3({}, groupedCells[groupedCells.length - 1]), { endOfGroup: true });
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(groupedCells), false);
    }, []);
  });
};
var expandHorizontallyGroupedCells = function(viewCellsData2, groups, sortedResources) {
  return getGroupsLastRow(groups).reduce(function(acc, group, index) {
    if (index === 0) {
      return viewCellsData2.map(function(viewCellsRow) {
        return addGroupInfoToCells(group, groups, sortedResources, viewCellsRow, index, false, HORIZONTAL_GROUP_ORIENTATION);
      });
    }
    return acc.map(function(item, id) {
      return __spreadArray4(__spreadArray4([], __read3(item), false), __read3(addGroupInfoToCells(group, groups, sortedResources, viewCellsData2[id], index, false, HORIZONTAL_GROUP_ORIENTATION)), false);
    });
  }, [[]]);
};
var expandVerticallyGroupedCells = function(viewCellsData2, groups, sortedResources) {
  return getGroupsLastRow(groups).reduce(function(acc, group, index) {
    if (index === 0) {
      return viewCellsData2.map(function(viewCellsRow, viewRowIndex) {
        return addGroupInfoToCells(group, groups, sortedResources, viewCellsRow, index, viewRowIndex === viewCellsData2.length - 1, VERTICAL_GROUP_ORIENTATION);
      });
    }
    return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(viewCellsData2.map(function(viewCellsRow, viewRowIndex) {
      return addGroupInfoToCells(group, groups, sortedResources, viewCellsRow, index, viewRowIndex === viewCellsData2.length - 1, VERTICAL_GROUP_ORIENTATION);
    })), false);
  }, [[]]);
};
var updateGroupingWithMainResource = function(grouping, resources) {
  return grouping || [{ resourceName: resources.find(function(resource) {
    return resource.isMain;
  }).fieldName }];
};
var expandGroups = function(appointments2, grouping, resources, groups, excludedDays, sliceByDay) {
  if (sliceByDay === void 0) {
    sliceByDay = false;
  }
  var slicedAppointments = sliceByDay ? appointments2[0].reduce(function(acc, appointment) {
    return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(sliceAppointmentsByDays(appointment, excludedDays)), false);
  }, []) : appointments2[0];
  var expandedAppointments = slicedAppointments.reduce(function(acc, appointment) {
    return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(expandGroupedAppointment(appointment, grouping, resources)), false);
  }, []);
  return groupAppointments(expandedAppointments, resources, groups);
};
var updateTimeTableCellElementsMeta = function(timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData2, currentView) {
  if (checkCellElementsMeta(timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists)) {
    return timeTableElementsMeta;
  }
  var _a2 = initializeCellElementsData(timeTableElementsMeta, viewCellsData2, groups), groupCount = _a2.groupCount, timeTableWidth = _a2.timeTableWidth, groupSize = _a2.groupSize, validGetCellRects = _a2.validGetCellRects;
  var allDayPanelsLeft = groupCount;
  while (allDayPanelsLeft > 0) {
    allDayPanelsLeft -= 1;
    validGetCellRects.splice(allDayPanelsLeft * (timeTableWidth + groupSize), timeTableWidth);
  }
  return {
    parentRect: timeTableElementsMeta.parentRect,
    getCellRects: validGetCellRects
  };
};
var updateAllDayCellElementsMeta = function(allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData2, currentView) {
  if (checkCellElementsMeta(timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists)) {
    return allDayElementsMeta;
  }
  var _a2 = initializeCellElementsData(timeTableElementsMeta, viewCellsData2, groups), groupCount = _a2.groupCount, timeTableWidth = _a2.timeTableWidth, groupSize = _a2.groupSize, validGetCellRects = _a2.validGetCellRects;
  var allDayPanelsLeft = groupCount;
  while (allDayPanelsLeft > 0) {
    allDayPanelsLeft -= 1;
    validGetCellRects.splice(groupSize * allDayPanelsLeft + timeTableWidth * (allDayPanelsLeft + 1), groupSize);
  }
  return {
    parentRect: timeTableElementsMeta.parentRect,
    getCellRects: validGetCellRects
  };
};
var checkCellElementsMeta = function(cellElementsMeta, groupOrientation, currentView, allDayPanelExists) {
  return groupOrientation(currentView.name) === HORIZONTAL_GROUP_ORIENTATION || !allDayPanelExists || !cellElementsMeta.getCellRects;
};
var initializeCellElementsData = function(cellElementsMeta, viewCellsData2, groups) {
  var timeTableWidth = viewCellsData2[0].length;
  var groupCount = getGroupsLastRow(groups).length;
  var groupHeight = viewCellsData2.length / groupCount;
  return {
    groupCount,
    timeTableWidth,
    groupSize: timeTableWidth * groupHeight,
    validGetCellRects: cellElementsMeta.getCellRects.slice()
  };
};
var updateTimeCellsData = function(viewCellsData2, timeCellsData2, groups, sortedResources, groupOrientation) {
  var firstViewDate = viewCellsData2[0][0].startDate;
  if (!containsDSTChange(firstViewDate)) {
    return viewCellsData2;
  }
  if (groupOrientation !== VERTICAL_GROUP_ORIENTATION) {
    return timeCellsData2;
  }
  return expandVerticallyGroupedCells(timeCellsData2, groups, sortedResources);
};
var allDayRects = function(appointments2, startViewDate2, endViewDate2, excludedDays, viewCellsData2, cellElementsMeta, grouping, resources, groups, groupOrientation, sliceAppointments) {
  var intervals = calculateAllDayDateIntervals(appointments2, startViewDate2, endViewDate2, excludedDays);
  var groupedIntervals = expandGroups(intervals, grouping, resources, groups, excludedDays, sliceAppointments);
  return calculateRectByDateAndGroupIntervals({
    growDirection: HORIZONTAL_TYPE,
    multiline: false
  }, groupedIntervals, getHorizontalRectByAppointmentData, {
    startViewDate: startViewDate2,
    endViewDate: endViewDate2,
    viewCellsData: viewCellsData2,
    cellElementsMeta,
    excludedDays
  }, {
    groupOrientation,
    groupedByDate: sliceAppointments,
    groupCount: groups ? getGroupsLastRow(groups).length : 1
  });
};
var verticalTimeTableRects = function(appointments2, startViewDate2, endViewDate2, excludedDays, viewCellsData2, cellDuration, cellElementsMeta, grouping, resources, groups, groupOrientation, groupByDate) {
  var intervals = calculateWeekDateIntervals(appointments2, startViewDate2, endViewDate2, excludedDays, cellDuration);
  var groupedIntervals = expandGroups(intervals, grouping, resources, groups, excludedDays, false);
  return calculateRectByDateAndGroupIntervals({
    growDirection: VERTICAL_TYPE,
    multiline: false
  }, groupedIntervals, getVerticalRectByAppointmentData, {
    startViewDate: startViewDate2,
    endViewDate: endViewDate2,
    viewCellsData: viewCellsData2,
    cellDuration,
    cellElementsMeta
  }, {
    groupOrientation,
    groupedByDate: groupByDate,
    groupCount: groups ? getGroupsLastRow(groups).length : 1
  });
};
var horizontalTimeTableRects = function(appointments2, startViewDate2, endViewDate2, viewCellsData2, cellElementsMeta, grouping, resources, groups, groupOrientation, sliceAppointments) {
  var intervals = calculateMonthDateIntervals(appointments2, startViewDate2, endViewDate2);
  var groupedIntervals = expandGroups(intervals, grouping, resources, groups, [], sliceAppointments);
  return calculateRectByDateAndGroupIntervals({
    growDirection: HORIZONTAL_TYPE,
    multiline: true
  }, groupedIntervals, getHorizontalRectByAppointmentData, {
    startViewDate: startViewDate2,
    endViewDate: endViewDate2,
    viewCellsData: viewCellsData2,
    cellElementsMeta
  }, {
    groupOrientation,
    groupedByDate: sliceAppointments,
    groupCount: groups ? getGroupsLastRow(groups).length : 1
  });
};
var dateTimeFormatInstance = function(locale2, formatOptions) {
  return new Intl.DateTimeFormat(locale2, formatOptions);
};
var appointments = function(data) {
  return data.map(function(appointment, index) {
    return __assign3(__assign3(__assign3(__assign3(__assign3({ dataItem: appointment, start: appointment.startDate }, appointment.endDate !== void 0 ? {
      end: appointment.endDate
    } : {
      end: appointment.startDate,
      dataItem: __assign3(__assign3({}, appointment), { endDate: appointment.startDate })
    }), appointment.allDay !== void 0 && {
      allDay: appointment.allDay
    }), appointment.rRule !== void 0 && {
      rRule: appointment.rRule
    }), appointment.exDate !== void 0 && {
      exDate: appointment.exDate
    }), { key: appointment.id || index });
  });
};
var formatDateTimeGetter = function(locale2) {
  var cache = /* @__PURE__ */ new Map();
  var formatter = function(nextDate, nextOptions) {
    if (nextDate === void 0)
      return "";
    var date = convertToMoment(nextDate).toDate();
    var formatInstance = cache.get(nextOptions);
    if (!formatInstance) {
      formatInstance = dateTimeFormatInstance(locale2, nextOptions);
      cache.set(nextOptions, formatInstance);
    }
    return formatInstance.format(date);
  };
  return formatter;
};
var getCellKey = function(groups, groupIndex, rowNumber) {
  var currentIndex = groupIndex;
  return groups.reduceRight(function(acc, groupRow, rowIndex) {
    if (rowNumber < rowIndex)
      return acc;
    var currentKey = groupRow[currentIndex].id;
    if (rowIndex > 0) {
      var currentRowLength = groups[rowIndex].length / groups[rowIndex - 1].length;
      currentIndex = Math.floor(currentIndex / currentRowLength);
    }
    return acc + currentKey;
  }, "");
};
var getRowFromGroups = function(width, groupRow, cellStyle, groups, rowIndex) {
  var row = [];
  var currentRowLength = groupRow.length;
  var standardWidth = width / getGroupsLastRow(groups).length;
  var colSpan = getGroupsLastRow(groups).length / currentRowLength;
  var _loop_1 = function(i2) {
    row = __spreadArray4(__spreadArray4([], __read3(row), false), __read3(groupRow.reduce(function(acc, group, index) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), [
        {
          group,
          colSpan,
          key: getCellKey(groups, index, rowIndex) + i2,
          left: cellStyle.left,
          endOfGroup: index === currentRowLength - 1
        }
      ], false);
    }, [])), false);
  };
  for (var i = 0; i < standardWidth; i += 1) {
    _loop_1(i);
  }
  return row;
};
var getVerticalRowFromGroups = function(groups, groupIndex, groupingPanelRowSpan, timeTableCellHeight, addAllDayHeight, allDayCellHeight2) {
  return groups.reduce(function(acc, groupColumn, columnIndex) {
    var groupSpan = getGroupsLastRow(groups).length / groupColumn.length;
    var cellIndex2 = groupIndex / groupSpan;
    var baseHeight = groupingPanelRowSpan * groupSpan * timeTableCellHeight / getGroupsLastRow(groups).length;
    var allDayHeight = groupSpan * allDayCellHeight2;
    return groupIndex % groupSpan !== 0 ? acc : __spreadArray4(__spreadArray4([], __read3(acc), false), [
      {
        group: groupColumn[cellIndex2],
        rowSpan: groupSpan,
        height: addAllDayHeight ? baseHeight + allDayHeight : baseHeight,
        key: getCellKey(groups, cellIndex2, columnIndex)
      }
    ], false);
  }, []);
};
var getLabelsForSingleGroup = function(groups, cellsData, groupIndex, groupHeight) {
  var currentGroupIndex = groupIndex * groupHeight;
  var nextGroupIndex = currentGroupIndex + groupHeight;
  return cellsData.slice(currentGroupIndex, nextGroupIndex - 1).reduce(function(acc, days2) {
    return __spreadArray4(__spreadArray4([], __read3(acc), false), [
      {
        startDate: days2[0].startDate,
        endDate: days2[0].endDate,
        key: days2[0].endDate + getCellKey(groups, groupIndex, groups.length - 1),
        groupingInfo: days2[0].groupingInfo
      }
    ], false);
  }, []);
};
var getLabelsForAllGroups = function(cellsData, groups, groupOrientation) {
  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {
    return [cellsData.map(function(cellsRow) {
      return {
        startDate: cellsRow[0].startDate,
        endDate: cellsRow[0].endDate,
        groupingInfo: cellsRow[0].groupingInfo,
        key: cellsRow[0].endDate
      };
    })];
  }
  var groupCount = getGroupsLastRow(groups).length;
  var singleGroupHeight = cellsData.length / groupCount;
  return getGroupsLastRow(groups).reduce(function(acc, group, groupIndex) {
    return __spreadArray4(__spreadArray4([], __read3(acc), false), [
      getLabelsForSingleGroup(groups, cellsData, groupIndex, singleGroupHeight)
    ], false);
  }, []);
};
var prepareVerticalViewCellsData = function(cellsData, allDayCellsData) {
  var groupCount = (allDayCellsData === null || allDayCellsData === void 0 ? void 0 : allDayCellsData.length) || 1;
  var validCellsData = [];
  var groupHeight = cellsData.length / groupCount;
  for (var i = 0; i < groupCount; i += 1) {
    validCellsData.push(cellsData.slice(i * groupHeight, (i + 1) * groupHeight));
  }
  return validCellsData;
};
var changeCurrentDate = function(currentDate, _a2) {
  var nextDate = _a2.nextDate, step = _a2.step, amount = _a2.amount, direction = _a2.direction;
  return nextDate || moment_default(currentDate)[direction === "back" ? "subtract" : "add"](amount, step).toDate() || moment_default().subtract(amount, step);
};
var setCurrentViewName = function(currentViewName, nextViewName) {
  return nextViewName;
};
var setAppointmentMeta = function(prevAppointmentMeta, _a2) {
  var target = _a2.target, data = _a2.data;
  return { target, data };
};
var OPEN_COMMAND_BUTTON = "open";
var CLOSE_COMMAND_BUTTON = "close";
var DELETE_COMMAND_BUTTON = "delete";
var setAppointmentData = function(prevAppointmentData, _a2) {
  var appointmentData = _a2.appointmentData;
  return appointmentData;
};
var getWeekNumberLabels = function(getMessage8) {
  return WEEK_NUMBER_LABELS.map(function(weekNumberLabel, index) {
    return {
      text: getMessage8(weekNumberLabel),
      id: index
    };
  });
};
var getDaysOfWeek = function(formatDate3, firstDayOfWeek) {
  var daysOfWeekArray = getDaysOfWeekArray(firstDayOfWeek);
  var daysOfWeekDates = getDaysOfWeekDates(firstDayOfWeek);
  return daysOfWeekDates.map(function(day, index) {
    return {
      text: getDayOfWeek(day, formatDate3),
      id: index + 1 < DAYS_IN_WEEK ? daysOfWeekArray[index + 1] : daysOfWeekArray[0]
    };
  });
};
var getMonths = function(formatDate3) {
  return MONTHS_DATES.map(function(month, index) {
    return {
      text: getMonth(month, formatDate3),
      id: getMonthId(index)
    };
  });
};
var getMonthsWithOf = function(getMessage8, formatDate3) {
  return MONTHS_DATES.map(function(month, index) {
    return {
      text: getMonthWithOf(month, getMessage8, formatDate3),
      id: getMonthId(index)
    };
  });
};
var getMonthWithOf = function(date, getMessage8, formatDate3) {
  return getMessage8("ofLabel") + formatDate3(date, DAY_LONG_MONTH_OPTIONS).replace(/[\d.,]/g, "").toString();
};
var getMonth = function(date, formatDate3) {
  return formatDate3(date, LONG_MONTH_OPTIONS);
};
var getDayOfWeek = function(date, formatDate3) {
  return formatDate3(date, LONG_WEEK_DAY_OPTIONS);
};
var getMonthId = function(index) {
  return index + 1;
};
var getAvailableRecurrenceOptions = function(getMessage8) {
  return REPEAT_TYPES_ARRAY.map(function(type) {
    return {
      text: getMessage8(type),
      id: type
    };
  });
};
var getCountDependingOnRecurrenceType = function(frequency) {
  var count;
  switch (frequency) {
    case RRULE_REPEAT_TYPES.YEARLY:
      count = BASIC_YEALY_COUNT;
      break;
    case RRULE_REPEAT_TYPES.MONTHLY:
      count = BASIC_MONTHLY_COUNT;
      break;
    case RRULE_REPEAT_TYPES.WEEKLY:
      count = BASIC_WEEKLY_COUNT;
      break;
    case RRULE_REPEAT_TYPES.DAILY:
      count = BASIC_DAILY_COUNT;
      break;
  }
  return count;
};
var checkIsNaturalNumber = function(number) {
  return number > 0 && number <= Number.MAX_SAFE_INTEGER;
};
var callActionIfExists = function(action, payload) {
  if (action) {
    action(payload);
  }
};
var isAllDayCell = function(startDate, endDate) {
  return moment_default(endDate).diff(moment_default(startDate), "days") >= 1;
};
var changeRecurrenceFrequency = function(rule, freq, startDate) {
  if (!rule) {
    if (freq === RRULE_REPEAT_TYPES.MONTHLY) {
      return new RRule(__assign3(__assign3({}, DEFAULT_RULE_OBJECT), { freq, bymonthday: [startDate.getDate()], count: getCountDependingOnRecurrenceType(freq) })).toString();
    }
    if (freq === RRULE_REPEAT_TYPES.YEARLY) {
      return new RRule(__assign3(__assign3({}, DEFAULT_RULE_OBJECT), { freq, bymonthday: [startDate.getDate()], bymonth: startDate.getMonth() + 1, count: getCountDependingOnRecurrenceType(freq) })).toString();
    }
    return new RRule(__assign3(__assign3({}, DEFAULT_RULE_OBJECT), { freq, count: getCountDependingOnRecurrenceType(freq) })).toString();
  }
  var options = RRule.parseString(rule);
  if (options.freq === freq)
    return rule;
  options.freq = freq;
  options.count = getCountDependingOnRecurrenceType(freq);
  if (freq === RRULE_REPEAT_TYPES.MONTHLY || freq === RRULE_REPEAT_TYPES.YEARLY) {
    options.bymonthday = startDate.getDate();
  }
  if (freq === RRULE_REPEAT_TYPES.YEARLY) {
    options.bymonth = startDate.getMonth() + 1;
  }
  if (freq === RRULE_REPEAT_TYPES.DAILY || freq === RRULE_REPEAT_TYPES.WEEKLY) {
    options.bymonthday = void 0;
  }
  options.byweekday = void 0;
  var nextRule = new RRule(options);
  return nextRule.toString();
};
var getRecurrenceOptions = function(rule) {
  return !rule ? null : RRule.parseString(rule);
};
var changeRecurrenceOptions = function(options) {
  return options ? new RRule(__assign3({}, options)).toString() : void 0;
};
var handleStartDateChange = function(nextStartDay, options) {
  if (nextStartDay <= 31) {
    var nextOptions = __assign3(__assign3({}, options), { bymonthday: nextStartDay });
    return changeRecurrenceOptions(nextOptions);
  }
  return changeRecurrenceOptions(options);
};
var handleToDayOfWeekChange = function(weekNumber, dayOfWeek, options) {
  var validDayOfWeek = dayOfWeek > 0 ? dayOfWeek - 1 : 6;
  var validWeekNumber = weekNumber === 4 ? -1 : weekNumber + 1;
  var rruleDayOfWeek = RRULE_DAYS_OF_WEEK[validDayOfWeek];
  var nextOptions = __assign3(__assign3({}, options), { byweekday: [rruleDayOfWeek.nth(validWeekNumber)], bymonthday: void 0 });
  return changeRecurrenceOptions(nextOptions);
};
var getRRuleFrequency = function(repeatType) {
  return RRULE_REPEAT_TYPES[repeatType.toUpperCase()];
};
var getFrequencyString = function(rRuleFrequency) {
  if (rRuleFrequency === RRULE_REPEAT_TYPES.DAILY)
    return REPEAT_TYPES.DAILY;
  if (rRuleFrequency === RRULE_REPEAT_TYPES.WEEKLY)
    return REPEAT_TYPES.WEEKLY;
  if (rRuleFrequency === RRULE_REPEAT_TYPES.MONTHLY)
    return REPEAT_TYPES.MONTHLY;
  if (rRuleFrequency === RRULE_REPEAT_TYPES.YEARLY)
    return REPEAT_TYPES.YEARLY;
  return REPEAT_TYPES.NEVER;
};
var getRadioGroupDisplayData = function(recurrenceOptions, stateDayOfWeek, stateWeekNumber, stateDayNumber, firstOption, secondOption) {
  if (recurrenceOptions.bymonthday && !Array.isArray(recurrenceOptions.bymonthday)) {
    return {
      dayNumberTextField: recurrenceOptions.bymonthday,
      weekNumber: stateWeekNumber,
      dayOfWeek: stateDayOfWeek,
      radioGroupValue: firstOption
    };
  }
  if (!recurrenceOptions.byweekday) {
    return {
      dayOfWeek: stateDayOfWeek,
      weekNumber: stateWeekNumber,
      radioGroupValue: secondOption,
      dayNumberTextField: stateDayNumber
    };
  }
  var dayOfWeek = recurrenceOptions.byweekday[0].weekday < 6 ? recurrenceOptions.byweekday[0].weekday + 1 : 0;
  var weekNumber = recurrenceOptions.byweekday[0].n === -1 ? LAST_WEEK : recurrenceOptions.byweekday[0].n - 1;
  return {
    dayOfWeek,
    weekNumber,
    radioGroupValue: secondOption,
    dayNumberTextField: stateDayNumber
  };
};
var handleChangeFrequency = function(repeatType, rRule, startDate, action) {
  var rruleRepeatType = getRRuleFrequency(repeatType);
  var nextRRule;
  if (rruleRepeatType !== void 0) {
    nextRRule = changeRecurrenceFrequency(rRule, rruleRepeatType, startDate);
  }
  action({ rRule: nextRRule });
};
var handleWeekDaysChange = function(options, currentWeekDay) {
  var byWeekDay = options.byweekday || [];
  var index = byWeekDay.findIndex(function(_a2) {
    var weekday = _a2.weekday;
    return weekday === currentWeekDay;
  });
  var isAdded = index === -1;
  if (isAdded) {
    byWeekDay.push(RRULE_DAYS_OF_WEEK[currentWeekDay]);
  } else if (index > -1) {
    byWeekDay.splice(index, 1);
  }
  if (byWeekDay === 0)
    return __assign3(__assign3({}, options), { byweekday: void 0 });
  return __assign3(__assign3({}, options), { byweekday: byWeekDay });
};
var getDaysOfWeekArray = function(firstDayOfWeek) {
  var firstPart = DAYS_OF_WEEK_ARRAY.filter(function(dayOfWeek) {
    return dayOfWeek >= firstDayOfWeek - 1 && dayOfWeek < DAYS_IN_WEEK - 1;
  });
  var secondPart = DAYS_OF_WEEK_ARRAY.filter(function(dayOfWeek) {
    return dayOfWeek < firstDayOfWeek - 1 || dayOfWeek >= DAYS_IN_WEEK - 1;
  });
  return firstDayOfWeek !== 0 ? __spreadArray4(__spreadArray4([], __read3(firstPart), false), __read3(secondPart), false) : __spreadArray4(__spreadArray4([], __read3(secondPart), false), __read3(firstPart), false);
};
var getDaysOfWeekDates = function(firstDayOfWeek) {
  var firstPart = DAYS_OF_WEEK_DATES.slice(firstDayOfWeek, DAYS_OF_WEEK_DATES.length);
  var secondPart = DAYS_OF_WEEK_DATES.slice(0, firstDayOfWeek);
  return __spreadArray4(__spreadArray4([], __read3(firstPart), false), __read3(secondPart), false);
};
var checkMultipleResourceFields = function(resourceFields, resources) {
  return resources.reduce(function(acc, resource) {
    var _a2;
    if (!resource.allowMultiple) {
      return acc;
    }
    var fieldName = resource.fieldName;
    var field = resourceFields[fieldName];
    return __assign3(__assign3({}, acc), (_a2 = {}, _a2[fieldName] = Array.isArray(field) ? field : [field], _a2));
  }, resourceFields);
};
var addAppointment = function(addedAppointmentData, _a2) {
  var _b = _a2 === void 0 ? { appointmentData: {} } : _a2, appointmentData = _b.appointmentData;
  return appointmentData;
};
var cancelAddedAppointment = function() {
  return {};
};
var startEditAppointment = function(prevEditingAppointment, appointmentData) {
  return appointmentData;
};
var stopEditAppointment = function() {
  return null;
};
var changeAppointment = function(appointment, _a2) {
  var change = _a2.change;
  return __assign3(__assign3({}, appointment), change);
};
var cancelChanges = function() {
  return {};
};
var changedAppointmentById = function(changes, appointmentId) {
  var _a2;
  return _a2 = {}, _a2[appointmentId] = changes, _a2;
};
var mergeNewChanges = function(appointmentData, changes) {
  var appointment = __assign3({}, appointmentData);
  delete appointment.id;
  delete appointment.rRule;
  delete appointment.exDate;
  delete appointment.parentData;
  return __assign3(__assign3({}, appointment), changes);
};
var reduceExDate = function(prevExDate, boundDate) {
  if (prevExDate.length > 0) {
    return prevExDate.split(",").reduce(function(acc, date) {
      var momentDate = moment_default.utc(date);
      if (momentDate.isBefore(boundDate)) {
        return __spreadArray4(__spreadArray4([], __read3(acc), false), [date], false);
      }
      return acc;
    }, []).join(",");
  }
  return void 0;
};
var configureExDate = function(exDate, date) {
  var currentExDate = "".concat(moment_default.utc(date).format("YYYYMMDDTHHmmss"), "Z");
  return exDate ? "".concat(exDate, ",").concat(currentExDate) : currentExDate;
};
var configureDateSequence = function(rRule, exDate, prevStartDate, nextStartDate) {
  var rruleSet = getRRuleSetWithExDates(exDate);
  var currentOptions = RRule.parseString(rRule);
  var correctedOptions = currentOptions.until ? __assign3(__assign3({}, currentOptions), { until: moment_default(getUTCDate(currentOptions.until)).toDate() }) : currentOptions;
  var prevStartDateUTC = moment_default(getUTCDate(prevStartDate)).toDate();
  rruleSet.rrule(new RRule(__assign3(__assign3({}, correctedOptions), { dtstart: prevStartDateUTC })));
  if (currentOptions.count || currentOptions.until) {
    return {
      options: currentOptions,
      dates: rruleSet.all().map(function(nextDate) {
        return moment_default(formatDateToString(nextDate)).toDate();
      })
    };
  }
  var leftBound = prevStartDateUTC;
  var rightBound = moment_default(getUTCDate(nextStartDate)).toDate();
  return {
    options: currentOptions,
    dates: rruleSet.between(leftBound, rightBound, true).map(function(nextDate) {
      return moment_default(formatDateToString(nextDate)).toDate();
    })
  };
};
var configureICalendarRules = function(rRule, options) {
  var rruleSet = new RRuleSet();
  rruleSet.rrule(new RRule(__assign3(__assign3({}, RRule.parseString(rRule)), options)));
  return rruleSet.valueOf();
};
var changeCurrentAndFollowing = function(appointmentData, changes, changeAllAction) {
  var _a2;
  var rRule = appointmentData.rRule, startDate = appointmentData.startDate, parentData = appointmentData.parentData, _b = appointmentData.exDate, prevExDate = _b === void 0 ? "" : _b, id = appointmentData.id;
  var _c = getAppointmentSequenceData(parentData.startDate, moment_default.utc(startDate).toDate(), prevExDate, rRule), initialSequence = _c.initialSequence, currentChildIndex = _c.currentChildIndex;
  if (currentChildIndex === 0)
    return changeAllAction(appointmentData, changes);
  var changedRules = configureICalendarRules(rRule, {
    dtstart: moment_default.utc(parentData.startDate).toDate(),
    until: moment_default.utc(initialSequence[currentChildIndex - 1]).toDate(),
    count: null
  });
  var nextExDate = reduceExDate(prevExDate, startDate);
  return {
    changed: (_a2 = {}, _a2[id] = __assign3({ rRule: changedRules[1].slice(6) }, nextExDate && prevExDate !== nextExDate ? { exDate: nextExDate } : {}), _a2)
  };
};
var getAppointmentSequenceData = function(prevStartDate, startDate, exDate, rRule) {
  var initialSequence = configureDateSequence(rRule, exDate, moment_default.utc(prevStartDate).toDate(), moment_default.utc(startDate).toDate()).dates;
  var currentChildIndex = initialSequence.findIndex(function(date) {
    return moment_default(date).isSame(startDate);
  });
  return { initialSequence, currentChildIndex };
};
var deleteCurrent = function(appointmentData) {
  var _a2;
  var _b = configureDateSequence(appointmentData.rRule, appointmentData.exDate, moment_default.utc(appointmentData.parentData.startDate).toDate(), moment_default.utc(appointmentData.startDate).toDate()), options = _b.options, dates = _b.dates;
  if ((options.count || options.until) && dates.length === 1) {
    return deleteAll(appointmentData);
  }
  var nextExDate = configureExDate(appointmentData.exDate, appointmentData.startDate);
  return { changed: (_a2 = {}, _a2[appointmentData.id] = { exDate: nextExDate }, _a2) };
};
var deleteAll = function(appointmentData) {
  return { deleted: appointmentData.id };
};
var deleteCurrentAndFollowing = function(appointmentData) {
  return changeCurrentAndFollowing(appointmentData, {}, deleteAll);
};
var editAll = function(appointmentData, changes) {
  var _a2, _b;
  var rRule = appointmentData.rRule, id = appointmentData.id;
  var initialRule = new RRule(RRule.parseString(rRule));
  if (changes.startDate && moment_default.utc(changes.startDate).isAfter(initialRule.options.until)) {
    return {
      changed: (_a2 = {}, _a2[id] = __assign3(__assign3({}, changes), { rRule: "FREQ=DAILY;COUNT=1", exDate: "" }), _a2)
    };
  }
  return { changed: (_b = {}, _b[appointmentData.id] = changes, _b) };
};
var editCurrent = function(appointmentData, changes) {
  var _a2;
  return {
    changed: (_a2 = {}, _a2[appointmentData.id] = {
      exDate: configureExDate(appointmentData.exDate, appointmentData.startDate)
    }, _a2),
    added: mergeNewChanges(appointmentData, changes)
  };
};
var editCurrentAndFollowing = function(appointmentData, changes) {
  var rRule = appointmentData.rRule, startDate = appointmentData.startDate, _a2 = appointmentData.exDate, prevExDate = _a2 === void 0 ? "" : _a2, parentData = appointmentData.parentData;
  var initialRule = new RRule(RRule.parseString(rRule));
  var _b = getAppointmentSequenceData(parentData.startDate, moment_default.utc(startDate).toDate(), prevExDate, rRule), initialSequence = _b.initialSequence, currentChildIndex = _b.currentChildIndex;
  if (currentChildIndex === 0)
    return editAll(appointmentData, changes);
  var addedOptions = initialRule.options.count || initialRule.options.until ? { count: initialSequence.length - currentChildIndex } : {};
  var addedRules = configureICalendarRules(appointmentData.rRule, __assign3({ dtstart: moment_default.utc(startDate).toDate() }, addedOptions));
  var addedAppointment = moment_default.utc(changes.startDate).isAfter(initialRule.options.until) ? { rRule: "FREQ=DAILY;COUNT=1", exDate: "" } : { rRule: addedRules[1].slice(6) };
  return {
    changed: changeCurrentAndFollowing(appointmentData, changes, editAll).changed,
    added: __assign3(__assign3({}, addedAppointment), mergeNewChanges(appointmentData, changes))
  };
};
var preCommitChanges = function(changes, appointmentData, editType) {
  if (changes === null) {
    switch (editType) {
      case RECURRENCE_EDIT_SCOPE.ALL: {
        return deleteAll(appointmentData);
      }
      case RECURRENCE_EDIT_SCOPE.CURRENT: {
        return deleteCurrent(appointmentData);
      }
      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {
        return deleteCurrentAndFollowing(appointmentData);
      }
    }
  } else {
    switch (editType) {
      case RECURRENCE_EDIT_SCOPE.ALL: {
        return editAll(appointmentData, changes);
      }
      case RECURRENCE_EDIT_SCOPE.CURRENT: {
        return editCurrent(appointmentData, changes);
      }
      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {
        return editCurrentAndFollowing(appointmentData, changes);
      }
    }
  }
  return {};
};
var clamp2 = function(value, min2, max2) {
  return Math.max(Math.min(value, max2), min2);
};
var calculateInsideOffset = function(targetType, insidePart, cellDurationMinutes) {
  return targetType === VERTICAL_TYPE ? insidePart * cellDurationMinutes * 60 / 2 : 0;
};
var cellType = function(data) {
  return moment_default(data.startDate).isSame(data.endDate, "day") ? VERTICAL_TYPE : HORIZONTAL_TYPE;
};
var intervalDuration = function(data, type) {
  return moment_default(data.endDate).diff(data.startDate, type);
};
var cellIndex = function(getCellRects, clientOffset) {
  return getCellRects.findIndex(function(getCellRect2) {
    var _a2 = getCellRect2(), left = _a2.left, top = _a2.top, right = _a2.right, bottom = _a2.bottom;
    var isOver = clientOffset && clamp2(clientOffset.x, left, right) === clientOffset.x && clamp2(clientOffset.y, top, bottom) === clientOffset.y;
    return isOver;
  });
};
var cellData = function(timeTableIndex, allDayIndex, viewCellsData2, allDayCellsData) {
  var cellsData = allDayIndex !== -1 ? allDayCellsData : viewCellsData2;
  var currentIndex = allDayIndex !== -1 ? allDayIndex : timeTableIndex;
  var tableWidth = cellsData[0].length;
  var rowIndex = Math.floor(currentIndex / tableWidth);
  var columnIndex = currentIndex % tableWidth;
  return cellsData[rowIndex][columnIndex];
};
var autoScroll = function(clientOffset, scrollingStrategy3, scrollSpeed) {
  scroll(clientOffset.y, scrollingStrategy3.topBoundary, scrollingStrategy3.bottomBoundary, scrollingStrategy3.changeVerticalScroll, scrollSpeed);
  scroll(clientOffset.x, scrollingStrategy3.leftBoundary, scrollingStrategy3.rightBoundary, scrollingStrategy3.changeHorizontalScroll, scrollSpeed);
};
var scroll = function(offset2, firstBoundary, secondBoundary, changeScroll, scrollSpeed) {
  if (offset2 < firstBoundary + SCROLL_OFFSET2 && offset2 > firstBoundary) {
    changeScroll(-scrollSpeed);
  }
  if (secondBoundary - SCROLL_OFFSET2 < offset2) {
    changeScroll(+scrollSpeed);
  }
};
var timeBoundariesByResize = function(payload, targetData, targetType, cellDurationMinutes, insidePart) {
  if (targetType !== payload.appointmentType) {
    return { appointmentStartTime: void 0, appointmentEndTime: void 0 };
  }
  var appointmentStartTime;
  var appointmentEndTime;
  var sourceType = payload.type;
  if (sourceType === RESIZE_TOP) {
    var insideTopOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);
    appointmentStartTime = moment_default(targetData.startDate).add(insideTopOffset, SECONDS).toDate();
    appointmentEndTime = moment_default(payload.endDate).toDate();
  }
  if (sourceType === RESIZE_BOTTOM) {
    var insideBottomOffset = insidePart === 0 && targetType === VERTICAL_TYPE ? cellDurationMinutes * 60 / 2 : 0;
    appointmentEndTime = moment_default(targetData.endDate).add(-insideBottomOffset, SECONDS).toDate();
    appointmentStartTime = moment_default(payload.startDate).toDate();
  }
  if (moment_default(appointmentEndTime).diff(appointmentStartTime, MINUTES) < 1) {
    appointmentStartTime = moment_default(payload.startDate).toDate();
    appointmentEndTime = moment_default(payload.endDate).toDate();
  }
  return { appointmentStartTime, appointmentEndTime };
};
var timeBoundariesByDrag = function(payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) {
  if (targetType === HORIZONTAL_TYPE && intervalDuration(payload, SECONDS) < intervalDuration(targetData, SECONDS)) {
    return {
      appointmentStartTime: targetData.startDate,
      appointmentEndTime: targetData.endDate,
      offsetTimeTop: 0
    };
  }
  var offsetTimeTop;
  var appointmentStartTime;
  var appointmentEndTime;
  var insideOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);
  var start = moment_default(targetData.startDate).add(insideOffset, SECONDS);
  if (offsetTimeTopBase === null) {
    offsetTimeTop = moment_default(targetData.startDate).diff(payload.startDate, SECONDS) + insideOffset;
  } else {
    offsetTimeTop = offsetTimeTopBase;
  }
  if (payload.type === targetType) {
    var appointmentDurationSeconds = intervalDuration(payload, SECONDS);
    appointmentStartTime = moment_default(start).add(offsetTimeTop * -1, SECONDS).toDate();
    appointmentEndTime = moment_default(start).add(appointmentDurationSeconds - offsetTimeTop, SECONDS).toDate();
  } else {
    appointmentStartTime = moment_default(targetData.startDate).add(insideOffset, SECONDS).toDate();
    appointmentEndTime = moment_default(targetData.endDate).add(insideOffset, SECONDS).toDate();
  }
  return { appointmentStartTime, appointmentEndTime, offsetTimeTop };
};
var calculateAppointmentTimeBoundaries = function(payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) {
  var isDragging = payload.type === VERTICAL_TYPE || payload.type === HORIZONTAL_TYPE;
  return isDragging ? timeBoundariesByDrag(payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) : timeBoundariesByResize(payload, targetData, targetType, cellDurationMinutes, insidePart);
};
var calculateInsidePart = function(top, timeTableCellsRects, timeTableIndex) {
  if (timeTableIndex !== void 0 && timeTableIndex !== -1) {
    var cellRect = timeTableCellsRects[timeTableIndex]();
    return top > cellRect.top + cellRect.height / 2 ? 1 : 0;
  }
  return 0;
};
var calculateDraftAppointments = function(allDayIndex, draftAppointments, startViewDate2, endViewDate2, excludedDays, viewCellsData2, getAllDayCellsElementRects, targetType, cellDurationMinutes, getTableCellElementRects, grouping, resources, groups, groupOrientation, groupedByDate) {
  if (allDayIndex !== -1 || targetType === VERTICAL_TYPE && getAllDayCellsElementRects.getCellRects.length && intervalDuration(draftAppointments[0].dataItem, HOURS) > 23) {
    var allDayDrafts = draftAppointments.map(function(draftAppt) {
      return __assign3(__assign3({}, draftAppt), { allDay: true });
    });
    return {
      allDayDraftAppointments: allDayRects(allDayDrafts, startViewDate2, endViewDate2, excludedDays, viewCellsData2, getAllDayCellsElementRects, grouping, resources, groups, groupOrientation, groupedByDate),
      timeTableDraftAppointments: []
    };
  }
  if (targetType === VERTICAL_TYPE || allDayIndex !== -1) {
    return {
      allDayDraftAppointments: [],
      timeTableDraftAppointments: verticalTimeTableRects(draftAppointments, startViewDate2, endViewDate2, excludedDays, viewCellsData2, cellDurationMinutes, getTableCellElementRects, grouping, resources, groups, groupOrientation, groupedByDate)
    };
  }
  return {
    allDayDraftAppointments: [],
    timeTableDraftAppointments: horizontalTimeTableRects(draftAppointments, startViewDate2, endViewDate2, viewCellsData2, getTableCellElementRects, grouping, resources, groups, groupOrientation, groupedByDate)
  };
};
var calculateAppointmentGroups = function(cellGroupingInfo, resources, appointmentData) {
  if (!cellGroupingInfo)
    return {};
  return cellGroupingInfo.reduce(function(acc, group) {
    var _a2;
    var isMultipleResource = resources.find(function(resource) {
      return resource.fieldName === group.fieldName;
    }).allowMultiple;
    return __assign3(__assign3({}, acc), (_a2 = {}, _a2[group.fieldName] = isMultipleResource ? updateMultipleResourceInfo(group, appointmentData) : group.id, _a2));
  }, {});
};
var updateMultipleResourceInfo = function(cellResource, appointmentData) {
  var appointmentGroupItems = appointmentData[cellResource.fieldName];
  if (appointmentGroupItems.findIndex(function(groupItem) {
    return groupItem === cellResource.id;
  }) !== -1) {
    return appointmentGroupItems;
  }
  return [cellResource.id];
};
var appointmentDragged = function(start, startPrev, end, endPrev, groupingInfo, groupingInfoPrev) {
  if (moment_default(start).isSame(startPrev) && moment_default(end).isSame(endPrev) && groupingInfoNotChanged(groupingInfo, groupingInfoPrev)) {
    return false;
  }
  return true;
};
var groupingInfoNotChanged = function(groupingInfo, groupingInfoPrev) {
  var fields = Object.getOwnPropertyNames(groupingInfo);
  return fields.every(function(field) {
    if (Array.isArray(groupingInfo[field]) && Array.isArray(groupingInfoPrev[field])) {
      return groupingInfo[field].every(function(item, index) {
        return item === groupingInfoPrev[field][index];
      });
    }
    return groupingInfo[field] === groupingInfoPrev[field];
  });
};
var isMonthCell = function(otherMonth) {
  return otherMonth !== void 0;
};
var isShadedAppointment = function(_a2, currentTime, shadePreviousAppointments) {
  var appointmentData = _a2.data;
  var momentCurrentDate = moment_default(currentTime);
  if (appointmentData.allDay) {
    return momentCurrentDate.isAfter(appointmentData.endDate, "day") && shadePreviousAppointments;
  }
  if (momentCurrentDate.isAfter(appointmentData.endDate)) {
    return shadePreviousAppointments;
  }
  return false;
};
var getCurrentTimeIndicatorTop = function(cellData2, currentTime) {
  var top = (currentTime - cellData2.startDate.getTime()) * 100 / (cellData2.endDate.getTime() - cellData2.startDate.getTime());
  return top < 0 || top > 100 ? void 0 : "".concat(top, "%");
};
var isCellShaded = function(_a2, currentTime, shadePreviousCells) {
  var startDate = _a2.startDate, endDate = _a2.endDate, otherMonth = _a2.otherMonth;
  var monthCell = isMonthCell(otherMonth);
  return (startDate.getTime() < currentTime && !monthCell || endDate.getTime() < currentTime && monthCell) && shadePreviousCells;
};
var getAppointmentResources = function(appointment, resources, plainResources) {
  if (!resources || resources.length === 0 || !plainResources || plainResources.length === 0)
    return [];
  return resources.reduce(function(acc, resource) {
    var appointmentResourceId = appointment[resource.fieldName];
    if (appointmentResourceId === void 0)
      return acc;
    if (resource.allowMultiple && !Array.isArray(appointmentResourceId) || !resource.allowMultiple && Array.isArray(appointmentResourceId)) {
      return acc;
    }
    if (resource.allowMultiple) {
      return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(appointmentResourceId.reduce(function(prevResources, itemId) {
        return addResourceToAppointmentResources(plainResources, prevResources, resource, itemId);
      }, [])), false);
    }
    return addResourceToAppointmentResources(plainResources, acc, resource, appointmentResourceId);
  }, []);
};
var addResourceToAppointmentResources = function(plainResources, appointmentResources, resource, resourceId) {
  var currentResource = plainResources.find(function(plainItem) {
    return resource.fieldName === plainItem.fieldName && plainItem.id === resourceId;
  });
  return currentResource ? __spreadArray4(__spreadArray4([], __read3(appointmentResources), false), [
    currentResource
  ], false) : appointmentResources;
};
var convertResourcesToPlain = function(validResources) {
  return validResources.reduce(function(acc, resource) {
    return __spreadArray4(__spreadArray4([], __read3(acc), false), __read3(resource.instances.map(function(item) {
      return item;
    })), false);
  }, []);
};
var validateResources = function(resources, mainResourceName, palette) {
  var isMainResourceDefined = !!mainResourceName;
  var currentPaletteIndex = 0;
  return resources.map(function(resource, groupIndex) {
    var fieldName = resource.fieldName;
    var isMain = isMainResourceDefined && mainResourceName === fieldName || groupIndex === 0 && !isMainResourceDefined;
    var title = resource.title || fieldName;
    var allowMultiple = !!resource.allowMultiple;
    return {
      fieldName,
      isMain,
      title,
      allowMultiple,
      instances: resource.instances.map(function(resourceItem) {
        var color = resourceItem.color || palette[currentPaletteIndex % palette.length];
        if (!resourceItem.color)
          currentPaletteIndex += 1;
        return {
          id: resourceItem.id,
          color,
          fieldName,
          text: resourceItem.text || title || fieldName,
          title,
          allowMultiple,
          isMain
        };
      })
    };
  });
};
var addResourcesToAppointments = function(appointments2, resources, plainResources) {
  return [
    appointments2.map(function(appointment) {
      return __assign3(__assign3({}, appointment), { resources: getAppointmentResources(appointment.dataItem, resources, plainResources) });
    })
  ];
};
var toggleExpandedGroups = function(state, _a2) {
  var groupKey = _a2.groupKey;
  var expandedGroups = slice(state.expandedGroups);
  var groupKeyIndex = expandedGroups.indexOf(groupKey);
  if (groupKeyIndex > -1) {
    expandedGroups.splice(groupKeyIndex, 1);
  } else {
    expandedGroups.push(groupKey);
  }
  return { expandedGroups };
};
var getDayScaleCellColSpan = function(cellsData) {
  var firstDate = cellsData[0][0].startDate;
  var count = 1;
  while (cellsData[0][count] && moment_default(cellsData[0][count].startDate).isSame(firstDate, "day")) {
    count += 1;
  }
  return count;
};
var getDayScaleCells = function(cellsData, groupedByDate) {
  if (!groupedByDate) {
    return cellsData[0].map(function(_a2, index) {
      var startDate = _a2.startDate, endDate = _a2.endDate, today = _a2.today, endOfGroup = _a2.endOfGroup, groupingInfo = _a2.groupingInfo;
      return {
        key: index.toString(),
        startDate,
        endDate,
        today,
        endOfGroup,
        groupingInfo
      };
    });
  }
  var prevDate;
  var colSpan = getDayScaleCellColSpan(cellsData);
  return cellsData[0].reduce(function(acc, _a2, index) {
    var startDate = _a2.startDate, endDate = _a2.endDate, today = _a2.today;
    var currentDate = moment_default(startDate);
    if (currentDate.isSame(prevDate)) {
      return acc;
    }
    prevDate = currentDate;
    return __spreadArray4(__spreadArray4([], __read3(acc), false), [
      {
        key: index.toString(),
        startDate,
        endDate,
        today,
        colSpan,
        endOfGroup: true
      }
    ], false);
  }, []);
};
var navigateByOneMonth = function(currentDate, isBackward) {
  return moment_default(currentDate)[isBackward ? "subtract" : "add"](1, "month").toDate();
};
var RecurrenceFrequency;
(function(RecurrenceFrequency2) {
  RecurrenceFrequency2[RecurrenceFrequency2["Daily"] = RRULE_REPEAT_TYPES.DAILY] = "Daily";
  RecurrenceFrequency2[RecurrenceFrequency2["Weekly"] = RRULE_REPEAT_TYPES.WEEKLY] = "Weekly";
  RecurrenceFrequency2[RecurrenceFrequency2["Monthly"] = RRULE_REPEAT_TYPES.MONTHLY] = "Monthly";
  RecurrenceFrequency2[RecurrenceFrequency2["Yearly"] = RRULE_REPEAT_TYPES.YEARLY] = "Yearly";
})(RecurrenceFrequency || (RecurrenceFrequency = {}));

// node_modules/@devexpress/dx-react-scheduler/dist/dx-react-scheduler.es.js
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends3(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign4 = function() {
  __assign4 = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __read4(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
var SchedulerCoreBase = function(_super) {
  __extends3(SchedulerCoreBase2, _super);
  function SchedulerCoreBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.formatDateTimeGetter = memoize(function(locale2) {
      return formatDateTimeGetter(locale2);
    });
    return _this;
  }
  SchedulerCoreBase2.prototype.render = function() {
    var _a2 = this.props, data = _a2.data, Root3 = _a2.rootComponent, locale2 = _a2.locale, height = _a2.height, firstDayOfWeek = _a2.firstDayOfWeek;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "SchedulerCore" },
      (0, import_react2.createElement)(Getter, { name: "appointments", value: appointments(data) }),
      (0, import_react2.createElement)(Getter, { name: "formatDate", value: this.formatDateTimeGetter(locale2) }),
      (0, import_react2.createElement)(Getter, { name: "firstDayOfWeek", value: firstDayOfWeek }),
      (0, import_react2.createElement)(Getter, { name: "locale", value: locale2 }),
      (0, import_react2.createElement)(
        Template,
        { name: "root" },
        (0, import_react2.createElement)(
          Root3,
          { height },
          (0, import_react2.createElement)(TemplatePlaceholder, { name: "schedulerRoot" }),
          (0, import_react2.createElement)(TemplatePlaceholder, { name: "header" }),
          (0, import_react2.createElement)(TemplatePlaceholder, { name: "body" }),
          (0, import_react2.createElement)(TemplatePlaceholder, { name: "footer" })
        )
      )
    );
  };
  return SchedulerCoreBase2;
}(import_react2.PureComponent);
var SchedulerCore = SchedulerCoreBase;
var SchedulerBase = function(_a2) {
  var data = _a2.data, rootComponent = _a2.rootComponent, children = _a2.children, locale2 = _a2.locale, height = _a2.height, firstDayOfWeek = _a2.firstDayOfWeek;
  return (0, import_react2.createElement)(
    PluginHost2,
    null,
    (0, import_react2.createElement)(SchedulerCore, { data, rootComponent, locale: locale2, height, firstDayOfWeek }),
    children
  );
};
SchedulerBase.defaultProps = {
  data: [],
  locale: "en-US",
  height: "auto",
  firstDayOfWeek: 0
};
var Scheduler = SchedulerBase;
var CellPlaceholder = function(params) {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "cell", params });
};
var TimeTableAppointmentLayer = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "timeTableAppointmentLayer" });
};
var startViewDateBaseComputed = function(_a2) {
  var viewCellsData2 = _a2.viewCellsData;
  return startViewDate(viewCellsData2);
};
var endViewDateBaseComputed = function(_a2) {
  var viewCellsData2 = _a2.viewCellsData;
  return endViewDate(viewCellsData2);
};
var TimeTablePlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "timeTable" });
};
var DayScalePlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "dayScale" });
};
var DayScaleEmptyCellPlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "dayScaleEmptyCell" });
};
var GroupingPanelPlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "groupingPanel" });
};
var BasicViewBase = function(_super) {
  __extends3(BasicViewBase2, _super);
  function BasicViewBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      timeTableElementsMeta: {},
      scrollingStrategy: {
        topBoundary: 0,
        bottomBoundary: 0,
        leftBoundary: 0,
        rightBoundary: 0,
        changeVerticalScroll: function() {
          return void 0;
        },
        changeHorizontalScroll: function() {
          return void 0;
        }
      },
      previousTimeTableCell: null,
      timeTableLayoutKey: 0
    };
    _this.scrollingStrategyComputed = memoize(function(viewName, scrollingStrategy3) {
      return function(getters) {
        return computed(getters, viewName, function() {
          return scrollingStrategy3;
        }, getters.scrollingStrategy);
      };
    });
    _this.timeTableElementsMetaComputed = memoize(function(viewName, timeTableElementsMeta) {
      return function(getters) {
        return computed(getters, viewName, function() {
          return timeTableElementsMeta;
        }, getters.timeTableElementsMeta);
      };
    });
    _this.intervalCountComputed = memoize(function(viewName, intervalCount) {
      return function(getters) {
        return computed(getters, viewName, function() {
          return intervalCount;
        }, getters.intervalCount);
      };
    });
    _this.cellDurationComputed = memoize(function(viewName, cellDuration) {
      return function(getters) {
        return computed(getters, viewName, function() {
          return cellDuration;
        }, getters.cellDuration);
      };
    });
    _this.excludedDaysComputed = memoize(function(viewName, excludedDays) {
      return function(getters) {
        return computed(getters, viewName, function() {
          return excludedDays;
        }, getters.excludedDays);
      };
    });
    _this.availableViewsComputed = memoize(function(viewName, viewDisplayName) {
      return function(_a2) {
        var availableViews$1 = _a2.availableViews;
        return availableViews(availableViews$1, viewName, viewDisplayName);
      };
    });
    _this.currentViewComputed = memoize(function(viewName, viewDisplayName, type) {
      return function(_a2) {
        var currentView = _a2.currentView;
        return currentView && currentView.name !== viewName ? currentView : { name: viewName, type, displayName: viewDisplayName };
      };
    });
    _this.endViewDateComputed = function(getters) {
      var viewName = _this.props.name;
      return computed(getters, viewName, endViewDateBaseComputed, getters.endViewDate);
    };
    _this.startViewDateComputed = function(getters) {
      var viewName = _this.props.name;
      return computed(getters, viewName, startViewDateBaseComputed, getters.startViewDate);
    };
    _this.viewCellsDataComputed = memoize(function(viewName, cellDuration, startDayHour, endDayHour, viewCellsDataBaseComputed2) {
      return function(getters) {
        return computed(getters, viewName, viewCellsDataBaseComputed2(cellDuration, startDayHour, endDayHour), getters.viewCellsData);
      };
    });
    _this.timeTableAppointmentsComputed = memoize(function(viewName, cellDuration, calculateAppointmentsIntervals) {
      return function(getters) {
        return computed(getters, viewName, calculateAppointmentsIntervals(cellDuration), getters.timeTableAppointments);
      };
    });
    _this.updateCellElementsMeta = memoize(function(cellElementsMeta) {
      _this.setState({ timeTableElementsMeta: cellElementsMeta });
    });
    _this.setScrollingStrategy = function(scrollingStrategy3) {
      _this.setState({ scrollingStrategy: scrollingStrategy3 });
    };
    return _this;
  }
  BasicViewBase2.getDerivedStateFromProps = function(props, state) {
    if (props.timeTableCellComponent !== state.previousTimeTableCell) {
      return __assign4(__assign4({}, state), { previousTimeTableCell: props.timeTableCellComponent, timeTableLayoutKey: Math.random() });
    }
    return null;
  };
  BasicViewBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, viewName = _a2.name, intervalCount = _a2.intervalCount, displayName = _a2.displayName, type = _a2.type, excludedDays = _a2.excludedDays, cellDuration = _a2.cellDuration, startDayHour = _a2.startDayHour, endDayHour = _a2.endDayHour, viewCellsDataComputed = _a2.viewCellsDataComputed, calculateAppointmentsIntervals = _a2.calculateAppointmentsIntervals, dayScaleCellComponent = _a2.dayScaleCellComponent, dayScaleRowComponent = _a2.dayScaleRowComponent, DayScale = _a2.dayScaleLayoutComponent, TimeTableCell = _a2.timeTableCellComponent, TimeTableLayout = _a2.timeTableLayoutComponent, timeTableRowComponent = _a2.timeTableRowComponent, AppointmentLayer = _a2.appointmentLayerComponent, DayScaleEmptyCell3 = _a2.dayScaleEmptyCellComponent, layoutProps = _a2.layoutProps, Layout8 = _a2.layoutComponent;
    var _b = this.state, timeTableElementsMeta = _b.timeTableElementsMeta, scrollingStrategy3 = _b.scrollingStrategy, timeTableLayoutKey = _b.timeTableLayoutKey;
    var viewDisplayName = displayName || viewName;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "basicView" },
      (0, import_react2.createElement)(Getter, { name: "availableViews", computed: this.availableViewsComputed(viewName, viewDisplayName) }),
      (0, import_react2.createElement)(Getter, { name: "currentView", computed: this.currentViewComputed(viewName, viewDisplayName, type) }),
      (0, import_react2.createElement)(Getter, { name: "intervalCount", computed: this.intervalCountComputed(viewName, intervalCount) }),
      (0, import_react2.createElement)(Getter, { name: "excludedDays", computed: this.excludedDaysComputed(viewName, excludedDays) }),
      (0, import_react2.createElement)(Getter, { name: "viewCellsData", computed: this.viewCellsDataComputed(viewName, cellDuration, startDayHour, endDayHour, viewCellsDataComputed) }),
      (0, import_react2.createElement)(Getter, { name: "startViewDate", computed: this.startViewDateComputed }),
      (0, import_react2.createElement)(Getter, { name: "endViewDate", computed: this.endViewDateComputed }),
      (0, import_react2.createElement)(Getter, { name: "cellDuration", computed: this.cellDurationComputed(viewName, cellDuration) }),
      (0, import_react2.createElement)(Getter, { name: "timeTableElementsMeta", computed: this.timeTableElementsMetaComputed(viewName, timeTableElementsMeta) }),
      (0, import_react2.createElement)(Getter, { name: "scrollingStrategy", computed: this.scrollingStrategyComputed(viewName, scrollingStrategy3) }),
      (0, import_react2.createElement)(Getter, { name: "timeTableAppointments", computed: this.timeTableAppointmentsComputed(viewName, cellDuration, calculateAppointmentsIntervals) }),
      (0, import_react2.createElement)(Template, { name: "body" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation, groups = _a3.groups;
          if (currentView.name !== viewName)
            return (0, import_react2.createElement)(TemplatePlaceholder, null);
          var isVerticalGrouping2 = (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(viewName)) === VERTICAL_GROUP_ORIENTATION;
          return (0, import_react2.createElement)(Layout8, __assign4({ forwardedRef: params === null || params === void 0 ? void 0 : params.forwardedRef, dayScaleComponent: DayScalePlaceholder, timeTableComponent: TimeTablePlaceholder, setScrollingStrategy: _this.setScrollingStrategy, groupingPanelComponent: isVerticalGrouping2 ? GroupingPanelPlaceholder : void 0, groupingPanelSize: isVerticalGrouping2 ? groups === null || groups === void 0 ? void 0 : groups.length : 0, dayScaleEmptyCellComponent: DayScaleEmptyCellPlaceholder }, layoutProps));
        });
      }),
      (0, import_react2.createElement)(
        Template,
        { name: "dayScale" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, viewCellsData2 = _a3.viewCellsData, formatDate3 = _a3.formatDate, groupByDate = _a3.groupByDate, groupOrientation = _a3.groupOrientation;
          if (currentView.name !== viewName)
            return (0, import_react2.createElement)(TemplatePlaceholder, null);
          var groupByDateEnabled = groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(viewName);
          var isHorizontalGrouping = (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(viewName)) === HORIZONTAL_GROUP_ORIENTATION;
          return (0, import_react2.createElement)(DayScale, { cellComponent: dayScaleCellComponent, rowComponent: dayScaleRowComponent, groupingPanelComponent: isHorizontalGrouping ? GroupingPanelPlaceholder : void 0, cellsData: viewCellsData2, formatDate: formatDate3, groupedByDate: groupByDateEnabled });
        })
      ),
      (0, import_react2.createElement)(Template, { name: "cell" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView;
          if (currentView.name !== viewName)
            return (0, import_react2.createElement)(TemplatePlaceholder, { params });
          return (0, import_react2.createElement)(TimeTableCell, __assign4({}, params));
        });
      }),
      (0, import_react2.createElement)(Template, { name: "timeTable" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var formatDate3 = _a3.formatDate, currentView = _a3.currentView, viewCellsData2 = _a3.viewCellsData;
          if (currentView.name !== viewName)
            return (0, import_react2.createElement)(TemplatePlaceholder, null);
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(TimeTableLayout, __assign4({ cellsData: viewCellsData2, rowComponent: timeTableRowComponent, cellComponent: CellPlaceholder, formatDate: formatDate3, setCellElementsMeta: _this.updateCellElementsMeta, key: timeTableLayoutKey }, params)),
            (0, import_react2.createElement)(
              AppointmentLayer,
              null,
              (0, import_react2.createElement)(TimeTableAppointmentLayer, null)
            )
          );
        });
      }),
      (0, import_react2.createElement)(
        Template,
        { name: "dayScaleEmptyCell" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView;
          if (currentView.name !== viewName || !DayScaleEmptyCell3) {
            return (0, import_react2.createElement)(TemplatePlaceholder, null);
          }
          return (0, import_react2.createElement)(DayScaleEmptyCell3, null);
        })
      )
    );
  };
  return BasicViewBase2;
}(import_react2.PureComponent);
var BasicView = BasicViewBase;
var calculateAppointmentsIntervalsBaseComputed = function(cellDuration) {
  return function(_a2) {
    var appointments2 = _a2.appointments, startViewDate2 = _a2.startViewDate, endViewDate2 = _a2.endViewDate, excludedDays = _a2.excludedDays;
    return calculateWeekDateIntervals(appointments2, startViewDate2, endViewDate2, excludedDays, cellDuration);
  };
};
var timeCellsDataComputed = function(startDayHour, endDayHour) {
  return function(_a2) {
    var viewCellsData2 = _a2.viewCellsData, cellDuration = _a2.cellDuration;
    return timeCellsData(viewCellsData2, startDayHour, endDayHour, cellDuration, Date.now());
  };
};
var TimeScalePlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "timeScale" });
};
var VericalViewBase = function(_super) {
  __extends3(VericalViewBase2, _super);
  function VericalViewBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.timeCellsDataComputed = memoize(function(viewName, startDayHour, endDayHour) {
      return function(getters) {
        return computed(getters, viewName, timeCellsDataComputed(startDayHour, endDayHour), getters.timeCellsData);
      };
    });
    return _this;
  }
  VericalViewBase2.prototype.render = function() {
    var _a2 = this.props, layoutComponent = _a2.layoutComponent, dayScaleEmptyCellComponent = _a2.dayScaleEmptyCellComponent, TimeScale = _a2.timeScaleLayoutComponent, TimeScaleLabel = _a2.timeScaleLabelComponent, timeScaleTickCellComponent = _a2.timeScaleTickCellComponent, timeScaleTicksRowComponent = _a2.timeScaleTicksRowComponent, dayScaleLayoutComponent = _a2.dayScaleLayoutComponent, dayScaleCellComponent = _a2.dayScaleCellComponent, dayScaleRowComponent = _a2.dayScaleRowComponent, timeTableLayoutComponent = _a2.timeTableLayoutComponent, timeTableRowComponent = _a2.timeTableRowComponent, timeTableCellComponent = _a2.timeTableCellComponent, cellDuration = _a2.cellDuration, excludedDays = _a2.excludedDays, viewName = _a2.name, appointmentLayerComponent = _a2.appointmentLayerComponent, intervalCount = _a2.intervalCount, displayName = _a2.displayName, startDayHour = _a2.startDayHour, endDayHour = _a2.endDayHour, viewCellsDataComputed = _a2.viewCellsDataComputed, type = _a2.type;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "WeekView" },
      (0, import_react2.createElement)(BasicView, { viewCellsDataComputed, type, cellDuration, name: viewName, intervalCount, displayName, startDayHour, endDayHour, excludedDays, calculateAppointmentsIntervals: calculateAppointmentsIntervalsBaseComputed, dayScaleEmptyCellComponent, dayScaleLayoutComponent, dayScaleCellComponent, dayScaleRowComponent, timeTableCellComponent, timeTableLayoutComponent, timeTableRowComponent, appointmentLayerComponent, layoutComponent, layoutProps: {
        timeScaleComponent: TimeScalePlaceholder
      } }),
      (0, import_react2.createElement)(Getter, { name: "timeCellsData", computed: this.timeCellsDataComputed(viewName, startDayHour, endDayHour) }),
      (0, import_react2.createElement)(Template, { name: "timeScale" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, timeCellsData2 = _a3.timeCellsData, groups = _a3.groups, formatDate3 = _a3.formatDate, getGroupOrientation = _a3.groupOrientation, timeTableElementsMeta = _a3.timeTableElementsMeta;
          if (currentView.name !== viewName)
            return (0, import_react2.createElement)(TemplatePlaceholder, null);
          var groupOrientation = getGroupOrientation === null || getGroupOrientation === void 0 ? void 0 : getGroupOrientation(viewName);
          return (0, import_react2.createElement)(TimeScale, __assign4({ labelComponent: TimeScaleLabel, tickCellComponent: timeScaleTickCellComponent, rowComponent: timeScaleTicksRowComponent, cellsData: timeCellsData2, formatDate: formatDate3, groups, groupOrientation, height: getTimeTableHeight(timeTableElementsMeta) }, params));
        });
      })
    );
  };
  return VericalViewBase2;
}(import_react2.PureComponent);
var VerticalView = VericalViewBase;
var viewCellsDataBaseComputed = function(cellDuration, startDayHour, endDayHour) {
  return function(_a2) {
    var currentDate = _a2.currentDate, intervalCount = _a2.intervalCount;
    return viewCellsData(currentDate, void 0, intervalCount, [], startDayHour, endDayHour, cellDuration, Date.now());
  };
};
var DayViewBase = function(_super) {
  __extends3(DayViewBase2, _super);
  function DayViewBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DayViewBase2.prototype.render = function() {
    var _a2 = this.props, layoutComponent = _a2.layoutComponent, DayScaleEmptyCell3 = _a2.dayScaleEmptyCellComponent, timeScaleLayoutComponent = _a2.timeScaleLayoutComponent, timeScaleLabelComponent = _a2.timeScaleLabelComponent, timeScaleTickCellComponent = _a2.timeScaleTickCellComponent, timeScaleTicksRowComponent = _a2.timeScaleTicksRowComponent, dayScaleLayoutComponent = _a2.dayScaleLayoutComponent, dayScaleCellComponent = _a2.dayScaleCellComponent, dayScaleRowComponent = _a2.dayScaleRowComponent, timeTableLayoutComponent = _a2.timeTableLayoutComponent, timeTableRowComponent = _a2.timeTableRowComponent, timeTableCellComponent = _a2.timeTableCellComponent, appointmentLayerComponent = _a2.appointmentLayerComponent, cellDuration = _a2.cellDuration, viewName = _a2.name, intervalCount = _a2.intervalCount, displayName = _a2.displayName, startDayHour = _a2.startDayHour, endDayHour = _a2.endDayHour;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "DayView" },
      (0, import_react2.createElement)(VerticalView, { viewCellsDataComputed: viewCellsDataBaseComputed, type: VIEW_TYPES.DAY, cellDuration, name: viewName, intervalCount, displayName, startDayHour, endDayHour, dayScaleEmptyCellComponent: DayScaleEmptyCell3, dayScaleLayoutComponent, dayScaleCellComponent, dayScaleRowComponent, timeTableCellComponent, timeTableLayoutComponent, timeTableRowComponent, appointmentLayerComponent, layoutComponent, timeScaleLayoutComponent, timeScaleLabelComponent, timeScaleTickCellComponent, timeScaleTicksRowComponent })
    );
  };
  DayViewBase2.defaultProps = {
    name: "Day",
    startDayHour: 0,
    endDayHour: 24,
    cellDuration: 30,
    intervalCount: 1
  };
  DayViewBase2.components = {
    layoutComponent: "Layout",
    layoutContainer: "LayoutContainer",
    appointmentLayerComponent: "AppointmentLayer",
    dayScaleEmptyCellComponent: "DayScaleEmptyCell",
    timeScaleLayoutComponent: "TimeScaleLayout",
    timeScaleLabelComponent: "TimeScaleLabel",
    timeScaleTickCellComponent: "TimeScaleTickCell",
    timeScaleTicksRowComponent: "TimeScaleTicksRow",
    dayScaleLayoutComponent: "DayScaleLayout",
    dayScaleCellComponent: "DayScaleCell",
    dayScaleRowComponent: "DayScaleRow",
    timeTableContainerComponent: "TimeTableContainer",
    timeTableLayoutComponent: "TimeTableLayout",
    timeTableCellComponent: "TimeTableCell",
    timeTableRowComponent: "TimeTableRow"
  };
  return DayViewBase2;
}(import_react2.PureComponent);
var DayView = DayViewBase;
var DAYS_IN_WEEK2 = 7;
var viewCellsDataBaseComputed$1 = function(cellDuration, startDayHour, endDayHour) {
  return function(_a2) {
    var firstDayOfWeek = _a2.firstDayOfWeek, intervalCount = _a2.intervalCount, excludedDays = _a2.excludedDays, currentDate = _a2.currentDate;
    return viewCellsData(currentDate, firstDayOfWeek, intervalCount * DAYS_IN_WEEK2, excludedDays, startDayHour, endDayHour, cellDuration, Date.now());
  };
};
var WeekViewBase = function(_super) {
  __extends3(WeekViewBase2, _super);
  function WeekViewBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  WeekViewBase2.prototype.render = function() {
    var _a2 = this.props, layoutComponent = _a2.layoutComponent, dayScaleEmptyCellComponent = _a2.dayScaleEmptyCellComponent, timeScaleLayoutComponent = _a2.timeScaleLayoutComponent, timeScaleLabelComponent = _a2.timeScaleLabelComponent, timeScaleTickCellComponent = _a2.timeScaleTickCellComponent, timeScaleTicksRowComponent = _a2.timeScaleTicksRowComponent, dayScaleLayoutComponent = _a2.dayScaleLayoutComponent, dayScaleCellComponent = _a2.dayScaleCellComponent, dayScaleRowComponent = _a2.dayScaleRowComponent, timeTableLayoutComponent = _a2.timeTableLayoutComponent, timeTableRowComponent = _a2.timeTableRowComponent, timeTableCellComponent = _a2.timeTableCellComponent, cellDuration = _a2.cellDuration, excludedDays = _a2.excludedDays, viewName = _a2.name, appointmentLayerComponent = _a2.appointmentLayerComponent, intervalCount = _a2.intervalCount, displayName = _a2.displayName, startDayHour = _a2.startDayHour, endDayHour = _a2.endDayHour;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "WeekView" },
      (0, import_react2.createElement)(VerticalView, { viewCellsDataComputed: viewCellsDataBaseComputed$1, type: VIEW_TYPES.WEEK, cellDuration, name: viewName, intervalCount, displayName, startDayHour, endDayHour, excludedDays, dayScaleEmptyCellComponent, dayScaleLayoutComponent, dayScaleCellComponent, dayScaleRowComponent, timeTableCellComponent, timeTableLayoutComponent, timeTableRowComponent, appointmentLayerComponent, layoutComponent, timeScaleLayoutComponent, timeScaleLabelComponent, timeScaleTickCellComponent, timeScaleTicksRowComponent })
    );
  };
  WeekViewBase2.defaultProps = {
    startDayHour: 0,
    endDayHour: 24,
    cellDuration: 30,
    intervalCount: 1,
    excludedDays: [],
    name: "Week"
  };
  WeekViewBase2.components = {
    layoutComponent: "Layout",
    layoutContainerComponent: "LayoutContainer",
    appointmentLayerComponent: "AppointmentLayer",
    dayScaleEmptyCellComponent: "DayScaleEmptyCell",
    timeScaleLayoutComponent: "TimeScaleLayout",
    timeScaleLabelComponent: "TimeScaleLabel",
    timeScaleTickCellComponent: "TimeScaleTickCell",
    timeScaleTicksRowComponent: "TimeScaleTicksRow",
    dayScaleLayoutComponent: "DayScaleLayout",
    dayScaleCellComponent: "DayScaleCell",
    dayScaleRowComponent: "DayScaleRow",
    timeTableContainerComponent: "TimeTableContainer",
    timeTableLayoutComponent: "TimeTableLayout",
    timeTableCellComponent: "TimeTableCell",
    timeTableRowComponent: "TimeTableRow"
  };
  return WeekViewBase2;
}(import_react2.PureComponent);
var WeekView = WeekViewBase;
var viewCellsDataBaseComputed$2 = function(cellDuration, startDayHour, endDayHour) {
  return function(_a2) {
    var currentDate = _a2.currentDate, firstDayOfWeek = _a2.firstDayOfWeek, intervalCount = _a2.intervalCount;
    return monthCellsData(currentDate, firstDayOfWeek, intervalCount, Date.now());
  };
};
var calculateAppointmentsIntervalsBaseComputed$1 = function(cellDuration) {
  return function(_a2) {
    var appointments2 = _a2.appointments, startViewDate2 = _a2.startViewDate, endViewDate2 = _a2.endViewDate, excludedDays = _a2.excludedDays;
    return calculateMonthDateIntervals(appointments2, startViewDate2, endViewDate2);
  };
};
var MonthViewBase = function(_super) {
  __extends3(MonthViewBase2, _super);
  function MonthViewBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MonthViewBase2.prototype.render = function() {
    var _a2 = this.props, layoutComponent = _a2.layoutComponent, dayScaleEmptyCellComponent = _a2.dayScaleEmptyCellComponent, dayScaleLayoutComponent = _a2.dayScaleLayoutComponent, dayScaleCellComponent = _a2.dayScaleCellComponent, dayScaleRowComponent = _a2.dayScaleRowComponent, timeTableLayoutComponent = _a2.timeTableLayoutComponent, timeTableRowComponent = _a2.timeTableRowComponent, timeTableCellComponent = _a2.timeTableCellComponent, appointmentLayerComponent = _a2.appointmentLayerComponent, viewName = _a2.name, intervalCount = _a2.intervalCount, displayName = _a2.displayName;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "MonthView" },
      (0, import_react2.createElement)(BasicView, { viewCellsDataComputed: viewCellsDataBaseComputed$2, type: VIEW_TYPES.MONTH, name: viewName, intervalCount, displayName, calculateAppointmentsIntervals: calculateAppointmentsIntervalsBaseComputed$1, dayScaleEmptyCellComponent, dayScaleLayoutComponent, dayScaleCellComponent, dayScaleRowComponent, timeTableCellComponent, timeTableLayoutComponent, timeTableRowComponent, appointmentLayerComponent, layoutComponent })
    );
  };
  MonthViewBase2.defaultProps = {
    intervalCount: 1,
    name: "Month"
  };
  MonthViewBase2.components = {
    layoutComponent: "Layout",
    appointmentLayerComponent: "AppointmentLayer",
    dayScaleEmptyCellComponent: "DayScaleEmptyCell",
    dayScaleLayoutComponent: "DayScaleLayout",
    dayScaleCellComponent: "DayScaleCell",
    dayScaleRowComponent: "DayScaleRow",
    timeTableContainerComponent: "TimeTableContainer",
    timeTableLayoutComponent: "TimeTableLayout",
    timeTableCellComponent: "TimeTableCell",
    timeTableRowComponent: "TimeTableRow"
  };
  return MonthViewBase2;
}(import_react2.PureComponent);
var MonthView = MonthViewBase;
var ToolbarBase = function(_super) {
  __extends3(ToolbarBase2, _super);
  function ToolbarBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ToolbarBase2.prototype.render = function() {
    var _a2 = this.props, Root3 = _a2.rootComponent, FlexibleSpaceComponent = _a2.flexibleSpaceComponent;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "Toolbar" },
      (0, import_react2.createElement)(
        Template,
        { name: "header" },
        (0, import_react2.createElement)(
          Root3,
          null,
          (0, import_react2.createElement)(TemplatePlaceholder, { name: "toolbarContent" })
        ),
        (0, import_react2.createElement)(TemplatePlaceholder, null)
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "toolbarContent" },
        (0, import_react2.createElement)(FlexibleSpaceComponent, null)
      )
    );
  };
  ToolbarBase2.components = {
    rootComponent: "Root",
    flexibleSpaceComponent: "FlexibleSpace"
  };
  return ToolbarBase2;
}(import_react2.PureComponent);
var Toolbar = ToolbarBase;
var pluginDependencies = [
  { name: "Toolbar" },
  { name: "ViewState" }
];
var navigate = function(action, currentView, intervalCount) {
  return function(direction, nextDate) {
    return action({
      direction,
      nextDate,
      amount: intervalCount,
      step: currentView.type
    });
  };
};
var DateNavigatorBase = function(_super) {
  __extends3(DateNavigatorBase2, _super);
  function DateNavigatorBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      visible: false
    };
    _this.setRootRef = function(target) {
      _this.target = target;
    };
    _this.handleVisibilityToggle = function() {
      _this.setState(function(prevState) {
        return { visible: !prevState.visible };
      });
    };
    _this.handleHide = function() {
      _this.setState({ visible: false });
    };
    _this.navigateAction = memoize(function(changeCurrentDate2, currentView, intervalCount, navigateAction) {
      return navigateAction(changeCurrentDate2, currentView, intervalCount);
    });
    return _this;
  }
  DateNavigatorBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, Root3 = _a2.rootComponent, Overlay5 = _a2.overlayComponent, OpenButton2 = _a2.openButtonComponent, NavigationButton2 = _a2.navigationButtonComponent, Calendar = _a2.calendarComponent, CalendarRow = _a2.calendarRowComponent, CalendarCell = _a2.calendarCellComponent, CalendarHeaderRow = _a2.calendarHeaderRowComponent, CalendarHeaderCell = _a2.calendarHeaderCellComponent, CalendarText = _a2.calendarTextComponent, CalendarNavigationButton = _a2.calendarNavigationButtonComponent, CalendarNavigator = _a2.calendarNavigatorComponent;
    var visible = this.state.visible;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "DateNavigator", dependencies: pluginDependencies },
      (0, import_react2.createElement)(
        Template,
        { name: "toolbarContent" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b) {
          var currentDate = _a3.currentDate, startViewDate2 = _a3.startViewDate, endViewDate2 = _a3.endViewDate, firstDayOfWeek = _a3.firstDayOfWeek, currentView = _a3.currentView, intervalCount = _a3.intervalCount, formatDate3 = _a3.formatDate;
          var changeCurrentDate2 = _b.changeCurrentDate;
          var navigateAction = _this.navigateAction(changeCurrentDate2, currentView, intervalCount, navigate);
          var calendarDateChanged = function(nextDate) {
            navigateAction(void 0, nextDate);
            _this.handleHide();
          };
          var navigatorText = viewBoundText(startViewDate2, endViewDate2, currentView.type, currentDate, intervalCount, formatDate3);
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(Root3, { navigationButtonComponent: NavigationButton2, openButtonComponent: OpenButton2, navigatorText, rootRef: _this.setRootRef, onVisibilityToggle: _this.handleVisibilityToggle, onNavigate: navigateAction }),
            (0, import_react2.createElement)(
              Overlay5,
              { visible, target: _this.target, onHide: _this.handleHide },
              (0, import_react2.createElement)(Calendar, { selectedDate: currentDate, firstDayOfWeek, getCells: monthCellsData, textComponent: CalendarText, navigationButtonComponent: CalendarNavigationButton, rowComponent: CalendarRow, cellComponent: CalendarCell, headerRowComponent: CalendarHeaderRow, headerCellComponent: CalendarHeaderCell, navigatorComponent: CalendarNavigator, onSelectedDateChange: calendarDateChanged, formatDate: formatDate3 })
            )
          );
        }),
        (0, import_react2.createElement)(TemplatePlaceholder, null)
      )
    );
  };
  DateNavigatorBase2.components = {
    rootComponent: "Root",
    overlayComponent: "Overlay",
    openButtonComponent: "OpenButton",
    navigationButtonComponent: "NavigationButton",
    calendarComponent: "Calendar",
    calendarRowComponent: "CalendarRow",
    calendarCellComponent: "CalendarCell",
    calendarHeaderRowComponent: "CalendarHeaderRow",
    calendarHeaderCellComponent: "CalendarHeaderCell",
    calendarTextComponent: "CalendarText",
    calendarNavigatorComponent: "CalendarNavigator",
    calendarNavigationButtonComponent: "CalendarNavigationButton"
  };
  return DateNavigatorBase2;
}(import_react2.PureComponent);
var DateNavigator = DateNavigatorBase;
var pluginDependencies$1 = [
  { name: "Toolbar" },
  { name: "ViewState" }
];
var ViewSwitcherBase = function(_super) {
  __extends3(ViewSwitcherBase2, _super);
  function ViewSwitcherBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ViewSwitcherBase2.prototype.render = function() {
    var Switcher2 = this.props.switcherComponent;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "ViewSwitcher", dependencies: pluginDependencies$1 },
      (0, import_react2.createElement)(
        Template,
        { name: "toolbarContent" },
        (0, import_react2.createElement)(TemplatePlaceholder, null),
        (0, import_react2.createElement)(TemplateConnector, null, function(_a2, _b) {
          var currentView = _a2.currentView, availableViews2 = _a2.availableViews;
          var setCurrentViewName2 = _b.setCurrentViewName;
          return (0, import_react2.createElement)(Switcher2, { currentView, availableViews: availableViews2, onChange: setCurrentViewName2 });
        })
      )
    );
  };
  ViewSwitcherBase2.components = {
    switcherComponent: "Switcher"
  };
  return ViewSwitcherBase2;
}(import_react2.PureComponent);
var ViewSwitcher = ViewSwitcherBase;
var AppointmentPlaceholder = function(params) {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "appointment", params });
};
var renderAppointments = function(rects) {
  return rects.map(function(_a2) {
    var dataItem = _a2.dataItem, rectType = _a2.type, fromPrev = _a2.fromPrev, toNext = _a2.toNext, durationType = _a2.durationType, resources = _a2.resources, key = _a2.key, geometry = __rest3(_a2, ["dataItem", "type", "fromPrev", "toNext", "durationType", "resources", "key"]);
    return (0, import_react2.createElement)(AppointmentPlaceholder, { key, type: rectType, data: dataItem, fromPrev, toNext, durationType, resources, style: getAppointmentStyle(geometry) });
  });
};
var pluginDependencies$2 = [
  { name: "DayView", optional: true },
  { name: "WeekView", optional: true },
  { name: "MonthView", optional: true }
];
var AppointmentsBase = function(_super) {
  __extends3(AppointmentsBase2, _super);
  function AppointmentsBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.updateTimeTableAppointments = memoize(function(timeTableAppointments, viewCellsData2, timeTableElementsMeta, currentView, startViewDate2, endViewDate2, cellDuration, groups, getGroupOrientation, groupByDate, placeAppointmentsNextToEachOther) {
      if (!isTimeTableElementsMetaActual(viewCellsData2, timeTableElementsMeta))
        return null;
      var groupOrientation = getGroupOrientation ? getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) : HORIZONTAL_GROUP_ORIENTATION;
      var groupCount = groups ? getGroupsLastRow(groups).length : 1;
      var appointmentType = { growDirection: VERTICAL_TYPE, multiline: false };
      var getRects = getVerticalRectByAppointmentData;
      if (currentView.type === VIEW_TYPES.MONTH) {
        appointmentType = { growDirection: HORIZONTAL_TYPE, multiline: true };
        getRects = getHorizontalRectByAppointmentData;
      }
      return renderAppointments(calculateRectByDateAndGroupIntervals(appointmentType, timeTableAppointments, getRects, {
        startViewDate: startViewDate2,
        endViewDate: endViewDate2,
        cellDuration,
        viewCellsData: viewCellsData2,
        cellElementsMeta: timeTableElementsMeta,
        placeAppointmentsNextToEachOther
      }, {
        groupOrientation,
        groupedByDate: groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name),
        groupCount
      }));
    });
    _this.updateAllDayAppointments = memoize(function(allDayAppointments, viewCellsData2, allDayElementsMeta, currentView, startViewDate2, endViewDate2, groups, getGroupOrientation, groupByDate) {
      var groupOrientation = getGroupOrientation ? getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) : HORIZONTAL_GROUP_ORIENTATION;
      var groupCount = groups ? getGroupsLastRow(groups).length : 1;
      if (!isAllDayElementsMetaActual(viewCellsData2, allDayElementsMeta, groupOrientation, groupCount)) {
        return null;
      }
      return renderAppointments(calculateRectByDateAndGroupIntervals({ growDirection: HORIZONTAL_TYPE, multiline: false }, allDayAppointments, getHorizontalRectByAppointmentData, {
        startViewDate: startViewDate2,
        endViewDate: endViewDate2,
        viewCellsData: viewCellsData2,
        cellElementsMeta: allDayElementsMeta
      }, {
        groupOrientation,
        groupedByDate: groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name),
        groupCount
      }));
    });
    return _this;
  }
  AppointmentsBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, SplitIndicator2 = _a2.splitIndicatorComponent, Appointment3 = _a2.appointmentComponent, AppointmentContent3 = _a2.appointmentContentComponent, Container3 = _a2.containerComponent, recurringIconComponent = _a2.recurringIconComponent, placeAppointmentsNextToEachOther = _a2.placeAppointmentsNextToEachOther;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "Appointments", dependencies: pluginDependencies$2 },
      (0, import_react2.createElement)(
        Template,
        { name: "timeTableAppointmentLayer" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var timeTableAppointments = _a3.timeTableAppointments, viewCellsData2 = _a3.viewCellsData, timeTableElementsMeta = _a3.timeTableElementsMeta, currentView = _a3.currentView, startViewDate2 = _a3.startViewDate, endViewDate2 = _a3.endViewDate, cellDuration = _a3.cellDuration, groupOrientation = _a3.groupOrientation, groups = _a3.groups, groupByDate = _a3.groupByDate;
          return _this.updateTimeTableAppointments(timeTableAppointments, viewCellsData2, timeTableElementsMeta, currentView, startViewDate2, endViewDate2, cellDuration, groups, groupOrientation, groupByDate, placeAppointmentsNextToEachOther);
        })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "allDayAppointmentLayer" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var allDayAppointments = _a3.allDayAppointments, viewCellsData2 = _a3.viewCellsData, allDayElementsMeta = _a3.allDayElementsMeta, startViewDate2 = _a3.startViewDate, endViewDate2 = _a3.endViewDate, groupOrientation = _a3.groupOrientation, currentView = _a3.currentView, groups = _a3.groups, groupByDate = _a3.groupByDate;
          return _this.updateAllDayAppointments(allDayAppointments, viewCellsData2, allDayElementsMeta, currentView, startViewDate2, endViewDate2, groups, groupOrientation, groupByDate);
        })
      ),
      (0, import_react2.createElement)(Template, { name: "appointment" }, function(_a3) {
        var style = _a3.style, params = __rest3(_a3, ["style"]);
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a4) {
          var formatDate3 = _a4.formatDate;
          return (0, import_react2.createElement)(
            Container3,
            { style },
            (0, import_react2.createElement)(TemplatePlaceholder, { name: "appointmentTop", params: { data: params.data, type: params.type, slice: params.fromPrev } }),
            (0, import_react2.createElement)(TemplatePlaceholder, { name: "appointmentContent", params: __assign4(__assign4({}, params), { formatDate: formatDate3 }) }),
            (0, import_react2.createElement)(TemplatePlaceholder, { name: "appointmentBottom", params: { data: params.data, type: params.type, slice: params.toNext } })
          );
        });
      }),
      (0, import_react2.createElement)(Template, { name: "appointmentContent" }, function(_a3) {
        var onClick2 = _a3.onClick, onDoubleClick = _a3.onDoubleClick, formatDate3 = _a3.formatDate, data = _a3.data, type = _a3.type, fromPrev = _a3.fromPrev, toNext = _a3.toNext, durationType = _a3.durationType, resources = _a3.resources, forwardedRef = _a3.forwardedRef, restParams = __rest3(_a3, ["onClick", "onDoubleClick", "formatDate", "data", "type", "fromPrev", "toNext", "durationType", "resources", "forwardedRef"]);
        return (0, import_react2.createElement)(
          Appointment3,
          __assign4({ forwardedRef, data, resources }, createClickHandlers(onClick2, onDoubleClick), restParams),
          fromPrev && (0, import_react2.createElement)(SplitIndicator2, { position: POSITION_START, appointmentType: type }),
          (0, import_react2.createElement)(AppointmentContent3, { data, type, durationType, recurringIconComponent, formatDate: formatDate3, resources }),
          toNext && (0, import_react2.createElement)(SplitIndicator2, { position: POSITION_END, appointmentType: type })
        );
      })
    );
  };
  AppointmentsBase2.components = {
    splitIndicatorComponent: "SplitIndicator",
    containerComponent: "Container",
    appointmentComponent: "Appointment",
    appointmentContentComponent: "AppointmentContent",
    recurringIconComponent: "RecurringIcon"
  };
  AppointmentsBase2.defaultProps = {
    placeAppointmentsNextToEachOther: false
  };
  return AppointmentsBase2;
}(import_react2.PureComponent);
var Appointments = AppointmentsBase;
var isMonthView = function(currentView) {
  return currentView.type === VIEW_TYPES.MONTH;
};
var isVerticalGrouping = function(currentView, groupOrientation) {
  return (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(currentView.name)) === VERTICAL_GROUP_ORIENTATION;
};
var pluginDependencies$3 = [
  { name: "DayView", optional: true },
  { name: "WeekView", optional: true }
];
var defaultMessages = {
  allDay: "All Day"
};
var AllDayAppointmentLayerPlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "allDayAppointmentLayer" });
};
var AllDayPanelPlaceholder = function(params) {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "allDayPanel", params });
};
var CellPlaceholder$1 = function(params) {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "allDayPanelCell", params });
};
var AllDayTitlePlaceholder = function(params) {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "allDayTitle", params });
};
var AllDayPanelBase = function(_super) {
  __extends3(AllDayPanelBase2, _super);
  function AllDayPanelBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      elementsMeta: {},
      previousCell: null,
      layoutKey: 0
    };
    _this.allDayCellsDataComputed = memoize(function(_a2) {
      var viewCellsData2 = _a2.viewCellsData;
      return allDayCells(viewCellsData2);
    });
    _this.updateCellElementsMeta = memoize(function(cellElementsMeta) {
      _this.setState({ elementsMeta: cellElementsMeta });
    });
    _this.allDayAppointmentsComputed = memoize(function(_a2) {
      var appointments2 = _a2.appointments, startViewDate2 = _a2.startViewDate, endViewDate2 = _a2.endViewDate, excludedDays = _a2.excludedDays;
      var allDayLeftBound = moment_default(startViewDate2).hours(0).minutes(0).toDate();
      var allDayRightBound = moment_default(endViewDate2).hours(23).minutes(59).toDate();
      return calculateAllDayDateIntervals(appointments2, allDayLeftBound, allDayRightBound, excludedDays);
    });
    _this.allDayPanelExistsComputed = memoize(function(_a2) {
      var currentView = _a2.currentView;
      return !isMonthView(currentView);
    });
    _this.getMessageFormatter = memoize(function(messages, allDayPanelDefaultMessages) {
      return getMessagesFormatter(__assign4(__assign4({}, allDayPanelDefaultMessages), messages));
    });
    return _this;
  }
  AllDayPanelBase2.getDerivedStateFromProps = function(props, state) {
    if (props.cellComponent !== state.previousCell) {
      return __assign4(__assign4({}, state), { previousCell: props.cellComponent, layoutKey: Math.random() });
    }
    return null;
  };
  AllDayPanelBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, AppointmentLayer = _a2.appointmentLayerComponent, Layout8 = _a2.layoutComponent, Cell7 = _a2.cellComponent, rowComponent = _a2.rowComponent, TitleCell2 = _a2.titleCellComponent, Container3 = _a2.containerComponent, messages = _a2.messages;
    var _b = this.state, elementsMeta = _b.elementsMeta, layoutKey = _b.layoutKey;
    var getMessage8 = this.getMessageFormatter(messages, defaultMessages);
    return (0, import_react2.createElement)(
      Plugin,
      { name: "AllDayPanel", dependencies: pluginDependencies$3 },
      (0, import_react2.createElement)(Getter, { name: "allDayElementsMeta", value: elementsMeta }),
      (0, import_react2.createElement)(Getter, { name: "allDayCellsData", computed: this.allDayCellsDataComputed }),
      (0, import_react2.createElement)(Getter, { name: "allDayPanelExists", computed: this.allDayPanelExistsComputed }),
      (0, import_react2.createElement)(Getter, { name: "allDayAppointments", computed: this.allDayAppointmentsComputed }),
      (0, import_react2.createElement)(Template, { name: "timeTable" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation, allDayCellsData = _a3.allDayCellsData;
          if (isMonthView(currentView) || !isVerticalGrouping(currentView, groupOrientation)) {
            return (0, import_react2.createElement)(TemplatePlaceholder, { params });
          }
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { allDayCellComponent: CellPlaceholder$1, allDayRowComponent: rowComponent, allDayCellsData }) }),
            (0, import_react2.createElement)(
              AppointmentLayer,
              null,
              (0, import_react2.createElement)(AllDayAppointmentLayerPlaceholder, null)
            )
          );
        });
      }),
      (0, import_react2.createElement)(
        Template,
        { name: "dayScaleEmptyCell" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation;
          if (isMonthView(currentView) || isVerticalGrouping(currentView, groupOrientation)) {
            return (0, import_react2.createElement)(TemplatePlaceholder, null);
          }
          return (0, import_react2.createElement)(AllDayTitlePlaceholder, null);
        })
      ),
      (0, import_react2.createElement)(Template, { name: "timeScale" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation;
          if (isMonthView(currentView) || !isVerticalGrouping(currentView, groupOrientation)) {
            return (0, import_react2.createElement)(TemplatePlaceholder, { params });
          }
          return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { allDayTitleComponent: AllDayTitlePlaceholder, showAllDayTitle: true }) });
        });
      }),
      (0, import_react2.createElement)(
        Template,
        { name: "dayScale" },
        (0, import_react2.createElement)(TemplatePlaceholder, null),
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation;
          if (isMonthView(currentView) || isVerticalGrouping(currentView, groupOrientation)) {
            return null;
          }
          return (0, import_react2.createElement)(
            Container3,
            null,
            (0, import_react2.createElement)(AllDayPanelPlaceholder, null)
          );
        })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "allDayPanel" },
        (0, import_react2.createElement)(TemplatePlaceholder, null),
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, formatDate3 = _a3.formatDate, allDayCellsData = _a3.allDayCellsData;
          if (currentView.type === VIEW_TYPES.MONTH)
            return null;
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(Layout8, { cellComponent: CellPlaceholder$1, rowComponent, cellsData: allDayCellsData[0], setCellElementsMeta: _this.updateCellElementsMeta, formatDate: formatDate3, key: layoutKey }),
            (0, import_react2.createElement)(
              AppointmentLayer,
              null,
              (0, import_react2.createElement)(AllDayAppointmentLayerPlaceholder, null)
            )
          );
        })
      ),
      (0, import_react2.createElement)(Template, { name: "allDayTitle" }, function(params) {
        return (0, import_react2.createElement)(TitleCell2, __assign4({ getMessage: getMessage8 }, params));
      }),
      (0, import_react2.createElement)(Template, { name: "allDayPanelCell" }, function(params) {
        return (0, import_react2.createElement)(Cell7, __assign4({}, params));
      })
    );
  };
  AllDayPanelBase2.defaultProps = {
    messages: {}
  };
  AllDayPanelBase2.components = {
    appointmentLayerComponent: "AppointmentLayer",
    layoutComponent: "Layout",
    layoutContainerComponent: "LayoutContainer",
    cellComponent: "Cell",
    rowComponent: "Row",
    titleCellComponent: "TitleCell",
    containerComponent: "Container"
  };
  return AllDayPanelBase2;
}(import_react2.PureComponent);
var AllDayPanel = AllDayPanelBase;
var ViewStateBase = function(_super) {
  __extends3(ViewStateBase2, _super);
  function ViewStateBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.getCurrentViewComputed = memoize(function(currentViewName) {
      return function() {
        return currentViewName ? { name: currentViewName } : void 0;
      };
    });
    _this.state = {
      currentDate: props.currentDate || props.defaultCurrentDate,
      currentViewName: props.currentViewName || props.defaultCurrentViewName
    };
    var stateHelper = createStateHelper(_this, {
      currentDate: function() {
        var onCurrentDateChange = _this.props.onCurrentDateChange;
        return onCurrentDateChange;
      },
      currentViewName: function() {
        var onCurrentViewNameChange = _this.props.onCurrentViewNameChange;
        return onCurrentViewNameChange;
      }
    });
    _this.changeCurrentDate = stateHelper.applyFieldReducer.bind(stateHelper, "currentDate", changeCurrentDate);
    _this.setCurrentViewName = stateHelper.applyFieldReducer.bind(stateHelper, "currentViewName", setCurrentViewName);
    return _this;
  }
  ViewStateBase2.getDerivedStateFromProps = function(nextProps, prevState) {
    var _a2 = nextProps.currentDate, currentDate = _a2 === void 0 ? prevState.currentDate : _a2, _b = nextProps.currentViewName, currentViewName = _b === void 0 ? prevState.currentViewName : _b;
    return {
      currentDate,
      currentViewName
    };
  };
  ViewStateBase2.prototype.render = function() {
    var _a2 = this.state, currentDate = _a2.currentDate, stateCurrentViewName = _a2.currentViewName;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "ViewState" },
      (0, import_react2.createElement)(Getter, { name: "currentDate", value: currentDate }),
      (0, import_react2.createElement)(Getter, { name: "currentView", computed: this.getCurrentViewComputed(stateCurrentViewName) }),
      (0, import_react2.createElement)(Action, { name: "changeCurrentDate", action: this.changeCurrentDate }),
      (0, import_react2.createElement)(Action, { name: "setCurrentViewName", action: this.setCurrentViewName })
    );
  };
  ViewStateBase2.defaultProps = {
    defaultCurrentDate: new Date()
  };
  return ViewStateBase2;
}(import_react2.PureComponent);
var EditingStateBase = function(_super) {
  __extends3(EditingStateBase2, _super);
  function EditingStateBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      editingAppointment: props.editingAppointment || props.defaultEditingAppointment,
      addedAppointment: props.addedAppointment || props.defaultAddedAppointment,
      appointmentChanges: props.appointmentChanges || props.defaultAppointmentChanges
    };
    var stateHelper = createStateHelper(_this, {
      editingAppointment: function() {
        var onEditingAppointmentChange = _this.props.onEditingAppointmentChange;
        return onEditingAppointmentChange;
      },
      addedAppointment: function() {
        var onAddedAppointmentChange = _this.props.onAddedAppointmentChange;
        return onAddedAppointmentChange;
      },
      appointmentChanges: function() {
        var onAppointmentChangesChange = _this.props.onAppointmentChangesChange;
        return onAppointmentChangesChange;
      }
    });
    _this.addAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "addedAppointment", addAppointment);
    _this.changeAddedAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "addedAppointment", changeAppointment);
    _this.cancelAddedAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "addedAppointment", cancelAddedAppointment);
    _this.startEditAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "editingAppointment", startEditAppointment);
    _this.stopEditAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "editingAppointment", stopEditAppointment);
    _this.changeAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "appointmentChanges", changeAppointment);
    _this.cancelChangedAppointment = stateHelper.applyFieldReducer.bind(stateHelper, "appointmentChanges", cancelChanges);
    _this.commitChangedAppointment = function(type) {
      if (type === void 0) {
        type = RECURRENCE_EDIT_SCOPE.CURRENT;
      }
      var _a2 = _this.state, appointmentChanges = _a2.appointmentChanges, editingAppointment = _a2.editingAppointment;
      var _b = _this.props, onCommitChanges = _b.onCommitChanges, preCommitChanges2 = _b.preCommitChanges;
      if (!editingAppointment) {
        return;
      }
      var changes = !editingAppointment.rRule ? { changed: changedAppointmentById(appointmentChanges, editingAppointment.id) } : preCommitChanges2(appointmentChanges, editingAppointment, type);
      onCommitChanges(changes);
      _this.cancelChangedAppointment();
      _this.stopEditAppointment();
    };
    _this.commitAddedAppointment = function() {
      var onCommitChanges = _this.props.onCommitChanges;
      var stateAddedAppointment = _this.state.addedAppointment;
      onCommitChanges({
        added: stateAddedAppointment
      });
    };
    _this.commitDeletedAppointment = function(_a2) {
      var deletedAppointmentData = _a2.deletedAppointmentData, _b = _a2.type, type = _b === void 0 ? "current" : _b;
      var _c = _this.props, onCommitChanges = _c.onCommitChanges, preCommitChanges2 = _c.preCommitChanges;
      var changes = deletedAppointmentData.rRule ? preCommitChanges2(null, deletedAppointmentData, type) : { deleted: deletedAppointmentData.id };
      onCommitChanges(changes);
    };
    return _this;
  }
  EditingStateBase2.getDerivedStateFromProps = function(nextProps, prevState) {
    var _a2 = nextProps.editingAppointment, editingAppointment = _a2 === void 0 ? prevState.editingAppointment : _a2, _b = nextProps.appointmentChanges, appointmentChanges = _b === void 0 ? prevState.appointmentChanges : _b, _c = nextProps.addedAppointment, addedAppointment = _c === void 0 ? prevState.addedAppointment : _c;
    return {
      editingAppointment,
      appointmentChanges,
      addedAppointment
    };
  };
  EditingStateBase2.prototype.render = function() {
    var _a2 = this.state, addedAppointment = _a2.addedAppointment, editingAppointment = _a2.editingAppointment, appointmentChanges = _a2.appointmentChanges;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "EditingState" },
      (0, import_react2.createElement)(Getter, { name: "editingAppointment", value: editingAppointment }),
      (0, import_react2.createElement)(Action, { name: "startEditAppointment", action: this.startEditAppointment }),
      (0, import_react2.createElement)(Action, { name: "stopEditAppointment", action: this.stopEditAppointment }),
      (0, import_react2.createElement)(Getter, { name: "appointmentChanges", value: appointmentChanges }),
      (0, import_react2.createElement)(Action, { name: "changeAppointment", action: this.changeAppointment }),
      (0, import_react2.createElement)(Action, { name: "cancelChangedAppointment", action: this.cancelChangedAppointment }),
      (0, import_react2.createElement)(Action, { name: "commitChangedAppointment", action: this.commitChangedAppointment }),
      (0, import_react2.createElement)(Getter, { name: "addedAppointment", value: addedAppointment }),
      (0, import_react2.createElement)(Action, { name: "addAppointment", action: this.addAppointment }),
      (0, import_react2.createElement)(Action, { name: "changeAddedAppointment", action: this.changeAddedAppointment }),
      (0, import_react2.createElement)(Action, { name: "cancelAddedAppointment", action: this.cancelAddedAppointment }),
      (0, import_react2.createElement)(Action, { name: "commitAddedAppointment", action: this.commitAddedAppointment }),
      (0, import_react2.createElement)(Action, { name: "commitDeletedAppointment", action: this.commitDeletedAppointment })
    );
  };
  EditingStateBase2.defaultProps = {
    defaultEditingAppointment: void 0,
    defaultAppointmentChanges: {},
    defaultAddedAppointment: {},
    preCommitChanges
  };
  return EditingStateBase2;
}(import_react2.PureComponent);
var pluginDependencies$4 = [
  { name: "Appointments" },
  { name: "EditingState", optional: true },
  { name: "EditRecurrenceMenu", optional: true },
  { name: "IntegratedEditing", optional: true }
];
var commandButtonIds = {
  open: OPEN_COMMAND_BUTTON,
  close: CLOSE_COMMAND_BUTTON,
  delete: DELETE_COMMAND_BUTTON
};
var AppointmentTooltipBase = function(_super) {
  __extends3(AppointmentTooltipBase2, _super);
  function AppointmentTooltipBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      visible: props.visible,
      appointmentMeta: props.appointmentMeta
    };
    var stateHelper = createStateHelper(_this, {
      visible: function() {
        var onVisibilityChange = _this.props.onVisibilityChange;
        return onVisibilityChange;
      },
      appointmentMeta: function() {
        var onAppointmentMetaChange = _this.props.onAppointmentMetaChange;
        return onAppointmentMetaChange;
      }
    });
    var toggleVisibility = function() {
      var isOpen = _this.state.visible;
      return !isOpen;
    };
    _this.toggleVisibility = stateHelper.applyFieldReducer.bind(stateHelper, "visible", toggleVisibility);
    _this.setAppointmentMeta = stateHelper.applyFieldReducer.bind(stateHelper, "appointmentMeta", setAppointmentMeta);
    _this.onAppointmentClick = function(_a2) {
      var target = _a2.target, data = _a2.data;
      _this.setAppointmentMeta({ target, data });
      _this.toggleVisibility();
    };
    return _this;
  }
  AppointmentTooltipBase2.getDerivedStateFromProps = function(nextProps, prevState) {
    var _a2 = nextProps.visible, visible = _a2 === void 0 ? prevState.visible : _a2, _b = nextProps.appointmentMeta, appointmentMeta = _b === void 0 ? prevState.appointmentMeta : _b;
    return {
      appointmentMeta,
      visible
    };
  };
  AppointmentTooltipBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, showOpenButton = _a2.showOpenButton, showDeleteButton = _a2.showDeleteButton, showCloseButton = _a2.showCloseButton, Layout8 = _a2.layoutComponent, headerComponent = _a2.headerComponent, contentComponent = _a2.contentComponent, commandButtonComponent = _a2.commandButtonComponent, recurringIconComponent = _a2.recurringIconComponent;
    var _b = this.state, visible = _b.visible, appointmentMeta = _b.appointmentMeta;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "AppointmentTooltip", dependencies: pluginDependencies$4 },
      (0, import_react2.createElement)(Action, { name: TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY, action: this.toggleVisibility }),
      (0, import_react2.createElement)(
        Template,
        { name: "timeTable" },
        (0, import_react2.createElement)(TemplatePlaceholder, null),
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var formatDate3 = _a3.formatDate, resources = _a3.resources, plainResources = _a3.plainResources;
          var finishDeleteAppointment = _b2.finishDeleteAppointment, openDeleteConfirmationDialog = _b2.openDeleteConfirmationDialog;
          var onDeleteButtonClick = function() {
            if (!finishDeleteAppointment) {
              return;
            }
            if (openDeleteConfirmationDialog) {
              openDeleteConfirmationDialog({
                hideActionName: TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY,
                appointmentData: appointmentMeta.data
              });
            } else {
              _this.toggleVisibility();
              finishDeleteAppointment(appointmentMeta.data);
            }
          };
          return (0, import_react2.createElement)(TemplatePlaceholder, { name: "tooltip", params: {
            commandButtonComponent,
            recurringIconComponent,
            showOpenButton,
            showDeleteButton,
            showCloseButton,
            headerComponent,
            contentComponent,
            appointmentMeta,
            appointmentResources: appointmentMeta ? getAppointmentResources(appointmentMeta.data, resources, plainResources) : [],
            visible,
            onHide: _this.toggleVisibility,
            commandButtonIds,
            onDeleteButtonClick,
            formatDate: formatDate3
          } });
        })
      ),
      (0, import_react2.createElement)(Template, { name: "tooltip" }, function(params) {
        return (0, import_react2.createElement)(Layout8, __assign4({}, params));
      }),
      (0, import_react2.createElement)(Template, { name: "appointment" }, function(params) {
        return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { onClick: function(_a3) {
          var target = _a3.target, data = _a3.data;
          return _this.onAppointmentClick({ target, data });
        } }) });
      })
    );
  };
  AppointmentTooltipBase2.defaultProps = {
    showOpenButton: false,
    showDeleteButton: false,
    showCloseButton: false
  };
  AppointmentTooltipBase2.components = {
    layoutComponent: "Layout",
    headerComponent: "Header",
    contentComponent: "Content",
    commandButtonComponent: "CommandButton",
    recurringIconComponent: "RecurringIcon"
  };
  return AppointmentTooltipBase2;
}(import_react2.PureComponent);
var AppointmentTooltip = AppointmentTooltipBase;
var addDoubleClickToCell = function(title, startDate, endDate, groupingInfo, resources, allDay, openFormHandler, addAppointment2, params) {
  var resourceFields = !!groupingInfo ? groupingInfo.reduce(function(acc, currentGroup) {
    var _a2;
    return __assign4(__assign4({}, acc), (_a2 = {}, _a2[currentGroup.fieldName] = currentGroup.id, _a2));
  }, {}) : {};
  var validResourceFields = resources ? checkMultipleResourceFields(resourceFields, resources) : resourceFields;
  var newAppointmentData = __assign4({ title, startDate, endDate, allDay }, validResourceFields);
  return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { onDoubleClick: function() {
    openFormHandler(newAppointmentData);
    callActionIfExists(addAppointment2, { appointmentData: newAppointmentData });
  } }) });
};
var defaultMessages$1 = {
  allDayLabel: "All Day",
  titleLabel: "Title",
  commitCommand: "Save",
  detailsLabel: "Details",
  moreInformationLabel: "More Information",
  repeatLabel: "Repeat",
  notesLabel: "Notes",
  never: "Never",
  daily: "Daily",
  weekly: "Weekly",
  monthly: "Monthly",
  yearly: "Yearly",
  repeatEveryLabel: "Repeat every",
  daysLabel: "day(s)",
  endRepeatLabel: "End repeat",
  onLabel: "On",
  afterLabel: "After",
  occurrencesLabel: "occurrence(s)",
  weeksOnLabel: "week(s) on:",
  monthsLabel: "month(s)",
  ofEveryMonthLabel: "of every month",
  theLabel: "The",
  firstLabel: "First",
  secondLabel: "Second",
  thirdLabel: "Third",
  fourthLabel: "Fourth",
  lastLabel: "Last",
  yearsLabel: "year(s)",
  ofLabel: "of ",
  everyLabel: "Every"
};
var CommandLayoutPlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "commandLayout" });
};
var BasicLayoutPlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "basicLayout" });
};
var RecurrenceLayoutPlaceholder = function() {
  return (0, import_react2.createElement)(TemplatePlaceholder, { name: "recurrenceLayout" });
};
var pluginDependencies$5 = [
  { name: "EditingState", optional: true },
  { name: "Appointments", optional: true },
  { name: "AppointmentTooltip", optional: true },
  { name: "EditRecurrenceMenu", optional: true },
  { name: "IntegratedEditing", optional: true }
];
var prepareChanges = function(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources) {
  var isNew = !editingAppointment;
  var changedAppointment = __assign4(__assign4(__assign4({}, appointmentData), appointmentChanges), isNew && addedAppointment);
  var appointmentResources = getAppointmentResources(changedAppointment, resources, plainResources);
  var isFormEdited = isNew || Object.getOwnPropertyNames(appointmentChanges).length !== 0;
  return { changedAppointment, appointmentResources, isNew, isFormEdited };
};
var isFormFullSize = function(isFormVisible, changedAppointmentRRule, previousAppointmentRRule) {
  return !!changedAppointmentRRule || !isFormVisible && !!previousAppointmentRRule;
};
var AppointmentFormBase = function(_super) {
  __extends3(AppointmentFormBase2, _super);
  function AppointmentFormBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.container = (0, import_react2.createRef)();
    _this.commitChanges = memoize(function(finishCommitAppointment, commitAddedAppointment, isNew, changedAppointment) {
      return function() {
        _this.toggleVisibility();
        if (isNew) {
          callActionIfExists(commitAddedAppointment, changedAppointment);
        } else if (finishCommitAppointment) {
          finishCommitAppointment();
        }
        _this.setState({ previousAppointment: changedAppointment });
      };
    });
    _this.cancelChanges = memoize(function(openCancelConfirmationDialog, isNew, stopEditAppointment2, appointmentChanges, changedAppointment, cancelAddedAppointment2, cancelChangedAppointment) {
      return function() {
        if (openCancelConfirmationDialog && Object.keys(appointmentChanges).length !== 0) {
          openCancelConfirmationDialog(TOGGLE_APPOINTMENT_FORM_VISIBILITY);
        } else {
          if (isNew) {
            callActionIfExists(cancelAddedAppointment2, appointmentChanges);
          } else {
            callActionIfExists(stopEditAppointment2, appointmentChanges);
            callActionIfExists(cancelChangedAppointment, appointmentChanges);
          }
          _this.toggleVisibility();
        }
        _this.setState({ previousAppointment: changedAppointment });
      };
    });
    _this.deleteAppointment = memoize(function(finishDeleteAppointment, appointmentData, openDeleteConfirmationDialog, changedAppointment, cancelAddedAppointment2, cancelChangedAppointment, stopEditAppointment2, isNew) {
      return function() {
        if (openDeleteConfirmationDialog) {
          openDeleteConfirmationDialog({
            hideActionName: TOGGLE_APPOINTMENT_FORM_VISIBILITY,
            appointmentData: changedAppointment
          });
        } else {
          callActionIfExists(finishDeleteAppointment, appointmentData);
          if (isNew) {
            callActionIfExists(cancelAddedAppointment2, appointmentData);
          } else {
            callActionIfExists(cancelChangedAppointment, appointmentData);
            callActionIfExists(stopEditAppointment2, appointmentData);
          }
          _this.toggleVisibility();
        }
        _this.setState({ previousAppointment: changedAppointment });
      };
    });
    _this.changeAppointmentField = memoize(function(isNew, changeAddedAppointment, changeAppointment2) {
      return function(change) {
        if (change && change.rRule) {
          _this.setState({ previousAppointment: __assign4(__assign4({}, _this.state.previousAppointment), { rRule: change.rRule }) });
        }
        if (isNew) {
          callActionIfExists(changeAddedAppointment, { change });
        } else {
          callActionIfExists(changeAppointment2, { change });
        }
      };
    });
    _this.getMessage = memoize(function(menuMessages, messages) {
      return getMessagesFormatter(__assign4(__assign4({}, menuMessages), messages));
    });
    _this.state = {
      visible: props.visible,
      appointmentData: props.appointmentData || {},
      previousAppointment: props.appointmentData || {}
    };
    var stateHelper = createStateHelper(_this, {
      visible: function() {
        var onVisibilityChange = _this.props.onVisibilityChange;
        return onVisibilityChange;
      },
      appointmentData: function() {
        var onAppointmentDataChange = _this.props.onAppointmentDataChange;
        return onAppointmentDataChange;
      }
    });
    var toggleVisibility = function() {
      var isOpen = _this.state.visible;
      return !isOpen;
    };
    _this.toggleVisibility = stateHelper.applyFieldReducer.bind(stateHelper, "visible", toggleVisibility);
    _this.setAppointmentData = stateHelper.applyFieldReducer.bind(stateHelper, "appointmentData", setAppointmentData);
    _this.openFormHandler = function(appointmentData) {
      _this.setAppointmentData({ appointmentData });
      _this.toggleVisibility();
    };
    return _this;
  }
  AppointmentFormBase2.getDerivedStateFromProps = function(nextProps, prevState) {
    var _a2 = nextProps.visible, visible = _a2 === void 0 ? prevState.visible : _a2, _b = nextProps.appointmentData, appointmentData = _b === void 0 ? prevState.appointmentData : _b;
    return {
      appointmentData,
      visible
    };
  };
  AppointmentFormBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.props, Container3 = _a2.containerComponent, Overlay5 = _a2.overlayComponent, Layout8 = _a2.layoutComponent, CommandLayout = _a2.commandLayoutComponent, BasicLayout = _a2.basicLayoutComponent, RecurrenceLayout = _a2.recurrenceLayoutComponent, commandButtonComponent = _a2.commandButtonComponent, textEditorComponent = _a2.textEditorComponent, labelComponent = _a2.labelComponent, dateEditorComponent = _a2.dateEditorComponent, booleanEditorComponent = _a2.booleanEditorComponent, selectComponent = _a2.selectComponent, radioGroupComponent = _a2.radioGroupComponent, weeklyRecurrenceSelectorComponent = _a2.weeklyRecurrenceSelectorComponent, resourceEditorComponent = _a2.resourceEditorComponent, readOnly = _a2.readOnly, messages = _a2.messages;
    var _b = this.state, visible = _b.visible, appointmentData = _b.appointmentData, previousAppointment = _b.previousAppointment;
    var getMessage8 = this.getMessage(defaultMessages$1, messages);
    return (0, import_react2.createElement)(
      Plugin,
      { name: "AppointmentForm", dependencies: pluginDependencies$5 },
      (0, import_react2.createElement)(Action, { name: TOGGLE_APPOINTMENT_FORM_VISIBILITY, action: this.toggleVisibility }),
      (0, import_react2.createElement)(
        Template,
        { name: "schedulerRoot" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var editingAppointment = _a3.editingAppointment, addedAppointment = _a3.addedAppointment, appointmentChanges = _a3.appointmentChanges, resources = _a3.resources, plainResources = _a3.plainResources;
          var openCancelConfirmationDialog = _b2.openCancelConfirmationDialog, stopEditAppointment2 = _b2.stopEditAppointment, cancelAddedAppointment2 = _b2.cancelAddedAppointment, cancelChangedAppointment = _b2.cancelChangedAppointment;
          var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources), changedAppointment = _c.changedAppointment, isNew = _c.isNew;
          var fullSize = isFormFullSize(visible, changedAppointment.rRule, previousAppointment.rRule);
          var onHideAction = function() {
            return visible && _this.cancelChanges(openCancelConfirmationDialog, isNew, stopEditAppointment2, __assign4(__assign4({}, appointmentChanges), addedAppointment), changedAppointment, cancelAddedAppointment2, cancelChangedAppointment)();
          };
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(Container3, { ref: _this.container }),
            (0, import_react2.createElement)(
              Overlay5,
              { visible, onHide: onHideAction, fullSize, target: _this.container },
              (0, import_react2.createElement)(Layout8, { basicLayoutComponent: BasicLayoutPlaceholder, commandLayoutComponent: CommandLayoutPlaceholder, recurrenceLayoutComponent: RecurrenceLayoutPlaceholder, isRecurrence: fullSize })
            ),
            (0, import_react2.createElement)(TemplatePlaceholder, null)
          );
        })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "commandLayout" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var editingAppointment = _a3.editingAppointment, addedAppointment = _a3.addedAppointment, appointmentChanges = _a3.appointmentChanges, resources = _a3.resources, plainResources = _a3.plainResources;
          var commitAddedAppointment = _b2.commitAddedAppointment, finishCommitAppointment = _b2.finishCommitAppointment, finishDeleteAppointment = _b2.finishDeleteAppointment, stopEditAppointment2 = _b2.stopEditAppointment, cancelAddedAppointment2 = _b2.cancelAddedAppointment, cancelChangedAppointment = _b2.cancelChangedAppointment, openCancelConfirmationDialog = _b2.openCancelConfirmationDialog, openDeleteConfirmationDialog = _b2.openDeleteConfirmationDialog;
          var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources), isNew = _c.isNew, changedAppointment = _c.changedAppointment, isFormEdited = _c.isFormEdited;
          var isRecurrence = isFormFullSize(visible, changedAppointment.rRule, previousAppointment.rRule);
          return (0, import_react2.createElement)(CommandLayout, { commandButtonComponent, onCommitButtonClick: _this.commitChanges(finishCommitAppointment, commitAddedAppointment, isNew, changedAppointment), onCancelButtonClick: _this.cancelChanges(openCancelConfirmationDialog, isNew, stopEditAppointment2, __assign4(__assign4({}, appointmentChanges), addedAppointment), changedAppointment, cancelAddedAppointment2, cancelChangedAppointment), onDeleteButtonClick: _this.deleteAppointment(finishDeleteAppointment, appointmentData, openDeleteConfirmationDialog, changedAppointment, cancelAddedAppointment2, cancelChangedAppointment, stopEditAppointment2, isNew), getMessage: getMessage8, readOnly, fullSize: isRecurrence, disableSaveButton: !isFormEdited, hideDeleteButton: isNew });
        })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "basicLayout" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var editingAppointment = _a3.editingAppointment, addedAppointment = _a3.addedAppointment, appointmentChanges = _a3.appointmentChanges, locale2 = _a3.locale, resources = _a3.resources, plainResources = _a3.plainResources;
          var changeAppointment2 = _b2.changeAppointment, changeAddedAppointment = _b2.changeAddedAppointment;
          var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, resources, plainResources), isNew = _c.isNew, changedAppointment = _c.changedAppointment, appointmentResources = _c.appointmentResources;
          return (0, import_react2.createElement)(BasicLayout, { locale: locale2, appointmentData: visible ? changedAppointment : previousAppointment, onFieldChange: _this.changeAppointmentField(isNew, changeAddedAppointment, changeAppointment2), getMessage: getMessage8, readOnly, textEditorComponent, dateEditorComponent, booleanEditorComponent, selectComponent, labelComponent, resourceEditorComponent, fullSize: !changedAppointment.rRule, resources, appointmentResources });
        })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "recurrenceLayout" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var editingAppointment = _a3.editingAppointment, addedAppointment = _a3.addedAppointment, appointmentChanges = _a3.appointmentChanges, formatDate3 = _a3.formatDate, locale2 = _a3.locale, firstDayOfWeek = _a3.firstDayOfWeek;
          var changeAddedAppointment = _b2.changeAddedAppointment, changeAppointment2 = _b2.changeAppointment;
          var _c = prepareChanges(appointmentData, editingAppointment, addedAppointment, appointmentChanges, void 0, void 0), isNew = _c.isNew, changedAppointment = _c.changedAppointment;
          var isRecurrenceLayoutVisible = isFormFullSize(visible, changedAppointment.rRule, previousAppointment.rRule);
          var correctedAppointment = !changedAppointment.rRule ? __assign4(__assign4({}, changedAppointment), { rRule: previousAppointment.rRule }) : changedAppointment;
          return (0, import_react2.createElement)(RecurrenceLayout, { locale: locale2, appointmentData: visible ? correctedAppointment : previousAppointment, onFieldChange: _this.changeAppointmentField(isNew, changeAddedAppointment, changeAppointment2), getMessage: getMessage8, readOnly, formatDate: formatDate3, textEditorComponent, dateEditorComponent, radioGroupComponent, weeklyRecurrenceSelectorComponent, labelComponent, selectComponent, visible: isRecurrenceLayoutVisible, firstDayOfWeek });
        })
      ),
      (0, import_react2.createElement)(Template, { name: "tooltip" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(getters, _a3) {
          var startEditAppointment2 = _a3.startEditAppointment;
          return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { onOpenButtonClick: function() {
            _this.openFormHandler(params.appointmentMeta.data);
            callActionIfExists(startEditAppointment2, params.appointmentMeta.data);
          } }) });
        });
      }),
      (0, import_react2.createElement)(Template, { name: "appointment" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(getters, _a3) {
          var startEditAppointment2 = _a3.startEditAppointment;
          return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { onDoubleClick: function() {
            _this.openFormHandler(params.data);
            callActionIfExists(startEditAppointment2, params.data);
          } }) });
        });
      }),
      (0, import_react2.createElement)(Template, { name: "cell" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var resources = _a3.resources;
          var addAppointment2 = _b2.addAppointment;
          return addDoubleClickToCell(void 0, params.startDate, params.endDate, params.groupingInfo, resources, isAllDayCell(params.startDate, params.endDate), _this.openFormHandler, addAppointment2, params);
        });
      }),
      (0, import_react2.createElement)(Template, { name: "allDayPanelCell" }, function(params) {
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var resources = _a3.resources;
          var addAppointment2 = _b2.addAppointment;
          return addDoubleClickToCell(void 0, params.startDate, params.endDate, params.groupingInfo, resources, true, _this.openFormHandler, addAppointment2, params);
        });
      })
    );
  };
  AppointmentFormBase2.defaultProps = {
    messages: {},
    readOnly: false,
    onVisibilityChange: function() {
      return void 0;
    },
    onAppointmentDataChange: function() {
      return void 0;
    }
  };
  AppointmentFormBase2.components = {
    overlayComponent: "Overlay",
    layoutComponent: "Layout",
    commandLayoutComponent: "CommandLayout",
    commandButtonComponent: "CommandButton",
    basicLayoutComponent: "BasicLayout",
    textEditorComponent: "TextEditor",
    labelComponent: "Label",
    dateEditorComponent: "DateEditor",
    booleanEditorComponent: "BooleanEditor",
    selectComponent: "Select",
    recurrenceLayoutComponent: "RecurrenceLayout",
    radioGroupComponent: "RadioGroup",
    weeklyRecurrenceSelectorComponent: "WeeklyRecurrenceSelector",
    resourceEditorComponent: "ResourceEditor",
    containerComponent: "Container"
  };
  return AppointmentFormBase2;
}(import_react2.PureComponent);
var AppointmentForm = AppointmentFormBase;
var renderAppointmentItems = function(items, Wrapper, draftData) {
  return items.length > 0 ? (0, import_react2.createElement)(Wrapper, null, items.map(function(draftAppointment, index) {
    return (0, import_react2.createElement)(TemplatePlaceholder, { name: "draftAppointment", key: index.toString(), params: { data: draftData, draftAppointment } });
  })) : null;
};
var pluginDependencies$6 = [
  { name: "EditingState" },
  { name: "Appointments" },
  { name: "EditRecurrenceMenu", optional: true },
  { name: "IntegratedEditing", optional: true },
  { name: "DayView", optional: true },
  { name: "WeekView", optional: true },
  { name: "MonthView", optional: true },
  { name: "AllDayPanel", optional: true }
];
var DragDropProviderBase = function(_super) {
  __extends3(DragDropProviderBase2, _super);
  function DragDropProviderBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.timeTableDraftAppointments = [];
    _this.allDayDraftAppointments = [];
    _this.offsetTimeTop = null;
    _this.appointmentStartTime = null;
    _this.appointmentEndTime = null;
    _this.appointmentGroupingInfo = {};
    _this.state = {
      startTime: null,
      endTime: null,
      appointmentGroupingInfo: null,
      payload: null,
      isOutside: false,
      allowDrag: function() {
        return true;
      },
      allowResize: function() {
        return true;
      },
      appointmentContentTemplateKey: 0,
      appointmentTopTemplateKey: 0,
      appointmentBottomTemplateKey: 0
    };
    _this.handleDrop = function(_a2) {
      var finishCommitAppointment = _a2.finishCommitAppointment;
      return function() {
        finishCommitAppointment();
        _this.resetCache();
      };
    };
    _this.handleLeave = function() {
      _this.setState({ isOutside: true });
    };
    return _this;
  }
  DragDropProviderBase2.getDerivedStateFromProps = function(props, state) {
    var isAllowDragSame = props.allowDrag === state.allowDrag;
    var isAllowResizeSame = props.allowResize === state.allowResize;
    if (isAllowDragSame && isAllowResizeSame) {
      return null;
    }
    return __assign4(__assign4({}, state), { appointmentContentTemplateKey: isAllowDragSame ? state.appointmentContentTemplateKey : Math.random(), appointmentTopTemplateKey: isAllowResizeSame ? state.appointmentTopTemplateKey : Math.random(), appointmentBottomTemplateKey: isAllowResizeSame ? state.appointmentBottomTemplateKey : Math.random(), allowDrag: props.allowDrag, allowResize: props.allowResize });
  };
  DragDropProviderBase2.prototype.onPayloadChange = function(actions) {
    var _this = this;
    return function(args) {
      return _this.handlePayloadChange(args, actions);
    };
  };
  DragDropProviderBase2.prototype.calculateNextBoundaries = function(getters, actions, scrollSpeed) {
    var _this = this;
    return function(args) {
      return _this.calculateBoundaries(args, getters, actions, scrollSpeed);
    };
  };
  DragDropProviderBase2.prototype.resetCache = function() {
    this.timeTableDraftAppointments = [];
    this.allDayDraftAppointments = [];
    this.offsetTimeTop = null;
    this.appointmentStartTime = null;
    this.appointmentEndTime = null;
    this.appointmentGroupingInfo = {};
    this.setState({
      payload: null,
      startTime: null,
      endTime: null,
      isOutside: false
    });
  };
  DragDropProviderBase2.prototype.applyChanges = function(startTime, endTime, payload, startEditAppointment2, changeAppointment2, appointmentGroupingInfo) {
    startEditAppointment2(payload);
    changeAppointment2({
      change: __assign4(__assign4({ startDate: startTime, endDate: endTime }, payload.allDay && { allDay: void 0 }), this.appointmentGroupingInfo)
    });
    this.setState({ startTime, endTime, payload, isOutside: false, appointmentGroupingInfo });
  };
  DragDropProviderBase2.prototype.handlePayloadChange = function(_a2, _b) {
    var payload = _a2.payload;
    var finishCommitAppointment = _b.finishCommitAppointment;
    var isOutside = this.state.isOutside;
    if (payload || !isOutside)
      return;
    finishCommitAppointment();
    this.resetCache();
  };
  DragDropProviderBase2.prototype.calculateBoundaries = function(_a2, _b, _c, scrollSpeed) {
    var payload = _a2.payload, clientOffset = _a2.clientOffset;
    var viewCellsData2 = _b.viewCellsData, allDayCellsData = _b.allDayCellsData, startViewDate2 = _b.startViewDate, endViewDate2 = _b.endViewDate, excludedDays = _b.excludedDays, currentView = _b.currentView, timeTableElementsMeta = _b.timeTableElementsMeta, allDayElementsMeta = _b.allDayElementsMeta, scrollingStrategy3 = _b.scrollingStrategy, grouping = _b.grouping, resources = _b.resources, groups = _b.groups, getGroupOrientation = _b.groupOrientation, groupByDate = _b.groupByDate;
    var changeAppointment2 = _c.changeAppointment, startEditAppointment2 = _c.startEditAppointment;
    if (clientOffset) {
      autoScroll(clientOffset, scrollingStrategy3, scrollSpeed);
    }
    var tableCellElementsMeta = timeTableElementsMeta;
    var groupOrientation = getGroupOrientation ? getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) : HORIZONTAL_GROUP_ORIENTATION;
    var allDayCellsElementsMeta = allDayElementsMeta && allDayElementsMeta.getCellRects ? allDayElementsMeta : { getCellRects: [] };
    var timeTableIndex = cellIndex(tableCellElementsMeta.getCellRects, clientOffset);
    var allDayIndex = cellIndex(allDayCellsElementsMeta.getCellRects, clientOffset);
    if (allDayIndex === -1 && timeTableIndex === -1)
      return;
    var targetData = cellData(timeTableIndex, allDayIndex, viewCellsData2, allDayCellsData);
    var targetType = cellType(targetData);
    var insidePart = calculateInsidePart(clientOffset.y, tableCellElementsMeta.getCellRects, timeTableIndex);
    var cellDurationMinutes = intervalDuration(targetData, "minutes");
    var _d = calculateAppointmentTimeBoundaries(payload, targetData, targetType, cellDurationMinutes, insidePart, this.offsetTimeTop), appointmentStartTime = _d.appointmentStartTime, appointmentEndTime = _d.appointmentEndTime, offsetTimeTop = _d.offsetTimeTop;
    var appointmentGroups = calculateAppointmentGroups(targetData.groupingInfo, resources, payload);
    this.appointmentStartTime = appointmentStartTime || this.appointmentStartTime;
    this.appointmentEndTime = appointmentEndTime || this.appointmentEndTime;
    this.appointmentGroupingInfo = appointmentGroups || this.appointmentGroupingInfo;
    this.offsetTimeTop = offsetTimeTop;
    var _e = this.state, startTime = _e.startTime, endTime = _e.endTime, appointmentGroupingInfo = _e.appointmentGroupingInfo;
    if (!appointmentDragged(this.appointmentStartTime, startTime, this.appointmentEndTime, endTime, this.appointmentGroupingInfo, appointmentGroupingInfo)) {
      return;
    }
    var draftAppointments = [{
      dataItem: __assign4(__assign4(__assign4({}, payload), { startDate: this.appointmentStartTime, endDate: this.appointmentEndTime }), this.appointmentGroupingInfo),
      start: this.appointmentStartTime,
      end: this.appointmentEndTime
    }];
    var _f = calculateDraftAppointments(allDayIndex, draftAppointments, startViewDate2, endViewDate2, excludedDays, viewCellsData2, allDayCellsElementsMeta, targetType, cellDurationMinutes, tableCellElementsMeta, grouping, resources, groups, groupOrientation, groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name)), allDayDraftAppointments = _f.allDayDraftAppointments, timeTableDraftAppointments = _f.timeTableDraftAppointments;
    this.allDayDraftAppointments = allDayDraftAppointments;
    this.timeTableDraftAppointments = timeTableDraftAppointments;
    this.applyChanges(this.appointmentStartTime, this.appointmentEndTime, payload, startEditAppointment2, changeAppointment2, this.appointmentGroupingInfo);
  };
  DragDropProviderBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.state, payload = _a2.payload, appointmentContentTemplateKey = _a2.appointmentContentTemplateKey, appointmentBottomTemplateKey = _a2.appointmentBottomTemplateKey, appointmentTopTemplateKey = _a2.appointmentTopTemplateKey;
    var _b = this.props, Container3 = _b.containerComponent, DraftAppointment3 = _b.draftAppointmentComponent, SourceAppointment3 = _b.sourceAppointmentComponent, Resize2 = _b.resizeComponent, allowDrag = _b.allowDrag, allowResize = _b.allowResize, scrollSpeed = _b.scrollSpeed;
    var draftData = __assign4(__assign4({}, payload), { startDate: this.appointmentStartTime, endDate: this.appointmentEndTime });
    return (0, import_react2.createElement)(
      Plugin,
      { name: "DragDropProvider", dependencies: pluginDependencies$6 },
      (0, import_react2.createElement)(
        Template,
        { name: "body" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3, _b2) {
          var viewCellsData2 = _a3.viewCellsData, allDayCellsData = _a3.allDayCellsData, startViewDate2 = _a3.startViewDate, endViewDate2 = _a3.endViewDate, excludedDays = _a3.excludedDays, timeTableElementsMeta = _a3.timeTableElementsMeta, allDayElementsMeta = _a3.allDayElementsMeta, scrollingStrategy3 = _a3.scrollingStrategy, grouping = _a3.grouping, resources = _a3.resources, groups = _a3.groups, currentView = _a3.currentView, groupByDate = _a3.groupByDate, groupOrientation = _a3.groupOrientation;
          var changeAppointment2 = _b2.changeAppointment, startEditAppointment2 = _b2.startEditAppointment, finishCommitAppointment = _b2.finishCommitAppointment;
          var calculateBoundariesByMove = _this.calculateNextBoundaries({
            viewCellsData: viewCellsData2,
            allDayCellsData,
            currentView,
            startViewDate: startViewDate2,
            endViewDate: endViewDate2,
            excludedDays,
            timeTableElementsMeta,
            allDayElementsMeta,
            scrollingStrategy: scrollingStrategy3,
            resources,
            grouping,
            groups,
            groupByDate,
            groupOrientation
          }, { changeAppointment: changeAppointment2, startEditAppointment: startEditAppointment2 }, scrollSpeed);
          return (0, import_react2.createElement)(
            DragDropProvider,
            { onChange: _this.onPayloadChange({ finishCommitAppointment }) },
            (0, import_react2.createElement)(
              DropTarget,
              { onOver: calculateBoundariesByMove, onEnter: calculateBoundariesByMove, onDrop: _this.handleDrop({ finishCommitAppointment }), onLeave: _this.handleLeave },
              (0, import_react2.createElement)(PlaceholderWithRef, null)
            )
          );
        })
      ),
      (0, import_react2.createElement)(Template, { name: "appointmentContent", predicate: function(_a3) {
        var data = _a3.data;
        return allowDrag(data);
      }, key: appointmentContentTemplateKey }, function(_a3) {
        var styles5 = _a3.styles, params = __rest3(_a3, ["styles"]);
        return (0, import_react2.createElement)(DragSource, { payload: __assign4(__assign4({}, params.data), { type: params.type }) }, payload && params.data.id === payload.id ? (0, import_react2.createElement)(SourceAppointment3, __assign4({}, params)) : (0, import_react2.createElement)(PlaceholderWithRef, { params: __assign4(__assign4({}, params), { draggable: true }) }));
      }),
      (0, import_react2.createElement)(Template, { name: "appointmentTop", predicate: function(params) {
        return !params.slice && allowResize(params.data);
      }, key: appointmentTopTemplateKey }, function(_a3) {
        var data = _a3.data, type = _a3.type;
        return (0, import_react2.createElement)(
          DragSource,
          { payload: __assign4(__assign4({}, data), { type: RESIZE_TOP, appointmentType: type }) },
          (0, import_react2.createElement)(Resize2, { position: POSITION_START, appointmentType: type })
        );
      }),
      (0, import_react2.createElement)(Template, { name: "appointmentBottom", predicate: function(params) {
        return !params.slice && allowResize(params.data);
      }, key: appointmentBottomTemplateKey }, function(_a3) {
        var data = _a3.data, type = _a3.type;
        return (0, import_react2.createElement)(
          DragSource,
          { payload: __assign4(__assign4({}, data), { type: RESIZE_BOTTOM, appointmentType: type }) },
          (0, import_react2.createElement)(Resize2, { position: POSITION_END, appointmentType: type })
        );
      }),
      (0, import_react2.createElement)(
        Template,
        { name: "allDayPanel" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation;
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(TemplatePlaceholder, null),
            (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(currentView.name)) !== VERTICAL_GROUP_ORIENTATION ? renderAppointmentItems(_this.allDayDraftAppointments, Container3, draftData) : null
          );
        })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "timeTable" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var currentView = _a3.currentView, groupOrientation = _a3.groupOrientation;
          return (0, import_react2.createElement)(
            import_react2.Fragment,
            null,
            (0, import_react2.createElement)(TemplatePlaceholder, null),
            renderAppointmentItems(_this.timeTableDraftAppointments, Container3, draftData),
            (groupOrientation === null || groupOrientation === void 0 ? void 0 : groupOrientation(currentView.name)) === VERTICAL_GROUP_ORIENTATION ? renderAppointmentItems(_this.allDayDraftAppointments, Container3, draftData) : null
          );
        })
      ),
      (0, import_react2.createElement)(Template, { name: "draftAppointment" }, function(_a3) {
        var data = _a3.data, draftAppointment = _a3.draftAppointment, restParams = __rest3(_a3, ["data", "draftAppointment"]);
        return (0, import_react2.createElement)(TemplateConnector, null, function(_a4) {
          var formatDate3 = _a4.formatDate, resources = _a4.resources, plainResources = _a4.plainResources;
          var dataItem = draftAppointment.dataItem, type = draftAppointment.type, fromPrev = draftAppointment.fromPrev, toNext = draftAppointment.toNext, durationType = draftAppointment.durationType, geometry = __rest3(draftAppointment, ["dataItem", "type", "fromPrev", "toNext", "durationType"]);
          return (0, import_react2.createElement)(DraftAppointment3, __assign4({ data, resources: getAppointmentResources(dataItem, resources, plainResources), durationType, style: getAppointmentStyle(geometry), type, fromPrev, toNext, formatDate: formatDate3 }, restParams));
        });
      })
    );
  };
  DragDropProviderBase2.components = {
    containerComponent: "Container",
    draftAppointmentComponent: "DraftAppointment",
    sourceAppointmentComponent: "SourceAppointment",
    resizeComponent: "Resize"
  };
  DragDropProviderBase2.defaultProps = {
    allowDrag: function() {
      return true;
    },
    allowResize: function() {
      return true;
    },
    scrollSpeed: SCROLL_SPEED_PX
  };
  return DragDropProviderBase2;
}(import_react2.PureComponent);
var DragDropProvider2 = DragDropProviderBase;
var pluginDependencies$7 = [
  { name: "Toolbar" },
  { name: "ViewState" }
];
var defaultMessages$2 = {
  today: "Today"
};
var TodayButtonBase = function(_super) {
  __extends3(TodayButtonBase2, _super);
  function TodayButtonBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TodayButtonBase2.prototype.render = function() {
    var _a2 = this.props, Button3 = _a2.buttonComponent, messages = _a2.messages;
    var getMessage8 = getMessagesFormatter(__assign4(__assign4({}, defaultMessages$2), messages));
    return (0, import_react2.createElement)(
      Plugin,
      { name: "TodayButton", dependencies: pluginDependencies$7 },
      (0, import_react2.createElement)(
        Template,
        { name: "toolbarContent" },
        (0, import_react2.createElement)(TemplateConnector, null, function(getters, _a3) {
          var changeCurrentDate2 = _a3.changeCurrentDate;
          var setCurrentDate = function(nextDate) {
            return changeCurrentDate2({
              nextDate
            });
          };
          return (0, import_react2.createElement)(Button3, { getMessage: getMessage8, setCurrentDate });
        }),
        (0, import_react2.createElement)(TemplatePlaceholder, null)
      )
    );
  };
  TodayButtonBase2.components = {
    buttonComponent: "Button"
  };
  return TodayButtonBase2;
}(import_react2.PureComponent);
var TodayButton = TodayButtonBase;
var _a;
var pluginDependencies$8 = [
  { name: "EditingState" }
];
var defaultAvailableOperations = [
  { value: RECURRENCE_EDIT_SCOPE.CURRENT },
  { value: RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING },
  { value: RECURRENCE_EDIT_SCOPE.ALL }
];
var defaultMessages$3 = (_a = {}, _a[RECURRENCE_EDIT_SCOPE.CURRENT] = "This appointment", _a[RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING] = "This and following appointments", _a[RECURRENCE_EDIT_SCOPE.ALL] = "All appointments", _a.menuEditingTitle = "Edit recurring appointment", _a.menuDeletingTitle = "Delete recurring appointment", _a.cancelButton = "Cancel", _a.commitButton = "OK", _a);
var EditRecurrenceMenuBase = function(_super) {
  __extends3(EditRecurrenceMenuBase2, _super);
  function EditRecurrenceMenuBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.modalContainer = (0, import_react2.createRef)();
    _this.state = {
      isOpen: false,
      deletedAppointmentData: null
    };
    _this.finishCommitAppointment = function(payload, _a2, _b) {
      var editingAppointment = _a2.editingAppointment;
      var commitChangedAppointment = _b.commitChangedAppointment;
      if (editingAppointment && !editingAppointment.rRule) {
        commitChangedAppointment();
      } else {
        _this.setState({
          isOpen: true,
          deletedAppointmentData: null
        });
      }
    };
    _this.finishDeleteAppointment = function(payload, getters, _a2) {
      var commitDeletedAppointment = _a2.commitDeletedAppointment;
      if (payload && !payload.rRule) {
        commitDeletedAppointment({ deletedAppointmentData: payload });
      } else {
        _this.setState({
          isOpen: true,
          deletedAppointmentData: payload
        });
      }
    };
    _this.commit = memoize(function(editAction, deleteAction, payload) {
      return function(type) {
        if (payload) {
          deleteAction({ deletedAppointmentData: payload, type });
        } else {
          editAction(type);
        }
        _this.closeMenu();
      };
    });
    _this.closeMenu = function() {
      _this.setState({ isOpen: false, deletedAppointmentData: null });
    };
    _this.cancelEditing = memoize(function(cancelAction, stopEditAction) {
      return function() {
        stopEditAction();
        cancelAction();
        _this.closeMenu();
      };
    });
    _this.availableOperations = memoize(function(getMessage8, menuAvailableOperations) {
      return menuAvailableOperations.map(function(_a2) {
        var value = _a2.value;
        return {
          value,
          title: getMessage8([value])
        };
      });
    });
    _this.getMessage = memoize(function(messages, menuMessages) {
      return getMessagesFormatter(__assign4(__assign4({}, menuMessages), messages));
    });
    return _this;
  }
  EditRecurrenceMenuBase2.prototype.render = function() {
    var _this = this;
    var _a2 = this.state, isOpen = _a2.isOpen, deletedAppointmentData = _a2.deletedAppointmentData;
    var _b = this.props, Layout8 = _b.layoutComponent, Overlay5 = _b.overlayComponent, Container3 = _b.containerComponent, buttonComponent = _b.buttonComponent, messages = _b.messages;
    var getMessage8 = this.getMessage(messages, defaultMessages$3);
    var availableOperations = this.availableOperations(getMessage8, defaultAvailableOperations);
    return (0, import_react2.createElement)(
      Plugin,
      { name: "EditRecurrenceMenu", dependencies: pluginDependencies$8 },
      (0, import_react2.createElement)(Action, { name: "finishCommitAppointment", action: this.finishCommitAppointment }),
      (0, import_react2.createElement)(Action, { name: "finishDeleteAppointment", action: this.finishDeleteAppointment }),
      (0, import_react2.createElement)(
        Template,
        { name: "schedulerRoot" },
        (0, import_react2.createElement)(TemplatePlaceholder, null),
        (0, import_react2.createElement)(Container3, { ref: this.modalContainer }),
        (0, import_react2.createElement)(TemplatePlaceholder, { name: "overlay" })
      ),
      (0, import_react2.createElement)(
        Template,
        { name: "overlay" },
        (0, import_react2.createElement)(TemplateConnector, null, function(getters, _a3) {
          var commitChangedAppointment = _a3.commitChangedAppointment, commitDeletedAppointment = _a3.commitDeletedAppointment, cancelChangedAppointment = _a3.cancelChangedAppointment, stopEditAppointment2 = _a3.stopEditAppointment;
          var commit2 = _this.commit(commitChangedAppointment, commitDeletedAppointment, deletedAppointmentData);
          var cancelEditing = _this.cancelEditing(cancelChangedAppointment, stopEditAppointment2);
          return (0, import_react2.createElement)(
            Overlay5,
            { target: _this.modalContainer, visible: isOpen, onHide: _this.closeMenu },
            (0, import_react2.createElement)(Layout8, { isDeleting: !!deletedAppointmentData, buttonComponent, handleClose: cancelEditing, commit: commit2, availableOperations, getMessage: getMessage8 })
          );
        })
      )
    );
  };
  EditRecurrenceMenuBase2.components = {
    layoutComponent: "Layout",
    overlayComponent: "Overlay",
    buttonComponent: "Button",
    containerComponent: "Container"
  };
  return EditRecurrenceMenuBase2;
}(import_react2.PureComponent);
var EditRecurrenceMenu = EditRecurrenceMenuBase;
var pluginDependencies$9 = [
  { name: "EditingState" }
];
var IntegratedEditingBase = function(_super) {
  __extends3(IntegratedEditingBase2, _super);
  function IntegratedEditingBase2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.finishCommitAppointment = function(payload, getters, _a2) {
      var commitChangedAppointment = _a2.commitChangedAppointment;
      commitChangedAppointment();
    };
    _this.finishDeleteAppointment = function(payload, getters, _a2) {
      var commitDeletedAppointment = _a2.commitDeletedAppointment;
      commitDeletedAppointment({ deletedAppointmentData: payload });
    };
    return _this;
  }
  IntegratedEditingBase2.prototype.render = function() {
    return (0, import_react2.createElement)(
      Plugin,
      { name: "IntegratedEditing", dependencies: pluginDependencies$9 },
      (0, import_react2.createElement)(Action, { name: "finishCommitAppointment", action: this.finishCommitAppointment }),
      (0, import_react2.createElement)(Action, { name: "finishDeleteAppointment", action: this.finishDeleteAppointment })
    );
  };
  IntegratedEditingBase2.defaultProps = {
    totalCount: 0
  };
  return IntegratedEditingBase2;
}(import_react2.PureComponent);
var pluginDependencies$a = [
  { name: "Appointments" }
];
var addResourcesToTimeTableAppointments = function(_a2) {
  var timeTableAppointments = _a2.timeTableAppointments, resources = _a2.resources, plainResources = _a2.plainResources;
  return timeTableAppointments && addResourcesToAppointments(timeTableAppointments[0], resources, plainResources);
};
var addResourcesToAllDayAppointments = function(_a2) {
  var allDayAppointments = _a2.allDayAppointments, resources = _a2.resources, plainResources = _a2.plainResources;
  return allDayAppointments && addResourcesToAppointments(allDayAppointments[0], resources, plainResources);
};
var ResourcesBase = (0, import_react2.memo)(function(_a2) {
  var data = _a2.data, mainResourceName = _a2.mainResourceName, palette = _a2.palette;
  var convertResources = function(_a3) {
    var resources = _a3.resources;
    return convertResourcesToPlain(resources);
  };
  return (0, import_react2.createElement)(
    Plugin,
    { name: "Resources", dependencies: pluginDependencies$a },
    (0, import_react2.createElement)(Getter, { name: "resources", value: validateResources(data, mainResourceName, palette) }),
    (0, import_react2.createElement)(Getter, { name: "plainResources", computed: convertResources }),
    (0, import_react2.createElement)(Getter, { name: "timeTableAppointments", computed: addResourcesToTimeTableAppointments }),
    (0, import_react2.createElement)(Getter, { name: "allDayAppointments", computed: addResourcesToAllDayAppointments })
  );
});
var Resources = ResourcesBase;
var defaultMessages$4 = {
  discardButton: "Discard",
  deleteButton: "Delete",
  cancelButton: "Cancel",
  confirmDeleteMessage: "Are you sure you want to delete this appointment?",
  confirmCancelMessage: "Discard unsaved changes?"
};
var pluginDependencies$b = [
  { name: "EditingState" },
  { name: "EditRecurrenceMenu", optional: true },
  { name: "IntegratedEditing", optional: true }
];
var ACTION_TYPES = {
  CANCEL: "cancel",
  DELETE: "delete"
};
var ConfirmationDialogBase = function(_a2) {
  var messages = _a2.messages, Overlay5 = _a2.overlayComponent, Layout8 = _a2.layoutComponent, Container3 = _a2.containerComponent, buttonComponent = _a2.buttonComponent, ignoreDelete = _a2.ignoreDelete, ignoreCancel = _a2.ignoreCancel;
  var getMessage8 = getMessagesFormatter(__assign4(__assign4({}, defaultMessages$4), messages));
  var modalContainer = (0, import_react2.useRef)();
  var _b = __read4((0, import_react2.useState)(false), 2), visible = _b[0], setVisible = _b[1];
  var _c = __read4((0, import_react2.useState)(""), 2), actionType = _c[0], setActionType = _c[1];
  var _d = __read4((0, import_react2.useState)(""), 2), hideActionName = _d[0], setHideActionName = _d[1];
  var _e = __read4((0, import_react2.useState)({}), 2), appointmentData = _e[0], setAppointmentData2 = _e[1];
  var toggleVisibility = (0, import_react2.useCallback)(function() {
    setVisible(!visible);
  }, [visible, setVisible]);
  var confirmCancelChanges = (0, import_react2.useCallback)(function(hideAction) {
    toggleVisibility();
    setHideActionName(hideAction);
    setActionType(ACTION_TYPES.CANCEL);
  }, [toggleVisibility, setHideActionName, setActionType]);
  var confirmDelete = (0, import_react2.useCallback)(function(_a3) {
    var hideAction = _a3.hideActionName, changedAppointment = _a3.appointmentData;
    toggleVisibility();
    setHideActionName(hideAction);
    setActionType(ACTION_TYPES.DELETE);
    setAppointmentData2(changedAppointment);
  }, [toggleVisibility, setHideActionName, setActionType, setAppointmentData2]);
  var confirmAction = (0, import_react2.useCallback)(function(isNewAppointment, hideEditor, stopEditAppointment2, finishDeleteAppointment, cancelAddedAppointment2, cancelChangedAppointment) {
    return function() {
      hideEditor();
      toggleVisibility();
      if (isNewAppointment) {
        cancelAddedAppointment2();
      } else {
        stopEditAppointment2();
        cancelChangedAppointment();
      }
      if (actionType === ACTION_TYPES.DELETE) {
        finishDeleteAppointment(appointmentData);
      }
    };
  }, [toggleVisibility, actionType, appointmentData]);
  return (0, import_react2.createElement)(
    Plugin,
    { name: "ConfirmationDialog", dependencies: pluginDependencies$b },
    !ignoreCancel && (0, import_react2.createElement)(Action, { name: "openCancelConfirmationDialog", action: confirmCancelChanges }),
    !ignoreDelete && (0, import_react2.createElement)(Action, { name: "openDeleteConfirmationDialog", action: confirmDelete }),
    (0, import_react2.createElement)(
      Template,
      { name: "schedulerRoot" },
      (0, import_react2.createElement)(TemplatePlaceholder, null),
      (0, import_react2.createElement)(Container3, { ref: modalContainer }),
      (0, import_react2.createElement)(TemplatePlaceholder, { name: "confirmationDialogOverlay" })
    ),
    (0, import_react2.createElement)(
      Template,
      { name: "confirmationDialogOverlay" },
      (0, import_react2.createElement)(TemplateConnector, null, function(_a3, actions) {
        var editingAppointment = _a3.editingAppointment;
        var handleConfirm2 = confirmAction(!editingAppointment, actions[hideActionName], actions.stopEditAppointment, actions.finishDeleteAppointment, actions.cancelAddedAppointment, actions.cancelChangedAppointment);
        return (0, import_react2.createElement)(
          Overlay5,
          { target: modalContainer, visible, onHide: toggleVisibility },
          (0, import_react2.createElement)(Layout8, { buttonComponent, handleCancel: toggleVisibility, handleConfirm: handleConfirm2, getMessage: getMessage8, isDeleting: actionType === ACTION_TYPES.DELETE, appointmentData })
        );
      })
    )
  );
};
ConfirmationDialogBase.components = {
  overlayComponent: "Overlay",
  containerComponent: "Container",
  layoutComponent: "Layout",
  buttonComponent: "Button"
};
ConfirmationDialogBase.defaultProps = {
  ignoreCancel: false,
  ignoreDelete: false
};
var ConfirmationDialog = ConfirmationDialogBase;
var GroupingStateBase = function(_super) {
  __extends3(GroupingStateBase2, _super);
  function GroupingStateBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      grouping: props.grouping,
      expandedGroups: props.expandedGroups || props.defaultExpandedGroups
    };
    _this.stateHelper = createStateHelper(_this, {
      expandedGroups: function() {
        var onExpandedGroupsChange = _this.props.onExpandedGroupsChange;
        return onExpandedGroupsChange;
      }
    });
    _this.toggleGroupExpanded = _this.stateHelper.applyReducer.bind(_this.stateHelper, toggleExpandedGroups);
    return _this;
  }
  GroupingStateBase2.getDerivedStateFromProps = function(nextProps, prevState) {
    var _a2 = nextProps.grouping, grouping = _a2 === void 0 ? prevState.grouping : _a2, _b = nextProps.expandedGroups, expandedGroups = _b === void 0 ? prevState.expandedGroups : _b;
    return { grouping, expandedGroups };
  };
  GroupingStateBase2.prototype.render = function() {
    var _a2 = this.state, grouping = _a2.grouping, expandedGroups = _a2.expandedGroups;
    var _b = this.props, groupByDate = _b.groupByDate, groupOrientation = _b.groupOrientation;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "GroupingState" },
      (0, import_react2.createElement)(Getter, { name: "grouping", value: grouping }),
      (0, import_react2.createElement)(Getter, { name: "groupByDate", value: groupByDate }),
      (0, import_react2.createElement)(Getter, { name: "groupOrientation", value: groupOrientation }),
      (0, import_react2.createElement)(Getter, { name: "expandedGroups", value: expandedGroups }),
      (0, import_react2.createElement)(Action, { name: "toggleGroupExpanded", action: this.toggleGroupExpanded })
    );
  };
  GroupingStateBase2.defaultProps = {
    defaultExpandedGroups: [],
    groupByDate: function() {
      return false;
    },
    groupOrientation: function() {
      return HORIZONTAL_GROUP_ORIENTATION;
    }
  };
  return GroupingStateBase2;
}(import_react2.PureComponent);
var pluginDependencies$c = [
  { name: "GroupingState" },
  { name: "IntegratedGrouping" },
  { name: "DayView", optional: true },
  { name: "MonthView", optional: true },
  { name: "WeekView", optional: true },
  { name: "ViewState", optional: true }
];
var GroupingPanelBase = function(_super) {
  __extends3(GroupingPanelBase2, _super);
  function GroupingPanelBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GroupingPanelBase2.prototype.render = function() {
    var _a2 = this.props, HorizontalLayout3 = _a2.horizontalLayoutComponent, VerticalLayout3 = _a2.verticalLayoutComponent, rowComponent = _a2.rowComponent, cellComponent = _a2.cellComponent;
    return (0, import_react2.createElement)(
      Plugin,
      { name: "GroupingPanel", dependencies: pluginDependencies$c },
      (0, import_react2.createElement)(
        Template,
        { name: "groupingPanel" },
        (0, import_react2.createElement)(TemplateConnector, null, function(_a3) {
          var viewCellsData2 = _a3.viewCellsData, currentView = _a3.currentView, scrollingStrategy3 = _a3.scrollingStrategy, allDayPanelExists = _a3.allDayPanelExists, groupByDate = _a3.groupByDate, getGroupOrientation = _a3.groupOrientation, groups = _a3.groups;
          var groupOrientation = getGroupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name);
          return groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? (0, import_react2.createElement)(HorizontalLayout3, { rowComponent, cellComponent, groups, colSpan: viewCellsData2[0].length, cellStyle: {
            left: scrollingStrategy3.fixedLeftWidth ? scrollingStrategy3.fixedLeftWidth : (currentView === null || currentView === void 0 ? void 0 : currentView.type) === VIEW_TYPES.MONTH ? HORIZONTAL_VIEW_LEFT_OFFSET : VERTICAL_VIEW_LEFT_OFFSET
          }, showHeaderForEveryDate: groupByDate === null || groupByDate === void 0 ? void 0 : groupByDate(currentView && currentView.name) }) : (0, import_react2.createElement)(VerticalLayout3, { rowComponent, cellComponent, groups, rowSpan: viewCellsData2.length, viewType: currentView === null || currentView === void 0 ? void 0 : currentView.type, cellTextTopOffset: scrollingStrategy3 === null || scrollingStrategy3 === void 0 ? void 0 : scrollingStrategy3.fixedTopHeight, alignWithAllDayRow: allDayPanelExists });
        })
      )
    );
  };
  GroupingPanelBase2.components = {
    horizontalLayoutComponent: "HorizontalLayout",
    verticalLayoutComponent: "VerticalLayout",
    rowComponent: "Row",
    cellComponent: "Cell"
  };
  return GroupingPanelBase2;
}(import_react2.PureComponent);
var GroupingPanel = GroupingPanelBase;
var pluginDependencies$d = [
  { name: "DayView", optional: true },
  { name: "WeekView", optional: true },
  { name: "MonthView", optional: true },
  { name: "DragDropProvider", optional: true },
  { name: "Appointments", optional: true }
];
var CurrentTimeIndicatorBase = function(_a2) {
  var indicatorComponent = _a2.indicatorComponent, shadePreviousAppointments = _a2.shadePreviousAppointments, shadePreviousCells = _a2.shadePreviousCells, updateInterval = _a2.updateInterval;
  var _b = __read4((0, import_react2.useState)(Date.now), 2), currentTime = _b[0], setCurrentTime = _b[1];
  (0, import_react2.useEffect)(function() {
    var tick = function() {
      return setCurrentTime(Date.now());
    };
    var intervalId = updateInterval ? window.setInterval(tick, updateInterval) : void 0;
    return function() {
      return window.clearInterval(intervalId);
    };
  }, [updateInterval]);
  return (0, import_react2.createElement)(
    Plugin,
    { name: "CurrentTimeIndicator", dependencies: pluginDependencies$d },
    (0, import_react2.createElement)(Template, { name: "cell", predicate: function(_a3) {
      var otherMonth = _a3.otherMonth;
      return !isMonthCell(otherMonth);
    } }, function(params) {
      return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { currentTimeIndicatorPosition: getCurrentTimeIndicatorTop(params, currentTime), currentTimeIndicatorComponent: indicatorComponent }) });
    }),
    (0, import_react2.createElement)(Template, { name: "cell" }, function(params) {
      return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { isShaded: isCellShaded(params, currentTime, shadePreviousCells) }) });
    }),
    (0, import_react2.createElement)(Template, { name: "appointmentContent" }, function(params) {
      return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { isShaded: isShadedAppointment(params, currentTime, shadePreviousAppointments) }) });
    }),
    (0, import_react2.createElement)(Template, { name: "draftAppointment" }, function(params) {
      return (0, import_react2.createElement)(TemplatePlaceholder, { params: __assign4(__assign4({}, params), { isShaded: isShadedAppointment(params, currentTime, shadePreviousAppointments) }) });
    })
  );
};
CurrentTimeIndicatorBase.defaultProps = {
  updateInterval: 6e4,
  shadePreviousCells: false,
  shadePreviousAppointments: false
};
CurrentTimeIndicatorBase.components = {
  indicatorComponent: "Indicator"
};
var CurrentTimeIndicator = CurrentTimeIndicatorBase;
var pluginDependencies$e = [
  { name: "Resources" },
  { name: "GroupingState" },
  { name: "DayView", optional: true },
  { name: "MonthView", optional: true },
  { name: "WeekView", optional: true }
];
var getViewCellsDataComputed = function(_a2) {
  var viewCellsData2 = _a2.viewCellsData, groups = _a2.groups, resourcesToGroupBy = _a2.resourcesToGroupBy, groupByDate = _a2.groupByDate, currentView = _a2.currentView, groupOrientation = _a2.groupOrientation;
  return expandViewCellsDataWithGroups(viewCellsData2, groups, resourcesToGroupBy, groupByDate(currentView.name), groupOrientation(currentView.name));
};
var getAllDayCellsDataComputed = function(_a2) {
  var allDayCellsData = _a2.allDayCellsData, groups = _a2.groups, resourcesToGroupBy = _a2.resourcesToGroupBy, groupByDate = _a2.groupByDate, currentView = _a2.currentView, groupOrientation = _a2.groupOrientation;
  return allDayCellsData && expandViewCellsDataWithGroups(allDayCellsData, groups, resourcesToGroupBy, groupByDate(currentView.name), groupOrientation(currentView.name));
};
var getGroupsComputed = function(_a2) {
  var resourcesToGroupBy = _a2.resourcesToGroupBy;
  return getGroupsFromResources(resourcesToGroupBy);
};
var getResourcesToGroupByComputed = function(_a2) {
  var resources = _a2.resources, grouping = _a2.grouping;
  return sortFilteredResources(filterResourcesByGrouping(resources, grouping), grouping);
};
var getGroupingComputed = function(_a2) {
  var grouping = _a2.grouping, resources = _a2.resources;
  return updateGroupingWithMainResource(grouping, resources);
};
var getTimeTableAppointmentsComputed = function(_a2) {
  var timeTableAppointments = _a2.timeTableAppointments, grouping = _a2.grouping, resourcesToGroupBy = _a2.resourcesToGroupBy, groups = _a2.groups, groupByDate = _a2.groupByDate, currentView = _a2.currentView, excludedDays = _a2.excludedDays;
  return timeTableAppointments && expandGroups(timeTableAppointments, grouping, resourcesToGroupBy, groups, excludedDays, groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name) && (currentView === null || currentView === void 0 ? void 0 : currentView.type) === VIEW_TYPES.MONTH);
};
var getAllDayAppointmentsComputed = function(_a2) {
  var allDayAppointments = _a2.allDayAppointments, grouping = _a2.grouping, resourcesToGroupBy = _a2.resourcesToGroupBy, groups = _a2.groups, groupByDate = _a2.groupByDate, currentView = _a2.currentView, excludedDays = _a2.excludedDays;
  return allDayAppointments && expandGroups(allDayAppointments, grouping, resourcesToGroupBy, groups, excludedDays, groupByDate(currentView === null || currentView === void 0 ? void 0 : currentView.name));
};
var getGroupByDateComputed = function(_a2) {
  var currentView = _a2.currentView, groupByDate = _a2.groupByDate, groupOrientation = _a2.groupOrientation;
  return groupOrientation(currentView === null || currentView === void 0 ? void 0 : currentView.name) === VERTICAL_GROUP_ORIENTATION ? function() {
    return false;
  } : groupByDate;
};
var getTimeTableElementsMetaComputed = function(_a2) {
  var timeTableElementsMeta = _a2.timeTableElementsMeta, groupOrientation = _a2.groupOrientation, groups = _a2.groups, allDayPanelExists = _a2.allDayPanelExists, viewCellsData2 = _a2.viewCellsData, currentView = _a2.currentView;
  return updateTimeTableCellElementsMeta(timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData2, currentView);
};
var getAllDayElementsMetaComputed = function(_a2) {
  var allDayElementsMeta = _a2.allDayElementsMeta, timeTableElementsMeta = _a2.timeTableElementsMeta, groupOrientation = _a2.groupOrientation, groups = _a2.groups, allDayPanelExists = _a2.allDayPanelExists, viewCellsData2 = _a2.viewCellsData, currentView = _a2.currentView;
  return updateAllDayCellElementsMeta(allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData2, currentView);
};
var getTimeCellsDataComputed = function(_a2) {
  var viewCellsData2 = _a2.viewCellsData, timeCellsData2 = _a2.timeCellsData, currentView = _a2.currentView, groups = _a2.groups, resourcesToGroupBy = _a2.resourcesToGroupBy, groupOrientation = _a2.groupOrientation;
  return timeCellsData2 && updateTimeCellsData(viewCellsData2, timeCellsData2, groups, resourcesToGroupBy, groupOrientation(currentView.name));
};
var IntegratedGroupingBase = (0, import_react2.memo)(function() {
  return (0, import_react2.createElement)(
    Plugin,
    { name: "IntegratedGrouping", dependencies: pluginDependencies$e },
    (0, import_react2.createElement)(Getter, { name: "groupByDate", computed: getGroupByDateComputed }),
    (0, import_react2.createElement)(Getter, { name: "grouping", computed: getGroupingComputed }),
    (0, import_react2.createElement)(Getter, { name: "resourcesToGroupBy", computed: getResourcesToGroupByComputed }),
    (0, import_react2.createElement)(Getter, { name: "groups", computed: getGroupsComputed }),
    (0, import_react2.createElement)(Getter, { name: "viewCellsData", computed: getViewCellsDataComputed }),
    (0, import_react2.createElement)(Getter, { name: "allDayCellsData", computed: getAllDayCellsDataComputed }),
    (0, import_react2.createElement)(Getter, { name: "timeCellsData", computed: getTimeCellsDataComputed }),
    (0, import_react2.createElement)(Getter, { name: "timeTableAppointments", computed: getTimeTableAppointmentsComputed }),
    (0, import_react2.createElement)(Getter, { name: "allDayAppointments", computed: getAllDayAppointmentsComputed }),
    (0, import_react2.createElement)(Getter, { name: "allDayElementsMeta", computed: getAllDayElementsMetaComputed }),
    (0, import_react2.createElement)(Getter, { name: "timeTableElementsMeta", computed: getTimeTableElementsMetaComputed })
  );
});

// node_modules/@mui/material/colors/index.js
var colors_exports = {};
__export(colors_exports, {
  amber: () => amber_default,
  blue: () => blue_default,
  blueGrey: () => blueGrey_default,
  brown: () => brown_default,
  common: () => common_default,
  cyan: () => cyan_default,
  deepOrange: () => deepOrange_default,
  deepPurple: () => deepPurple_default,
  green: () => green_default,
  grey: () => grey_default,
  indigo: () => indigo_default,
  lightBlue: () => lightBlue_default,
  lightGreen: () => lightGreen_default,
  lime: () => lime_default,
  orange: () => orange_default,
  pink: () => pink_default,
  purple: () => purple_default,
  red: () => red_default,
  teal: () => teal_default,
  yellow: () => yellow_default
});
init_common();
init_red();

// node_modules/@mui/material/colors/pink.js
var pink = {
  50: "#fce4ec",
  100: "#f8bbd0",
  200: "#f48fb1",
  300: "#f06292",
  400: "#ec407a",
  500: "#e91e63",
  600: "#d81b60",
  700: "#c2185b",
  800: "#ad1457",
  900: "#880e4f",
  A100: "#ff80ab",
  A200: "#ff4081",
  A400: "#f50057",
  A700: "#c51162"
};
var pink_default = pink;

// node_modules/@mui/material/colors/index.js
init_purple();

// node_modules/@mui/material/colors/deepPurple.js
var deepPurple = {
  50: "#ede7f6",
  100: "#d1c4e9",
  200: "#b39ddb",
  300: "#9575cd",
  400: "#7e57c2",
  500: "#673ab7",
  600: "#5e35b1",
  700: "#512da8",
  800: "#4527a0",
  900: "#311b92",
  A100: "#b388ff",
  A200: "#7c4dff",
  A400: "#651fff",
  A700: "#6200ea"
};
var deepPurple_default = deepPurple;

// node_modules/@mui/material/colors/indigo.js
var indigo = {
  50: "#e8eaf6",
  100: "#c5cae9",
  200: "#9fa8da",
  300: "#7986cb",
  400: "#5c6bc0",
  500: "#3f51b5",
  600: "#3949ab",
  700: "#303f9f",
  800: "#283593",
  900: "#1a237e",
  A100: "#8c9eff",
  A200: "#536dfe",
  A400: "#3d5afe",
  A700: "#304ffe"
};
var indigo_default = indigo;

// node_modules/@mui/material/colors/index.js
init_blue();
init_lightBlue();

// node_modules/@mui/material/colors/cyan.js
var cyan = {
  50: "#e0f7fa",
  100: "#b2ebf2",
  200: "#80deea",
  300: "#4dd0e1",
  400: "#26c6da",
  500: "#00bcd4",
  600: "#00acc1",
  700: "#0097a7",
  800: "#00838f",
  900: "#006064",
  A100: "#84ffff",
  A200: "#18ffff",
  A400: "#00e5ff",
  A700: "#00b8d4"
};
var cyan_default = cyan;

// node_modules/@mui/material/colors/teal.js
var teal = {
  50: "#e0f2f1",
  100: "#b2dfdb",
  200: "#80cbc4",
  300: "#4db6ac",
  400: "#26a69a",
  500: "#009688",
  600: "#00897b",
  700: "#00796b",
  800: "#00695c",
  900: "#004d40",
  A100: "#a7ffeb",
  A200: "#64ffda",
  A400: "#1de9b6",
  A700: "#00bfa5"
};
var teal_default = teal;

// node_modules/@mui/material/colors/index.js
init_green();

// node_modules/@mui/material/colors/lightGreen.js
var lightGreen = {
  50: "#f1f8e9",
  100: "#dcedc8",
  200: "#c5e1a5",
  300: "#aed581",
  400: "#9ccc65",
  500: "#8bc34a",
  600: "#7cb342",
  700: "#689f38",
  800: "#558b2f",
  900: "#33691e",
  A100: "#ccff90",
  A200: "#b2ff59",
  A400: "#76ff03",
  A700: "#64dd17"
};
var lightGreen_default = lightGreen;

// node_modules/@mui/material/colors/lime.js
var lime = {
  50: "#f9fbe7",
  100: "#f0f4c3",
  200: "#e6ee9c",
  300: "#dce775",
  400: "#d4e157",
  500: "#cddc39",
  600: "#c0ca33",
  700: "#afb42b",
  800: "#9e9d24",
  900: "#827717",
  A100: "#f4ff81",
  A200: "#eeff41",
  A400: "#c6ff00",
  A700: "#aeea00"
};
var lime_default = lime;

// node_modules/@mui/material/colors/yellow.js
var yellow = {
  50: "#fffde7",
  100: "#fff9c4",
  200: "#fff59d",
  300: "#fff176",
  400: "#ffee58",
  500: "#ffeb3b",
  600: "#fdd835",
  700: "#fbc02d",
  800: "#f9a825",
  900: "#f57f17",
  A100: "#ffff8d",
  A200: "#ffff00",
  A400: "#ffea00",
  A700: "#ffd600"
};
var yellow_default = yellow;

// node_modules/@mui/material/colors/amber.js
var amber = {
  50: "#fff8e1",
  100: "#ffecb3",
  200: "#ffe082",
  300: "#ffd54f",
  400: "#ffca28",
  500: "#ffc107",
  600: "#ffb300",
  700: "#ffa000",
  800: "#ff8f00",
  900: "#ff6f00",
  A100: "#ffe57f",
  A200: "#ffd740",
  A400: "#ffc400",
  A700: "#ffab00"
};
var amber_default = amber;

// node_modules/@mui/material/colors/index.js
init_orange();

// node_modules/@mui/material/colors/deepOrange.js
var deepOrange = {
  50: "#fbe9e7",
  100: "#ffccbc",
  200: "#ffab91",
  300: "#ff8a65",
  400: "#ff7043",
  500: "#ff5722",
  600: "#f4511e",
  700: "#e64a19",
  800: "#d84315",
  900: "#bf360c",
  A100: "#ff9e80",
  A200: "#ff6e40",
  A400: "#ff3d00",
  A700: "#dd2c00"
};
var deepOrange_default = deepOrange;

// node_modules/@mui/material/colors/brown.js
var brown = {
  50: "#efebe9",
  100: "#d7ccc8",
  200: "#bcaaa4",
  300: "#a1887f",
  400: "#8d6e63",
  500: "#795548",
  600: "#6d4c41",
  700: "#5d4037",
  800: "#4e342e",
  900: "#3e2723",
  A100: "#d7ccc8",
  A200: "#bcaaa4",
  A400: "#8d6e63",
  A700: "#5d4037"
};
var brown_default = brown;

// node_modules/@mui/material/colors/index.js
init_grey();

// node_modules/@mui/material/colors/blueGrey.js
var blueGrey = {
  50: "#eceff1",
  100: "#cfd8dc",
  200: "#b0bec5",
  300: "#90a4ae",
  400: "#78909c",
  500: "#607d8b",
  600: "#546e7a",
  700: "#455a64",
  800: "#37474f",
  900: "#263238",
  A100: "#cfd8dc",
  A200: "#b0bec5",
  A400: "#78909c",
  A700: "#455a64"
};
var blueGrey_default = blueGrey;

// node_modules/@mui/material/index.js
init_styles();
init_utils2();

// node_modules/@mui/material/Accordion/Accordion.js
init_objectWithoutPropertiesLoose();
init_extends();
var React3 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());
var import_prop_types3 = __toESM(require_prop_types());
init_clsx();
init_chainPropTypes();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/Collapse/Collapse.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
init_clsx();
var import_prop_types2 = __toESM(require_prop_types());
init_esm2();
init_useTimeout();
init_elementTypeAcceptingRef();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_createTransitions();
init_utils3();
init_useTheme();
init_utils2();

// node_modules/@mui/material/Collapse/collapseClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCollapseUtilityClass(slot) {
  return generateUtilityClass("MuiCollapse", slot);
}
var collapseClasses = generateUtilityClasses("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);

// node_modules/@mui/material/Collapse/Collapse.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
"use client";
var _excluded = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];
var useUtilityClasses = (ownerState) => {
  const {
    orientation,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", `${orientation}`],
    entered: ["entered"],
    hidden: ["hidden"],
    wrapper: ["wrapper", `${orientation}`],
    wrapperInner: ["wrapperInner", `${orientation}`]
  };
  return composeClasses(slots, getCollapseUtilityClass, classes2);
};
var CollapseRoot = styled_default("div", {
  name: "MuiCollapse",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.orientation], ownerState.state === "entered" && styles5.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles5.hidden];
  }
})(({
  theme,
  ownerState
}) => _extends({
  height: 0,
  overflow: "hidden",
  transition: theme.transitions.create("height")
}, ownerState.orientation === "horizontal" && {
  height: "auto",
  width: 0,
  transition: theme.transitions.create("width")
}, ownerState.state === "entered" && _extends({
  height: "auto",
  overflow: "visible"
}, ownerState.orientation === "horizontal" && {
  width: "auto"
}), ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && {
  visibility: "hidden"
}));
var CollapseWrapper = styled_default("div", {
  name: "MuiCollapse",
  slot: "Wrapper",
  overridesResolver: (props, styles5) => styles5.wrapper
})(({
  ownerState
}) => _extends({
  display: "flex",
  width: "100%"
}, ownerState.orientation === "horizontal" && {
  width: "auto",
  height: "100%"
}));
var CollapseWrapperInner = styled_default("div", {
  name: "MuiCollapse",
  slot: "WrapperInner",
  overridesResolver: (props, styles5) => styles5.wrapperInner
})(({
  ownerState
}) => _extends({
  width: "100%"
}, ownerState.orientation === "horizontal" && {
  width: "auto",
  height: "100%"
}));
var Collapse = React.forwardRef(function Collapse2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCollapse"
  });
  const {
    addEndListener,
    children,
    className,
    collapsedSize: collapsedSizeProp = "0px",
    component,
    easing,
    in: inProp,
    onEnter,
    onEntered,
    onEntering,
    onExit,
    onExited,
    onExiting,
    orientation = "vertical",
    style,
    timeout = duration.standard,
    TransitionComponent = Transition_default
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    orientation,
    collapsedSize: collapsedSizeProp
  });
  const classes2 = useUtilityClasses(ownerState);
  const theme = useTheme();
  const timer = useTimeout();
  const wrapperRef = React.useRef(null);
  const autoTransitionDuration = React.useRef();
  const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
  const isHorizontal2 = orientation === "horizontal";
  const size = isHorizontal2 ? "width" : "height";
  const nodeRef = React.useRef(null);
  const handleRef = useForkRef_default(ref, nodeRef);
  const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
    if (callback) {
      const node = nodeRef.current;
      if (maybeIsAppearing === void 0) {
        callback(node);
      } else {
        callback(node, maybeIsAppearing);
      }
    }
  };
  const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal2 ? "clientWidth" : "clientHeight"] : 0;
  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
    if (wrapperRef.current && isHorizontal2) {
      wrapperRef.current.style.position = "absolute";
    }
    node.style[size] = collapsedSize;
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
    const wrapperSize = getWrapperSize();
    if (wrapperRef.current && isHorizontal2) {
      wrapperRef.current.style.position = "";
    }
    const {
      duration: transitionDuration,
      easing: transitionTimingFunction
    } = getTransitionProps({
      style,
      timeout,
      easing
    }, {
      mode: "enter"
    });
    if (timeout === "auto") {
      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
      node.style.transitionDuration = `${duration2}ms`;
      autoTransitionDuration.current = duration2;
    } else {
      node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
    }
    node.style[size] = `${wrapperSize}px`;
    node.style.transitionTimingFunction = transitionTimingFunction;
    if (onEntering) {
      onEntering(node, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
    node.style[size] = "auto";
    if (onEntered) {
      onEntered(node, isAppearing);
    }
  });
  const handleExit = normalizedTransitionCallback((node) => {
    node.style[size] = `${getWrapperSize()}px`;
    if (onExit) {
      onExit(node);
    }
  });
  const handleExited = normalizedTransitionCallback(onExited);
  const handleExiting = normalizedTransitionCallback((node) => {
    const wrapperSize = getWrapperSize();
    const {
      duration: transitionDuration,
      easing: transitionTimingFunction
    } = getTransitionProps({
      style,
      timeout,
      easing
    }, {
      mode: "exit"
    });
    if (timeout === "auto") {
      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
      node.style.transitionDuration = `${duration2}ms`;
      autoTransitionDuration.current = duration2;
    } else {
      node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
    }
    node.style[size] = collapsedSize;
    node.style.transitionTimingFunction = transitionTimingFunction;
    if (onExiting) {
      onExiting(node);
    }
  });
  const handleAddEndListener = (next) => {
    if (timeout === "auto") {
      timer.start(autoTransitionDuration.current || 0, next);
    }
    if (addEndListener) {
      addEndListener(nodeRef.current, next);
    }
  };
  return (0, import_jsx_runtime.jsx)(TransitionComponent, _extends({
    in: inProp,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    nodeRef,
    timeout: timeout === "auto" ? null : timeout
  }, other, {
    children: (state, childProps) => (0, import_jsx_runtime.jsx)(CollapseRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className, {
        "entered": classes2.entered,
        "exited": !inProp && collapsedSize === "0px" && classes2.hidden
      }[state]),
      style: _extends({
        [isHorizontal2 ? "minWidth" : "minHeight"]: collapsedSize
      }, style),
      ref: handleRef
    }, childProps, {
      ownerState: _extends({}, ownerState, {
        state
      }),
      children: (0, import_jsx_runtime.jsx)(CollapseWrapper, {
        ownerState: _extends({}, ownerState, {
          state
        }),
        className: classes2.wrapper,
        ref: wrapperRef,
        children: (0, import_jsx_runtime.jsx)(CollapseWrapperInner, {
          ownerState: _extends({}, ownerState, {
            state
          }),
          className: classes2.wrapperInner,
          children
        })
      })
    }))
  }));
});
true ? Collapse.propTypes = {
  addEndListener: import_prop_types2.default.func,
  children: import_prop_types2.default.node,
  classes: import_prop_types2.default.object,
  className: import_prop_types2.default.string,
  collapsedSize: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  component: elementTypeAcceptingRef_default,
  easing: import_prop_types2.default.oneOfType([import_prop_types2.default.shape({
    enter: import_prop_types2.default.string,
    exit: import_prop_types2.default.string
  }), import_prop_types2.default.string]),
  in: import_prop_types2.default.bool,
  onEnter: import_prop_types2.default.func,
  onEntered: import_prop_types2.default.func,
  onEntering: import_prop_types2.default.func,
  onExit: import_prop_types2.default.func,
  onExited: import_prop_types2.default.func,
  onExiting: import_prop_types2.default.func,
  orientation: import_prop_types2.default.oneOf(["horizontal", "vertical"]),
  style: import_prop_types2.default.object,
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  timeout: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["auto"]), import_prop_types2.default.number, import_prop_types2.default.shape({
    appear: import_prop_types2.default.number,
    enter: import_prop_types2.default.number,
    exit: import_prop_types2.default.number
  })])
} : void 0;
Collapse.muiSupportAuto = true;
var Collapse_default = Collapse;

// node_modules/@mui/material/Collapse/index.js
"use client";

// node_modules/@mui/material/Accordion/Accordion.js
init_Paper();

// node_modules/@mui/material/Accordion/AccordionContext.js
var React2 = __toESM(require_react());
"use client";
var AccordionContext = React2.createContext({});
if (true) {
  AccordionContext.displayName = "AccordionContext";
}
var AccordionContext_default = AccordionContext;

// node_modules/@mui/material/Accordion/Accordion.js
init_useControlled2();

// node_modules/@mui/material/utils/useSlot.js
init_extends();
init_objectWithoutPropertiesLoose();
init_useForkRef();
init_utils4();
"use client";
var _excluded2 = ["className", "elementType", "ownerState", "externalForwardedProps", "getSlotOwnerState", "internalForwardedProps"];
var _excluded22 = ["component", "slots", "slotProps"];
var _excluded3 = ["component"];
function useSlot(name, parameters) {
  const {
    className,
    elementType: initialElementType,
    ownerState,
    externalForwardedProps,
    getSlotOwnerState,
    internalForwardedProps
  } = parameters, useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded2);
  const {
    component: rootComponent,
    slots = {
      [name]: void 0
    },
    slotProps = {
      [name]: void 0
    }
  } = externalForwardedProps, other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded22);
  const elementType = slots[name] || initialElementType;
  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);
  const _mergeSlotProps = mergeSlotProps(_extends({
    className
  }, useSlotPropsParams, {
    externalForwardedProps: name === "root" ? other : void 0,
    externalSlotProps: resolvedComponentsProps
  })), {
    props: {
      component: slotComponent
    },
    internalRef
  } = _mergeSlotProps, mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);
  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};
  const finalOwnerState = _extends({}, ownerState, slotOwnerState);
  const LeafComponent = name === "root" ? slotComponent || rootComponent : slotComponent;
  const props = appendOwnerState(elementType, _extends({}, name === "root" && !rootComponent && !slots[name] && internalForwardedProps, name !== "root" && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {
    as: LeafComponent
  }, {
    ref
  }), finalOwnerState);
  Object.keys(slotOwnerState).forEach((propName) => {
    delete props[propName];
  });
  return [elementType, props];
}

// node_modules/@mui/material/Accordion/accordionClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAccordionUtilityClass(slot) {
  return generateUtilityClass("MuiAccordion", slot);
}
var accordionClasses = generateUtilityClasses("MuiAccordion", ["root", "rounded", "expanded", "disabled", "gutters", "region"]);
var accordionClasses_default = accordionClasses;

// node_modules/@mui/material/Accordion/Accordion.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
"use client";
var _excluded4 = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "slots", "slotProps", "TransitionComponent", "TransitionProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes: classes2,
    square,
    expanded,
    disabled,
    disableGutters
  } = ownerState;
  const slots = {
    root: ["root", !square && "rounded", expanded && "expanded", disabled && "disabled", !disableGutters && "gutters"],
    region: ["region"]
  };
  return composeClasses(slots, getAccordionUtilityClass, classes2);
};
var AccordionRoot = styled_default(Paper_default, {
  name: "MuiAccordion",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${accordionClasses_default.region}`]: styles5.region
    }, styles5.root, !ownerState.square && styles5.rounded, !ownerState.disableGutters && styles5.gutters];
  }
})(({
  theme
}) => {
  const transition = {
    duration: theme.transitions.duration.shortest
  };
  return {
    position: "relative",
    transition: theme.transitions.create(["margin"], transition),
    overflowAnchor: "none",
    "&::before": {
      position: "absolute",
      left: 0,
      top: -1,
      right: 0,
      height: 1,
      content: '""',
      opacity: 1,
      backgroundColor: (theme.vars || theme).palette.divider,
      transition: theme.transitions.create(["opacity", "background-color"], transition)
    },
    "&:first-of-type": {
      "&::before": {
        display: "none"
      }
    },
    [`&.${accordionClasses_default.expanded}`]: {
      "&::before": {
        opacity: 0
      },
      "&:first-of-type": {
        marginTop: 0
      },
      "&:last-of-type": {
        marginBottom: 0
      },
      "& + &": {
        "&::before": {
          display: "none"
        }
      }
    },
    [`&.${accordionClasses_default.disabled}`]: {
      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
    }
  };
}, ({
  theme,
  ownerState
}) => _extends({}, !ownerState.square && {
  borderRadius: 0,
  "&:first-of-type": {
    borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
    borderTopRightRadius: (theme.vars || theme).shape.borderRadius
  },
  "&:last-of-type": {
    borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
    borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
    "@supports (-ms-ime-align: auto)": {
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    }
  }
}, !ownerState.disableGutters && {
  [`&.${accordionClasses_default.expanded}`]: {
    margin: "16px 0"
  }
}));
var Accordion = React3.forwardRef(function Accordion2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAccordion"
  });
  const {
    children: childrenProp,
    className,
    defaultExpanded = false,
    disabled = false,
    disableGutters = false,
    expanded: expandedProp,
    onChange,
    square = false,
    slots = {},
    slotProps = {},
    TransitionComponent: TransitionComponentProp,
    TransitionProps: TransitionPropsProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const [expanded, setExpandedState] = useControlled_default({
    controlled: expandedProp,
    default: defaultExpanded,
    name: "Accordion",
    state: "expanded"
  });
  const handleChange = React3.useCallback((event) => {
    setExpandedState(!expanded);
    if (onChange) {
      onChange(event, !expanded);
    }
  }, [expanded, onChange, setExpandedState]);
  const [summary, ...children] = React3.Children.toArray(childrenProp);
  const contextValue = React3.useMemo(() => ({
    expanded,
    disabled,
    disableGutters,
    toggle: handleChange
  }), [expanded, disabled, disableGutters, handleChange]);
  const ownerState = _extends({}, props, {
    square,
    disabled,
    disableGutters,
    expanded
  });
  const classes2 = useUtilityClasses2(ownerState);
  const backwardCompatibleSlots = _extends({
    transition: TransitionComponentProp
  }, slots);
  const backwardCompatibleSlotProps = _extends({
    transition: TransitionPropsProp
  }, slotProps);
  const [TransitionSlot, transitionProps] = useSlot("transition", {
    elementType: Collapse_default,
    externalForwardedProps: {
      slots: backwardCompatibleSlots,
      slotProps: backwardCompatibleSlotProps
    },
    ownerState
  });
  return (0, import_jsx_runtime3.jsxs)(AccordionRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState,
    square
  }, other, {
    children: [(0, import_jsx_runtime2.jsx)(AccordionContext_default.Provider, {
      value: contextValue,
      children: summary
    }), (0, import_jsx_runtime2.jsx)(TransitionSlot, _extends({
      in: expanded,
      timeout: "auto"
    }, transitionProps, {
      children: (0, import_jsx_runtime2.jsx)("div", {
        "aria-labelledby": summary.props.id,
        id: summary.props["aria-controls"],
        role: "region",
        className: classes2.region,
        children
      })
    }))]
  }));
});
true ? Accordion.propTypes = {
  children: chainPropTypes(import_prop_types3.default.node.isRequired, (props) => {
    const summary = React3.Children.toArray(props.children)[0];
    if ((0, import_react_is.isFragment)(summary)) {
      return new Error("MUI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.");
    }
    if (!React3.isValidElement(summary)) {
      return new Error("MUI: Expected the first child of Accordion to be a valid element.");
    }
    return null;
  }),
  classes: import_prop_types3.default.object,
  className: import_prop_types3.default.string,
  defaultExpanded: import_prop_types3.default.bool,
  disabled: import_prop_types3.default.bool,
  disableGutters: import_prop_types3.default.bool,
  expanded: import_prop_types3.default.bool,
  onChange: import_prop_types3.default.func,
  slotProps: import_prop_types3.default.shape({
    transition: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
  }),
  slots: import_prop_types3.default.shape({
    transition: import_prop_types3.default.elementType
  }),
  square: import_prop_types3.default.bool,
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
  TransitionComponent: import_prop_types3.default.elementType,
  TransitionProps: import_prop_types3.default.object
} : void 0;

// node_modules/@mui/material/AccordionActions/AccordionActions.js
init_objectWithoutPropertiesLoose();
init_extends();
var React4 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/AccordionActions/accordionActionsClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAccordionActionsUtilityClass(slot) {
  return generateUtilityClass("MuiAccordionActions", slot);
}
var accordionActionsClasses = generateUtilityClasses("MuiAccordionActions", ["root", "spacing"]);

// node_modules/@mui/material/AccordionActions/AccordionActions.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
"use client";
var _excluded5 = ["className", "disableSpacing"];
var useUtilityClasses3 = (ownerState) => {
  const {
    classes: classes2,
    disableSpacing
  } = ownerState;
  const slots = {
    root: ["root", !disableSpacing && "spacing"]
  };
  return composeClasses(slots, getAccordionActionsUtilityClass, classes2);
};
var AccordionActionsRoot = styled_default("div", {
  name: "MuiAccordionActions",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, !ownerState.disableSpacing && styles5.spacing];
  }
})(({
  ownerState
}) => _extends({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end"
}, !ownerState.disableSpacing && {
  "& > :not(style) ~ :not(style)": {
    marginLeft: 8
  }
}));
var AccordionActions = React4.forwardRef(function AccordionActions2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAccordionActions"
  });
  const {
    className,
    disableSpacing = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const ownerState = _extends({}, props, {
    disableSpacing
  });
  const classes2 = useUtilityClasses3(ownerState);
  return (0, import_jsx_runtime4.jsx)(AccordionActionsRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other));
});
true ? AccordionActions.propTypes = {
  children: import_prop_types4.default.node,
  classes: import_prop_types4.default.object,
  className: import_prop_types4.default.string,
  disableSpacing: import_prop_types4.default.bool,
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object])
} : void 0;

// node_modules/@mui/material/AccordionDetails/AccordionDetails.js
init_extends();
init_objectWithoutPropertiesLoose();
var React5 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/AccordionDetails/accordionDetailsClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAccordionDetailsUtilityClass(slot) {
  return generateUtilityClass("MuiAccordionDetails", slot);
}
var accordionDetailsClasses = generateUtilityClasses("MuiAccordionDetails", ["root"]);

// node_modules/@mui/material/AccordionDetails/AccordionDetails.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
"use client";
var _excluded6 = ["className"];
var useUtilityClasses4 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getAccordionDetailsUtilityClass, classes2);
};
var AccordionDetailsRoot = styled_default("div", {
  name: "MuiAccordionDetails",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme
}) => ({
  padding: theme.spacing(1, 2, 2)
}));
var AccordionDetails = React5.forwardRef(function AccordionDetails2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAccordionDetails"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const ownerState = props;
  const classes2 = useUtilityClasses4(ownerState);
  return (0, import_jsx_runtime5.jsx)(AccordionDetailsRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other));
});
true ? AccordionDetails.propTypes = {
  children: import_prop_types5.default.node,
  classes: import_prop_types5.default.object,
  className: import_prop_types5.default.string,
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object])
} : void 0;

// node_modules/@mui/material/AccordionSummary/AccordionSummary.js
init_objectWithoutPropertiesLoose();
init_extends();
var React6 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_ButtonBase();

// node_modules/@mui/material/AccordionSummary/accordionSummaryClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAccordionSummaryUtilityClass(slot) {
  return generateUtilityClass("MuiAccordionSummary", slot);
}
var accordionSummaryClasses = generateUtilityClasses("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]);
var accordionSummaryClasses_default = accordionSummaryClasses;

// node_modules/@mui/material/AccordionSummary/AccordionSummary.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
"use client";
var _excluded7 = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];
var useUtilityClasses5 = (ownerState) => {
  const {
    classes: classes2,
    expanded,
    disabled,
    disableGutters
  } = ownerState;
  const slots = {
    root: ["root", expanded && "expanded", disabled && "disabled", !disableGutters && "gutters"],
    focusVisible: ["focusVisible"],
    content: ["content", expanded && "expanded", !disableGutters && "contentGutters"],
    expandIconWrapper: ["expandIconWrapper", expanded && "expanded"]
  };
  return composeClasses(slots, getAccordionSummaryUtilityClass, classes2);
};
var AccordionSummaryRoot = styled_default(ButtonBase_default, {
  name: "MuiAccordionSummary",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => {
  const transition = {
    duration: theme.transitions.duration.shortest
  };
  return _extends({
    display: "flex",
    minHeight: 48,
    padding: theme.spacing(0, 2),
    transition: theme.transitions.create(["min-height", "background-color"], transition),
    [`&.${accordionSummaryClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${accordionSummaryClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    [`&:hover:not(.${accordionSummaryClasses_default.disabled})`]: {
      cursor: "pointer"
    }
  }, !ownerState.disableGutters && {
    [`&.${accordionSummaryClasses_default.expanded}`]: {
      minHeight: 64
    }
  });
});
var AccordionSummaryContent = styled_default("div", {
  name: "MuiAccordionSummary",
  slot: "Content",
  overridesResolver: (props, styles5) => styles5.content
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  flexGrow: 1,
  margin: "12px 0"
}, !ownerState.disableGutters && {
  transition: theme.transitions.create(["margin"], {
    duration: theme.transitions.duration.shortest
  }),
  [`&.${accordionSummaryClasses_default.expanded}`]: {
    margin: "20px 0"
  }
}));
var AccordionSummaryExpandIconWrapper = styled_default("div", {
  name: "MuiAccordionSummary",
  slot: "ExpandIconWrapper",
  overridesResolver: (props, styles5) => styles5.expandIconWrapper
})(({
  theme
}) => ({
  display: "flex",
  color: (theme.vars || theme).palette.action.active,
  transform: "rotate(0deg)",
  transition: theme.transitions.create("transform", {
    duration: theme.transitions.duration.shortest
  }),
  [`&.${accordionSummaryClasses_default.expanded}`]: {
    transform: "rotate(180deg)"
  }
}));
var AccordionSummary = React6.forwardRef(function AccordionSummary2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAccordionSummary"
  });
  const {
    children,
    className,
    expandIcon,
    focusVisibleClassName,
    onClick: onClick2
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const {
    disabled = false,
    disableGutters,
    expanded,
    toggle
  } = React6.useContext(AccordionContext_default);
  const handleChange = (event) => {
    if (toggle) {
      toggle(event);
    }
    if (onClick2) {
      onClick2(event);
    }
  };
  const ownerState = _extends({}, props, {
    expanded,
    disabled,
    disableGutters
  });
  const classes2 = useUtilityClasses5(ownerState);
  return (0, import_jsx_runtime7.jsxs)(AccordionSummaryRoot, _extends({
    focusRipple: false,
    disableRipple: true,
    disabled,
    component: "div",
    "aria-expanded": expanded,
    className: clsx_default(classes2.root, className),
    focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
    onClick: handleChange,
    ref,
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime6.jsx)(AccordionSummaryContent, {
      className: classes2.content,
      ownerState,
      children
    }), expandIcon && (0, import_jsx_runtime6.jsx)(AccordionSummaryExpandIconWrapper, {
      className: classes2.expandIconWrapper,
      ownerState,
      children: expandIcon
    })]
  }));
});
true ? AccordionSummary.propTypes = {
  children: import_prop_types6.default.node,
  classes: import_prop_types6.default.object,
  className: import_prop_types6.default.string,
  expandIcon: import_prop_types6.default.node,
  focusVisibleClassName: import_prop_types6.default.string,
  onClick: import_prop_types6.default.func,
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object])
} : void 0;

// node_modules/@mui/material/Alert/Alert.js
init_objectWithoutPropertiesLoose();
init_extends();
var React12 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
init_clsx();
init_base();
init_esm();
init_styled();
init_useThemeProps2();
init_capitalize();
init_Paper();

// node_modules/@mui/material/Alert/alertClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAlertUtilityClass(slot) {
  return generateUtilityClass("MuiAlert", slot);
}
var alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
var alertClasses_default = alertClasses;

// node_modules/@mui/material/Alert/Alert.js
init_IconButton();

// node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
var React7 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
"use client";
var SuccessOutlined_default = createSvgIcon((0, import_jsx_runtime8.jsx)("path", {
  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
}), "SuccessOutlined");

// node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js
var React8 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
"use client";
var ReportProblemOutlined_default = createSvgIcon((0, import_jsx_runtime9.jsx)("path", {
  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
}), "ReportProblemOutlined");

// node_modules/@mui/material/internal/svg-icons/ErrorOutline.js
var React9 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
"use client";
var ErrorOutline_default = createSvgIcon((0, import_jsx_runtime10.jsx)("path", {
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "ErrorOutline");

// node_modules/@mui/material/internal/svg-icons/InfoOutlined.js
var React10 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
"use client";
var InfoOutlined_default = createSvgIcon((0, import_jsx_runtime11.jsx)("path", {
  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
}), "InfoOutlined");

// node_modules/@mui/material/internal/svg-icons/Close.js
var React11 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
"use client";
var Close_default = createSvgIcon((0, import_jsx_runtime12.jsx)("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@mui/material/Alert/Alert.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
"use client";
var _excluded8 = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
var useUtilityClasses6 = (ownerState) => {
  const {
    variant,
    color,
    severity,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", `${variant}${capitalize_default(color || severity)}`, `${variant}`],
    icon: ["icon"],
    message: ["message"],
    action: ["action"]
  };
  return composeClasses(slots, getAlertUtilityClass, classes2);
};
var AlertRoot = styled_default(Paper_default, {
  name: "MuiAlert",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant], styles5[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  const getColor = theme.palette.mode === "light" ? darken : lighten;
  const getBackgroundColor = theme.palette.mode === "light" ? lighten : darken;
  const color = ownerState.color || ownerState.severity;
  return _extends({}, theme.typography.body2, {
    backgroundColor: "transparent",
    display: "flex",
    padding: "6px 16px"
  }, color && ownerState.variant === "standard" && {
    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
    backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),
    [`& .${alertClasses_default.icon}`]: theme.vars ? {
      color: theme.vars.palette.Alert[`${color}IconColor`]
    } : {
      color: theme.palette[color].main
    }
  }, color && ownerState.variant === "outlined" && {
    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
    border: `1px solid ${(theme.vars || theme).palette[color].light}`,
    [`& .${alertClasses_default.icon}`]: theme.vars ? {
      color: theme.vars.palette.Alert[`${color}IconColor`]
    } : {
      color: theme.palette[color].main
    }
  }, color && ownerState.variant === "filled" && _extends({
    fontWeight: theme.typography.fontWeightMedium
  }, theme.vars ? {
    color: theme.vars.palette.Alert[`${color}FilledColor`],
    backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]
  } : {
    backgroundColor: theme.palette.mode === "dark" ? theme.palette[color].dark : theme.palette[color].main,
    color: theme.palette.getContrastText(theme.palette[color].main)
  }));
});
var AlertIcon = styled_default("div", {
  name: "MuiAlert",
  slot: "Icon",
  overridesResolver: (props, styles5) => styles5.icon
})({
  marginRight: 12,
  padding: "7px 0",
  display: "flex",
  fontSize: 22,
  opacity: 0.9
});
var AlertMessage = styled_default("div", {
  name: "MuiAlert",
  slot: "Message",
  overridesResolver: (props, styles5) => styles5.message
})({
  padding: "8px 0",
  minWidth: 0,
  overflow: "auto"
});
var AlertAction = styled_default("div", {
  name: "MuiAlert",
  slot: "Action",
  overridesResolver: (props, styles5) => styles5.action
})({
  display: "flex",
  alignItems: "flex-start",
  padding: "4px 0 0 16px",
  marginLeft: "auto",
  marginRight: -8
});
var defaultIconMapping = {
  success: (0, import_jsx_runtime13.jsx)(SuccessOutlined_default, {
    fontSize: "inherit"
  }),
  warning: (0, import_jsx_runtime13.jsx)(ReportProblemOutlined_default, {
    fontSize: "inherit"
  }),
  error: (0, import_jsx_runtime13.jsx)(ErrorOutline_default, {
    fontSize: "inherit"
  }),
  info: (0, import_jsx_runtime13.jsx)(InfoOutlined_default, {
    fontSize: "inherit"
  })
};
var Alert = React12.forwardRef(function Alert2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAlert"
  });
  const {
    action,
    children,
    className,
    closeText = "Close",
    color,
    components = {},
    componentsProps = {},
    icon,
    iconMapping = defaultIconMapping,
    onClose,
    role = "alert",
    severity = "success",
    slotProps = {},
    slots = {},
    variant = "standard"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const ownerState = _extends({}, props, {
    color,
    severity,
    variant
  });
  const classes2 = useUtilityClasses6(ownerState);
  const externalForwardedProps = {
    slots: _extends({
      closeButton: components.CloseButton,
      closeIcon: components.CloseIcon
    }, slots),
    slotProps: _extends({}, componentsProps, slotProps)
  };
  const [CloseButtonSlot, closeButtonProps] = useSlot("closeButton", {
    elementType: IconButton_default,
    externalForwardedProps,
    ownerState
  });
  const [CloseIconSlot, closeIconProps] = useSlot("closeIcon", {
    elementType: Close_default,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime14.jsxs)(AlertRoot, _extends({
    role,
    elevation: 0,
    ownerState,
    className: clsx_default(classes2.root, className),
    ref
  }, other, {
    children: [icon !== false ? (0, import_jsx_runtime13.jsx)(AlertIcon, {
      ownerState,
      className: classes2.icon,
      children: icon || iconMapping[severity] || defaultIconMapping[severity]
    }) : null, (0, import_jsx_runtime13.jsx)(AlertMessage, {
      ownerState,
      className: classes2.message,
      children
    }), action != null ? (0, import_jsx_runtime13.jsx)(AlertAction, {
      ownerState,
      className: classes2.action,
      children: action
    }) : null, action == null && onClose ? (0, import_jsx_runtime13.jsx)(AlertAction, {
      ownerState,
      className: classes2.action,
      children: (0, import_jsx_runtime13.jsx)(CloseButtonSlot, _extends({
        size: "small",
        "aria-label": closeText,
        title: closeText,
        color: "inherit",
        onClick: onClose
      }, closeButtonProps, {
        children: (0, import_jsx_runtime13.jsx)(CloseIconSlot, _extends({
          fontSize: "small"
        }, closeIconProps))
      }))
    }) : null]
  }));
});
true ? Alert.propTypes = {
  action: import_prop_types7.default.node,
  children: import_prop_types7.default.node,
  classes: import_prop_types7.default.object,
  className: import_prop_types7.default.string,
  closeText: import_prop_types7.default.string,
  color: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["error", "info", "success", "warning"]), import_prop_types7.default.string]),
  components: import_prop_types7.default.shape({
    CloseButton: import_prop_types7.default.elementType,
    CloseIcon: import_prop_types7.default.elementType
  }),
  componentsProps: import_prop_types7.default.shape({
    closeButton: import_prop_types7.default.object,
    closeIcon: import_prop_types7.default.object
  }),
  icon: import_prop_types7.default.node,
  iconMapping: import_prop_types7.default.shape({
    error: import_prop_types7.default.node,
    info: import_prop_types7.default.node,
    success: import_prop_types7.default.node,
    warning: import_prop_types7.default.node
  }),
  onClose: import_prop_types7.default.func,
  role: import_prop_types7.default.string,
  severity: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["error", "info", "success", "warning"]), import_prop_types7.default.string]),
  slotProps: import_prop_types7.default.shape({
    closeButton: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object]),
    closeIcon: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object])
  }),
  slots: import_prop_types7.default.shape({
    closeButton: import_prop_types7.default.elementType,
    closeIcon: import_prop_types7.default.elementType
  }),
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
  variant: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["filled", "outlined", "standard"]), import_prop_types7.default.string])
} : void 0;

// node_modules/@mui/material/Alert/index.js
"use client";

// node_modules/@mui/material/AlertTitle/AlertTitle.js
init_extends();
init_objectWithoutPropertiesLoose();
var React13 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_Typography();

// node_modules/@mui/material/AlertTitle/alertTitleClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAlertTitleUtilityClass(slot) {
  return generateUtilityClass("MuiAlertTitle", slot);
}
var alertTitleClasses = generateUtilityClasses("MuiAlertTitle", ["root"]);

// node_modules/@mui/material/AlertTitle/AlertTitle.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
"use client";
var _excluded9 = ["className"];
var useUtilityClasses7 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getAlertTitleUtilityClass, classes2);
};
var AlertTitleRoot = styled_default(Typography_default, {
  name: "MuiAlertTitle",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme
}) => {
  return {
    fontWeight: theme.typography.fontWeightMedium,
    marginTop: -2
  };
});
var AlertTitle = React13.forwardRef(function AlertTitle2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAlertTitle"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const ownerState = props;
  const classes2 = useUtilityClasses7(ownerState);
  return (0, import_jsx_runtime15.jsx)(AlertTitleRoot, _extends({
    gutterBottom: true,
    component: "div",
    ownerState,
    ref,
    className: clsx_default(classes2.root, className)
  }, other));
});
true ? AlertTitle.propTypes = {
  children: import_prop_types8.default.node,
  classes: import_prop_types8.default.object,
  className: import_prop_types8.default.string,
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object])
} : void 0;

// node_modules/@mui/material/AlertTitle/index.js
"use client";

// node_modules/@mui/material/AppBar/AppBar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React14 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_capitalize();
init_Paper();

// node_modules/@mui/material/AppBar/appBarClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAppBarUtilityClass(slot) {
  return generateUtilityClass("MuiAppBar", slot);
}
var appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]);

// node_modules/@mui/material/AppBar/AppBar.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
"use client";
var _excluded10 = ["className", "color", "enableColorOnDark", "position"];
var useUtilityClasses8 = (ownerState) => {
  const {
    color,
    position,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", `color${capitalize_default(color)}`, `position${capitalize_default(position)}`]
  };
  return composeClasses(slots, getAppBarUtilityClass, classes2);
};
var joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
var AppBarRoot = styled_default(Paper_default, {
  name: "MuiAppBar",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`], styles5[`color${capitalize_default(ownerState.color)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
  return _extends({
    display: "flex",
    flexDirection: "column",
    width: "100%",
    boxSizing: "border-box",
    flexShrink: 0
  }, ownerState.position === "fixed" && {
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.appBar,
    top: 0,
    left: "auto",
    right: 0,
    "@media print": {
      position: "absolute"
    }
  }, ownerState.position === "absolute" && {
    position: "absolute",
    zIndex: (theme.vars || theme).zIndex.appBar,
    top: 0,
    left: "auto",
    right: 0
  }, ownerState.position === "sticky" && {
    position: "sticky",
    zIndex: (theme.vars || theme).zIndex.appBar,
    top: 0,
    left: "auto",
    right: 0
  }, ownerState.position === "static" && {
    position: "static"
  }, ownerState.position === "relative" && {
    position: "relative"
  }, !theme.vars && _extends({}, ownerState.color === "default" && {
    backgroundColor: backgroundColorDefault,
    color: theme.palette.getContrastText(backgroundColorDefault)
  }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
    backgroundColor: theme.palette[ownerState.color].main,
    color: theme.palette[ownerState.color].contrastText
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
    backgroundColor: null,
    color: null
  }, ownerState.color === "transparent" && _extends({
    backgroundColor: "transparent",
    color: "inherit"
  }, theme.palette.mode === "dark" && {
    backgroundImage: "none"
  })), theme.vars && _extends({}, ownerState.color === "default" && {
    "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
    "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
  }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
    "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
    "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
  }, {
    backgroundColor: "var(--AppBar-background)",
    color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
  }, ownerState.color === "transparent" && {
    backgroundImage: "none",
    backgroundColor: "transparent",
    color: "inherit"
  }));
});
var AppBar = React14.forwardRef(function AppBar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAppBar"
  });
  const {
    className,
    color = "primary",
    enableColorOnDark = false,
    position = "fixed"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  const ownerState = _extends({}, props, {
    color,
    position,
    enableColorOnDark
  });
  const classes2 = useUtilityClasses8(ownerState);
  return (0, import_jsx_runtime16.jsx)(AppBarRoot, _extends({
    square: true,
    component: "header",
    ownerState,
    elevation: 4,
    className: clsx_default(classes2.root, className, position === "fixed" && "mui-fixed"),
    ref
  }, other));
});
true ? AppBar.propTypes = {
  children: import_prop_types9.default.node,
  classes: import_prop_types9.default.object,
  className: import_prop_types9.default.string,
  color: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), import_prop_types9.default.string]),
  enableColorOnDark: import_prop_types9.default.bool,
  position: import_prop_types9.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object])
} : void 0;

// node_modules/@mui/material/AppBar/index.js
"use client";

// node_modules/@mui/material/Autocomplete/Autocomplete.js
init_objectWithoutPropertiesLoose();
init_extends();
var React16 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_clsx();
init_integerPropType();
init_chainPropTypes();
init_base();
init_composeClasses();
var import_colorManipulator = __toESM(require_colorManipulator());
init_Popper();

// node_modules/@mui/material/ListSubheader/ListSubheader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React15 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_capitalize();

// node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getListSubheaderUtilityClass(slot) {
  return generateUtilityClass("MuiListSubheader", slot);
}
var listSubheaderClasses = generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);

// node_modules/@mui/material/ListSubheader/ListSubheader.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
"use client";
var _excluded11 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
var useUtilityClasses9 = (ownerState) => {
  const {
    classes: classes2,
    color,
    disableGutters,
    inset,
    disableSticky
  } = ownerState;
  const slots = {
    root: ["root", color !== "default" && `color${capitalize_default(color)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
  };
  return composeClasses(slots, getListSubheaderUtilityClass, classes2);
};
var ListSubheaderRoot = styled_default("li", {
  name: "MuiListSubheader",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles5.gutters, ownerState.inset && styles5.inset, !ownerState.disableSticky && styles5.sticky];
  }
})(({
  theme,
  ownerState
}) => _extends({
  boxSizing: "border-box",
  lineHeight: "48px",
  listStyle: "none",
  color: (theme.vars || theme).palette.text.secondary,
  fontFamily: theme.typography.fontFamily,
  fontWeight: theme.typography.fontWeightMedium,
  fontSize: theme.typography.pxToRem(14)
}, ownerState.color === "primary" && {
  color: (theme.vars || theme).palette.primary.main
}, ownerState.color === "inherit" && {
  color: "inherit"
}, !ownerState.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, ownerState.inset && {
  paddingLeft: 72
}, !ownerState.disableSticky && {
  position: "sticky",
  top: 0,
  zIndex: 1,
  backgroundColor: (theme.vars || theme).palette.background.paper
}));
var ListSubheader = React15.forwardRef(function ListSubheader2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiListSubheader"
  });
  const {
    className,
    color = "default",
    component = "li",
    disableGutters = false,
    disableSticky = false,
    inset = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const ownerState = _extends({}, props, {
    color,
    component,
    disableGutters,
    disableSticky,
    inset
  });
  const classes2 = useUtilityClasses9(ownerState);
  return (0, import_jsx_runtime17.jsx)(ListSubheaderRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other));
});
ListSubheader.muiSkipListHighlight = true;
true ? ListSubheader.propTypes = {
  children: import_prop_types10.default.node,
  classes: import_prop_types10.default.object,
  className: import_prop_types10.default.string,
  color: import_prop_types10.default.oneOf(["default", "inherit", "primary"]),
  component: import_prop_types10.default.elementType,
  disableGutters: import_prop_types10.default.bool,
  disableSticky: import_prop_types10.default.bool,
  inset: import_prop_types10.default.bool,
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object])
} : void 0;
var ListSubheader_default = ListSubheader;

// node_modules/@mui/material/ListSubheader/index.js
"use client";

// node_modules/@mui/material/Autocomplete/Autocomplete.js
init_Paper();
init_IconButton();
init_Chip();
init_inputClasses();
init_inputBaseClasses();
init_outlinedInputClasses();
init_filledInputClasses();
init_ArrowDropDown();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Autocomplete/autocompleteClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAutocompleteUtilityClass(slot) {
  return generateUtilityClass("MuiAutocomplete", slot);
}
var autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
var autocompleteClasses_default = autocompleteClasses;

// node_modules/@mui/material/Autocomplete/Autocomplete.js
init_capitalize();
init_useForkRef2();
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
"use client";
var _ClearIcon;
var _ArrowDropDownIcon;
var _excluded12 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
var _excluded23 = ["ref"];
var useUtilityClasses10 = (ownerState) => {
  const {
    classes: classes2,
    disablePortal,
    expanded,
    focused,
    fullWidth,
    hasClearIcon,
    hasPopupIcon,
    inputFocused,
    popupOpen,
    size
  } = ownerState;
  const slots = {
    root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
    inputRoot: ["inputRoot"],
    input: ["input", inputFocused && "inputFocused"],
    tag: ["tag", `tagSize${capitalize_default(size)}`],
    endAdornment: ["endAdornment"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
    popper: ["popper", disablePortal && "popperDisablePortal"],
    paper: ["paper"],
    listbox: ["listbox"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    option: ["option"],
    groupLabel: ["groupLabel"],
    groupUl: ["groupUl"]
  };
  return composeClasses(slots, getAutocompleteUtilityClass, classes2);
};
var AutocompleteRoot = styled_default("div", {
  name: "MuiAutocomplete",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    const {
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      size
    } = ownerState;
    return [{
      [`& .${autocompleteClasses_default.tag}`]: styles5.tag
    }, {
      [`& .${autocompleteClasses_default.tag}`]: styles5[`tagSize${capitalize_default(size)}`]
    }, {
      [`& .${autocompleteClasses_default.inputRoot}`]: styles5.inputRoot
    }, {
      [`& .${autocompleteClasses_default.input}`]: styles5.input
    }, {
      [`& .${autocompleteClasses_default.input}`]: inputFocused && styles5.inputFocused
    }, styles5.root, fullWidth && styles5.fullWidth, hasPopupIcon && styles5.hasPopupIcon, hasClearIcon && styles5.hasClearIcon];
  }
})(({
  ownerState
}) => _extends({
  [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
    visibility: "visible"
  },
  "@media (pointer: fine)": {
    [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    }
  }
}, ownerState.fullWidth && {
  width: "100%"
}, {
  [`& .${autocompleteClasses_default.tag}`]: _extends({
    margin: 3,
    maxWidth: "calc(100% - 6px)"
  }, ownerState.size === "small" && {
    margin: 2,
    maxWidth: "calc(100% - 4px)"
  }),
  [`& .${autocompleteClasses_default.inputRoot}`]: {
    flexWrap: "wrap",
    [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
      paddingRight: 26 + 4
    },
    [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
      paddingRight: 52 + 4
    },
    [`& .${autocompleteClasses_default.input}`]: {
      width: 0,
      minWidth: 30
    }
  },
  [`& .${inputClasses_default.root}`]: {
    paddingBottom: 1,
    "& .MuiInput-input": {
      padding: "4px 4px 4px 0px"
    }
  },
  [`& .${inputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
    [`& .${inputClasses_default.input}`]: {
      padding: "2px 4px 3px 0"
    }
  },
  [`& .${outlinedInputClasses_default.root}`]: {
    padding: 9,
    [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
      paddingRight: 26 + 4 + 9
    },
    [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
      paddingRight: 52 + 4 + 9
    },
    [`& .${autocompleteClasses_default.input}`]: {
      padding: "7.5px 4px 7.5px 5px"
    },
    [`& .${autocompleteClasses_default.endAdornment}`]: {
      right: 9
    }
  },
  [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 6,
    [`& .${autocompleteClasses_default.input}`]: {
      padding: "2.5px 4px 2.5px 8px"
    }
  },
  [`& .${filledInputClasses_default.root}`]: {
    paddingTop: 19,
    paddingLeft: 8,
    [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
      paddingRight: 26 + 4 + 9
    },
    [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
      paddingRight: 52 + 4 + 9
    },
    [`& .${filledInputClasses_default.input}`]: {
      padding: "7px 4px"
    },
    [`& .${autocompleteClasses_default.endAdornment}`]: {
      right: 9
    }
  },
  [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
    paddingBottom: 1,
    [`& .${filledInputClasses_default.input}`]: {
      padding: "2.5px 4px"
    }
  },
  [`& .${inputBaseClasses_default.hiddenLabel}`]: {
    paddingTop: 8
  },
  [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}`]: {
    paddingTop: 0,
    paddingBottom: 0,
    [`& .${autocompleteClasses_default.input}`]: {
      paddingTop: 16,
      paddingBottom: 17
    }
  },
  [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}.${inputBaseClasses_default.sizeSmall}`]: {
    [`& .${autocompleteClasses_default.input}`]: {
      paddingTop: 8,
      paddingBottom: 9
    }
  },
  [`& .${autocompleteClasses_default.input}`]: _extends({
    flexGrow: 1,
    textOverflow: "ellipsis",
    opacity: 0
  }, ownerState.inputFocused && {
    opacity: 1
  })
}));
var AutocompleteEndAdornment = styled_default("div", {
  name: "MuiAutocomplete",
  slot: "EndAdornment",
  overridesResolver: (props, styles5) => styles5.endAdornment
})({
  position: "absolute",
  right: 0,
  top: "50%",
  transform: "translate(0, -50%)"
});
var AutocompleteClearIndicator = styled_default(IconButton_default, {
  name: "MuiAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (props, styles5) => styles5.clearIndicator
})({
  marginRight: -2,
  padding: 4,
  visibility: "hidden"
});
var AutocompletePopupIndicator = styled_default(IconButton_default, {
  name: "MuiAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: ({
    ownerState
  }, styles5) => _extends({}, styles5.popupIndicator, ownerState.popupOpen && styles5.popupIndicatorOpen)
})(({
  ownerState
}) => _extends({
  padding: 2,
  marginRight: -2
}, ownerState.popupOpen && {
  transform: "rotate(180deg)"
}));
var AutocompletePopper = styled_default(Popper_default, {
  name: "MuiAutocomplete",
  slot: "Popper",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${autocompleteClasses_default.option}`]: styles5.option
    }, styles5.popper, ownerState.disablePortal && styles5.popperDisablePortal];
  }
})(({
  theme,
  ownerState
}) => _extends({
  zIndex: (theme.vars || theme).zIndex.modal
}, ownerState.disablePortal && {
  position: "absolute"
}));
var AutocompletePaper = styled_default(Paper_default, {
  name: "MuiAutocomplete",
  slot: "Paper",
  overridesResolver: (props, styles5) => styles5.paper
})(({
  theme
}) => _extends({}, theme.typography.body1, {
  overflow: "auto"
}));
var AutocompleteLoading = styled_default("div", {
  name: "MuiAutocomplete",
  slot: "Loading",
  overridesResolver: (props, styles5) => styles5.loading
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary,
  padding: "14px 16px"
}));
var AutocompleteNoOptions = styled_default("div", {
  name: "MuiAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles5) => styles5.noOptions
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary,
  padding: "14px 16px"
}));
var AutocompleteListbox = styled_default("div", {
  name: "MuiAutocomplete",
  slot: "Listbox",
  overridesResolver: (props, styles5) => styles5.listbox
})(({
  theme
}) => ({
  listStyle: "none",
  margin: 0,
  padding: "8px 0",
  maxHeight: "40vh",
  overflow: "auto",
  position: "relative",
  [`& .${autocompleteClasses_default.option}`]: {
    minHeight: 48,
    display: "flex",
    overflow: "hidden",
    justifyContent: "flex-start",
    alignItems: "center",
    cursor: "pointer",
    paddingTop: 6,
    boxSizing: "border-box",
    outline: "0",
    WebkitTapHighlightColor: "transparent",
    paddingBottom: 6,
    paddingLeft: 16,
    paddingRight: 16,
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    },
    [`&.${autocompleteClasses_default.focused}`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover,
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    '&[aria-disabled="true"]': {
      opacity: (theme.vars || theme).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`&.${autocompleteClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    '&[aria-selected="true"]': {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette.action.selected
        }
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }
  }
}));
var AutocompleteGroupLabel = styled_default(ListSubheader_default, {
  name: "MuiAutocomplete",
  slot: "GroupLabel",
  overridesResolver: (props, styles5) => styles5.groupLabel
})(({
  theme
}) => ({
  backgroundColor: (theme.vars || theme).palette.background.paper,
  top: -8
}));
var AutocompleteGroupUl = styled_default("ul", {
  name: "MuiAutocomplete",
  slot: "GroupUl",
  overridesResolver: (props, styles5) => styles5.groupUl
})({
  padding: 0,
  [`& .${autocompleteClasses_default.option}`]: {
    paddingLeft: 24
  }
});
var Autocomplete = React16.forwardRef(function Autocomplete2(inProps, ref) {
  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAutocomplete"
  });
  const {
    autoComplete = false,
    autoHighlight = false,
    autoSelect = false,
    blurOnSelect = false,
    ChipProps,
    className,
    clearIcon = _ClearIcon || (_ClearIcon = (0, import_jsx_runtime18.jsx)(Close_default, {
      fontSize: "small"
    })),
    clearOnBlur = !props.freeSolo,
    clearOnEscape = false,
    clearText = "Clear",
    closeText = "Close",
    componentsProps = {},
    defaultValue = props.multiple ? [] : null,
    disableClearable = false,
    disableCloseOnSelect = false,
    disabled = false,
    disabledItemsFocusable = false,
    disableListWrap = false,
    disablePortal = false,
    filterSelectedOptions = false,
    forcePopupIcon = "auto",
    freeSolo = false,
    fullWidth = false,
    getLimitTagsText = (more) => `+${more}`,
    getOptionLabel: getOptionLabelProp,
    groupBy,
    handleHomeEndKeys = !props.freeSolo,
    includeInputInList = false,
    limitTags = -1,
    ListboxComponent = "ul",
    ListboxProps,
    loading = false,
    loadingText = "Loading\u2026",
    multiple = false,
    noOptionsText = "No options",
    openOnFocus = false,
    openText = "Open",
    PaperComponent = Paper_default,
    PopperComponent = Popper_default,
    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = (0, import_jsx_runtime18.jsx)(ArrowDropDown_default, {})),
    readOnly = false,
    renderGroup: renderGroupProp,
    renderInput,
    renderOption: renderOptionProp,
    renderTags,
    selectOnFocus = !props.freeSolo,
    size = "medium",
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const {
    getRootProps,
    getInputProps,
    getInputLabelProps,
    getPopupIndicatorProps,
    getClearProps,
    getTagProps,
    getListboxProps,
    getOptionProps,
    value,
    dirty,
    expanded,
    id,
    popupOpen,
    focused,
    focusedTag,
    anchorEl,
    setAnchorEl,
    inputValue,
    groupedOptions
  } = useAutocomplete(_extends({}, props, {
    componentName: "Autocomplete"
  }));
  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
  const {
    onMouseDown: handleInputMouseDown
  } = getInputProps();
  const {
    ref: externalListboxRef
  } = ListboxProps != null ? ListboxProps : {};
  const _getListboxProps = getListboxProps(), {
    ref: listboxRef
  } = _getListboxProps, otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded23);
  const combinedListboxRef = useForkRef_default(listboxRef, externalListboxRef);
  const defaultGetOptionLabel = (option) => {
    var _option$label;
    return (_option$label = option.label) != null ? _option$label : option;
  };
  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;
  const ownerState = _extends({}, props, {
    disablePortal,
    expanded,
    focused,
    fullWidth,
    getOptionLabel,
    hasClearIcon,
    hasPopupIcon,
    inputFocused: focusedTag === -1,
    popupOpen,
    size
  });
  const classes2 = useUtilityClasses10(ownerState);
  let startAdornment;
  if (multiple && value.length > 0) {
    const getCustomizedTagProps = (params) => _extends({
      className: classes2.tag,
      disabled
    }, getTagProps(params));
    if (renderTags) {
      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
    } else {
      startAdornment = value.map((option, index) => (0, import_jsx_runtime18.jsx)(Chip_default, _extends({
        label: getOptionLabel(option),
        size
      }, getCustomizedTagProps({
        index
      }), ChipProps)));
    }
  }
  if (limitTags > -1 && Array.isArray(startAdornment)) {
    const more = startAdornment.length - limitTags;
    if (!focused && more > 0) {
      startAdornment = startAdornment.splice(0, limitTags);
      startAdornment.push((0, import_jsx_runtime18.jsx)("span", {
        className: classes2.tag,
        children: getLimitTagsText(more)
      }, startAdornment.length));
    }
  }
  const defaultRenderGroup = (params) => (0, import_jsx_runtime19.jsxs)("li", {
    children: [(0, import_jsx_runtime18.jsx)(AutocompleteGroupLabel, {
      className: classes2.groupLabel,
      ownerState,
      component: "div",
      children: params.group
    }), (0, import_jsx_runtime18.jsx)(AutocompleteGroupUl, {
      className: classes2.groupUl,
      ownerState,
      children: params.children
    })]
  }, params.key);
  const renderGroup = renderGroupProp || defaultRenderGroup;
  const defaultRenderOption = (props2, option) => {
    return (0, import_react3.createElement)("li", _extends({}, props2, {
      key: props2.key
    }), getOptionLabel(option));
  };
  const renderOption = renderOptionProp || defaultRenderOption;
  const renderListOption = (option, index) => {
    const optionProps = getOptionProps({
      option,
      index
    });
    return renderOption(_extends({}, optionProps, {
      className: classes2.option
    }), option, {
      selected: optionProps["aria-selected"],
      index,
      inputValue
    }, ownerState);
  };
  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
  return (0, import_jsx_runtime19.jsxs)(React16.Fragment, {
    children: [(0, import_jsx_runtime18.jsx)(AutocompleteRoot, _extends({
      ref,
      className: clsx_default(classes2.root, className),
      ownerState
    }, getRootProps(other), {
      children: renderInput({
        id,
        disabled,
        fullWidth: true,
        size: size === "small" ? "small" : void 0,
        InputLabelProps: getInputLabelProps(),
        InputProps: _extends({
          ref: setAnchorEl,
          className: classes2.inputRoot,
          startAdornment,
          onClick: (event) => {
            if (event.target === event.currentTarget) {
              handleInputMouseDown(event);
            }
          }
        }, (hasClearIcon || hasPopupIcon) && {
          endAdornment: (0, import_jsx_runtime19.jsxs)(AutocompleteEndAdornment, {
            className: classes2.endAdornment,
            ownerState,
            children: [hasClearIcon ? (0, import_jsx_runtime18.jsx)(AutocompleteClearIndicator, _extends({}, getClearProps(), {
              "aria-label": clearText,
              title: clearText,
              ownerState
            }, clearIndicatorSlotProps, {
              className: clsx_default(classes2.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
              children: clearIcon
            })) : null, hasPopupIcon ? (0, import_jsx_runtime18.jsx)(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
              disabled,
              "aria-label": popupOpen ? closeText : openText,
              title: popupOpen ? closeText : openText,
              ownerState
            }, popupIndicatorSlotProps, {
              className: clsx_default(classes2.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
              children: popupIcon
            })) : null]
          })
        }),
        inputProps: _extends({
          className: classes2.input,
          disabled,
          readOnly
        }, getInputProps())
      })
    })), anchorEl ? (0, import_jsx_runtime18.jsx)(AutocompletePopper, _extends({
      as: PopperComponent,
      disablePortal,
      style: {
        width: anchorEl ? anchorEl.clientWidth : null
      },
      ownerState,
      role: "presentation",
      anchorEl,
      open: popupOpen
    }, popperSlotProps, {
      className: clsx_default(classes2.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
      children: (0, import_jsx_runtime19.jsxs)(AutocompletePaper, _extends({
        ownerState,
        as: PaperComponent
      }, paperSlotProps, {
        className: clsx_default(classes2.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
        children: [loading && groupedOptions.length === 0 ? (0, import_jsx_runtime18.jsx)(AutocompleteLoading, {
          className: classes2.loading,
          ownerState,
          children: loadingText
        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? (0, import_jsx_runtime18.jsx)(AutocompleteNoOptions, {
          className: classes2.noOptions,
          ownerState,
          role: "presentation",
          onMouseDown: (event) => {
            event.preventDefault();
          },
          children: noOptionsText
        }) : null, groupedOptions.length > 0 ? (0, import_jsx_runtime18.jsx)(AutocompleteListbox, _extends({
          as: ListboxComponent,
          className: classes2.listbox,
          ownerState
        }, otherListboxProps, ListboxProps, {
          ref: combinedListboxRef,
          children: groupedOptions.map((option, index) => {
            if (groupBy) {
              return renderGroup({
                key: option.key,
                group: option.group,
                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
              });
            }
            return renderListOption(option, index);
          })
        })) : null]
      }))
    })) : null]
  });
});
true ? Autocomplete.propTypes = {
  autoComplete: import_prop_types11.default.bool,
  autoHighlight: import_prop_types11.default.bool,
  autoSelect: import_prop_types11.default.bool,
  blurOnSelect: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["mouse", "touch"]), import_prop_types11.default.bool]),
  ChipProps: import_prop_types11.default.object,
  classes: import_prop_types11.default.object,
  className: import_prop_types11.default.string,
  clearIcon: import_prop_types11.default.node,
  clearOnBlur: import_prop_types11.default.bool,
  clearOnEscape: import_prop_types11.default.bool,
  clearText: import_prop_types11.default.string,
  closeText: import_prop_types11.default.string,
  componentsProps: import_prop_types11.default.shape({
    clearIndicator: import_prop_types11.default.object,
    paper: import_prop_types11.default.object,
    popper: import_prop_types11.default.object,
    popupIndicator: import_prop_types11.default.object
  }),
  defaultValue: chainPropTypes(import_prop_types11.default.any, (props) => {
    if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
      return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
    }
    return null;
  }),
  disableClearable: import_prop_types11.default.bool,
  disableCloseOnSelect: import_prop_types11.default.bool,
  disabled: import_prop_types11.default.bool,
  disabledItemsFocusable: import_prop_types11.default.bool,
  disableListWrap: import_prop_types11.default.bool,
  disablePortal: import_prop_types11.default.bool,
  filterOptions: import_prop_types11.default.func,
  filterSelectedOptions: import_prop_types11.default.bool,
  forcePopupIcon: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.bool]),
  freeSolo: import_prop_types11.default.bool,
  fullWidth: import_prop_types11.default.bool,
  getLimitTagsText: import_prop_types11.default.func,
  getOptionDisabled: import_prop_types11.default.func,
  getOptionKey: import_prop_types11.default.func,
  getOptionLabel: import_prop_types11.default.func,
  groupBy: import_prop_types11.default.func,
  handleHomeEndKeys: import_prop_types11.default.bool,
  id: import_prop_types11.default.string,
  includeInputInList: import_prop_types11.default.bool,
  inputValue: import_prop_types11.default.string,
  isOptionEqualToValue: import_prop_types11.default.func,
  limitTags: integerPropType_default,
  ListboxComponent: import_prop_types11.default.elementType,
  ListboxProps: import_prop_types11.default.object,
  loading: import_prop_types11.default.bool,
  loadingText: import_prop_types11.default.node,
  multiple: import_prop_types11.default.bool,
  noOptionsText: import_prop_types11.default.node,
  onChange: import_prop_types11.default.func,
  onClose: import_prop_types11.default.func,
  onHighlightChange: import_prop_types11.default.func,
  onInputChange: import_prop_types11.default.func,
  onKeyDown: import_prop_types11.default.func,
  onOpen: import_prop_types11.default.func,
  open: import_prop_types11.default.bool,
  openOnFocus: import_prop_types11.default.bool,
  openText: import_prop_types11.default.string,
  options: import_prop_types11.default.array.isRequired,
  PaperComponent: import_prop_types11.default.elementType,
  PopperComponent: import_prop_types11.default.elementType,
  popupIcon: import_prop_types11.default.node,
  readOnly: import_prop_types11.default.bool,
  renderGroup: import_prop_types11.default.func,
  renderInput: import_prop_types11.default.func.isRequired,
  renderOption: import_prop_types11.default.func,
  renderTags: import_prop_types11.default.func,
  selectOnFocus: import_prop_types11.default.bool,
  size: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["small", "medium"]), import_prop_types11.default.string]),
  slotProps: import_prop_types11.default.shape({
    clearIndicator: import_prop_types11.default.object,
    paper: import_prop_types11.default.object,
    popper: import_prop_types11.default.object,
    popupIndicator: import_prop_types11.default.object
  }),
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
  value: chainPropTypes(import_prop_types11.default.any, (props) => {
    if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
      return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
    }
    return null;
  })
} : void 0;

// node_modules/@mui/material/Autocomplete/index.js
"use client";

// node_modules/@mui/material/Avatar/Avatar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React18 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/internal/svg-icons/Person.js
var React17 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
"use client";
var Person_default = createSvgIcon((0, import_jsx_runtime20.jsx)("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");

// node_modules/@mui/material/Avatar/avatarClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAvatarUtilityClass(slot) {
  return generateUtilityClass("MuiAvatar", slot);
}
var avatarClasses = generateUtilityClasses("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]);
var avatarClasses_default = avatarClasses;

// node_modules/@mui/material/Avatar/Avatar.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
"use client";
var _excluded13 = ["alt", "children", "className", "component", "slots", "slotProps", "imgProps", "sizes", "src", "srcSet", "variant"];
var useUtilityClasses11 = (ownerState) => {
  const {
    classes: classes2,
    variant,
    colorDefault
  } = ownerState;
  const slots = {
    root: ["root", variant, colorDefault && "colorDefault"],
    img: ["img"],
    fallback: ["fallback"]
  };
  return composeClasses(slots, getAvatarUtilityClass, classes2);
};
var AvatarRoot = styled_default("div", {
  name: "MuiAvatar",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant], ownerState.colorDefault && styles5.colorDefault];
  }
})(({
  theme
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0,
  width: 40,
  height: 40,
  fontFamily: theme.typography.fontFamily,
  fontSize: theme.typography.pxToRem(20),
  lineHeight: 1,
  borderRadius: "50%",
  overflow: "hidden",
  userSelect: "none",
  variants: [{
    props: {
      variant: "rounded"
    },
    style: {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }
  }, {
    props: {
      variant: "square"
    },
    style: {
      borderRadius: 0
    }
  }, {
    props: {
      colorDefault: true
    },
    style: _extends({
      color: (theme.vars || theme).palette.background.default
    }, theme.vars ? {
      backgroundColor: theme.vars.palette.Avatar.defaultBg
    } : _extends({
      backgroundColor: theme.palette.grey[400]
    }, theme.applyStyles("dark", {
      backgroundColor: theme.palette.grey[600]
    })))
  }]
}));
var AvatarImg = styled_default("img", {
  name: "MuiAvatar",
  slot: "Img",
  overridesResolver: (props, styles5) => styles5.img
})({
  width: "100%",
  height: "100%",
  textAlign: "center",
  objectFit: "cover",
  color: "transparent",
  textIndent: 1e4
});
var AvatarFallback = styled_default(Person_default, {
  name: "MuiAvatar",
  slot: "Fallback",
  overridesResolver: (props, styles5) => styles5.fallback
})({
  width: "75%",
  height: "75%"
});
function useLoaded({
  crossOrigin,
  referrerPolicy,
  src,
  srcSet
}) {
  const [loaded, setLoaded] = React18.useState(false);
  React18.useEffect(() => {
    if (!src && !srcSet) {
      return void 0;
    }
    setLoaded(false);
    let active = true;
    const image = new Image();
    image.onload = () => {
      if (!active) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = () => {
      if (!active) {
        return;
      }
      setLoaded("error");
    };
    image.crossOrigin = crossOrigin;
    image.referrerPolicy = referrerPolicy;
    image.src = src;
    if (srcSet) {
      image.srcset = srcSet;
    }
    return () => {
      active = false;
    };
  }, [crossOrigin, referrerPolicy, src, srcSet]);
  return loaded;
}
var Avatar = React18.forwardRef(function Avatar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAvatar"
  });
  const {
    alt,
    children: childrenProp,
    className,
    component = "div",
    slots = {},
    slotProps = {},
    imgProps,
    sizes,
    src,
    srcSet,
    variant = "circular"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  let children = null;
  const loaded = useLoaded(_extends({}, imgProps, {
    src,
    srcSet
  }));
  const hasImg = src || srcSet;
  const hasImgNotFailing = hasImg && loaded !== "error";
  const ownerState = _extends({}, props, {
    colorDefault: !hasImgNotFailing,
    component,
    variant
  });
  const classes2 = useUtilityClasses11(ownerState);
  const [ImgSlot, imgSlotProps] = useSlot("img", {
    className: classes2.img,
    elementType: AvatarImg,
    externalForwardedProps: {
      slots,
      slotProps: {
        img: _extends({}, imgProps, slotProps.img)
      }
    },
    additionalProps: {
      alt,
      src,
      srcSet,
      sizes
    },
    ownerState
  });
  if (hasImgNotFailing) {
    children = (0, import_jsx_runtime21.jsx)(ImgSlot, _extends({}, imgSlotProps));
  } else if (!!childrenProp || childrenProp === 0) {
    children = childrenProp;
  } else if (hasImg && alt) {
    children = alt[0];
  } else {
    children = (0, import_jsx_runtime21.jsx)(AvatarFallback, {
      ownerState,
      className: classes2.fallback
    });
  }
  return (0, import_jsx_runtime21.jsx)(AvatarRoot, _extends({
    as: component,
    ownerState,
    className: clsx_default(classes2.root, className),
    ref
  }, other, {
    children
  }));
});
true ? Avatar.propTypes = {
  alt: import_prop_types12.default.string,
  children: import_prop_types12.default.node,
  classes: import_prop_types12.default.object,
  className: import_prop_types12.default.string,
  component: import_prop_types12.default.elementType,
  imgProps: import_prop_types12.default.object,
  sizes: import_prop_types12.default.string,
  slotProps: import_prop_types12.default.shape({
    img: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object])
  }),
  slots: import_prop_types12.default.shape({
    img: import_prop_types12.default.elementType
  }),
  src: import_prop_types12.default.string,
  srcSet: import_prop_types12.default.string,
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  variant: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["circular", "rounded", "square"]), import_prop_types12.default.string])
} : void 0;
var Avatar_default = Avatar;

// node_modules/@mui/material/Avatar/index.js
"use client";

// node_modules/@mui/material/AvatarGroup/AvatarGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React19 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
var import_react_is2 = __toESM(require_react_is());
init_clsx();
init_chainPropTypes();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/AvatarGroup/avatarGroupClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getAvatarGroupUtilityClass(slot) {
  return generateUtilityClass("MuiAvatarGroup", slot);
}
var avatarGroupClasses = generateUtilityClasses("MuiAvatarGroup", ["root", "avatar"]);
var avatarGroupClasses_default = avatarGroupClasses;

// node_modules/@mui/material/AvatarGroup/AvatarGroup.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
"use client";
var _excluded14 = ["children", "className", "component", "componentsProps", "max", "renderSurplus", "slotProps", "spacing", "total", "variant"];
var SPACINGS = {
  small: -16,
  medium: null
};
var useUtilityClasses12 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    avatar: ["avatar"]
  };
  return composeClasses(slots, getAvatarGroupUtilityClass, classes2);
};
var AvatarGroupRoot = styled_default("div", {
  name: "MuiAvatarGroup",
  slot: "Root",
  overridesResolver: (props, styles5) => _extends({
    [`& .${avatarGroupClasses_default.avatar}`]: styles5.avatar
  }, styles5.root)
})(({
  theme,
  ownerState
}) => {
  const marginValue = ownerState.spacing && SPACINGS[ownerState.spacing] !== void 0 ? SPACINGS[ownerState.spacing] : -ownerState.spacing;
  return {
    [`& .${avatarClasses_default.root}`]: {
      border: `2px solid ${(theme.vars || theme).palette.background.default}`,
      boxSizing: "content-box",
      marginLeft: marginValue != null ? marginValue : -8,
      "&:last-child": {
        marginLeft: 0
      }
    },
    display: "flex",
    flexDirection: "row-reverse"
  };
});
var AvatarGroup = React19.forwardRef(function AvatarGroup2(inProps, ref) {
  var _slotProps$additional;
  const props = useThemeProps2({
    props: inProps,
    name: "MuiAvatarGroup"
  });
  const {
    children: childrenProp,
    className,
    component = "div",
    componentsProps = {},
    max: max2 = 5,
    renderSurplus,
    slotProps = {},
    spacing = "medium",
    total,
    variant = "circular"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  let clampedMax = max2 < 2 ? 2 : max2;
  const ownerState = _extends({}, props, {
    max: max2,
    spacing,
    component,
    variant
  });
  const classes2 = useUtilityClasses12(ownerState);
  const children = React19.Children.toArray(childrenProp).filter((child) => {
    if (true) {
      if ((0, import_react_is2.isFragment)(child)) {
        console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React19.isValidElement(child);
  });
  const totalAvatars = total || children.length;
  if (totalAvatars === clampedMax) {
    clampedMax += 1;
  }
  clampedMax = Math.min(totalAvatars + 1, clampedMax);
  const maxAvatars = Math.min(children.length, clampedMax - 1);
  const extraAvatars = Math.max(totalAvatars - clampedMax, totalAvatars - maxAvatars, 0);
  const extraAvatarsElement = renderSurplus ? renderSurplus(extraAvatars) : `+${extraAvatars}`;
  const additionalAvatarSlotProps = (_slotProps$additional = slotProps.additionalAvatar) != null ? _slotProps$additional : componentsProps.additionalAvatar;
  return (0, import_jsx_runtime23.jsxs)(AvatarGroupRoot, _extends({
    as: component,
    ownerState,
    className: clsx_default(classes2.root, className),
    ref
  }, other, {
    children: [extraAvatars ? (0, import_jsx_runtime22.jsx)(Avatar_default, _extends({
      variant
    }, additionalAvatarSlotProps, {
      className: clsx_default(classes2.avatar, additionalAvatarSlotProps == null ? void 0 : additionalAvatarSlotProps.className),
      children: extraAvatarsElement
    })) : null, children.slice(0, maxAvatars).reverse().map((child) => {
      return React19.cloneElement(child, {
        className: clsx_default(child.props.className, classes2.avatar),
        variant: child.props.variant || variant
      });
    })]
  }));
});
true ? AvatarGroup.propTypes = {
  children: import_prop_types13.default.node,
  classes: import_prop_types13.default.object,
  className: import_prop_types13.default.string,
  component: import_prop_types13.default.elementType,
  componentsProps: import_prop_types13.default.shape({
    additionalAvatar: import_prop_types13.default.object
  }),
  max: chainPropTypes(import_prop_types13.default.number, (props) => {
    if (props.max < 2) {
      return new Error(["MUI: The prop `max` should be equal to 2 or above.", "A value below is clamped to 2."].join("\n"));
    }
    return null;
  }),
  renderSurplus: import_prop_types13.default.func,
  slotProps: import_prop_types13.default.shape({
    additionalAvatar: import_prop_types13.default.object
  }),
  spacing: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["medium", "small"]), import_prop_types13.default.number]),
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  total: import_prop_types13.default.number,
  variant: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["circular", "rounded", "square"]), import_prop_types13.default.string])
} : void 0;

// node_modules/@mui/material/AvatarGroup/index.js
"use client";

// node_modules/@mui/material/index.js
init_Backdrop();
init_Backdrop();

// node_modules/@mui/material/Badge/Badge.js
init_extends();
init_objectWithoutPropertiesLoose();
var React20 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());
init_clsx();
init_usePreviousProps();
init_composeClasses();
init_useBadge();
init_utils4();

// node_modules/@mui/material/zero-styled/index.js
init_useThemeProps2();
init_styled();
function createUseThemeProps(name) {
  return useThemeProps2;
}

// node_modules/@mui/material/Badge/Badge.js
init_capitalize();

// node_modules/@mui/material/Badge/badgeClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getBadgeUtilityClass(slot) {
  return generateUtilityClass("MuiBadge", slot);
}
var badgeClasses = generateUtilityClasses("MuiBadge", [
  "root",
  "badge",
  "dot",
  "standard",
  "anchorOriginTopRight",
  "anchorOriginBottomRight",
  "anchorOriginTopLeft",
  "anchorOriginBottomLeft",
  "invisible",
  "colorError",
  "colorInfo",
  "colorPrimary",
  "colorSecondary",
  "colorSuccess",
  "colorWarning",
  "overlapRectangular",
  "overlapCircular",
  "anchorOriginTopLeftCircular",
  "anchorOriginTopLeftRectangular",
  "anchorOriginTopRightCircular",
  "anchorOriginTopRightRectangular",
  "anchorOriginBottomLeftCircular",
  "anchorOriginBottomLeftRectangular",
  "anchorOriginBottomRightCircular",
  "anchorOriginBottomRightRectangular"
]);
var badgeClasses_default = badgeClasses;

// node_modules/@mui/material/Badge/Badge.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
"use client";
var _excluded15 = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
var RADIUS_STANDARD = 10;
var RADIUS_DOT = 4;
var useThemeProps3 = createUseThemeProps("MuiBadge");
var useUtilityClasses13 = (ownerState) => {
  const {
    color,
    anchorOrigin,
    invisible,
    overlap,
    variant,
    classes: classes2 = {}
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}${capitalize_default(overlap)}`, `overlap${capitalize_default(overlap)}`, color !== "default" && `color${capitalize_default(color)}`]
  };
  return composeClasses(slots, getBadgeUtilityClass, classes2);
};
var BadgeRoot = styled_default("span", {
  name: "MuiBadge",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  position: "relative",
  display: "inline-flex",
  verticalAlign: "middle",
  flexShrink: 0
});
var BadgeBadge = styled_default("span", {
  name: "MuiBadge",
  slot: "Badge",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.badge, styles5[ownerState.variant], styles5[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles5.invisible];
  }
})(({
  theme
}) => {
  var _theme$vars;
  return {
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(12),
    minWidth: RADIUS_STANDARD * 2,
    lineHeight: 1,
    padding: "0 6px",
    height: RADIUS_STANDARD * 2,
    borderRadius: RADIUS_STANDARD,
    zIndex: 1,
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    }),
    variants: [...Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter((key) => {
      var _theme$vars2, _theme$vars3;
      return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main && ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette[key].contrastText;
    }).map((color) => ({
      props: {
        color
      },
      style: {
        backgroundColor: (theme.vars || theme).palette[color].main,
        color: (theme.vars || theme).palette[color].contrastText
      }
    })), {
      props: {
        variant: "dot"
      },
      style: {
        borderRadius: RADIUS_DOT,
        height: RADIUS_DOT * 2,
        minWidth: RADIUS_DOT * 2,
        padding: 0
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular",
      style: {
        top: 0,
        right: 0,
        transform: "scale(1) translate(50%, -50%)",
        transformOrigin: "100% 0%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular",
      style: {
        bottom: 0,
        right: 0,
        transform: "scale(1) translate(50%, 50%)",
        transformOrigin: "100% 100%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(50%, 50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular",
      style: {
        top: 0,
        left: 0,
        transform: "scale(1) translate(-50%, -50%)",
        transformOrigin: "0% 0%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(-50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular",
      style: {
        bottom: 0,
        left: 0,
        transform: "scale(1) translate(-50%, 50%)",
        transformOrigin: "0% 100%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(-50%, 50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular",
      style: {
        top: "14%",
        right: "14%",
        transform: "scale(1) translate(50%, -50%)",
        transformOrigin: "100% 0%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular",
      style: {
        bottom: "14%",
        right: "14%",
        transform: "scale(1) translate(50%, 50%)",
        transformOrigin: "100% 100%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(50%, 50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular",
      style: {
        top: "14%",
        left: "14%",
        transform: "scale(1) translate(-50%, -50%)",
        transformOrigin: "0% 0%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(-50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular",
      style: {
        bottom: "14%",
        left: "14%",
        transform: "scale(1) translate(-50%, 50%)",
        transformOrigin: "0% 100%",
        [`&.${badgeClasses_default.invisible}`]: {
          transform: "scale(0) translate(-50%, 50%)"
        }
      }
    }, {
      props: {
        invisible: true
      },
      style: {
        transition: theme.transitions.create("transform", {
          easing: theme.transitions.easing.easeInOut,
          duration: theme.transitions.duration.leavingScreen
        })
      }
    }]
  };
});
var Badge = React20.forwardRef(function Badge2(inProps, ref) {
  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
  const props = useThemeProps3({
    props: inProps,
    name: "MuiBadge"
  });
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    className,
    component,
    components = {},
    componentsProps = {},
    children,
    overlap: overlapProp = "rectangular",
    color: colorProp = "default",
    invisible: invisibleProp = false,
    max: maxProp = 99,
    badgeContent: badgeContentProp,
    slots,
    slotProps,
    showZero = false,
    variant: variantProp = "standard"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const {
    badgeContent,
    invisible: invisibleFromHook,
    max: max2,
    displayValue: displayValueFromHook
  } = useBadge({
    max: maxProp,
    invisible: invisibleProp,
    badgeContent: badgeContentProp,
    showZero
  });
  const prevProps = usePreviousProps_default({
    anchorOrigin: anchorOriginProp,
    color: colorProp,
    overlap: overlapProp,
    variant: variantProp,
    badgeContent: badgeContentProp
  });
  const invisible = invisibleFromHook || badgeContent == null && variantProp !== "dot";
  const {
    color = colorProp,
    overlap = overlapProp,
    anchorOrigin = anchorOriginProp,
    variant = variantProp
  } = invisible ? prevProps : props;
  const displayValue = variant !== "dot" ? displayValueFromHook : void 0;
  const ownerState = _extends({}, props, {
    badgeContent,
    invisible,
    max: max2,
    displayValue,
    showZero,
    anchorOrigin,
    color,
    overlap,
    variant
  });
  const classes2 = useUtilityClasses13(ownerState);
  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
  const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
  const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
  const rootProps = useSlotProps({
    elementType: RootSlot,
    externalSlotProps: rootSlotProps,
    externalForwardedProps: other,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: clsx_default(rootSlotProps == null ? void 0 : rootSlotProps.className, classes2.root, className)
  });
  const badgeProps = useSlotProps({
    elementType: BadgeSlot,
    externalSlotProps: badgeSlotProps,
    ownerState,
    className: clsx_default(classes2.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
  });
  return (0, import_jsx_runtime25.jsxs)(RootSlot, _extends({}, rootProps, {
    children: [children, (0, import_jsx_runtime24.jsx)(BadgeSlot, _extends({}, badgeProps, {
      children: displayValue
    }))]
  }));
});
true ? Badge.propTypes = {
  anchorOrigin: import_prop_types14.default.shape({
    horizontal: import_prop_types14.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types14.default.oneOf(["bottom", "top"]).isRequired
  }),
  badgeContent: import_prop_types14.default.node,
  children: import_prop_types14.default.node,
  classes: import_prop_types14.default.object,
  className: import_prop_types14.default.string,
  color: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types14.default.string]),
  component: import_prop_types14.default.elementType,
  components: import_prop_types14.default.shape({
    Badge: import_prop_types14.default.elementType,
    Root: import_prop_types14.default.elementType
  }),
  componentsProps: import_prop_types14.default.shape({
    badge: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object]),
    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])
  }),
  invisible: import_prop_types14.default.bool,
  max: import_prop_types14.default.number,
  overlap: import_prop_types14.default.oneOf(["circular", "rectangular"]),
  showZero: import_prop_types14.default.bool,
  slotProps: import_prop_types14.default.shape({
    badge: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object]),
    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])
  }),
  slots: import_prop_types14.default.shape({
    badge: import_prop_types14.default.elementType,
    root: import_prop_types14.default.elementType
  }),
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
  variant: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["dot", "standard"]), import_prop_types14.default.string])
} : void 0;

// node_modules/@mui/material/Badge/index.js
"use client";

// node_modules/@mui/material/BottomNavigation/BottomNavigation.js
init_extends();
init_objectWithoutPropertiesLoose();
var React21 = __toESM(require_react());
var import_react_is3 = __toESM(require_react_is());
var import_prop_types15 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/BottomNavigation/bottomNavigationClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getBottomNavigationUtilityClass(slot) {
  return generateUtilityClass("MuiBottomNavigation", slot);
}
var bottomNavigationClasses = generateUtilityClasses("MuiBottomNavigation", ["root"]);

// node_modules/@mui/material/BottomNavigation/BottomNavigation.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
"use client";
var _excluded16 = ["children", "className", "component", "onChange", "showLabels", "value"];
var useUtilityClasses14 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getBottomNavigationUtilityClass, classes2);
};
var BottomNavigationRoot = styled_default("div", {
  name: "MuiBottomNavigation",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme
}) => ({
  display: "flex",
  justifyContent: "center",
  height: 56,
  backgroundColor: (theme.vars || theme).palette.background.paper
}));
var BottomNavigation = React21.forwardRef(function BottomNavigation2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiBottomNavigation"
  });
  const {
    children,
    className,
    component = "div",
    onChange,
    showLabels = false,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const ownerState = _extends({}, props, {
    component,
    showLabels
  });
  const classes2 = useUtilityClasses14(ownerState);
  return (0, import_jsx_runtime26.jsx)(BottomNavigationRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: React21.Children.map(children, (child, childIndex) => {
      if (!React21.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      const childValue = child.props.value === void 0 ? childIndex : child.props.value;
      return React21.cloneElement(child, {
        selected: childValue === value,
        showLabel: child.props.showLabel !== void 0 ? child.props.showLabel : showLabels,
        value: childValue,
        onChange
      });
    })
  }));
});
true ? BottomNavigation.propTypes = {
  children: import_prop_types15.default.node,
  classes: import_prop_types15.default.object,
  className: import_prop_types15.default.string,
  component: import_prop_types15.default.elementType,
  onChange: import_prop_types15.default.func,
  showLabels: import_prop_types15.default.bool,
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
  value: import_prop_types15.default.any
} : void 0;

// node_modules/@mui/material/BottomNavigation/index.js
"use client";

// node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.js
init_objectWithoutPropertiesLoose();
init_extends();
var React22 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_ButtonBase();
init_unsupportedProp();

// node_modules/@mui/material/BottomNavigationAction/bottomNavigationActionClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getBottomNavigationActionUtilityClass(slot) {
  return generateUtilityClass("MuiBottomNavigationAction", slot);
}
var bottomNavigationActionClasses = generateUtilityClasses("MuiBottomNavigationAction", ["root", "iconOnly", "selected", "label"]);
var bottomNavigationActionClasses_default = bottomNavigationActionClasses;

// node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
"use client";
var _excluded17 = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"];
var useUtilityClasses15 = (ownerState) => {
  const {
    classes: classes2,
    showLabel,
    selected
  } = ownerState;
  const slots = {
    root: ["root", !showLabel && !selected && "iconOnly", selected && "selected"],
    label: ["label", !showLabel && !selected && "iconOnly", selected && "selected"]
  };
  return composeClasses(slots, getBottomNavigationActionUtilityClass, classes2);
};
var BottomNavigationActionRoot = styled_default(ButtonBase_default, {
  name: "MuiBottomNavigationAction",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, !ownerState.showLabel && !ownerState.selected && styles5.iconOnly];
  }
})(({
  theme,
  ownerState
}) => _extends({
  transition: theme.transitions.create(["color", "padding-top"], {
    duration: theme.transitions.duration.short
  }),
  padding: "0px 12px",
  minWidth: 80,
  maxWidth: 168,
  color: (theme.vars || theme).palette.text.secondary,
  flexDirection: "column",
  flex: "1"
}, !ownerState.showLabel && !ownerState.selected && {
  paddingTop: 14
}, !ownerState.showLabel && !ownerState.selected && !ownerState.label && {
  paddingTop: 0
}, {
  [`&.${bottomNavigationActionClasses_default.selected}`]: {
    color: (theme.vars || theme).palette.primary.main
  }
}));
var BottomNavigationActionLabel = styled_default("span", {
  name: "MuiBottomNavigationAction",
  slot: "Label",
  overridesResolver: (props, styles5) => styles5.label
})(({
  theme,
  ownerState
}) => _extends({
  fontFamily: theme.typography.fontFamily,
  fontSize: theme.typography.pxToRem(12),
  opacity: 1,
  transition: "font-size 0.2s, opacity 0.2s",
  transitionDelay: "0.1s"
}, !ownerState.showLabel && !ownerState.selected && {
  opacity: 0,
  transitionDelay: "0s"
}, {
  [`&.${bottomNavigationActionClasses_default.selected}`]: {
    fontSize: theme.typography.pxToRem(14)
  }
}));
var BottomNavigationAction = React22.forwardRef(function BottomNavigationAction2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiBottomNavigationAction"
  });
  const {
    className,
    icon,
    label,
    onChange,
    onClick: onClick2,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const ownerState = props;
  const classes2 = useUtilityClasses15(ownerState);
  const handleChange = (event) => {
    if (onChange) {
      onChange(event, value);
    }
    if (onClick2) {
      onClick2(event);
    }
  };
  return (0, import_jsx_runtime28.jsxs)(BottomNavigationActionRoot, _extends({
    ref,
    className: clsx_default(classes2.root, className),
    focusRipple: true,
    onClick: handleChange,
    ownerState
  }, other, {
    children: [icon, (0, import_jsx_runtime27.jsx)(BottomNavigationActionLabel, {
      className: classes2.label,
      ownerState,
      children: label
    })]
  }));
});
true ? BottomNavigationAction.propTypes = {
  children: unsupportedProp_default,
  classes: import_prop_types16.default.object,
  className: import_prop_types16.default.string,
  icon: import_prop_types16.default.node,
  label: import_prop_types16.default.node,
  onChange: import_prop_types16.default.func,
  onClick: import_prop_types16.default.func,
  showLabel: import_prop_types16.default.bool,
  sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
  value: import_prop_types16.default.any
} : void 0;

// node_modules/@mui/material/BottomNavigationAction/index.js
"use client";

// node_modules/@mui/material/Box/Box.js
init_esm();
var import_prop_types17 = __toESM(require_prop_types());

// node_modules/@mui/material/className/index.js
init_utils();

// node_modules/@mui/material/Box/Box.js
init_styles();
init_identifier();

// node_modules/@mui/material/Box/boxClasses.js
init_generateUtilityClasses();
var boxClasses = generateUtilityClasses("MuiBox", ["root"]);
var boxClasses_default = boxClasses;

// node_modules/@mui/material/Box/Box.js
"use client";
var defaultTheme = createTheme_default();
var Box = createBox({
  themeId: identifier_default,
  defaultTheme,
  defaultClassName: boxClasses_default.root,
  generateClassName: ClassNameGenerator_default.generate
});
true ? Box.propTypes = {
  children: import_prop_types17.default.node,
  component: import_prop_types17.default.elementType,
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
} : void 0;

// node_modules/@mui/material/Box/index.js
"use client";

// node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js
init_extends();
init_objectWithoutPropertiesLoose();
var React25 = __toESM(require_react());
var import_react_is4 = __toESM(require_react_is());
var import_prop_types19 = __toESM(require_prop_types());
init_clsx();
init_integerPropType();
init_utils4();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_Typography();

// node_modules/@mui/material/Breadcrumbs/BreadcrumbCollapsed.js
init_objectWithoutPropertiesLoose();
init_extends();
var React24 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
var import_colorManipulator2 = __toESM(require_colorManipulator());
init_styled();

// node_modules/@mui/material/internal/svg-icons/MoreHoriz.js
var React23 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
"use client";
var MoreHoriz_default = createSvgIcon((0, import_jsx_runtime29.jsx)("path", {
  d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "MoreHoriz");

// node_modules/@mui/material/Breadcrumbs/BreadcrumbCollapsed.js
init_ButtonBase();
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
"use client";
var _excluded18 = ["slots", "slotProps"];
var BreadcrumbCollapsedButton = styled_default(ButtonBase_default)(({
  theme
}) => _extends({
  display: "flex",
  marginLeft: `calc(${theme.spacing(1)} * 0.5)`,
  marginRight: `calc(${theme.spacing(1)} * 0.5)`
}, theme.palette.mode === "light" ? {
  backgroundColor: theme.palette.grey[100],
  color: theme.palette.grey[700]
} : {
  backgroundColor: theme.palette.grey[700],
  color: theme.palette.grey[100]
}, {
  borderRadius: 2,
  "&:hover, &:focus": _extends({}, theme.palette.mode === "light" ? {
    backgroundColor: theme.palette.grey[200]
  } : {
    backgroundColor: theme.palette.grey[600]
  }),
  "&:active": _extends({
    boxShadow: theme.shadows[0]
  }, theme.palette.mode === "light" ? {
    backgroundColor: (0, import_colorManipulator2.emphasize)(theme.palette.grey[200], 0.12)
  } : {
    backgroundColor: (0, import_colorManipulator2.emphasize)(theme.palette.grey[600], 0.12)
  })
}));
var BreadcrumbCollapsedIcon = styled_default(MoreHoriz_default)({
  width: 24,
  height: 16
});
function BreadcrumbCollapsed(props) {
  const {
    slots = {},
    slotProps = {}
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded18);
  const ownerState = props;
  return (0, import_jsx_runtime30.jsx)("li", {
    children: (0, import_jsx_runtime30.jsx)(BreadcrumbCollapsedButton, _extends({
      focusRipple: true
    }, otherProps, {
      ownerState,
      children: (0, import_jsx_runtime30.jsx)(BreadcrumbCollapsedIcon, _extends({
        as: slots.CollapsedIcon,
        ownerState
      }, slotProps.collapsedIcon))
    }))
  });
}
true ? BreadcrumbCollapsed.propTypes = {
  slotProps: import_prop_types18.default.shape({
    collapsedIcon: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
  }),
  slots: import_prop_types18.default.shape({
    CollapsedIcon: import_prop_types18.default.elementType
  }),
  sx: import_prop_types18.default.object
} : void 0;
var BreadcrumbCollapsed_default = BreadcrumbCollapsed;

// node_modules/@mui/material/Breadcrumbs/breadcrumbsClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getBreadcrumbsUtilityClass(slot) {
  return generateUtilityClass("MuiBreadcrumbs", slot);
}
var breadcrumbsClasses = generateUtilityClasses("MuiBreadcrumbs", ["root", "ol", "li", "separator"]);
var breadcrumbsClasses_default = breadcrumbsClasses;

// node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
"use client";
var _excluded19 = ["children", "className", "component", "slots", "slotProps", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"];
var useUtilityClasses16 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  };
  return composeClasses(slots, getBreadcrumbsUtilityClass, classes2);
};
var BreadcrumbsRoot = styled_default(Typography_default, {
  name: "MuiBreadcrumbs",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    return [{
      [`& .${breadcrumbsClasses_default.li}`]: styles5.li
    }, styles5.root];
  }
})({});
var BreadcrumbsOl = styled_default("ol", {
  name: "MuiBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles5) => styles5.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
});
var BreadcrumbsSeparator = styled_default("li", {
  name: "MuiBreadcrumbs",
  slot: "Separator",
  overridesResolver: (props, styles5) => styles5.separator
})({
  display: "flex",
  userSelect: "none",
  marginLeft: 8,
  marginRight: 8
});
function insertSeparators(items, className, separator, ownerState) {
  return items.reduce((acc, current, index) => {
    if (index < items.length - 1) {
      acc = acc.concat(current, (0, import_jsx_runtime31.jsx)(BreadcrumbsSeparator, {
        "aria-hidden": true,
        className,
        ownerState,
        children: separator
      }, `separator-${index}`));
    } else {
      acc.push(current);
    }
    return acc;
  }, []);
}
var Breadcrumbs = React25.forwardRef(function Breadcrumbs2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiBreadcrumbs"
  });
  const {
    children,
    className,
    component = "nav",
    slots = {},
    slotProps = {},
    expandText = "Show path",
    itemsAfterCollapse = 1,
    itemsBeforeCollapse = 1,
    maxItems = 8,
    separator = "/"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const [expanded, setExpanded] = React25.useState(false);
  const ownerState = _extends({}, props, {
    component,
    expanded,
    expandText,
    itemsAfterCollapse,
    itemsBeforeCollapse,
    maxItems,
    separator
  });
  const classes2 = useUtilityClasses16(ownerState);
  const collapsedIconSlotProps = useSlotProps({
    elementType: slots.CollapsedIcon,
    externalSlotProps: slotProps.collapsedIcon,
    ownerState
  });
  const listRef = React25.useRef(null);
  const renderItemsBeforeAndAfter = (allItems2) => {
    const handleClickExpand = () => {
      setExpanded(true);
      const focusable = listRef.current.querySelector("a[href],button,[tabindex]");
      if (focusable) {
        focusable.focus();
      }
    };
    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems2.length) {
      if (true) {
        console.error(["MUI: You have provided an invalid combination of props to the Breadcrumbs.", `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join("\n"));
      }
      return allItems2;
    }
    return [...allItems2.slice(0, itemsBeforeCollapse), (0, import_jsx_runtime31.jsx)(BreadcrumbCollapsed_default, {
      "aria-label": expandText,
      slots: {
        CollapsedIcon: slots.CollapsedIcon
      },
      slotProps: {
        collapsedIcon: collapsedIconSlotProps
      },
      onClick: handleClickExpand
    }, "ellipsis"), ...allItems2.slice(allItems2.length - itemsAfterCollapse, allItems2.length)];
  };
  const allItems = React25.Children.toArray(children).filter((child) => {
    if (true) {
      if ((0, import_react_is4.isFragment)(child)) {
        console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React25.isValidElement(child);
  }).map((child, index) => (0, import_jsx_runtime31.jsx)("li", {
    className: classes2.li,
    children: child
  }, `child-${index}`));
  return (0, import_jsx_runtime31.jsx)(BreadcrumbsRoot, _extends({
    ref,
    component,
    color: "text.secondary",
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    children: (0, import_jsx_runtime31.jsx)(BreadcrumbsOl, {
      className: classes2.ol,
      ref: listRef,
      ownerState,
      children: insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes2.separator, separator, ownerState)
    })
  }));
});
true ? Breadcrumbs.propTypes = {
  children: import_prop_types19.default.node,
  classes: import_prop_types19.default.object,
  className: import_prop_types19.default.string,
  component: import_prop_types19.default.elementType,
  expandText: import_prop_types19.default.string,
  itemsAfterCollapse: integerPropType_default,
  itemsBeforeCollapse: integerPropType_default,
  maxItems: integerPropType_default,
  separator: import_prop_types19.default.node,
  slotProps: import_prop_types19.default.shape({
    collapsedIcon: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
  }),
  slots: import_prop_types19.default.shape({
    CollapsedIcon: import_prop_types19.default.elementType
  }),
  sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object])
} : void 0;

// node_modules/@mui/material/Breadcrumbs/index.js
"use client";

// node_modules/@mui/material/index.js
init_Button();
init_Button();
init_ButtonBase();
init_ButtonBase();

// node_modules/@mui/material/ButtonGroup/ButtonGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React26 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
var import_colorManipulator3 = __toESM(require_colorManipulator());
init_getValidReactChildren();
init_capitalize();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getButtonGroupUtilityClass(slot) {
  return generateUtilityClass("MuiButtonGroup", slot);
}
var buttonGroupClasses = generateUtilityClasses("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "firstButton", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary", "lastButton", "middleButton"]);
var buttonGroupClasses_default = buttonGroupClasses;

// node_modules/@mui/material/ButtonGroup/ButtonGroup.js
init_ButtonGroupContext();
init_ButtonGroupButtonContext();
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
"use client";
var _excluded20 = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];
var overridesResolver = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [{
    [`& .${buttonGroupClasses_default.grouped}`]: styles5.grouped
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: styles5[`grouped${capitalize_default(ownerState.orientation)}`]
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: styles5[`grouped${capitalize_default(ownerState.variant)}`]
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: styles5[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.orientation)}`]
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: styles5[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.color)}`]
  }, {
    [`& .${buttonGroupClasses_default.firstButton}`]: styles5.firstButton
  }, {
    [`& .${buttonGroupClasses_default.lastButton}`]: styles5.lastButton
  }, {
    [`& .${buttonGroupClasses_default.middleButton}`]: styles5.middleButton
  }, styles5.root, styles5[ownerState.variant], ownerState.disableElevation === true && styles5.disableElevation, ownerState.fullWidth && styles5.fullWidth, ownerState.orientation === "vertical" && styles5.vertical];
};
var useUtilityClasses17 = (ownerState) => {
  const {
    classes: classes2,
    color,
    disabled,
    disableElevation,
    fullWidth,
    orientation,
    variant
  } = ownerState;
  const slots = {
    root: ["root", variant, orientation === "vertical" && "vertical", fullWidth && "fullWidth", disableElevation && "disableElevation"],
    grouped: ["grouped", `grouped${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}`, `grouped${capitalize_default(variant)}${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}${capitalize_default(color)}`, disabled && "disabled"],
    firstButton: ["firstButton"],
    lastButton: ["lastButton"],
    middleButton: ["middleButton"]
  };
  return composeClasses(slots, getButtonGroupUtilityClass, classes2);
};
var ButtonGroupRoot = styled_default("div", {
  name: "MuiButtonGroup",
  slot: "Root",
  overridesResolver
})(({
  theme,
  ownerState
}) => _extends({
  display: "inline-flex",
  borderRadius: (theme.vars || theme).shape.borderRadius
}, ownerState.variant === "contained" && {
  boxShadow: (theme.vars || theme).shadows[2]
}, ownerState.disableElevation && {
  boxShadow: "none"
}, ownerState.fullWidth && {
  width: "100%"
}, ownerState.orientation === "vertical" && {
  flexDirection: "column"
}, {
  [`& .${buttonGroupClasses_default.grouped}`]: _extends({
    minWidth: 40,
    "&:hover": _extends({}, ownerState.variant === "contained" && {
      boxShadow: "none"
    })
  }, ownerState.variant === "contained" && {
    boxShadow: "none"
  }),
  [`& .${buttonGroupClasses_default.firstButton},& .${buttonGroupClasses_default.middleButton}`]: _extends({}, ownerState.orientation === "horizontal" && {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  }, ownerState.orientation === "vertical" && {
    borderBottomRightRadius: 0,
    borderBottomLeftRadius: 0
  }, ownerState.variant === "text" && ownerState.orientation === "horizontal" && {
    borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
    [`&.${buttonGroupClasses_default.disabled}`]: {
      borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
    }
  }, ownerState.variant === "text" && ownerState.orientation === "vertical" && {
    borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
    [`&.${buttonGroupClasses_default.disabled}`]: {
      borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
    }
  }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
    borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_colorManipulator3.alpha)(theme.palette[ownerState.color].main, 0.5)
  }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
    borderRightColor: "transparent"
  }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
    borderBottomColor: "transparent"
  }, ownerState.variant === "contained" && ownerState.orientation === "horizontal" && {
    borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
    [`&.${buttonGroupClasses_default.disabled}`]: {
      borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
    }
  }, ownerState.variant === "contained" && ownerState.orientation === "vertical" && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
    [`&.${buttonGroupClasses_default.disabled}`]: {
      borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
    }
  }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
    borderColor: (theme.vars || theme).palette[ownerState.color].dark
  }, {
    "&:hover": _extends({}, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
      borderRightColor: "currentColor"
    }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
      borderBottomColor: "currentColor"
    })
  }),
  [`& .${buttonGroupClasses_default.lastButton},& .${buttonGroupClasses_default.middleButton}`]: _extends({}, ownerState.orientation === "horizontal" && {
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }, ownerState.orientation === "vertical" && {
    borderTopRightRadius: 0,
    borderTopLeftRadius: 0
  }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
    marginLeft: -1
  }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
    marginTop: -1
  })
}));
var ButtonGroup = React26.forwardRef(function ButtonGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiButtonGroup"
  });
  const {
    children,
    className,
    color = "primary",
    component = "div",
    disabled = false,
    disableElevation = false,
    disableFocusRipple = false,
    disableRipple = false,
    fullWidth = false,
    orientation = "horizontal",
    size = "medium",
    variant = "outlined"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const ownerState = _extends({}, props, {
    color,
    component,
    disabled,
    disableElevation,
    disableFocusRipple,
    disableRipple,
    fullWidth,
    orientation,
    size,
    variant
  });
  const classes2 = useUtilityClasses17(ownerState);
  const context = React26.useMemo(() => ({
    className: classes2.grouped,
    color,
    disabled,
    disableElevation,
    disableFocusRipple,
    disableRipple,
    fullWidth,
    size,
    variant
  }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes2.grouped]);
  const validChildren = getValidReactChildren(children);
  const childrenCount = validChildren.length;
  const getButtonPositionClassName = (index) => {
    const isFirstButton = index === 0;
    const isLastButton = index === childrenCount - 1;
    if (isFirstButton && isLastButton) {
      return "";
    }
    if (isFirstButton) {
      return classes2.firstButton;
    }
    if (isLastButton) {
      return classes2.lastButton;
    }
    return classes2.middleButton;
  };
  return (0, import_jsx_runtime32.jsx)(ButtonGroupRoot, _extends({
    as: component,
    role: "group",
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime32.jsx)(ButtonGroupContext_default.Provider, {
      value: context,
      children: validChildren.map((child, index) => {
        return (0, import_jsx_runtime32.jsx)(ButtonGroupButtonContext_default.Provider, {
          value: getButtonPositionClassName(index),
          children: child
        }, index);
      })
    })
  }));
});
true ? ButtonGroup.propTypes = {
  children: import_prop_types20.default.node,
  classes: import_prop_types20.default.object,
  className: import_prop_types20.default.string,
  color: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types20.default.string]),
  component: import_prop_types20.default.elementType,
  disabled: import_prop_types20.default.bool,
  disableElevation: import_prop_types20.default.bool,
  disableFocusRipple: import_prop_types20.default.bool,
  disableRipple: import_prop_types20.default.bool,
  fullWidth: import_prop_types20.default.bool,
  orientation: import_prop_types20.default.oneOf(["horizontal", "vertical"]),
  size: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["small", "medium", "large"]), import_prop_types20.default.string]),
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
  variant: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["contained", "outlined", "text"]), import_prop_types20.default.string])
} : void 0;
var ButtonGroup_default = ButtonGroup;

// node_modules/@mui/material/ButtonGroup/index.js
init_ButtonGroupContext();
init_ButtonGroupButtonContext();
"use client";

// node_modules/@mui/material/Card/Card.js
init_extends();
init_objectWithoutPropertiesLoose();
var React27 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());
init_clsx();
init_chainPropTypes();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_Paper();

// node_modules/@mui/material/Card/cardClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCardUtilityClass(slot) {
  return generateUtilityClass("MuiCard", slot);
}
var cardClasses = generateUtilityClasses("MuiCard", ["root"]);

// node_modules/@mui/material/Card/Card.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
"use client";
var _excluded21 = ["className", "raised"];
var useUtilityClasses18 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardUtilityClass, classes2);
};
var CardRoot = styled_default(Paper_default, {
  name: "MuiCard",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(() => {
  return {
    overflow: "hidden"
  };
});
var Card = React27.forwardRef(function Card2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCard"
  });
  const {
    className,
    raised = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const ownerState = _extends({}, props, {
    raised
  });
  const classes2 = useUtilityClasses18(ownerState);
  return (0, import_jsx_runtime33.jsx)(CardRoot, _extends({
    className: clsx_default(classes2.root, className),
    elevation: raised ? 8 : void 0,
    ref,
    ownerState
  }, other));
});
true ? Card.propTypes = {
  children: import_prop_types21.default.node,
  classes: import_prop_types21.default.object,
  className: import_prop_types21.default.string,
  raised: chainPropTypes(import_prop_types21.default.bool, (props) => {
    if (props.raised && props.variant === "outlined") {
      return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
    }
    return null;
  }),
  sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
} : void 0;

// node_modules/@mui/material/Card/index.js
"use client";

// node_modules/@mui/material/CardActionArea/CardActionArea.js
init_extends();
init_objectWithoutPropertiesLoose();
var React28 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCardActionAreaUtilityClass(slot) {
  return generateUtilityClass("MuiCardActionArea", slot);
}
var cardActionAreaClasses = generateUtilityClasses("MuiCardActionArea", ["root", "focusVisible", "focusHighlight"]);
var cardActionAreaClasses_default = cardActionAreaClasses;

// node_modules/@mui/material/CardActionArea/CardActionArea.js
init_ButtonBase();
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
"use client";
var _excluded24 = ["children", "className", "focusVisibleClassName"];
var useUtilityClasses19 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    focusHighlight: ["focusHighlight"]
  };
  return composeClasses(slots, getCardActionAreaUtilityClass, classes2);
};
var CardActionAreaRoot = styled_default(ButtonBase_default, {
  name: "MuiCardActionArea",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme
}) => ({
  display: "block",
  textAlign: "inherit",
  borderRadius: "inherit",
  width: "100%",
  [`&:hover .${cardActionAreaClasses_default.focusHighlight}`]: {
    opacity: (theme.vars || theme).palette.action.hoverOpacity,
    "@media (hover: none)": {
      opacity: 0
    }
  },
  [`&.${cardActionAreaClasses_default.focusVisible} .${cardActionAreaClasses_default.focusHighlight}`]: {
    opacity: (theme.vars || theme).palette.action.focusOpacity
  }
}));
var CardActionAreaFocusHighlight = styled_default("span", {
  name: "MuiCardActionArea",
  slot: "FocusHighlight",
  overridesResolver: (props, styles5) => styles5.focusHighlight
})(({
  theme
}) => ({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit",
  opacity: 0,
  backgroundColor: "currentcolor",
  transition: theme.transitions.create("opacity", {
    duration: theme.transitions.duration.short
  })
}));
var CardActionArea = React28.forwardRef(function CardActionArea2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCardActionArea"
  });
  const {
    children,
    className,
    focusVisibleClassName
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
  const ownerState = props;
  const classes2 = useUtilityClasses19(ownerState);
  return (0, import_jsx_runtime35.jsxs)(CardActionAreaRoot, _extends({
    className: clsx_default(classes2.root, className),
    focusVisibleClassName: clsx_default(focusVisibleClassName, classes2.focusVisible),
    ref,
    ownerState
  }, other, {
    children: [children, (0, import_jsx_runtime34.jsx)(CardActionAreaFocusHighlight, {
      className: classes2.focusHighlight,
      ownerState
    })]
  }));
});
true ? CardActionArea.propTypes = {
  children: import_prop_types22.default.node,
  classes: import_prop_types22.default.object,
  className: import_prop_types22.default.string,
  focusVisibleClassName: import_prop_types22.default.string,
  sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object])
} : void 0;

// node_modules/@mui/material/CardActionArea/index.js
"use client";

// node_modules/@mui/material/CardActions/CardActions.js
init_objectWithoutPropertiesLoose();
init_extends();
var React29 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/CardActions/cardActionsClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCardActionsUtilityClass(slot) {
  return generateUtilityClass("MuiCardActions", slot);
}
var cardActionsClasses = generateUtilityClasses("MuiCardActions", ["root", "spacing"]);

// node_modules/@mui/material/CardActions/CardActions.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
"use client";
var _excluded25 = ["disableSpacing", "className"];
var useUtilityClasses20 = (ownerState) => {
  const {
    classes: classes2,
    disableSpacing
  } = ownerState;
  const slots = {
    root: ["root", !disableSpacing && "spacing"]
  };
  return composeClasses(slots, getCardActionsUtilityClass, classes2);
};
var CardActionsRoot = styled_default("div", {
  name: "MuiCardActions",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, !ownerState.disableSpacing && styles5.spacing];
  }
})(({
  ownerState
}) => _extends({
  display: "flex",
  alignItems: "center",
  padding: 8
}, !ownerState.disableSpacing && {
  "& > :not(style) ~ :not(style)": {
    marginLeft: 8
  }
}));
var CardActions = React29.forwardRef(function CardActions2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCardActions"
  });
  const {
    disableSpacing = false,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const ownerState = _extends({}, props, {
    disableSpacing
  });
  const classes2 = useUtilityClasses20(ownerState);
  return (0, import_jsx_runtime36.jsx)(CardActionsRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other));
});
true ? CardActions.propTypes = {
  children: import_prop_types23.default.node,
  classes: import_prop_types23.default.object,
  className: import_prop_types23.default.string,
  disableSpacing: import_prop_types23.default.bool,
  sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object])
} : void 0;

// node_modules/@mui/material/CardActions/index.js
"use client";

// node_modules/@mui/material/CardContent/CardContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React30 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/CardContent/cardContentClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCardContentUtilityClass(slot) {
  return generateUtilityClass("MuiCardContent", slot);
}
var cardContentClasses = generateUtilityClasses("MuiCardContent", ["root"]);

// node_modules/@mui/material/CardContent/CardContent.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
"use client";
var _excluded26 = ["className", "component"];
var useUtilityClasses21 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardContentUtilityClass, classes2);
};
var CardContentRoot = styled_default("div", {
  name: "MuiCardContent",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(() => {
  return {
    padding: 16,
    "&:last-child": {
      paddingBottom: 24
    }
  };
});
var CardContent = React30.forwardRef(function CardContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCardContent"
  });
  const {
    className,
    component = "div"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const ownerState = _extends({}, props, {
    component
  });
  const classes2 = useUtilityClasses21(ownerState);
  return (0, import_jsx_runtime37.jsx)(CardContentRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other));
});
true ? CardContent.propTypes = {
  children: import_prop_types24.default.node,
  classes: import_prop_types24.default.object,
  className: import_prop_types24.default.string,
  component: import_prop_types24.default.elementType,
  sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object])
} : void 0;

// node_modules/@mui/material/CardContent/index.js
"use client";

// node_modules/@mui/material/CardHeader/CardHeader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React31 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_Typography();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/CardHeader/cardHeaderClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCardHeaderUtilityClass(slot) {
  return generateUtilityClass("MuiCardHeader", slot);
}
var cardHeaderClasses = generateUtilityClasses("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]);
var cardHeaderClasses_default = cardHeaderClasses;

// node_modules/@mui/material/CardHeader/CardHeader.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
"use client";
var _excluded27 = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];
var useUtilityClasses22 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    avatar: ["avatar"],
    action: ["action"],
    content: ["content"],
    title: ["title"],
    subheader: ["subheader"]
  };
  return composeClasses(slots, getCardHeaderUtilityClass, classes2);
};
var CardHeaderRoot = styled_default("div", {
  name: "MuiCardHeader",
  slot: "Root",
  overridesResolver: (props, styles5) => _extends({
    [`& .${cardHeaderClasses_default.title}`]: styles5.title,
    [`& .${cardHeaderClasses_default.subheader}`]: styles5.subheader
  }, styles5.root)
})({
  display: "flex",
  alignItems: "center",
  padding: 16
});
var CardHeaderAvatar = styled_default("div", {
  name: "MuiCardHeader",
  slot: "Avatar",
  overridesResolver: (props, styles5) => styles5.avatar
})({
  display: "flex",
  flex: "0 0 auto",
  marginRight: 16
});
var CardHeaderAction = styled_default("div", {
  name: "MuiCardHeader",
  slot: "Action",
  overridesResolver: (props, styles5) => styles5.action
})({
  flex: "0 0 auto",
  alignSelf: "flex-start",
  marginTop: -4,
  marginRight: -8,
  marginBottom: -4
});
var CardHeaderContent = styled_default("div", {
  name: "MuiCardHeader",
  slot: "Content",
  overridesResolver: (props, styles5) => styles5.content
})({
  flex: "1 1 auto"
});
var CardHeader = React31.forwardRef(function CardHeader2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCardHeader"
  });
  const {
    action,
    avatar,
    className,
    component = "div",
    disableTypography = false,
    subheader: subheaderProp,
    subheaderTypographyProps,
    title: titleProp,
    titleTypographyProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const ownerState = _extends({}, props, {
    component,
    disableTypography
  });
  const classes2 = useUtilityClasses22(ownerState);
  let title = titleProp;
  if (title != null && title.type !== Typography_default && !disableTypography) {
    title = (0, import_jsx_runtime38.jsx)(Typography_default, _extends({
      variant: avatar ? "body2" : "h5",
      className: classes2.title,
      component: "span",
      display: "block"
    }, titleTypographyProps, {
      children: title
    }));
  }
  let subheader = subheaderProp;
  if (subheader != null && subheader.type !== Typography_default && !disableTypography) {
    subheader = (0, import_jsx_runtime38.jsx)(Typography_default, _extends({
      variant: avatar ? "body2" : "body1",
      className: classes2.subheader,
      color: "text.secondary",
      component: "span",
      display: "block"
    }, subheaderTypographyProps, {
      children: subheader
    }));
  }
  return (0, import_jsx_runtime39.jsxs)(CardHeaderRoot, _extends({
    className: clsx_default(classes2.root, className),
    as: component,
    ref,
    ownerState
  }, other, {
    children: [avatar && (0, import_jsx_runtime38.jsx)(CardHeaderAvatar, {
      className: classes2.avatar,
      ownerState,
      children: avatar
    }), (0, import_jsx_runtime39.jsxs)(CardHeaderContent, {
      className: classes2.content,
      ownerState,
      children: [title, subheader]
    }), action && (0, import_jsx_runtime38.jsx)(CardHeaderAction, {
      className: classes2.action,
      ownerState,
      children: action
    })]
  }));
});
true ? CardHeader.propTypes = {
  action: import_prop_types25.default.node,
  avatar: import_prop_types25.default.node,
  children: import_prop_types25.default.node,
  classes: import_prop_types25.default.object,
  className: import_prop_types25.default.string,
  component: import_prop_types25.default.elementType,
  disableTypography: import_prop_types25.default.bool,
  subheader: import_prop_types25.default.node,
  subheaderTypographyProps: import_prop_types25.default.object,
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object]),
  title: import_prop_types25.default.node,
  titleTypographyProps: import_prop_types25.default.object
} : void 0;

// node_modules/@mui/material/CardHeader/index.js
"use client";

// node_modules/@mui/material/CardMedia/CardMedia.js
init_objectWithoutPropertiesLoose();
init_extends();
var React32 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());
init_clsx();
init_chainPropTypes();
init_composeClasses();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/CardMedia/cardMediaClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCardMediaUtilityClass(slot) {
  return generateUtilityClass("MuiCardMedia", slot);
}
var cardMediaClasses = generateUtilityClasses("MuiCardMedia", ["root", "media", "img"]);

// node_modules/@mui/material/CardMedia/CardMedia.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
"use client";
var _excluded28 = ["children", "className", "component", "image", "src", "style"];
var useUtilityClasses23 = (ownerState) => {
  const {
    classes: classes2,
    isMediaComponent,
    isImageComponent
  } = ownerState;
  const slots = {
    root: ["root", isMediaComponent && "media", isImageComponent && "img"]
  };
  return composeClasses(slots, getCardMediaUtilityClass, classes2);
};
var CardMediaRoot = styled_default("div", {
  name: "MuiCardMedia",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    const {
      isMediaComponent,
      isImageComponent
    } = ownerState;
    return [styles5.root, isMediaComponent && styles5.media, isImageComponent && styles5.img];
  }
})(({
  ownerState
}) => _extends({
  display: "block",
  backgroundSize: "cover",
  backgroundRepeat: "no-repeat",
  backgroundPosition: "center"
}, ownerState.isMediaComponent && {
  width: "100%"
}, ownerState.isImageComponent && {
  objectFit: "cover"
}));
var MEDIA_COMPONENTS = ["video", "audio", "picture", "iframe", "img"];
var IMAGE_COMPONENTS = ["picture", "img"];
var CardMedia = React32.forwardRef(function CardMedia2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCardMedia"
  });
  const {
    children,
    className,
    component = "div",
    image,
    src,
    style
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;
  const composedStyle = !isMediaComponent && image ? _extends({
    backgroundImage: `url("${image}")`
  }, style) : style;
  const ownerState = _extends({}, props, {
    component,
    isMediaComponent,
    isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1
  });
  const classes2 = useUtilityClasses23(ownerState);
  return (0, import_jsx_runtime40.jsx)(CardMediaRoot, _extends({
    className: clsx_default(classes2.root, className),
    as: component,
    role: !isMediaComponent && image ? "img" : void 0,
    ref,
    style: composedStyle,
    ownerState,
    src: isMediaComponent ? image || src : void 0
  }, other, {
    children
  }));
});
true ? CardMedia.propTypes = {
  children: chainPropTypes(import_prop_types26.default.node, (props) => {
    if (!props.children && !props.image && !props.src && !props.component) {
      return new Error("MUI: Either `children`, `image`, `src` or `component` prop must be specified.");
    }
    return null;
  }),
  classes: import_prop_types26.default.object,
  className: import_prop_types26.default.string,
  component: import_prop_types26.default.elementType,
  image: import_prop_types26.default.string,
  src: import_prop_types26.default.string,
  style: import_prop_types26.default.object,
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
} : void 0;

// node_modules/@mui/material/CardMedia/index.js
"use client";

// node_modules/@mui/material/index.js
init_Checkbox();
init_Checkbox();
init_Chip();
init_Chip();

// node_modules/@mui/material/CircularProgress/CircularProgress.js
init_objectWithoutPropertiesLoose();
init_extends();
var React33 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());
init_clsx();
init_chainPropTypes();
init_composeClasses();
init_esm();
init_capitalize();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/CircularProgress/circularProgressClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass("MuiCircularProgress", slot);
}
var circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

// node_modules/@mui/material/CircularProgress/CircularProgress.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
"use client";
var _excluded29 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
var _ = (t) => t;
var _t;
var _t2;
var _t3;
var _t4;
var SIZE = 44;
var circularRotateKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
var circularDashKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
var useUtilityClasses24 = (ownerState) => {
  const {
    classes: classes2,
    variant,
    color,
    disableShrink
  } = ownerState;
  const slots = {
    root: ["root", variant, `color${capitalize_default(color)}`],
    svg: ["svg"],
    circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
  };
  return composeClasses(slots, getCircularProgressUtilityClass, classes2);
};
var CircularProgressRoot = styled_default("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant], styles5[`color${capitalize_default(ownerState.color)}`]];
  }
})(({
  ownerState,
  theme
}) => _extends({
  display: "inline-block"
}, ownerState.variant === "determinate" && {
  transition: theme.transitions.create("transform")
}, ownerState.color !== "inherit" && {
  color: (theme.vars || theme).palette[ownerState.color].main
}), ({
  ownerState
}) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
var CircularProgressSVG = styled_default("svg", {
  name: "MuiCircularProgress",
  slot: "Svg",
  overridesResolver: (props, styles5) => styles5.svg
})({
  display: "block"
});
var CircularProgressCircle = styled_default("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.circle, styles5[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles5.circleDisableShrink];
  }
})(({
  ownerState,
  theme
}) => _extends({
  stroke: "currentColor"
}, ownerState.variant === "determinate" && {
  transition: theme.transitions.create("stroke-dashoffset")
}, ownerState.variant === "indeterminate" && {
  strokeDasharray: "80px, 200px",
  strokeDashoffset: 0
}), ({
  ownerState
}) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
var CircularProgress = React33.forwardRef(function CircularProgress2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCircularProgress"
  });
  const {
    className,
    color = "primary",
    disableShrink = false,
    size = 40,
    style,
    thickness = 3.6,
    value = 0,
    variant = "indeterminate"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const ownerState = _extends({}, props, {
    color,
    disableShrink,
    size,
    thickness,
    value,
    variant
  });
  const classes2 = useUtilityClasses24(ownerState);
  const circleStyle = {};
  const rootStyle = {};
  const rootProps = {};
  if (variant === "determinate") {
    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps["aria-valuenow"] = Math.round(value);
    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
    rootStyle.transform = "rotate(-90deg)";
  }
  return (0, import_jsx_runtime41.jsx)(CircularProgressRoot, _extends({
    className: clsx_default(classes2.root, className),
    style: _extends({
      width: size,
      height: size
    }, rootStyle, style),
    ownerState,
    ref,
    role: "progressbar"
  }, rootProps, other, {
    children: (0, import_jsx_runtime41.jsx)(CircularProgressSVG, {
      className: classes2.svg,
      ownerState,
      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
      children: (0, import_jsx_runtime41.jsx)(CircularProgressCircle, {
        className: classes2.circle,
        style: circleStyle,
        ownerState,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })
    })
  }));
});
true ? CircularProgress.propTypes = {
  classes: import_prop_types27.default.object,
  className: import_prop_types27.default.string,
  color: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types27.default.string]),
  disableShrink: chainPropTypes(import_prop_types27.default.bool, (props) => {
    if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
      return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
    }
    return null;
  }),
  size: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]),
  style: import_prop_types27.default.object,
  sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object]),
  thickness: import_prop_types27.default.number,
  value: import_prop_types27.default.number,
  variant: import_prop_types27.default.oneOf(["determinate", "indeterminate"])
} : void 0;

// node_modules/@mui/material/CircularProgress/index.js
"use client";

// node_modules/@mui/material/ClickAwayListener/index.js
init_ClickAwayListener();

// node_modules/@mui/material/Container/Container.js
var import_prop_types28 = __toESM(require_prop_types());
init_esm();
init_capitalize();
init_styled();
init_useThemeProps2();
"use client";
var Container = createContainer({
  createStyledComponent: styled_default("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`maxWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fixed && styles5.fixed, ownerState.disableGutters && styles5.disableGutters];
    }
  }),
  useThemeProps: (inProps) => useThemeProps2({
    props: inProps,
    name: "MuiContainer"
  })
});
true ? Container.propTypes = {
  children: import_prop_types28.default.node,
  classes: import_prop_types28.default.object,
  component: import_prop_types28.default.elementType,
  disableGutters: import_prop_types28.default.bool,
  fixed: import_prop_types28.default.bool,
  maxWidth: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types28.default.string]),
  sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object])
} : void 0;

// node_modules/@mui/material/Container/containerClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
var containerClasses = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);

// node_modules/@mui/material/Container/index.js
"use client";

// node_modules/@mui/material/CssBaseline/CssBaseline.js
init_extends();
var React34 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());
init_useThemeProps2();
init_GlobalStyles();
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
"use client";
var html = (theme, enableColorScheme) => _extends({
  WebkitFontSmoothing: "antialiased",
  MozOsxFontSmoothing: "grayscale",
  boxSizing: "border-box",
  WebkitTextSizeAdjust: "100%"
}, enableColorScheme && !theme.vars && {
  colorScheme: theme.palette.mode
});
var body = (theme) => _extends({
  color: (theme.vars || theme).palette.text.primary
}, theme.typography.body1, {
  backgroundColor: (theme.vars || theme).palette.background.default,
  "@media print": {
    backgroundColor: (theme.vars || theme).palette.common.white
  }
});
var styles2 = (theme, enableColorScheme = false) => {
  var _theme$components;
  const colorSchemeStyles = {};
  if (enableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\s*&/, "")] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  let defaultStyles = _extends({
    html: html(theme, enableColorScheme),
    "*, *::before, *::after": {
      boxSizing: "inherit"
    },
    "strong, b": {
      fontWeight: theme.typography.fontWeightBold
    },
    body: _extends({
      margin: 0
    }, body(theme), {
      "&::backdrop": {
        backgroundColor: (theme.vars || theme).palette.background.default
      }
    })
  }, colorSchemeStyles);
  const themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;
  if (themeOverrides) {
    defaultStyles = [defaultStyles, themeOverrides];
  }
  return defaultStyles;
};
function CssBaseline(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiCssBaseline"
  });
  const {
    children,
    enableColorScheme = false
  } = props;
  return (0, import_jsx_runtime43.jsxs)(React34.Fragment, {
    children: [(0, import_jsx_runtime42.jsx)(GlobalStyles_default, {
      styles: (theme) => styles2(theme, enableColorScheme)
    }), children]
  });
}
true ? CssBaseline.propTypes = {
  children: import_prop_types29.default.node,
  enableColorScheme: import_prop_types29.default.bool
} : void 0;

// node_modules/@mui/material/CssBaseline/index.js
"use client";

// node_modules/@mui/material/Dialog/Dialog.js
init_objectWithoutPropertiesLoose();
init_extends();
var React36 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_useId();
init_capitalize();
init_Modal();
init_Fade();
init_Paper();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Dialog/dialogClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getDialogUtilityClass(slot) {
  return generateUtilityClass("MuiDialog", slot);
}
var dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
var dialogClasses_default = dialogClasses;

// node_modules/@mui/material/Dialog/DialogContext.js
var React35 = __toESM(require_react());
var DialogContext = React35.createContext({});
if (true) {
  DialogContext.displayName = "DialogContext";
}
var DialogContext_default = DialogContext;

// node_modules/@mui/material/Dialog/Dialog.js
init_Backdrop();
init_useTheme();
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
"use client";
var _excluded30 = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
var DialogBackdrop = styled_default(Backdrop_default, {
  name: "MuiDialog",
  slot: "Backdrop",
  overrides: (props, styles5) => styles5.backdrop
})({
  zIndex: -1
});
var useUtilityClasses25 = (ownerState) => {
  const {
    classes: classes2,
    scroll: scroll2,
    maxWidth,
    fullWidth,
    fullScreen
  } = ownerState;
  const slots = {
    root: ["root"],
    container: ["container", `scroll${capitalize_default(scroll2)}`],
    paper: ["paper", `paperScroll${capitalize_default(scroll2)}`, `paperWidth${capitalize_default(String(maxWidth))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
  };
  return composeClasses(slots, getDialogUtilityClass, classes2);
};
var DialogRoot = styled_default(Modal_default, {
  name: "MuiDialog",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  "@media print": {
    position: "absolute !important"
  }
});
var DialogContainer = styled_default("div", {
  name: "MuiDialog",
  slot: "Container",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.container, styles5[`scroll${capitalize_default(ownerState.scroll)}`]];
  }
})(({
  ownerState
}) => _extends({
  height: "100%",
  "@media print": {
    height: "auto"
  },
  outline: 0
}, ownerState.scroll === "paper" && {
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
}, ownerState.scroll === "body" && {
  overflowY: "auto",
  overflowX: "hidden",
  textAlign: "center",
  "&::after": {
    content: '""',
    display: "inline-block",
    verticalAlign: "middle",
    height: "100%",
    width: "0"
  }
}));
var DialogPaper = styled_default(Paper_default, {
  name: "MuiDialog",
  slot: "Paper",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.paper, styles5[`scrollPaper${capitalize_default(ownerState.scroll)}`], styles5[`paperWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles5.paperFullWidth, ownerState.fullScreen && styles5.paperFullScreen];
  }
})(({
  theme,
  ownerState
}) => _extends({
  margin: 32,
  position: "relative",
  overflowY: "auto",
  "@media print": {
    overflowY: "visible",
    boxShadow: "none"
  }
}, ownerState.scroll === "paper" && {
  display: "flex",
  flexDirection: "column",
  maxHeight: "calc(100% - 64px)"
}, ownerState.scroll === "body" && {
  display: "inline-block",
  verticalAlign: "middle",
  textAlign: "left"
}, !ownerState.maxWidth && {
  maxWidth: "calc(100% - 64px)"
}, ownerState.maxWidth === "xs" && {
  maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
  [`&.${dialogClasses_default.paperScrollBody}`]: {
    [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
      maxWidth: "calc(100% - 64px)"
    }
  }
}, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
  maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
  [`&.${dialogClasses_default.paperScrollBody}`]: {
    [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
      maxWidth: "calc(100% - 64px)"
    }
  }
}, ownerState.fullWidth && {
  width: "calc(100% - 64px)"
}, ownerState.fullScreen && {
  margin: 0,
  width: "100%",
  maxWidth: "100%",
  height: "100%",
  maxHeight: "none",
  borderRadius: 0,
  [`&.${dialogClasses_default.paperScrollBody}`]: {
    margin: 0,
    maxWidth: "100%"
  }
}));
var Dialog = React36.forwardRef(function Dialog2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDialog"
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    "aria-describedby": ariaDescribedby,
    "aria-labelledby": ariaLabelledbyProp,
    BackdropComponent,
    BackdropProps,
    children,
    className,
    disableEscapeKeyDown = false,
    fullScreen = false,
    fullWidth = false,
    maxWidth = "sm",
    onBackdropClick,
    onClose,
    open,
    PaperComponent = Paper_default,
    PaperProps = {},
    scroll: scroll2 = "paper",
    TransitionComponent = Fade_default,
    transitionDuration = defaultTransitionDuration,
    TransitionProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const ownerState = _extends({}, props, {
    disableEscapeKeyDown,
    fullScreen,
    fullWidth,
    maxWidth,
    scroll: scroll2
  });
  const classes2 = useUtilityClasses25(ownerState);
  const backdropClick = React36.useRef();
  const handleMouseDown = (event) => {
    backdropClick.current = event.target === event.currentTarget;
  };
  const handleBackdropClick = (event) => {
    if (!backdropClick.current) {
      return;
    }
    backdropClick.current = null;
    if (onBackdropClick) {
      onBackdropClick(event);
    }
    if (onClose) {
      onClose(event, "backdropClick");
    }
  };
  const ariaLabelledby = useId(ariaLabelledbyProp);
  const dialogContextValue = React36.useMemo(() => {
    return {
      titleId: ariaLabelledby
    };
  }, [ariaLabelledby]);
  return (0, import_jsx_runtime44.jsx)(DialogRoot, _extends({
    className: clsx_default(classes2.root, className),
    closeAfterTransition: true,
    components: {
      Backdrop: DialogBackdrop
    },
    componentsProps: {
      backdrop: _extends({
        transitionDuration,
        as: BackdropComponent
      }, BackdropProps)
    },
    disableEscapeKeyDown,
    onClose,
    open,
    ref,
    onClick: handleBackdropClick,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime44.jsx)(TransitionComponent, _extends({
      appear: true,
      in: open,
      timeout: transitionDuration,
      role: "presentation"
    }, TransitionProps, {
      children: (0, import_jsx_runtime44.jsx)(DialogContainer, {
        className: clsx_default(classes2.container),
        onMouseDown: handleMouseDown,
        ownerState,
        children: (0, import_jsx_runtime44.jsx)(DialogPaper, _extends({
          as: PaperComponent,
          elevation: 24,
          role: "dialog",
          "aria-describedby": ariaDescribedby,
          "aria-labelledby": ariaLabelledby
        }, PaperProps, {
          className: clsx_default(classes2.paper, PaperProps.className),
          ownerState,
          children: (0, import_jsx_runtime44.jsx)(DialogContext_default.Provider, {
            value: dialogContextValue,
            children
          })
        }))
      })
    }))
  }));
});
true ? Dialog.propTypes = {
  "aria-describedby": import_prop_types30.default.string,
  "aria-labelledby": import_prop_types30.default.string,
  BackdropComponent: import_prop_types30.default.elementType,
  BackdropProps: import_prop_types30.default.object,
  children: import_prop_types30.default.node,
  classes: import_prop_types30.default.object,
  className: import_prop_types30.default.string,
  disableEscapeKeyDown: import_prop_types30.default.bool,
  fullScreen: import_prop_types30.default.bool,
  fullWidth: import_prop_types30.default.bool,
  maxWidth: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types30.default.string]),
  onBackdropClick: import_prop_types30.default.func,
  onClose: import_prop_types30.default.func,
  open: import_prop_types30.default.bool.isRequired,
  PaperComponent: import_prop_types30.default.elementType,
  PaperProps: import_prop_types30.default.object,
  scroll: import_prop_types30.default.oneOf(["body", "paper"]),
  sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object]),
  TransitionComponent: import_prop_types30.default.elementType,
  transitionDuration: import_prop_types30.default.oneOfType([import_prop_types30.default.number, import_prop_types30.default.shape({
    appear: import_prop_types30.default.number,
    enter: import_prop_types30.default.number,
    exit: import_prop_types30.default.number
  })]),
  TransitionProps: import_prop_types30.default.object
} : void 0;
var Dialog_default = Dialog;

// node_modules/@mui/material/Dialog/index.js
"use client";

// node_modules/@mui/material/DialogActions/DialogActions.js
init_objectWithoutPropertiesLoose();
init_extends();
var React37 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/DialogActions/dialogActionsClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getDialogActionsUtilityClass(slot) {
  return generateUtilityClass("MuiDialogActions", slot);
}
var dialogActionsClasses = generateUtilityClasses("MuiDialogActions", ["root", "spacing"]);

// node_modules/@mui/material/DialogActions/DialogActions.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
"use client";
var _excluded31 = ["className", "disableSpacing"];
var useUtilityClasses26 = (ownerState) => {
  const {
    classes: classes2,
    disableSpacing
  } = ownerState;
  const slots = {
    root: ["root", !disableSpacing && "spacing"]
  };
  return composeClasses(slots, getDialogActionsUtilityClass, classes2);
};
var DialogActionsRoot = styled_default("div", {
  name: "MuiDialogActions",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, !ownerState.disableSpacing && styles5.spacing];
  }
})(({
  ownerState
}) => _extends({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end",
  flex: "0 0 auto"
}, !ownerState.disableSpacing && {
  "& > :not(style) ~ :not(style)": {
    marginLeft: 8
  }
}));
var DialogActions = React37.forwardRef(function DialogActions2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDialogActions"
  });
  const {
    className,
    disableSpacing = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const ownerState = _extends({}, props, {
    disableSpacing
  });
  const classes2 = useUtilityClasses26(ownerState);
  return (0, import_jsx_runtime45.jsx)(DialogActionsRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other));
});
true ? DialogActions.propTypes = {
  children: import_prop_types31.default.node,
  classes: import_prop_types31.default.object,
  className: import_prop_types31.default.string,
  disableSpacing: import_prop_types31.default.bool,
  sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object])
} : void 0;
var DialogActions_default = DialogActions;

// node_modules/@mui/material/DialogActions/index.js
"use client";

// node_modules/@mui/material/DialogContent/DialogContent.js
init_objectWithoutPropertiesLoose();
init_extends();
var React38 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/DialogContent/dialogContentClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getDialogContentUtilityClass(slot) {
  return generateUtilityClass("MuiDialogContent", slot);
}
var dialogContentClasses = generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);

// node_modules/@mui/material/DialogTitle/dialogTitleClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getDialogTitleUtilityClass(slot) {
  return generateUtilityClass("MuiDialogTitle", slot);
}
var dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
var dialogTitleClasses_default = dialogTitleClasses;

// node_modules/@mui/material/DialogContent/DialogContent.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
"use client";
var _excluded32 = ["className", "dividers"];
var useUtilityClasses27 = (ownerState) => {
  const {
    classes: classes2,
    dividers
  } = ownerState;
  const slots = {
    root: ["root", dividers && "dividers"]
  };
  return composeClasses(slots, getDialogContentUtilityClass, classes2);
};
var DialogContentRoot = styled_default("div", {
  name: "MuiDialogContent",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.dividers && styles5.dividers];
  }
})(({
  theme,
  ownerState
}) => _extends({
  flex: "1 1 auto",
  WebkitOverflowScrolling: "touch",
  overflowY: "auto",
  padding: "20px 24px"
}, ownerState.dividers ? {
  padding: "16px 24px",
  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
} : {
  [`.${dialogTitleClasses_default.root} + &`]: {
    paddingTop: 0
  }
}));
var DialogContent = React38.forwardRef(function DialogContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDialogContent"
  });
  const {
    className,
    dividers = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded32);
  const ownerState = _extends({}, props, {
    dividers
  });
  const classes2 = useUtilityClasses27(ownerState);
  return (0, import_jsx_runtime46.jsx)(DialogContentRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other));
});
true ? DialogContent.propTypes = {
  children: import_prop_types32.default.node,
  classes: import_prop_types32.default.object,
  className: import_prop_types32.default.string,
  dividers: import_prop_types32.default.bool,
  sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object])
} : void 0;
var DialogContent_default = DialogContent;

// node_modules/@mui/material/DialogContent/index.js
"use client";

// node_modules/@mui/material/DialogContentText/DialogContentText.js
init_objectWithoutPropertiesLoose();
init_extends();
var React39 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_Typography();

// node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getDialogContentTextUtilityClass(slot) {
  return generateUtilityClass("MuiDialogContentText", slot);
}
var dialogContentTextClasses = generateUtilityClasses("MuiDialogContentText", ["root"]);

// node_modules/@mui/material/DialogContentText/DialogContentText.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
"use client";
var _excluded33 = ["children", "className"];
var useUtilityClasses28 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes2);
  return _extends({}, classes2, composedClasses);
};
var DialogContentTextRoot = styled_default(Typography_default, {
  shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
  name: "MuiDialogContentText",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({});
var DialogContentText = React39.forwardRef(function DialogContentText2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDialogContentText"
  });
  const {
    className
  } = props, ownerState = _objectWithoutPropertiesLoose(props, _excluded33);
  const classes2 = useUtilityClasses28(ownerState);
  return (0, import_jsx_runtime47.jsx)(DialogContentTextRoot, _extends({
    component: "p",
    variant: "body1",
    color: "text.secondary",
    ref,
    ownerState,
    className: clsx_default(classes2.root, className)
  }, props, {
    classes: classes2
  }));
});
true ? DialogContentText.propTypes = {
  children: import_prop_types33.default.node,
  classes: import_prop_types33.default.object,
  className: import_prop_types33.default.string,
  sx: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object, import_prop_types33.default.bool])), import_prop_types33.default.func, import_prop_types33.default.object])
} : void 0;

// node_modules/@mui/material/DialogContentText/index.js
"use client";

// node_modules/@mui/material/DialogTitle/DialogTitle.js
init_extends();
init_objectWithoutPropertiesLoose();
var React40 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_Typography();
init_styled();
init_useThemeProps2();
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
"use client";
var _excluded34 = ["className", "id"];
var useUtilityClasses29 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getDialogTitleUtilityClass, classes2);
};
var DialogTitleRoot = styled_default(Typography_default, {
  name: "MuiDialogTitle",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  padding: "16px 24px",
  flex: "0 0 auto"
});
var DialogTitle = React40.forwardRef(function DialogTitle2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDialogTitle"
  });
  const {
    className,
    id: idProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const ownerState = props;
  const classes2 = useUtilityClasses29(ownerState);
  const {
    titleId = idProp
  } = React40.useContext(DialogContext_default);
  return (0, import_jsx_runtime48.jsx)(DialogTitleRoot, _extends({
    component: "h2",
    className: clsx_default(classes2.root, className),
    ownerState,
    ref,
    variant: "h6",
    id: idProp != null ? idProp : titleId
  }, other));
});
true ? DialogTitle.propTypes = {
  children: import_prop_types34.default.node,
  classes: import_prop_types34.default.object,
  className: import_prop_types34.default.string,
  id: import_prop_types34.default.string,
  sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object])
} : void 0;
var DialogTitle_default = DialogTitle;

// node_modules/@mui/material/DialogTitle/index.js
"use client";

// node_modules/@mui/material/index.js
init_Divider();
init_Divider();

// node_modules/@mui/material/Drawer/Drawer.js
init_objectWithoutPropertiesLoose();
init_extends();
var React42 = __toESM(require_react());
var import_prop_types36 = __toESM(require_prop_types());
init_clsx();
init_integerPropType();
init_composeClasses();
init_Modal();

// node_modules/@mui/material/Slide/Slide.js
init_extends();
init_objectWithoutPropertiesLoose();
var React41 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());
init_esm2();
init_chainPropTypes();
init_HTMLElementType();
init_elementAcceptingRef();
init_debounce();
init_useForkRef2();
init_useTheme();
init_utils3();
init_utils2();
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
"use client";
var _excluded35 = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
function getTranslateValue(direction, node, resolvedContainer) {
  const rect = node.getBoundingClientRect();
  const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
  const containerWindow = ownerWindow_default(node);
  let transform;
  if (node.fakeTransform) {
    transform = node.fakeTransform;
  } else {
    const computedStyle = containerWindow.getComputedStyle(node);
    transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
  }
  let offsetX = 0;
  let offsetY = 0;
  if (transform && transform !== "none" && typeof transform === "string") {
    const transformValues = transform.split("(")[1].split(")")[0].split(",");
    offsetX = parseInt(transformValues[4], 10);
    offsetY = parseInt(transformValues[5], 10);
  }
  if (direction === "left") {
    if (containerRect) {
      return `translateX(${containerRect.right + offsetX - rect.left}px)`;
    }
    return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
  }
  if (direction === "right") {
    if (containerRect) {
      return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
    }
    return `translateX(-${rect.left + rect.width - offsetX}px)`;
  }
  if (direction === "up") {
    if (containerRect) {
      return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
    }
    return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
  }
  if (containerRect) {
    return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
  }
  return `translateY(-${rect.top + rect.height - offsetY}px)`;
}
function resolveContainer(containerPropProp) {
  return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
}
function setTranslateValue(direction, node, containerProp) {
  const resolvedContainer = resolveContainer(containerProp);
  const transform = getTranslateValue(direction, node, resolvedContainer);
  if (transform) {
    node.style.webkitTransform = transform;
    node.style.transform = transform;
  }
}
var Slide = React41.forwardRef(function Slide2(props, ref) {
  const theme = useTheme();
  const defaultEasing = {
    enter: theme.transitions.easing.easeOut,
    exit: theme.transitions.easing.sharp
  };
  const defaultTimeout = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    addEndListener,
    appear = true,
    children,
    container: containerProp,
    direction = "down",
    easing: easingProp = defaultEasing,
    in: inProp,
    onEnter,
    onEntered,
    onEntering,
    onExit,
    onExited,
    onExiting,
    style,
    timeout = defaultTimeout,
    TransitionComponent = Transition_default
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const childrenRef = React41.useRef(null);
  const handleRef = useForkRef_default(children.ref, childrenRef, ref);
  const normalizedTransitionCallback = (callback) => (isAppearing) => {
    if (callback) {
      if (isAppearing === void 0) {
        callback(childrenRef.current);
      } else {
        callback(childrenRef.current, isAppearing);
      }
    }
  };
  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
    setTranslateValue(direction, node, containerProp);
    reflow(node);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
    const transitionProps = getTransitionProps({
      timeout,
      style,
      easing: easingProp
    }, {
      mode: "enter"
    });
    node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps));
    node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps));
    node.style.webkitTransform = "none";
    node.style.transform = "none";
    if (onEntering) {
      onEntering(node, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback(onEntered);
  const handleExiting = normalizedTransitionCallback(onExiting);
  const handleExit = normalizedTransitionCallback((node) => {
    const transitionProps = getTransitionProps({
      timeout,
      style,
      easing: easingProp
    }, {
      mode: "exit"
    });
    node.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
    node.style.transition = theme.transitions.create("transform", transitionProps);
    setTranslateValue(direction, node, containerProp);
    if (onExit) {
      onExit(node);
    }
  });
  const handleExited = normalizedTransitionCallback((node) => {
    node.style.webkitTransition = "";
    node.style.transition = "";
    if (onExited) {
      onExited(node);
    }
  });
  const handleAddEndListener = (next) => {
    if (addEndListener) {
      addEndListener(childrenRef.current, next);
    }
  };
  const updatePosition = React41.useCallback(() => {
    if (childrenRef.current) {
      setTranslateValue(direction, childrenRef.current, containerProp);
    }
  }, [direction, containerProp]);
  React41.useEffect(() => {
    if (inProp || direction === "down" || direction === "right") {
      return void 0;
    }
    const handleResize = debounce_default(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    });
    const containerWindow = ownerWindow_default(childrenRef.current);
    containerWindow.addEventListener("resize", handleResize);
    return () => {
      handleResize.clear();
      containerWindow.removeEventListener("resize", handleResize);
    };
  }, [direction, inProp, containerProp]);
  React41.useEffect(() => {
    if (!inProp) {
      updatePosition();
    }
  }, [inProp, updatePosition]);
  return (0, import_jsx_runtime49.jsx)(TransitionComponent, _extends({
    nodeRef: childrenRef,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    appear,
    in: inProp,
    timeout
  }, other, {
    children: (state, childProps) => {
      return React41.cloneElement(children, _extends({
        ref: handleRef,
        style: _extends({
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, style, children.props.style)
      }, childProps));
    }
  }));
});
true ? Slide.propTypes = {
  addEndListener: import_prop_types35.default.func,
  appear: import_prop_types35.default.bool,
  children: elementAcceptingRef_default.isRequired,
  container: chainPropTypes(import_prop_types35.default.oneOfType([HTMLElementType, import_prop_types35.default.func]), (props) => {
    if (props.open) {
      const resolvedContainer = resolveContainer(props.container);
      if (resolvedContainer && resolvedContainer.nodeType === 1) {
        const box = resolvedContainer.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== "function" || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
        return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join("\n"));
      }
    }
    return null;
  }),
  direction: import_prop_types35.default.oneOf(["down", "left", "right", "up"]),
  easing: import_prop_types35.default.oneOfType([import_prop_types35.default.shape({
    enter: import_prop_types35.default.string,
    exit: import_prop_types35.default.string
  }), import_prop_types35.default.string]),
  in: import_prop_types35.default.bool,
  onEnter: import_prop_types35.default.func,
  onEntered: import_prop_types35.default.func,
  onEntering: import_prop_types35.default.func,
  onExit: import_prop_types35.default.func,
  onExited: import_prop_types35.default.func,
  onExiting: import_prop_types35.default.func,
  style: import_prop_types35.default.object,
  timeout: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.shape({
    appear: import_prop_types35.default.number,
    enter: import_prop_types35.default.number,
    exit: import_prop_types35.default.number
  })])
} : void 0;
var Slide_default = Slide;

// node_modules/@mui/material/Slide/index.js
"use client";

// node_modules/@mui/material/Drawer/Drawer.js
init_Paper();
init_capitalize();
init_useTheme();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Drawer/drawerClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getDrawerUtilityClass(slot) {
  return generateUtilityClass("MuiDrawer", slot);
}
var drawerClasses = generateUtilityClasses("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);

// node_modules/@mui/material/Drawer/Drawer.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
"use client";
var _excluded36 = ["BackdropProps"];
var _excluded210 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
var overridesResolver2 = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [styles5.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles5.docked, styles5.modal];
};
var useUtilityClasses30 = (ownerState) => {
  const {
    classes: classes2,
    anchor,
    variant
  } = ownerState;
  const slots = {
    root: ["root"],
    docked: [(variant === "permanent" || variant === "persistent") && "docked"],
    modal: ["modal"],
    paper: ["paper", `paperAnchor${capitalize_default(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize_default(anchor)}`]
  };
  return composeClasses(slots, getDrawerUtilityClass, classes2);
};
var DrawerRoot = styled_default(Modal_default, {
  name: "MuiDrawer",
  slot: "Root",
  overridesResolver: overridesResolver2
})(({
  theme
}) => ({
  zIndex: (theme.vars || theme).zIndex.drawer
}));
var DrawerDockedRoot = styled_default("div", {
  shouldForwardProp: rootShouldForwardProp,
  name: "MuiDrawer",
  slot: "Docked",
  skipVariantsResolver: false,
  overridesResolver: overridesResolver2
})({
  flex: "0 0 auto"
});
var DrawerPaper = styled_default(Paper_default, {
  name: "MuiDrawer",
  slot: "Paper",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.paper, styles5[`paperAnchor${capitalize_default(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles5[`paperAnchorDocked${capitalize_default(ownerState.anchor)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends({
  overflowY: "auto",
  display: "flex",
  flexDirection: "column",
  height: "100%",
  flex: "1 0 auto",
  zIndex: (theme.vars || theme).zIndex.drawer,
  WebkitOverflowScrolling: "touch",
  position: "fixed",
  top: 0,
  outline: 0
}, ownerState.anchor === "left" && {
  left: 0
}, ownerState.anchor === "top" && {
  top: 0,
  left: 0,
  right: 0,
  height: "auto",
  maxHeight: "100%"
}, ownerState.anchor === "right" && {
  right: 0
}, ownerState.anchor === "bottom" && {
  top: "auto",
  left: 0,
  bottom: 0,
  right: 0,
  height: "auto",
  maxHeight: "100%"
}, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
  borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
}, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
}, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
  borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
}, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
}));
var oppositeDirection = {
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
function isHorizontal(anchor) {
  return ["left", "right"].indexOf(anchor) !== -1;
}
function getAnchor(theme, anchor) {
  return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
}
var Drawer = React42.forwardRef(function Drawer2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDrawer"
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    anchor: anchorProp = "left",
    BackdropProps,
    children,
    className,
    elevation = 16,
    hideBackdrop = false,
    ModalProps: {
      BackdropProps: BackdropPropsProp
    } = {},
    onClose,
    open = false,
    PaperProps = {},
    SlideProps,
    TransitionComponent = Slide_default,
    transitionDuration = defaultTransitionDuration,
    variant = "temporary"
  } = props, ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded36), other = _objectWithoutPropertiesLoose(props, _excluded210);
  const mounted = React42.useRef(false);
  React42.useEffect(() => {
    mounted.current = true;
  }, []);
  const anchorInvariant = getAnchor(theme, anchorProp);
  const anchor = anchorProp;
  const ownerState = _extends({}, props, {
    anchor,
    elevation,
    open,
    variant
  }, other);
  const classes2 = useUtilityClasses30(ownerState);
  const drawer = (0, import_jsx_runtime50.jsx)(DrawerPaper, _extends({
    elevation: variant === "temporary" ? elevation : 0,
    square: true
  }, PaperProps, {
    className: clsx_default(classes2.paper, PaperProps.className),
    ownerState,
    children
  }));
  if (variant === "permanent") {
    return (0, import_jsx_runtime50.jsx)(DrawerDockedRoot, _extends({
      className: clsx_default(classes2.root, classes2.docked, className),
      ownerState,
      ref
    }, other, {
      children: drawer
    }));
  }
  const slidingDrawer = (0, import_jsx_runtime50.jsx)(TransitionComponent, _extends({
    in: open,
    direction: oppositeDirection[anchorInvariant],
    timeout: transitionDuration,
    appear: mounted.current
  }, SlideProps, {
    children: drawer
  }));
  if (variant === "persistent") {
    return (0, import_jsx_runtime50.jsx)(DrawerDockedRoot, _extends({
      className: clsx_default(classes2.root, classes2.docked, className),
      ownerState,
      ref
    }, other, {
      children: slidingDrawer
    }));
  }
  return (0, import_jsx_runtime50.jsx)(DrawerRoot, _extends({
    BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
      transitionDuration
    }),
    className: clsx_default(classes2.root, classes2.modal, className),
    open,
    ownerState,
    onClose,
    hideBackdrop,
    ref
  }, other, ModalProps, {
    children: slidingDrawer
  }));
});
true ? Drawer.propTypes = {
  anchor: import_prop_types36.default.oneOf(["bottom", "left", "right", "top"]),
  BackdropProps: import_prop_types36.default.object,
  children: import_prop_types36.default.node,
  classes: import_prop_types36.default.object,
  className: import_prop_types36.default.string,
  elevation: integerPropType_default,
  hideBackdrop: import_prop_types36.default.bool,
  ModalProps: import_prop_types36.default.object,
  onClose: import_prop_types36.default.func,
  open: import_prop_types36.default.bool,
  PaperProps: import_prop_types36.default.object,
  SlideProps: import_prop_types36.default.object,
  sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
  transitionDuration: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.shape({
    appear: import_prop_types36.default.number,
    enter: import_prop_types36.default.number,
    exit: import_prop_types36.default.number
  })]),
  variant: import_prop_types36.default.oneOf(["permanent", "persistent", "temporary"])
} : void 0;
var Drawer_default = Drawer;

// node_modules/@mui/material/Drawer/index.js
"use client";

// node_modules/@mui/material/Fab/Fab.js
init_objectWithoutPropertiesLoose();
init_extends();
var React43 = __toESM(require_react());
var import_prop_types37 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_ButtonBase();
init_capitalize();
init_useThemeProps2();

// node_modules/@mui/material/Fab/fabClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getFabUtilityClass(slot) {
  return generateUtilityClass("MuiFab", slot);
}
var fabClasses = generateUtilityClasses("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge", "info", "error", "warning", "success"]);
var fabClasses_default = fabClasses;

// node_modules/@mui/material/Fab/Fab.js
init_styled();
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
"use client";
var _excluded37 = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];
var useUtilityClasses31 = (ownerState) => {
  const {
    color,
    variant,
    classes: classes2,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant, `size${capitalize_default(size)}`, color === "inherit" ? "colorInherit" : color]
  };
  const composedClasses = composeClasses(slots, getFabUtilityClass, classes2);
  return _extends({}, classes2, composedClasses);
};
var FabRoot = styled_default(ButtonBase_default, {
  name: "MuiFab",
  slot: "Root",
  shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant], styles5[`size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles5.colorInherit, styles5[capitalize_default(ownerState.size)], styles5[ownerState.color]];
  }
})(({
  theme,
  ownerState
}) => {
  var _theme$palette$getCon, _theme$palette;
  return _extends({}, theme.typography.button, {
    minHeight: 36,
    transition: theme.transitions.create(["background-color", "box-shadow", "border-color"], {
      duration: theme.transitions.duration.short
    }),
    borderRadius: "50%",
    padding: 0,
    minWidth: 0,
    width: 56,
    height: 56,
    zIndex: (theme.vars || theme).zIndex.fab,
    boxShadow: (theme.vars || theme).shadows[6],
    "&:active": {
      boxShadow: (theme.vars || theme).shadows[12]
    },
    color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
    backgroundColor: (theme.vars || theme).palette.grey[300],
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette.grey.A100,
      "@media (hover: none)": {
        backgroundColor: (theme.vars || theme).palette.grey[300]
      },
      textDecoration: "none"
    },
    [`&.${fabClasses_default.focusVisible}`]: {
      boxShadow: (theme.vars || theme).shadows[6]
    }
  }, ownerState.size === "small" && {
    width: 40,
    height: 40
  }, ownerState.size === "medium" && {
    width: 48,
    height: 48
  }, ownerState.variant === "extended" && {
    borderRadius: 48 / 2,
    padding: "0 16px",
    width: "auto",
    minHeight: "auto",
    minWidth: 48,
    height: 48
  }, ownerState.variant === "extended" && ownerState.size === "small" && {
    width: "auto",
    padding: "0 8px",
    borderRadius: 34 / 2,
    minWidth: 34,
    height: 34
  }, ownerState.variant === "extended" && ownerState.size === "medium" && {
    width: "auto",
    padding: "0 16px",
    borderRadius: 40 / 2,
    minWidth: 40,
    height: 40
  }, ownerState.color === "inherit" && {
    color: "inherit"
  });
}, ({
  theme,
  ownerState
}) => _extends({}, ownerState.color !== "inherit" && ownerState.color !== "default" && (theme.vars || theme).palette[ownerState.color] != null && {
  color: (theme.vars || theme).palette[ownerState.color].contrastText,
  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
    "@media (hover: none)": {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }
  }
}), ({
  theme
}) => ({
  [`&.${fabClasses_default.disabled}`]: {
    color: (theme.vars || theme).palette.action.disabled,
    boxShadow: (theme.vars || theme).shadows[0],
    backgroundColor: (theme.vars || theme).palette.action.disabledBackground
  }
}));
var Fab = React43.forwardRef(function Fab2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiFab"
  });
  const {
    children,
    className,
    color = "default",
    component = "button",
    disabled = false,
    disableFocusRipple = false,
    focusVisibleClassName,
    size = "large",
    variant = "circular"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const ownerState = _extends({}, props, {
    color,
    component,
    disabled,
    disableFocusRipple,
    size,
    variant
  });
  const classes2 = useUtilityClasses31(ownerState);
  return (0, import_jsx_runtime51.jsx)(FabRoot, _extends({
    className: clsx_default(classes2.root, className),
    component,
    disabled,
    focusRipple: !disableFocusRipple,
    focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
    ownerState,
    ref
  }, other, {
    classes: classes2,
    children
  }));
});
true ? Fab.propTypes = {
  children: import_prop_types37.default.node,
  classes: import_prop_types37.default.object,
  className: import_prop_types37.default.string,
  color: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["default", "error", "info", "inherit", "primary", "secondary", "success", "warning"]), import_prop_types37.default.string]),
  component: import_prop_types37.default.elementType,
  disabled: import_prop_types37.default.bool,
  disableFocusRipple: import_prop_types37.default.bool,
  disableRipple: import_prop_types37.default.bool,
  focusVisibleClassName: import_prop_types37.default.string,
  href: import_prop_types37.default.string,
  size: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["small", "medium", "large"]), import_prop_types37.default.string]),
  sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
  variant: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["circular", "extended"]), import_prop_types37.default.string])
} : void 0;
var Fab_default = Fab;

// node_modules/@mui/material/Fab/index.js
"use client";

// node_modules/@mui/material/index.js
init_Fade();
init_Fade();
init_FilledInput();
init_FilledInput();
init_FormControl();
init_FormControl();
init_FormControlLabel();
init_FormControlLabel();
init_FormGroup();
init_FormGroup();
init_FormHelperText();
init_FormHelperText();
init_FormLabel();
init_FormLabel();
init_Grid();
init_Grid();

// node_modules/@mui/material/Unstable_Grid2/Grid2.js
var import_prop_types38 = __toESM(require_prop_types());
init_Unstable_Grid();
init_styles();
"use client";
var Grid2 = createGrid({
  createStyledComponent: styled_default("div", {
    name: "MuiGrid2",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  }),
  componentName: "MuiGrid2",
  useThemeProps: (inProps) => useThemeProps2({
    props: inProps,
    name: "MuiGrid2"
  })
});
true ? Grid2.propTypes = {
  children: import_prop_types38.default.node,
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
} : void 0;

// node_modules/@mui/material/Unstable_Grid2/grid2Classes.js
init_generateUtilityClasses();
init_generateUtilityClass();
var SPACINGS2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
var grid2Classes = generateUtilityClasses("MuiGrid2", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  ...SPACINGS2.map((spacing) => `spacing-xs-${spacing}`),
  ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
  ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
  ...GRID_SIZES.map((size) => `grid-xs-${size}`),
  ...GRID_SIZES.map((size) => `grid-sm-${size}`),
  ...GRID_SIZES.map((size) => `grid-md-${size}`),
  ...GRID_SIZES.map((size) => `grid-lg-${size}`),
  ...GRID_SIZES.map((size) => `grid-xl-${size}`)
]);

// node_modules/@mui/material/Unstable_Grid2/index.js
"use client";

// node_modules/@mui/material/index.js
init_Grow();
init_Grow();

// node_modules/@mui/material/Hidden/Hidden.js
init_extends();
init_objectWithoutPropertiesLoose();
var React47 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());

// node_modules/@mui/material/Hidden/HiddenJs.js
var React45 = __toESM(require_react());
var import_prop_types40 = __toESM(require_prop_types());
init_exactProp();

// node_modules/@mui/material/Hidden/withWidth.js
init_extends();
init_objectWithoutPropertiesLoose();
var React44 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());
init_getDisplayName();
init_useThemeProps();
init_useTheme();
init_useEnhancedEffect2();

// node_modules/@mui/material/useMediaQuery/index.js
init_useMediaQuery();

// node_modules/@mui/material/Hidden/withWidth.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var _excluded38 = ["initialWidth", "width"];
var breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
var isWidthUp = (breakpoint, width, inclusive = true) => {
  if (inclusive) {
    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);
  }
  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);
};
var isWidthDown = (breakpoint, width, inclusive = false) => {
  if (inclusive) {
    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);
  }
  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);
};
var withWidth = (options = {}) => (Component2) => {
  const {
    withTheme: withThemeOption = false,
    noSSR = false,
    initialWidth: initialWidthOption
  } = options;
  function WithWidth(props) {
    const contextTheme = useTheme();
    const theme = props.theme || contextTheme;
    const _getThemeProps = getThemeProps({
      theme,
      name: "MuiWithWidth",
      props
    }), {
      initialWidth,
      width
    } = _getThemeProps, other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded38);
    const [mountedState, setMountedState] = React44.useState(false);
    useEnhancedEffect_default2(() => {
      setMountedState(true);
    }, []);
    const keys2 = theme.breakpoints.keys.slice().reverse();
    const widthComputed = keys2.reduce((output, key) => {
      const matches = useMediaQuery(theme.breakpoints.up(key));
      return !output && matches ? key : output;
    }, null);
    const more = _extends({
      width: width || (mountedState || noSSR ? widthComputed : void 0) || initialWidth || initialWidthOption
    }, withThemeOption ? {
      theme
    } : {}, other);
    if (more.width === void 0) {
      return null;
    }
    return (0, import_jsx_runtime52.jsx)(Component2, _extends({}, more));
  }
  true ? WithWidth.propTypes = {
    initialWidth: import_prop_types39.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
    theme: import_prop_types39.default.object,
    width: import_prop_types39.default.oneOf(["xs", "sm", "md", "lg", "xl"])
  } : void 0;
  if (true) {
    WithWidth.displayName = `WithWidth(${getDisplayName(Component2)})`;
  }
  return WithWidth;
};
var withWidth_default = withWidth;

// node_modules/@mui/material/Hidden/HiddenJs.js
init_useTheme();
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
"use client";
function HiddenJs(props) {
  const {
    children,
    only,
    width
  } = props;
  const theme = useTheme();
  let visible = true;
  if (only) {
    if (Array.isArray(only)) {
      for (let i = 0; i < only.length; i += 1) {
        const breakpoint = only[i];
        if (width === breakpoint) {
          visible = false;
          break;
        }
      }
    } else if (only && width === only) {
      visible = false;
    }
  }
  if (visible) {
    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
      const breakpoint = theme.breakpoints.keys[i];
      const breakpointUp = props[`${breakpoint}Up`];
      const breakpointDown = props[`${breakpoint}Down`];
      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {
        visible = false;
        break;
      }
    }
  }
  if (!visible) {
    return null;
  }
  return (0, import_jsx_runtime53.jsx)(React45.Fragment, {
    children
  });
}
true ? HiddenJs.propTypes = {
  children: import_prop_types40.default.node,
  lgDown: import_prop_types40.default.bool,
  lgUp: import_prop_types40.default.bool,
  mdDown: import_prop_types40.default.bool,
  mdUp: import_prop_types40.default.bool,
  only: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types40.default.arrayOf(import_prop_types40.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  smDown: import_prop_types40.default.bool,
  smUp: import_prop_types40.default.bool,
  width: import_prop_types40.default.string.isRequired,
  xlDown: import_prop_types40.default.bool,
  xlUp: import_prop_types40.default.bool,
  xsDown: import_prop_types40.default.bool,
  xsUp: import_prop_types40.default.bool
} : void 0;
if (true) {
  true ? HiddenJs.propTypes = exactProp(HiddenJs.propTypes) : void 0;
}
var HiddenJs_default = withWidth_default()(HiddenJs);

// node_modules/@mui/material/Hidden/HiddenCss.js
init_objectWithoutPropertiesLoose();
init_extends();
var React46 = __toESM(require_react());
init_clsx();
var import_prop_types41 = __toESM(require_prop_types());
init_composeClasses();
init_capitalize();
init_styled();
init_useTheme();

// node_modules/@mui/material/Hidden/hiddenCssClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getHiddenCssUtilityClass(slot) {
  return generateUtilityClass("PrivateHiddenCss", slot);
}
var hiddenCssClasses = generateUtilityClasses("PrivateHiddenCss", ["root", "xlDown", "xlUp", "onlyXl", "lgDown", "lgUp", "onlyLg", "mdDown", "mdUp", "onlyMd", "smDown", "smUp", "onlySm", "xsDown", "xsUp", "onlyXs"]);

// node_modules/@mui/material/Hidden/HiddenCss.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
"use client";
var _excluded39 = ["children", "className", "only"];
var useUtilityClasses32 = (ownerState) => {
  const {
    classes: classes2,
    breakpoints
  } = ownerState;
  const slots = {
    root: ["root", ...breakpoints.map(({
      breakpoint,
      dir
    }) => {
      return dir === "only" ? `${dir}${capitalize_default(breakpoint)}` : `${breakpoint}${capitalize_default(dir)}`;
    })]
  };
  return composeClasses(slots, getHiddenCssUtilityClass, classes2);
};
var HiddenCssRoot = styled_default("div", {
  name: "PrivateHiddenCss",
  slot: "Root"
})(({
  theme,
  ownerState
}) => {
  const hidden = {
    display: "none"
  };
  return _extends({}, ownerState.breakpoints.map(({
    breakpoint,
    dir
  }) => {
    if (dir === "only") {
      return {
        [theme.breakpoints.only(breakpoint)]: hidden
      };
    }
    return dir === "up" ? {
      [theme.breakpoints.up(breakpoint)]: hidden
    } : {
      [theme.breakpoints.down(breakpoint)]: hidden
    };
  }).reduce((r2, o) => {
    Object.keys(o).forEach((k) => {
      r2[k] = o[k];
    });
    return r2;
  }, {}));
});
function HiddenCss(props) {
  const {
    children,
    className,
    only
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const theme = useTheme();
  if (true) {
    const unknownProps = Object.keys(other).filter((propName) => {
      const isUndeclaredBreakpoint = !theme.breakpoints.keys.some((breakpoint) => {
        return `${breakpoint}Up` === propName || `${breakpoint}Down` === propName;
      });
      return !["classes", "theme", "isRtl", "sx"].includes(propName) && isUndeclaredBreakpoint;
    });
    if (unknownProps.length > 0) {
      console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${unknownProps.join(", ")}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
    }
  }
  const breakpoints = [];
  for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
    const breakpoint = theme.breakpoints.keys[i];
    const breakpointUp = other[`${breakpoint}Up`];
    const breakpointDown = other[`${breakpoint}Down`];
    if (breakpointUp) {
      breakpoints.push({
        breakpoint,
        dir: "up"
      });
    }
    if (breakpointDown) {
      breakpoints.push({
        breakpoint,
        dir: "down"
      });
    }
  }
  if (only) {
    const onlyBreakpoints = Array.isArray(only) ? only : [only];
    onlyBreakpoints.forEach((breakpoint) => {
      breakpoints.push({
        breakpoint,
        dir: "only"
      });
    });
  }
  const ownerState = _extends({}, props, {
    breakpoints
  });
  const classes2 = useUtilityClasses32(ownerState);
  return (0, import_jsx_runtime54.jsx)(HiddenCssRoot, {
    className: clsx_default(classes2.root, className),
    ownerState,
    children
  });
}
true ? HiddenCss.propTypes = {
  children: import_prop_types41.default.node,
  className: import_prop_types41.default.string,
  implementation: import_prop_types41.default.oneOf(["js", "css"]),
  lgDown: import_prop_types41.default.bool,
  lgUp: import_prop_types41.default.bool,
  mdDown: import_prop_types41.default.bool,
  mdUp: import_prop_types41.default.bool,
  only: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types41.default.arrayOf(import_prop_types41.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  smDown: import_prop_types41.default.bool,
  smUp: import_prop_types41.default.bool,
  xlDown: import_prop_types41.default.bool,
  xlUp: import_prop_types41.default.bool,
  xsDown: import_prop_types41.default.bool,
  xsUp: import_prop_types41.default.bool
} : void 0;
var HiddenCss_default = HiddenCss;

// node_modules/@mui/material/Hidden/Hidden.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
"use client";
var _excluded40 = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];
function Hidden(props) {
  const {
    implementation = "js",
    lgDown = false,
    lgUp = false,
    mdDown = false,
    mdUp = false,
    smDown = false,
    smUp = false,
    xlDown = false,
    xlUp = false,
    xsDown = false,
    xsUp = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  if (implementation === "js") {
    return (0, import_jsx_runtime55.jsx)(HiddenJs_default, _extends({
      lgDown,
      lgUp,
      mdDown,
      mdUp,
      smDown,
      smUp,
      xlDown,
      xlUp,
      xsDown,
      xsUp
    }, other));
  }
  return (0, import_jsx_runtime55.jsx)(HiddenCss_default, _extends({
    lgDown,
    lgUp,
    mdDown,
    mdUp,
    smDown,
    smUp,
    xlDown,
    xlUp,
    xsDown,
    xsUp
  }, other));
}
true ? Hidden.propTypes = {
  children: import_prop_types42.default.node,
  implementation: import_prop_types42.default.oneOf(["css", "js"]),
  initialWidth: import_prop_types42.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
  lgDown: import_prop_types42.default.bool,
  lgUp: import_prop_types42.default.bool,
  mdDown: import_prop_types42.default.bool,
  mdUp: import_prop_types42.default.bool,
  only: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types42.default.arrayOf(import_prop_types42.default.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired)]),
  smDown: import_prop_types42.default.bool,
  smUp: import_prop_types42.default.bool,
  xlDown: import_prop_types42.default.bool,
  xlUp: import_prop_types42.default.bool,
  xsDown: import_prop_types42.default.bool,
  xsUp: import_prop_types42.default.bool
} : void 0;

// node_modules/@mui/material/Hidden/index.js
"use client";

// node_modules/@mui/material/Icon/Icon.js
init_extends();
init_objectWithoutPropertiesLoose();
var React48 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_capitalize();

// node_modules/@mui/material/Icon/iconClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getIconUtilityClass(slot) {
  return generateUtilityClass("MuiIcon", slot);
}
var iconClasses = generateUtilityClasses("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

// node_modules/@mui/material/Icon/Icon.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
"use client";
var _excluded41 = ["baseClassName", "className", "color", "component", "fontSize"];
var useUtilityClasses33 = (ownerState) => {
  const {
    color,
    fontSize,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", color !== "inherit" && `color${capitalize_default(color)}`, `fontSize${capitalize_default(fontSize)}`]
  };
  return composeClasses(slots, getIconUtilityClass, classes2);
};
var IconRoot = styled_default("span", {
  name: "MuiIcon",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.color !== "inherit" && styles5[`color${capitalize_default(ownerState.color)}`], styles5[`fontSize${capitalize_default(ownerState.fontSize)}`]];
  }
})(({
  theme,
  ownerState
}) => ({
  userSelect: "none",
  width: "1em",
  height: "1em",
  overflow: "hidden",
  display: "inline-block",
  textAlign: "center",
  flexShrink: 0,
  fontSize: {
    inherit: "inherit",
    small: theme.typography.pxToRem(20),
    medium: theme.typography.pxToRem(24),
    large: theme.typography.pxToRem(36)
  }[ownerState.fontSize],
  color: {
    primary: (theme.vars || theme).palette.primary.main,
    secondary: (theme.vars || theme).palette.secondary.main,
    info: (theme.vars || theme).palette.info.main,
    success: (theme.vars || theme).palette.success.main,
    warning: (theme.vars || theme).palette.warning.main,
    action: (theme.vars || theme).palette.action.active,
    error: (theme.vars || theme).palette.error.main,
    disabled: (theme.vars || theme).palette.action.disabled,
    inherit: void 0
  }[ownerState.color]
}));
var Icon = React48.forwardRef(function Icon2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiIcon"
  });
  const {
    baseClassName = "material-icons",
    className,
    color = "inherit",
    component: Component2 = "span",
    fontSize = "medium"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const ownerState = _extends({}, props, {
    baseClassName,
    color,
    component: Component2,
    fontSize
  });
  const classes2 = useUtilityClasses33(ownerState);
  return (0, import_jsx_runtime56.jsx)(IconRoot, _extends({
    as: Component2,
    className: clsx_default(
      baseClassName,
      "notranslate",
      classes2.root,
      className
    ),
    ownerState,
    "aria-hidden": true,
    ref
  }, other));
});
true ? Icon.propTypes = {
  baseClassName: import_prop_types43.default.string,
  children: import_prop_types43.default.node,
  classes: import_prop_types43.default.object,
  className: import_prop_types43.default.string,
  color: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types43.default.string]),
  component: import_prop_types43.default.elementType,
  fontSize: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types43.default.string]),
  sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object])
} : void 0;
Icon.muiName = "Icon";

// node_modules/@mui/material/Icon/index.js
"use client";

// node_modules/@mui/material/index.js
init_IconButton();
init_IconButton();

// node_modules/@mui/material/ImageList/ImageList.js
init_objectWithoutPropertiesLoose();
init_extends();
init_composeClasses();
init_integerPropType();
init_clsx();
var import_prop_types44 = __toESM(require_prop_types());
var React50 = __toESM(require_react());
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/ImageList/imageListClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getImageListUtilityClass(slot) {
  return generateUtilityClass("MuiImageList", slot);
}
var imageListClasses = generateUtilityClasses("MuiImageList", ["root", "masonry", "quilted", "standard", "woven"]);

// node_modules/@mui/material/ImageList/ImageListContext.js
var React49 = __toESM(require_react());
"use client";
var ImageListContext = React49.createContext({});
if (true) {
  ImageListContext.displayName = "ImageListContext";
}
var ImageListContext_default = ImageListContext;

// node_modules/@mui/material/ImageList/ImageList.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
"use client";
var _excluded42 = ["children", "className", "cols", "component", "rowHeight", "gap", "style", "variant"];
var useUtilityClasses34 = (ownerState) => {
  const {
    classes: classes2,
    variant
  } = ownerState;
  const slots = {
    root: ["root", variant]
  };
  return composeClasses(slots, getImageListUtilityClass, classes2);
};
var ImageListRoot = styled_default("ul", {
  name: "MuiImageList",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant]];
  }
})(({
  ownerState
}) => {
  return _extends({
    display: "grid",
    overflowY: "auto",
    listStyle: "none",
    padding: 0,
    WebkitOverflowScrolling: "touch"
  }, ownerState.variant === "masonry" && {
    display: "block"
  });
});
var ImageList = React50.forwardRef(function ImageList2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiImageList"
  });
  const {
    children,
    className,
    cols = 2,
    component = "ul",
    rowHeight = "auto",
    gap = 4,
    style: styleProp,
    variant = "standard"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
  const contextValue = React50.useMemo(() => ({
    rowHeight,
    gap,
    variant
  }), [rowHeight, gap, variant]);
  React50.useEffect(() => {
    if (true) {
      if (document !== void 0 && "objectFit" in document.documentElement.style === false) {
        console.error(["MUI: ImageList v5+ no longer natively supports Internet Explorer.", "Use v4 of this component instead, or polyfill CSS object-fit."].join("\n"));
      }
    }
  }, []);
  const style = variant === "masonry" ? _extends({
    columnCount: cols,
    columnGap: gap
  }, styleProp) : _extends({
    gridTemplateColumns: `repeat(${cols}, 1fr)`,
    gap
  }, styleProp);
  const ownerState = _extends({}, props, {
    component,
    gap,
    rowHeight,
    variant
  });
  const classes2 = useUtilityClasses34(ownerState);
  return (0, import_jsx_runtime57.jsx)(ImageListRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, classes2[variant], className),
    ref,
    style,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime57.jsx)(ImageListContext_default.Provider, {
      value: contextValue,
      children
    })
  }));
});
true ? ImageList.propTypes = {
  children: import_prop_types44.default.node.isRequired,
  classes: import_prop_types44.default.object,
  className: import_prop_types44.default.string,
  cols: integerPropType_default,
  component: import_prop_types44.default.elementType,
  gap: import_prop_types44.default.number,
  rowHeight: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["auto"]), import_prop_types44.default.number]),
  style: import_prop_types44.default.object,
  sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
  variant: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["masonry", "quilted", "standard", "woven"]), import_prop_types44.default.string])
} : void 0;

// node_modules/@mui/material/ImageList/index.js
"use client";

// node_modules/@mui/material/ImageListItem/ImageListItem.js
init_objectWithoutPropertiesLoose();
init_extends();
init_composeClasses();
init_integerPropType();
init_clsx();
var import_prop_types45 = __toESM(require_prop_types());
var React51 = __toESM(require_react());
var import_react_is5 = __toESM(require_react_is());
init_styled();
init_useThemeProps2();
init_isMuiElement();

// node_modules/@mui/material/ImageListItem/imageListItemClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getImageListItemUtilityClass(slot) {
  return generateUtilityClass("MuiImageListItem", slot);
}
var imageListItemClasses = generateUtilityClasses("MuiImageListItem", ["root", "img", "standard", "woven", "masonry", "quilted"]);
var imageListItemClasses_default = imageListItemClasses;

// node_modules/@mui/material/ImageListItem/ImageListItem.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
"use client";
var _excluded43 = ["children", "className", "cols", "component", "rows", "style"];
var useUtilityClasses35 = (ownerState) => {
  const {
    classes: classes2,
    variant
  } = ownerState;
  const slots = {
    root: ["root", variant],
    img: ["img"]
  };
  return composeClasses(slots, getImageListItemUtilityClass, classes2);
};
var ImageListItemRoot = styled_default("li", {
  name: "MuiImageListItem",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${imageListItemClasses_default.img}`]: styles5.img
    }, styles5.root, styles5[ownerState.variant]];
  }
})(({
  ownerState
}) => _extends({
  display: "block",
  position: "relative"
}, ownerState.variant === "standard" && {
  display: "flex",
  flexDirection: "column"
}, ownerState.variant === "woven" && {
  height: "100%",
  alignSelf: "center",
  "&:nth-of-type(even)": {
    height: "70%"
  }
}, {
  [`& .${imageListItemClasses_default.img}`]: _extends({
    objectFit: "cover",
    width: "100%",
    height: "100%",
    display: "block"
  }, ownerState.variant === "standard" && {
    height: "auto",
    flexGrow: 1
  })
}));
var ImageListItem = React51.forwardRef(function ImageListItem2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiImageListItem"
  });
  const {
    children,
    className,
    cols = 1,
    component = "li",
    rows = 1,
    style
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const {
    rowHeight = "auto",
    gap,
    variant
  } = React51.useContext(ImageListContext_default);
  let height = "auto";
  if (variant === "woven") {
    height = void 0;
  } else if (rowHeight !== "auto") {
    height = rowHeight * rows + gap * (rows - 1);
  }
  const ownerState = _extends({}, props, {
    cols,
    component,
    gap,
    rowHeight,
    rows,
    variant
  });
  const classes2 = useUtilityClasses35(ownerState);
  return (0, import_jsx_runtime58.jsx)(ImageListItemRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, classes2[variant], className),
    ref,
    style: _extends({
      height,
      gridColumnEnd: variant !== "masonry" ? `span ${cols}` : void 0,
      gridRowEnd: variant !== "masonry" ? `span ${rows}` : void 0,
      marginBottom: variant === "masonry" ? gap : void 0,
      breakInside: variant === "masonry" ? "avoid" : void 0
    }, style),
    ownerState
  }, other, {
    children: React51.Children.map(children, (child) => {
      if (!React51.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is5.isFragment)(child)) {
          console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (child.type === "img" || isMuiElement_default(child, ["Image"])) {
        return React51.cloneElement(child, {
          className: clsx_default(classes2.img, child.props.className)
        });
      }
      return child;
    })
  }));
});
true ? ImageListItem.propTypes = {
  children: import_prop_types45.default.node,
  classes: import_prop_types45.default.object,
  className: import_prop_types45.default.string,
  cols: integerPropType_default,
  component: import_prop_types45.default.elementType,
  rows: integerPropType_default,
  style: import_prop_types45.default.object,
  sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object])
} : void 0;

// node_modules/@mui/material/ImageListItem/index.js
"use client";

// node_modules/@mui/material/ImageListItemBar/ImageListItemBar.js
init_objectWithoutPropertiesLoose();
init_extends();
init_composeClasses();
init_clsx();
var import_prop_types46 = __toESM(require_prop_types());
var React52 = __toESM(require_react());
init_styled();
init_useThemeProps2();
init_capitalize();

// node_modules/@mui/material/ImageListItemBar/imageListItemBarClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getImageListItemBarUtilityClass(slot) {
  return generateUtilityClass("MuiImageListItemBar", slot);
}
var imageListItemBarClasses = generateUtilityClasses("MuiImageListItemBar", ["root", "positionBottom", "positionTop", "positionBelow", "titleWrap", "titleWrapBottom", "titleWrapTop", "titleWrapBelow", "titleWrapActionPosLeft", "titleWrapActionPosRight", "title", "subtitle", "actionIcon", "actionIconActionPosLeft", "actionIconActionPosRight"]);

// node_modules/@mui/material/ImageListItemBar/ImageListItemBar.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
"use client";
var _excluded44 = ["actionIcon", "actionPosition", "className", "subtitle", "title", "position"];
var useUtilityClasses36 = (ownerState) => {
  const {
    classes: classes2,
    position,
    actionIcon,
    actionPosition
  } = ownerState;
  const slots = {
    root: ["root", `position${capitalize_default(position)}`],
    titleWrap: ["titleWrap", `titleWrap${capitalize_default(position)}`, actionIcon && `titleWrapActionPos${capitalize_default(actionPosition)}`],
    title: ["title"],
    subtitle: ["subtitle"],
    actionIcon: ["actionIcon", `actionIconActionPos${capitalize_default(actionPosition)}`]
  };
  return composeClasses(slots, getImageListItemBarUtilityClass, classes2);
};
var ImageListItemBarRoot = styled_default("div", {
  name: "MuiImageListItemBar",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  return _extends({
    position: "absolute",
    left: 0,
    right: 0,
    background: "rgba(0, 0, 0, 0.5)",
    display: "flex",
    alignItems: "center",
    fontFamily: theme.typography.fontFamily
  }, ownerState.position === "bottom" && {
    bottom: 0
  }, ownerState.position === "top" && {
    top: 0
  }, ownerState.position === "below" && {
    position: "relative",
    background: "transparent",
    alignItems: "normal"
  });
});
var ImageListItemBarTitleWrap = styled_default("div", {
  name: "MuiImageListItemBar",
  slot: "TitleWrap",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.titleWrap, styles5[`titleWrap${capitalize_default(ownerState.position)}`], ownerState.actionIcon && styles5[`titleWrapActionPos${capitalize_default(ownerState.actionPosition)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  return _extends({
    flexGrow: 1,
    padding: "12px 16px",
    color: (theme.vars || theme).palette.common.white,
    overflow: "hidden"
  }, ownerState.position === "below" && {
    padding: "6px 0 12px",
    color: "inherit"
  }, ownerState.actionIcon && ownerState.actionPosition === "left" && {
    paddingLeft: 0
  }, ownerState.actionIcon && ownerState.actionPosition === "right" && {
    paddingRight: 0
  });
});
var ImageListItemBarTitle = styled_default("div", {
  name: "MuiImageListItemBar",
  slot: "Title",
  overridesResolver: (props, styles5) => styles5.title
})(({
  theme
}) => {
  return {
    fontSize: theme.typography.pxToRem(16),
    lineHeight: "24px",
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap"
  };
});
var ImageListItemBarSubtitle = styled_default("div", {
  name: "MuiImageListItemBar",
  slot: "Subtitle",
  overridesResolver: (props, styles5) => styles5.subtitle
})(({
  theme
}) => {
  return {
    fontSize: theme.typography.pxToRem(12),
    lineHeight: 1,
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap"
  };
});
var ImageListItemBarActionIcon = styled_default("div", {
  name: "MuiImageListItemBar",
  slot: "ActionIcon",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.actionIcon, styles5[`actionIconActionPos${capitalize_default(ownerState.actionPosition)}`]];
  }
})(({
  ownerState
}) => {
  return _extends({}, ownerState.actionPosition === "left" && {
    order: -1
  });
});
var ImageListItemBar = React52.forwardRef(function ImageListItemBar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiImageListItemBar"
  });
  const {
    actionIcon,
    actionPosition = "right",
    className,
    subtitle,
    title,
    position = "bottom"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const ownerState = _extends({}, props, {
    position,
    actionPosition
  });
  const classes2 = useUtilityClasses36(ownerState);
  return (0, import_jsx_runtime60.jsxs)(ImageListItemBarRoot, _extends({
    ownerState,
    className: clsx_default(classes2.root, className),
    ref
  }, other, {
    children: [(0, import_jsx_runtime60.jsxs)(ImageListItemBarTitleWrap, {
      ownerState,
      className: classes2.titleWrap,
      children: [(0, import_jsx_runtime59.jsx)(ImageListItemBarTitle, {
        className: classes2.title,
        children: title
      }), subtitle ? (0, import_jsx_runtime59.jsx)(ImageListItemBarSubtitle, {
        className: classes2.subtitle,
        children: subtitle
      }) : null]
    }), actionIcon ? (0, import_jsx_runtime59.jsx)(ImageListItemBarActionIcon, {
      ownerState,
      className: classes2.actionIcon,
      children: actionIcon
    }) : null]
  }));
});
true ? ImageListItemBar.propTypes = {
  actionIcon: import_prop_types46.default.node,
  actionPosition: import_prop_types46.default.oneOf(["left", "right"]),
  children: import_prop_types46.default.node,
  classes: import_prop_types46.default.object,
  className: import_prop_types46.default.string,
  position: import_prop_types46.default.oneOf(["below", "bottom", "top"]),
  subtitle: import_prop_types46.default.node,
  sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object]),
  title: import_prop_types46.default.node
} : void 0;

// node_modules/@mui/material/ImageListItemBar/index.js
"use client";

// node_modules/@mui/material/index.js
init_Input();
init_Input();

// node_modules/@mui/material/InputAdornment/InputAdornment.js
init_objectWithoutPropertiesLoose();
init_extends();
var React53 = __toESM(require_react());
var import_prop_types47 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_capitalize();
init_Typography();
init_FormControlContext();
init_useFormControl();
init_styled();

// node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getInputAdornmentUtilityClass(slot) {
  return generateUtilityClass("MuiInputAdornment", slot);
}
var inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
var inputAdornmentClasses_default = inputAdornmentClasses;

// node_modules/@mui/material/InputAdornment/InputAdornment.js
init_useThemeProps2();
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
"use client";
var _span;
var _excluded45 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
var overridesResolver3 = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`], ownerState.disablePointerEvents === true && styles5.disablePointerEvents, styles5[ownerState.variant]];
};
var useUtilityClasses37 = (ownerState) => {
  const {
    classes: classes2,
    disablePointerEvents,
    hiddenLabel,
    position,
    size,
    variant
  } = ownerState;
  const slots = {
    root: ["root", disablePointerEvents && "disablePointerEvents", position && `position${capitalize_default(position)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize_default(size)}`]
  };
  return composeClasses(slots, getInputAdornmentUtilityClass, classes2);
};
var InputAdornmentRoot = styled_default("div", {
  name: "MuiInputAdornment",
  slot: "Root",
  overridesResolver: overridesResolver3
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  height: "0.01em",
  maxHeight: "2em",
  alignItems: "center",
  whiteSpace: "nowrap",
  color: (theme.vars || theme).palette.action.active
}, ownerState.variant === "filled" && {
  [`&.${inputAdornmentClasses_default.positionStart}&:not(.${inputAdornmentClasses_default.hiddenLabel})`]: {
    marginTop: 16
  }
}, ownerState.position === "start" && {
  marginRight: 8
}, ownerState.position === "end" && {
  marginLeft: 8
}, ownerState.disablePointerEvents === true && {
  pointerEvents: "none"
}));
var InputAdornment = React53.forwardRef(function InputAdornment2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiInputAdornment"
  });
  const {
    children,
    className,
    component = "div",
    disablePointerEvents = false,
    disableTypography = false,
    position,
    variant: variantProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const muiFormControl = useFormControl() || {};
  let variant = variantProp;
  if (variantProp && muiFormControl.variant) {
    if (true) {
      if (variantProp === muiFormControl.variant) {
        console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
      }
    }
  }
  if (muiFormControl && !variant) {
    variant = muiFormControl.variant;
  }
  const ownerState = _extends({}, props, {
    hiddenLabel: muiFormControl.hiddenLabel,
    size: muiFormControl.size,
    disablePointerEvents,
    position,
    variant
  });
  const classes2 = useUtilityClasses37(ownerState);
  return (0, import_jsx_runtime61.jsx)(FormControlContext_default.Provider, {
    value: null,
    children: (0, import_jsx_runtime61.jsx)(InputAdornmentRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: typeof children === "string" && !disableTypography ? (0, import_jsx_runtime61.jsx)(Typography_default, {
        color: "text.secondary",
        children
      }) : (0, import_jsx_runtime62.jsxs)(React53.Fragment, {
        children: [position === "start" ? _span || (_span = (0, import_jsx_runtime61.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        })) : null, children]
      })
    }))
  });
});
true ? InputAdornment.propTypes = {
  children: import_prop_types47.default.node,
  classes: import_prop_types47.default.object,
  className: import_prop_types47.default.string,
  component: import_prop_types47.default.elementType,
  disablePointerEvents: import_prop_types47.default.bool,
  disableTypography: import_prop_types47.default.bool,
  position: import_prop_types47.default.oneOf(["end", "start"]).isRequired,
  sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object]),
  variant: import_prop_types47.default.oneOf(["filled", "outlined", "standard"])
} : void 0;
var InputAdornment_default = InputAdornment;

// node_modules/@mui/material/InputAdornment/index.js
"use client";

// node_modules/@mui/material/index.js
init_InputBase();
init_InputBase();
init_InputLabel();
init_InputLabel();

// node_modules/@mui/material/LinearProgress/LinearProgress.js
init_objectWithoutPropertiesLoose();
init_extends();
var React54 = __toESM(require_react());
var import_prop_types48 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_esm();
var import_colorManipulator4 = __toESM(require_colorManipulator());
init_capitalize();
init_useTheme();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/LinearProgress/linearProgressClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getLinearProgressUtilityClass(slot) {
  return generateUtilityClass("MuiLinearProgress", slot);
}
var linearProgressClasses = generateUtilityClasses("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]);

// node_modules/@mui/material/LinearProgress/LinearProgress.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
"use client";
var _excluded46 = ["className", "color", "value", "valueBuffer", "variant"];
var _2 = (t) => t;
var _t5;
var _t22;
var _t32;
var _t42;
var _t52;
var _t6;
var TRANSITION_DURATION = 4;
var indeterminate1Keyframe = keyframes(_t5 || (_t5 = _2`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`));
var indeterminate2Keyframe = keyframes(_t22 || (_t22 = _2`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`));
var bufferKeyframe = keyframes(_t32 || (_t32 = _2`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`));
var useUtilityClasses38 = (ownerState) => {
  const {
    classes: classes2,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", `color${capitalize_default(color)}`, variant],
    dashed: ["dashed", `dashedColor${capitalize_default(color)}`],
    bar1: ["bar", `barColor${capitalize_default(color)}`, (variant === "indeterminate" || variant === "query") && "bar1Indeterminate", variant === "determinate" && "bar1Determinate", variant === "buffer" && "bar1Buffer"],
    bar2: ["bar", variant !== "buffer" && `barColor${capitalize_default(color)}`, variant === "buffer" && `color${capitalize_default(color)}`, (variant === "indeterminate" || variant === "query") && "bar2Indeterminate", variant === "buffer" && "bar2Buffer"]
  };
  return composeClasses(slots, getLinearProgressUtilityClass, classes2);
};
var getColorShade = (theme, color) => {
  if (color === "inherit") {
    return "currentColor";
  }
  if (theme.vars) {
    return theme.vars.palette.LinearProgress[`${color}Bg`];
  }
  return theme.palette.mode === "light" ? (0, import_colorManipulator4.lighten)(theme.palette[color].main, 0.62) : (0, import_colorManipulator4.darken)(theme.palette[color].main, 0.5);
};
var LinearProgressRoot = styled_default("span", {
  name: "MuiLinearProgress",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`color${capitalize_default(ownerState.color)}`], styles5[ownerState.variant]];
  }
})(({
  ownerState,
  theme
}) => _extends({
  position: "relative",
  overflow: "hidden",
  display: "block",
  height: 4,
  zIndex: 0,
  "@media print": {
    colorAdjust: "exact"
  },
  backgroundColor: getColorShade(theme, ownerState.color)
}, ownerState.color === "inherit" && ownerState.variant !== "buffer" && {
  backgroundColor: "none",
  "&::before": {
    content: '""',
    position: "absolute",
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "currentColor",
    opacity: 0.3
  }
}, ownerState.variant === "buffer" && {
  backgroundColor: "transparent"
}, ownerState.variant === "query" && {
  transform: "rotate(180deg)"
}));
var LinearProgressDashed = styled_default("span", {
  name: "MuiLinearProgress",
  slot: "Dashed",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.dashed, styles5[`dashedColor${capitalize_default(ownerState.color)}`]];
  }
})(({
  ownerState,
  theme
}) => {
  const backgroundColor = getColorShade(theme, ownerState.color);
  return _extends({
    position: "absolute",
    marginTop: 0,
    height: "100%",
    width: "100%"
  }, ownerState.color === "inherit" && {
    opacity: 0.3
  }, {
    backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,
    backgroundSize: "10px 10px",
    backgroundPosition: "0 -23px"
  });
}, css(_t42 || (_t42 = _2`
    animation: ${0} 3s infinite linear;
  `), bufferKeyframe));
var LinearProgressBar1 = styled_default("span", {
  name: "MuiLinearProgress",
  slot: "Bar1",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.bar, styles5[`barColor${capitalize_default(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles5.bar1Indeterminate, ownerState.variant === "determinate" && styles5.bar1Determinate, ownerState.variant === "buffer" && styles5.bar1Buffer];
  }
})(({
  ownerState,
  theme
}) => _extends({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left",
  backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
}, ownerState.variant === "determinate" && {
  transition: `transform .${TRANSITION_DURATION}s linear`
}, ownerState.variant === "buffer" && {
  zIndex: 1,
  transition: `transform .${TRANSITION_DURATION}s linear`
}), ({
  ownerState
}) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && css(_t52 || (_t52 = _2`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), indeterminate1Keyframe));
var LinearProgressBar2 = styled_default("span", {
  name: "MuiLinearProgress",
  slot: "Bar2",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.bar, styles5[`barColor${capitalize_default(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles5.bar2Indeterminate, ownerState.variant === "buffer" && styles5.bar2Buffer];
  }
})(({
  ownerState,
  theme
}) => _extends({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left"
}, ownerState.variant !== "buffer" && {
  backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
}, ownerState.color === "inherit" && {
  opacity: 0.3
}, ownerState.variant === "buffer" && {
  backgroundColor: getColorShade(theme, ownerState.color),
  transition: `transform .${TRANSITION_DURATION}s linear`
}), ({
  ownerState
}) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && css(_t6 || (_t6 = _2`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), indeterminate2Keyframe));
var LinearProgress = React54.forwardRef(function LinearProgress2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiLinearProgress"
  });
  const {
    className,
    color = "primary",
    value,
    valueBuffer,
    variant = "indeterminate"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
  const ownerState = _extends({}, props, {
    color,
    variant
  });
  const classes2 = useUtilityClasses38(ownerState);
  const theme = useTheme();
  const rootProps = {};
  const inlineStyles = {
    bar1: {},
    bar2: {}
  };
  if (variant === "determinate" || variant === "buffer") {
    if (value !== void 0) {
      rootProps["aria-valuenow"] = Math.round(value);
      rootProps["aria-valuemin"] = 0;
      rootProps["aria-valuemax"] = 100;
      let transform = value - 100;
      if (theme.direction === "rtl") {
        transform = -transform;
      }
      inlineStyles.bar1.transform = `translateX(${transform}%)`;
    } else if (true) {
      console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
    }
  }
  if (variant === "buffer") {
    if (valueBuffer !== void 0) {
      let transform = (valueBuffer || 0) - 100;
      if (theme.direction === "rtl") {
        transform = -transform;
      }
      inlineStyles.bar2.transform = `translateX(${transform}%)`;
    } else if (true) {
      console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
    }
  }
  return (0, import_jsx_runtime64.jsxs)(LinearProgressRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    role: "progressbar"
  }, rootProps, {
    ref
  }, other, {
    children: [variant === "buffer" ? (0, import_jsx_runtime63.jsx)(LinearProgressDashed, {
      className: classes2.dashed,
      ownerState
    }) : null, (0, import_jsx_runtime63.jsx)(LinearProgressBar1, {
      className: classes2.bar1,
      ownerState,
      style: inlineStyles.bar1
    }), variant === "determinate" ? null : (0, import_jsx_runtime63.jsx)(LinearProgressBar2, {
      className: classes2.bar2,
      ownerState,
      style: inlineStyles.bar2
    })]
  }));
});
true ? LinearProgress.propTypes = {
  classes: import_prop_types48.default.object,
  className: import_prop_types48.default.string,
  color: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["inherit", "primary", "secondary"]), import_prop_types48.default.string]),
  sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
  value: import_prop_types48.default.number,
  valueBuffer: import_prop_types48.default.number,
  variant: import_prop_types48.default.oneOf(["buffer", "determinate", "indeterminate", "query"])
} : void 0;
var LinearProgress_default = LinearProgress;

// node_modules/@mui/material/LinearProgress/index.js
"use client";

// node_modules/@mui/material/Link/Link.js
init_objectWithoutPropertiesLoose();
init_extends();
var React55 = __toESM(require_react());
var import_prop_types49 = __toESM(require_prop_types());
init_clsx();
init_elementTypeAcceptingRef();
init_composeClasses();
init_capitalize();
init_styled();
init_useThemeProps2();
init_useIsFocusVisible();
init_useForkRef2();
init_Typography();

// node_modules/@mui/material/Link/linkClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getLinkUtilityClass(slot) {
  return generateUtilityClass("MuiLink", slot);
}
var linkClasses = generateUtilityClasses("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
var linkClasses_default = linkClasses;

// node_modules/@mui/material/Link/getTextDecoration.js
init_esm();
var import_colorManipulator5 = __toESM(require_colorManipulator());
var colorTransformations = {
  primary: "primary.main",
  textPrimary: "text.primary",
  secondary: "secondary.main",
  textSecondary: "text.secondary",
  error: "error.main"
};
var transformDeprecatedColors = (color) => {
  return colorTransformations[color] || color;
};
var getTextDecoration = ({
  theme,
  ownerState
}) => {
  const transformedColor = transformDeprecatedColors(ownerState.color);
  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;
  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);
  if ("vars" in theme && channelColor) {
    return `rgba(${channelColor} / 0.4)`;
  }
  return (0, import_colorManipulator5.alpha)(color, 0.4);
};
var getTextDecoration_default = getTextDecoration;

// node_modules/@mui/material/Link/Link.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
"use client";
var _excluded47 = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];
var useUtilityClasses39 = (ownerState) => {
  const {
    classes: classes2,
    component,
    focusVisible,
    underline
  } = ownerState;
  const slots = {
    root: ["root", `underline${capitalize_default(underline)}`, component === "button" && "button", focusVisible && "focusVisible"]
  };
  return composeClasses(slots, getLinkUtilityClass, classes2);
};
var LinkRoot = styled_default(Typography_default, {
  name: "MuiLink",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`underline${capitalize_default(ownerState.underline)}`], ownerState.component === "button" && styles5.button];
  }
})(({
  theme,
  ownerState
}) => {
  return _extends({}, ownerState.underline === "none" && {
    textDecoration: "none"
  }, ownerState.underline === "hover" && {
    textDecoration: "none",
    "&:hover": {
      textDecoration: "underline"
    }
  }, ownerState.underline === "always" && _extends({
    textDecoration: "underline"
  }, ownerState.color !== "inherit" && {
    textDecorationColor: getTextDecoration_default({
      theme,
      ownerState
    })
  }, {
    "&:hover": {
      textDecorationColor: "inherit"
    }
  }), ownerState.component === "button" && {
    position: "relative",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    outline: 0,
    border: 0,
    margin: 0,
    borderRadius: 0,
    padding: 0,
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    WebkitAppearance: "none",
    "&::-moz-focus-inner": {
      borderStyle: "none"
    },
    [`&.${linkClasses_default.focusVisible}`]: {
      outline: "auto"
    }
  });
});
var Link = React55.forwardRef(function Link2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiLink"
  });
  const {
    className,
    color = "primary",
    component = "a",
    onBlur,
    onFocus,
    TypographyClasses,
    underline = "always",
    variant = "inherit",
    sx
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible_default();
  const [focusVisible, setFocusVisible] = React55.useState(false);
  const handlerRef = useForkRef_default(ref, focusVisibleRef);
  const handleBlur = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  const handleFocus = (event) => {
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  const ownerState = _extends({}, props, {
    color,
    component,
    focusVisible,
    underline,
    variant
  });
  const classes2 = useUtilityClasses39(ownerState);
  return (0, import_jsx_runtime65.jsx)(LinkRoot, _extends({
    color,
    className: clsx_default(classes2.root, className),
    classes: TypographyClasses,
    component,
    onBlur: handleBlur,
    onFocus: handleFocus,
    ref: handlerRef,
    ownerState,
    variant,
    sx: [...!Object.keys(colorTransformations).includes(color) ? [{
      color
    }] : [], ...Array.isArray(sx) ? sx : [sx]]
  }, other));
});
true ? Link.propTypes = {
  children: import_prop_types49.default.node,
  classes: import_prop_types49.default.object,
  className: import_prop_types49.default.string,
  color: import_prop_types49.default.any,
  component: elementTypeAcceptingRef_default,
  onBlur: import_prop_types49.default.func,
  onFocus: import_prop_types49.default.func,
  sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
  TypographyClasses: import_prop_types49.default.object,
  underline: import_prop_types49.default.oneOf(["always", "hover", "none"]),
  variant: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types49.default.string])
} : void 0;

// node_modules/@mui/material/Link/index.js
"use client";

// node_modules/@mui/material/index.js
init_List();
init_List();

// node_modules/@mui/material/ListItem/ListItem.js
init_objectWithoutPropertiesLoose();
init_extends();
var React58 = __toESM(require_react());
var import_prop_types52 = __toESM(require_prop_types());
init_clsx();
init_utils4();
init_composeClasses();
init_elementTypeAcceptingRef();
init_chainPropTypes();
var import_colorManipulator7 = __toESM(require_colorManipulator());
init_styled();
init_useThemeProps2();
init_ButtonBase();
init_isMuiElement();
init_useEnhancedEffect2();
init_useForkRef2();
init_ListContext();

// node_modules/@mui/material/ListItem/listItemClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getListItemUtilityClass(slot) {
  return generateUtilityClass("MuiListItem", slot);
}
var listItemClasses = generateUtilityClasses("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
var listItemClasses_default = listItemClasses;

// node_modules/@mui/material/ListItemButton/ListItemButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React56 = __toESM(require_react());
var import_prop_types50 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
var import_colorManipulator6 = __toESM(require_colorManipulator());
init_styled();
init_useThemeProps2();
init_ButtonBase();
init_useEnhancedEffect2();
init_useForkRef2();
init_ListContext();

// node_modules/@mui/material/ListItemButton/listItemButtonClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getListItemButtonUtilityClass(slot) {
  return generateUtilityClass("MuiListItemButton", slot);
}
var listItemButtonClasses = generateUtilityClasses("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
var listItemButtonClasses_default = listItemButtonClasses;

// node_modules/@mui/material/ListItemButton/ListItemButton.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
"use client";
var _excluded48 = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
var overridesResolver4 = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [styles5.root, ownerState.dense && styles5.dense, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters];
};
var useUtilityClasses40 = (ownerState) => {
  const {
    alignItems,
    classes: classes2,
    dense,
    disabled,
    disableGutters,
    divider,
    selected
  } = ownerState;
  const slots = {
    root: ["root", dense && "dense", !disableGutters && "gutters", divider && "divider", disabled && "disabled", alignItems === "flex-start" && "alignItemsFlexStart", selected && "selected"]
  };
  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes2);
  return _extends({}, classes2, composedClasses);
};
var ListItemButtonRoot = styled_default(ButtonBase_default, {
  shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
  name: "MuiListItemButton",
  slot: "Root",
  overridesResolver: overridesResolver4
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  flexGrow: 1,
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minWidth: 0,
  boxSizing: "border-box",
  textAlign: "left",
  paddingTop: 8,
  paddingBottom: 8,
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (theme.vars || theme).palette.action.hover,
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${listItemButtonClasses_default.selected}`]: {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
    [`&.${listItemButtonClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    }
  },
  [`&.${listItemButtonClasses_default.selected}:hover`]: {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
    }
  },
  [`&.${listItemButtonClasses_default.focusVisible}`]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  [`&.${listItemButtonClasses_default.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  }
}, ownerState.divider && {
  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
  backgroundClip: "padding-box"
}, ownerState.alignItems === "flex-start" && {
  alignItems: "flex-start"
}, !ownerState.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, ownerState.dense && {
  paddingTop: 4,
  paddingBottom: 4
}));
var ListItemButton = React56.forwardRef(function ListItemButton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiListItemButton"
  });
  const {
    alignItems = "center",
    autoFocus = false,
    component = "div",
    children,
    dense = false,
    disableGutters = false,
    divider = false,
    focusVisibleClassName,
    selected = false,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
  const context = React56.useContext(ListContext_default);
  const childContext = React56.useMemo(() => ({
    dense: dense || context.dense || false,
    alignItems,
    disableGutters
  }), [alignItems, context.dense, dense, disableGutters]);
  const listItemRef = React56.useRef(null);
  useEnhancedEffect_default2(() => {
    if (autoFocus) {
      if (listItemRef.current) {
        listItemRef.current.focus();
      } else if (true) {
        console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered.");
      }
    }
  }, [autoFocus]);
  const ownerState = _extends({}, props, {
    alignItems,
    dense: childContext.dense,
    disableGutters,
    divider,
    selected
  });
  const classes2 = useUtilityClasses40(ownerState);
  const handleRef = useForkRef_default(listItemRef, ref);
  return (0, import_jsx_runtime66.jsx)(ListContext_default.Provider, {
    value: childContext,
    children: (0, import_jsx_runtime66.jsx)(ListItemButtonRoot, _extends({
      ref: handleRef,
      href: other.href || other.to,
      component: (other.href || other.to) && component === "div" ? "button" : component,
      focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
      ownerState,
      className: clsx_default(classes2.root, className)
    }, other, {
      classes: classes2,
      children
    }))
  });
});
true ? ListItemButton.propTypes = {
  alignItems: import_prop_types50.default.oneOf(["center", "flex-start"]),
  autoFocus: import_prop_types50.default.bool,
  children: import_prop_types50.default.node,
  classes: import_prop_types50.default.object,
  className: import_prop_types50.default.string,
  component: import_prop_types50.default.elementType,
  dense: import_prop_types50.default.bool,
  disabled: import_prop_types50.default.bool,
  disableGutters: import_prop_types50.default.bool,
  divider: import_prop_types50.default.bool,
  focusVisibleClassName: import_prop_types50.default.string,
  href: import_prop_types50.default.string,
  selected: import_prop_types50.default.bool,
  sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object])
} : void 0;

// node_modules/@mui/material/ListItemButton/index.js
"use client";

// node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
init_objectWithoutPropertiesLoose();
init_extends();
var React57 = __toESM(require_react());
var import_prop_types51 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_ListContext();

// node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getListItemSecondaryActionClassesUtilityClass(slot) {
  return generateUtilityClass("MuiListItemSecondaryAction", slot);
}
var listItemSecondaryActionClasses = generateUtilityClasses("MuiListItemSecondaryAction", ["root", "disableGutters"]);

// node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
"use client";
var _excluded49 = ["className"];
var useUtilityClasses41 = (ownerState) => {
  const {
    disableGutters,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", disableGutters && "disableGutters"]
  };
  return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes2);
};
var ListItemSecondaryActionRoot = styled_default("div", {
  name: "MuiListItemSecondaryAction",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.disableGutters && styles5.disableGutters];
  }
})(({
  ownerState
}) => _extends({
  position: "absolute",
  right: 16,
  top: "50%",
  transform: "translateY(-50%)"
}, ownerState.disableGutters && {
  right: 0
}));
var ListItemSecondaryAction = React57.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiListItemSecondaryAction"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
  const context = React57.useContext(ListContext_default);
  const ownerState = _extends({}, props, {
    disableGutters: context.disableGutters
  });
  const classes2 = useUtilityClasses41(ownerState);
  return (0, import_jsx_runtime67.jsx)(ListItemSecondaryActionRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other));
});
true ? ListItemSecondaryAction.propTypes = {
  children: import_prop_types51.default.node,
  classes: import_prop_types51.default.object,
  className: import_prop_types51.default.string,
  sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object])
} : void 0;
ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
var ListItemSecondaryAction_default = ListItemSecondaryAction;

// node_modules/@mui/material/ListItemSecondaryAction/index.js
"use client";

// node_modules/@mui/material/ListItem/ListItem.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
"use client";
var _excluded50 = ["className"];
var _excluded211 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
var overridesResolver5 = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [styles5.root, ownerState.dense && styles5.dense, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters, !ownerState.disablePadding && styles5.padding, ownerState.button && styles5.button, ownerState.hasSecondaryAction && styles5.secondaryAction];
};
var useUtilityClasses42 = (ownerState) => {
  const {
    alignItems,
    button,
    classes: classes2,
    dense,
    disabled,
    disableGutters,
    disablePadding,
    divider,
    hasSecondaryAction,
    selected
  } = ownerState;
  const slots = {
    root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", disabled && "disabled", button && "button", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction", selected && "selected"],
    container: ["container"]
  };
  return composeClasses(slots, getListItemUtilityClass, classes2);
};
var ListItemRoot = styled_default("div", {
  name: "MuiListItem",
  slot: "Root",
  overridesResolver: overridesResolver5
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  width: "100%",
  boxSizing: "border-box",
  textAlign: "left"
}, !ownerState.disablePadding && _extends({
  paddingTop: 8,
  paddingBottom: 8
}, ownerState.dense && {
  paddingTop: 4,
  paddingBottom: 4
}, !ownerState.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, !!ownerState.secondaryAction && {
  paddingRight: 48
}), !!ownerState.secondaryAction && {
  [`& > .${listItemButtonClasses_default.root}`]: {
    paddingRight: 48
  }
}, {
  [`&.${listItemClasses_default.focusVisible}`]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  [`&.${listItemClasses_default.selected}`]: {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
    [`&.${listItemClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    }
  },
  [`&.${listItemClasses_default.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  }
}, ownerState.alignItems === "flex-start" && {
  alignItems: "flex-start"
}, ownerState.divider && {
  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
  backgroundClip: "padding-box"
}, ownerState.button && {
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (theme.vars || theme).palette.action.hover,
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${listItemClasses_default.selected}:hover`]: {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
    }
  }
}, ownerState.hasSecondaryAction && {
  paddingRight: 48
}));
var ListItemContainer = styled_default("li", {
  name: "MuiListItem",
  slot: "Container",
  overridesResolver: (props, styles5) => styles5.container
})({
  position: "relative"
});
var ListItem = React58.forwardRef(function ListItem2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiListItem"
  });
  const {
    alignItems = "center",
    autoFocus = false,
    button = false,
    children: childrenProp,
    className,
    component: componentProp,
    components = {},
    componentsProps = {},
    ContainerComponent = "li",
    ContainerProps: {
      className: ContainerClassName
    } = {},
    dense = false,
    disabled = false,
    disableGutters = false,
    disablePadding = false,
    divider = false,
    focusVisibleClassName,
    secondaryAction,
    selected = false,
    slotProps = {},
    slots = {}
  } = props, ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded50), other = _objectWithoutPropertiesLoose(props, _excluded211);
  const context = React58.useContext(ListContext_default);
  const childContext = React58.useMemo(() => ({
    dense: dense || context.dense || false,
    alignItems,
    disableGutters
  }), [alignItems, context.dense, dense, disableGutters]);
  const listItemRef = React58.useRef(null);
  useEnhancedEffect_default2(() => {
    if (autoFocus) {
      if (listItemRef.current) {
        listItemRef.current.focus();
      } else if (true) {
        console.error("MUI: Unable to set focus to a ListItem whose component has not been rendered.");
      }
    }
  }, [autoFocus]);
  const children = React58.Children.toArray(childrenProp);
  const hasSecondaryAction = children.length && isMuiElement_default(children[children.length - 1], ["ListItemSecondaryAction"]);
  const ownerState = _extends({}, props, {
    alignItems,
    autoFocus,
    button,
    dense: childContext.dense,
    disabled,
    disableGutters,
    disablePadding,
    divider,
    hasSecondaryAction,
    selected
  });
  const classes2 = useUtilityClasses42(ownerState);
  const handleRef = useForkRef_default(listItemRef, ref);
  const Root3 = slots.root || components.Root || ListItemRoot;
  const rootProps = slotProps.root || componentsProps.root || {};
  const componentProps = _extends({
    className: clsx_default(classes2.root, rootProps.className, className),
    disabled
  }, other);
  let Component2 = componentProp || "li";
  if (button) {
    componentProps.component = componentProp || "div";
    componentProps.focusVisibleClassName = clsx_default(listItemClasses_default.focusVisible, focusVisibleClassName);
    Component2 = ButtonBase_default;
  }
  if (hasSecondaryAction) {
    Component2 = !componentProps.component && !componentProp ? "div" : Component2;
    if (ContainerComponent === "li") {
      if (Component2 === "li") {
        Component2 = "div";
      } else if (componentProps.component === "li") {
        componentProps.component = "div";
      }
    }
    return (0, import_jsx_runtime68.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: (0, import_jsx_runtime69.jsxs)(ListItemContainer, _extends({
        as: ContainerComponent,
        className: clsx_default(classes2.container, ContainerClassName),
        ref: handleRef,
        ownerState
      }, ContainerProps, {
        children: [(0, import_jsx_runtime68.jsx)(Root3, _extends({}, rootProps, !isHostComponent(Root3) && {
          as: Component2,
          ownerState: _extends({}, ownerState, rootProps.ownerState)
        }, componentProps, {
          children
        })), children.pop()]
      }))
    });
  }
  return (0, import_jsx_runtime68.jsx)(ListContext_default.Provider, {
    value: childContext,
    children: (0, import_jsx_runtime69.jsxs)(Root3, _extends({}, rootProps, {
      as: Component2,
      ref: handleRef
    }, !isHostComponent(Root3) && {
      ownerState: _extends({}, ownerState, rootProps.ownerState)
    }, componentProps, {
      children: [children, secondaryAction && (0, import_jsx_runtime68.jsx)(ListItemSecondaryAction_default, {
        children: secondaryAction
      })]
    }))
  });
});
true ? ListItem.propTypes = {
  alignItems: import_prop_types52.default.oneOf(["center", "flex-start"]),
  autoFocus: import_prop_types52.default.bool,
  button: import_prop_types52.default.bool,
  children: chainPropTypes(import_prop_types52.default.node, (props) => {
    const children = React58.Children.toArray(props.children);
    let secondaryActionIndex = -1;
    for (let i = children.length - 1; i >= 0; i -= 1) {
      const child = children[i];
      if (isMuiElement_default(child, ["ListItemSecondaryAction"])) {
        secondaryActionIndex = i;
        break;
      }
    }
    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
      return new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
    }
    return null;
  }),
  classes: import_prop_types52.default.object,
  className: import_prop_types52.default.string,
  component: import_prop_types52.default.elementType,
  components: import_prop_types52.default.shape({
    Root: import_prop_types52.default.elementType
  }),
  componentsProps: import_prop_types52.default.shape({
    root: import_prop_types52.default.object
  }),
  ContainerComponent: elementTypeAcceptingRef_default,
  ContainerProps: import_prop_types52.default.object,
  dense: import_prop_types52.default.bool,
  disabled: import_prop_types52.default.bool,
  disableGutters: import_prop_types52.default.bool,
  disablePadding: import_prop_types52.default.bool,
  divider: import_prop_types52.default.bool,
  focusVisibleClassName: import_prop_types52.default.string,
  secondaryAction: import_prop_types52.default.node,
  selected: import_prop_types52.default.bool,
  slotProps: import_prop_types52.default.shape({
    root: import_prop_types52.default.object
  }),
  slots: import_prop_types52.default.shape({
    root: import_prop_types52.default.elementType
  }),
  sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object])
} : void 0;
var ListItem_default = ListItem;

// node_modules/@mui/material/ListItem/index.js
"use client";

// node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React59 = __toESM(require_react());
var import_prop_types53 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_ListContext();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getListItemAvatarUtilityClass(slot) {
  return generateUtilityClass("MuiListItemAvatar", slot);
}
var listItemAvatarClasses = generateUtilityClasses("MuiListItemAvatar", ["root", "alignItemsFlexStart"]);

// node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
"use client";
var _excluded51 = ["className"];
var useUtilityClasses43 = (ownerState) => {
  const {
    alignItems,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
  };
  return composeClasses(slots, getListItemAvatarUtilityClass, classes2);
};
var ListItemAvatarRoot = styled_default("div", {
  name: "MuiListItemAvatar",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart];
  }
})(({
  ownerState
}) => _extends({
  minWidth: 56,
  flexShrink: 0
}, ownerState.alignItems === "flex-start" && {
  marginTop: 8
}));
var ListItemAvatar = React59.forwardRef(function ListItemAvatar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiListItemAvatar"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
  const context = React59.useContext(ListContext_default);
  const ownerState = _extends({}, props, {
    alignItems: context.alignItems
  });
  const classes2 = useUtilityClasses43(ownerState);
  return (0, import_jsx_runtime70.jsx)(ListItemAvatarRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other));
});
true ? ListItemAvatar.propTypes = {
  children: import_prop_types53.default.node,
  classes: import_prop_types53.default.object,
  className: import_prop_types53.default.string,
  sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object])
} : void 0;

// node_modules/@mui/material/ListItemAvatar/index.js
"use client";

// node_modules/@mui/material/index.js
init_ListItemIcon();
init_ListItemIcon();
init_ListItemText();
init_ListItemText();

// node_modules/@mui/material/Menu/index.js
init_Menu();
init_menuClasses();
init_menuClasses();
"use client";

// node_modules/@mui/material/index.js
init_MenuItem();
init_MenuItem();
init_MenuList();
init_MenuList();

// node_modules/@mui/material/MobileStepper/MobileStepper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React60 = __toESM(require_react());
var import_prop_types54 = __toESM(require_prop_types());
init_clsx();
init_integerPropType();
init_composeClasses();
init_Paper();
init_capitalize();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/MobileStepper/mobileStepperClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getMobileStepperUtilityClass(slot) {
  return generateUtilityClass("MuiMobileStepper", slot);
}
var mobileStepperClasses = generateUtilityClasses("MuiMobileStepper", ["root", "positionBottom", "positionTop", "positionStatic", "dots", "dot", "dotActive", "progress"]);

// node_modules/@mui/material/MobileStepper/MobileStepper.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
"use client";
var _excluded52 = ["activeStep", "backButton", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"];
var useUtilityClasses44 = (ownerState) => {
  const {
    classes: classes2,
    position
  } = ownerState;
  const slots = {
    root: ["root", `position${capitalize_default(position)}`],
    dots: ["dots"],
    dot: ["dot"],
    dotActive: ["dotActive"],
    progress: ["progress"]
  };
  return composeClasses(slots, getMobileStepperUtilityClass, classes2);
};
var MobileStepperRoot = styled_default(Paper_default, {
  name: "MuiMobileStepper",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "row",
  justifyContent: "space-between",
  alignItems: "center",
  background: (theme.vars || theme).palette.background.default,
  padding: 8
}, ownerState.position === "bottom" && {
  position: "fixed",
  bottom: 0,
  left: 0,
  right: 0,
  zIndex: (theme.vars || theme).zIndex.mobileStepper
}, ownerState.position === "top" && {
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  zIndex: (theme.vars || theme).zIndex.mobileStepper
}));
var MobileStepperDots = styled_default("div", {
  name: "MuiMobileStepper",
  slot: "Dots",
  overridesResolver: (props, styles5) => styles5.dots
})(({
  ownerState
}) => _extends({}, ownerState.variant === "dots" && {
  display: "flex",
  flexDirection: "row"
}));
var MobileStepperDot = styled_default("div", {
  name: "MuiMobileStepper",
  slot: "Dot",
  shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "dotActive",
  overridesResolver: (props, styles5) => {
    const {
      dotActive
    } = props;
    return [styles5.dot, dotActive && styles5.dotActive];
  }
})(({
  theme,
  ownerState,
  dotActive
}) => _extends({}, ownerState.variant === "dots" && _extends({
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.shortest
  }),
  backgroundColor: (theme.vars || theme).palette.action.disabled,
  borderRadius: "50%",
  width: 8,
  height: 8,
  margin: "0 2px"
}, dotActive && {
  backgroundColor: (theme.vars || theme).palette.primary.main
})));
var MobileStepperProgress = styled_default(LinearProgress_default, {
  name: "MuiMobileStepper",
  slot: "Progress",
  overridesResolver: (props, styles5) => styles5.progress
})(({
  ownerState
}) => _extends({}, ownerState.variant === "progress" && {
  width: "50%"
}));
var MobileStepper = React60.forwardRef(function MobileStepper2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiMobileStepper"
  });
  const {
    activeStep = 0,
    backButton,
    className,
    LinearProgressProps,
    nextButton,
    position = "bottom",
    steps,
    variant = "dots"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
  const ownerState = _extends({}, props, {
    activeStep,
    position,
    variant
  });
  let value;
  if (variant === "progress") {
    if (steps === 1) {
      value = 100;
    } else {
      value = Math.ceil(activeStep / (steps - 1) * 100);
    }
  }
  const classes2 = useUtilityClasses44(ownerState);
  return (0, import_jsx_runtime71.jsxs)(MobileStepperRoot, _extends({
    square: true,
    elevation: 0,
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: [backButton, variant === "text" && (0, import_jsx_runtime71.jsxs)(React60.Fragment, {
      children: [activeStep + 1, " / ", steps]
    }), variant === "dots" && (0, import_jsx_runtime72.jsx)(MobileStepperDots, {
      ownerState,
      className: classes2.dots,
      children: [...new Array(steps)].map((_4, index) => (0, import_jsx_runtime72.jsx)(MobileStepperDot, {
        className: clsx_default(classes2.dot, index === activeStep && classes2.dotActive),
        ownerState,
        dotActive: index === activeStep
      }, index))
    }), variant === "progress" && (0, import_jsx_runtime72.jsx)(MobileStepperProgress, _extends({
      ownerState,
      className: classes2.progress,
      variant: "determinate",
      value
    }, LinearProgressProps)), nextButton]
  }));
});
true ? MobileStepper.propTypes = {
  activeStep: integerPropType_default,
  backButton: import_prop_types54.default.node,
  classes: import_prop_types54.default.object,
  className: import_prop_types54.default.string,
  LinearProgressProps: import_prop_types54.default.object,
  nextButton: import_prop_types54.default.node,
  position: import_prop_types54.default.oneOf(["bottom", "static", "top"]),
  steps: integerPropType_default.isRequired,
  sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
  variant: import_prop_types54.default.oneOf(["dots", "progress", "text"])
} : void 0;

// node_modules/@mui/material/MobileStepper/index.js
"use client";

// node_modules/@mui/material/index.js
init_Modal();
init_Modal();

// node_modules/@mui/material/NativeSelect/NativeSelect.js
init_extends();
init_objectWithoutPropertiesLoose();
var React61 = __toESM(require_react());
init_clsx();
var import_prop_types55 = __toESM(require_prop_types());
init_composeClasses();
init_NativeSelectInput();
init_formControlState();
init_useFormControl();
init_ArrowDropDown();
init_Input();
init_useThemeProps2();
init_nativeSelectClasses();
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
"use client";
var _excluded53 = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"];
var _excluded212 = ["root"];
var useUtilityClasses45 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getNativeSelectUtilityClasses, classes2);
};
var defaultInput = (0, import_jsx_runtime73.jsx)(Input_default, {});
var NativeSelect = React61.forwardRef(function NativeSelect2(inProps, ref) {
  const props = useThemeProps2({
    name: "MuiNativeSelect",
    props: inProps
  });
  const {
    className,
    children,
    classes: classesProp = {},
    IconComponent = ArrowDropDown_default,
    input = defaultInput,
    inputProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
  const muiFormControl = useFormControl();
  const fcs = formControlState({
    props,
    muiFormControl,
    states: ["variant"]
  });
  const ownerState = _extends({}, props, {
    classes: classesProp
  });
  const classes2 = useUtilityClasses45(ownerState);
  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded212);
  return (0, import_jsx_runtime73.jsx)(React61.Fragment, {
    children: React61.cloneElement(input, _extends({
      inputComponent: NativeSelectInput_default,
      inputProps: _extends({
        children,
        classes: otherClasses,
        IconComponent,
        variant: fcs.variant,
        type: void 0
      }, inputProps, input ? input.props.inputProps : {}),
      ref
    }, other, {
      className: clsx_default(classes2.root, input.props.className, className)
    }))
  });
});
true ? NativeSelect.propTypes = {
  children: import_prop_types55.default.node,
  classes: import_prop_types55.default.object,
  className: import_prop_types55.default.string,
  IconComponent: import_prop_types55.default.elementType,
  input: import_prop_types55.default.element,
  inputProps: import_prop_types55.default.object,
  onChange: import_prop_types55.default.func,
  sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
  value: import_prop_types55.default.any,
  variant: import_prop_types55.default.oneOf(["filled", "outlined", "standard"])
} : void 0;
NativeSelect.muiName = "Select";

// node_modules/@mui/material/NativeSelect/index.js
init_nativeSelectClasses();
init_nativeSelectClasses();
"use client";

// node_modules/@mui/material/NoSsr/index.js
init_NoSsr();

// node_modules/@mui/material/index.js
init_OutlinedInput();
init_OutlinedInput();

// node_modules/@mui/material/Pagination/Pagination.js
init_extends();
init_objectWithoutPropertiesLoose();
var React65 = __toESM(require_react());
var import_prop_types57 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_integerPropType();
init_useThemeProps2();

// node_modules/@mui/material/Pagination/paginationClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getPaginationUtilityClass(slot) {
  return generateUtilityClass("MuiPagination", slot);
}
var paginationClasses = generateUtilityClasses("MuiPagination", ["root", "ul", "outlined", "text"]);

// node_modules/@mui/material/usePagination/usePagination.js
init_extends();
init_objectWithoutPropertiesLoose();
init_useControlled();
"use client";
var _excluded54 = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
function usePagination(props = {}) {
  const {
    boundaryCount = 1,
    componentName = "usePagination",
    count = 1,
    defaultPage = 1,
    disabled = false,
    hideNextButton = false,
    hidePrevButton = false,
    onChange: handleChange,
    page: pageProp,
    showFirstButton = false,
    showLastButton = false,
    siblingCount = 1
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
  const [page, setPageState] = useControlled({
    controlled: pageProp,
    default: defaultPage,
    name: componentName,
    state: "page"
  });
  const handleClick = (event, value) => {
    if (!pageProp) {
      setPageState(value);
    }
    if (handleChange) {
      handleChange(event, value);
    }
  };
  const range2 = (start, end) => {
    const length = end - start + 1;
    return Array.from({
      length
    }, (_4, i) => start + i);
  };
  const startPages = range2(1, Math.min(boundaryCount, count));
  const endPages = range2(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
  const siblingsStart = Math.max(
    Math.min(
      page - siblingCount,
      count - boundaryCount - siblingCount * 2 - 1
    ),
    boundaryCount + 2
  );
  const siblingsEnd = Math.min(
    Math.max(
      page + siblingCount,
      boundaryCount + siblingCount * 2 + 2
    ),
    endPages.length > 0 ? endPages[0] - 2 : count - 1
  );
  const itemList = [
    ...showFirstButton ? ["first"] : [],
    ...hidePrevButton ? [] : ["previous"],
    ...startPages,
    ...siblingsStart > boundaryCount + 2 ? ["start-ellipsis"] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : [],
    ...range2(siblingsStart, siblingsEnd),
    ...siblingsEnd < count - boundaryCount - 1 ? ["end-ellipsis"] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : [],
    ...endPages,
    ...hideNextButton ? [] : ["next"],
    ...showLastButton ? ["last"] : []
  ];
  const buttonPage = (type) => {
    switch (type) {
      case "first":
        return 1;
      case "previous":
        return page - 1;
      case "next":
        return page + 1;
      case "last":
        return count;
      default:
        return null;
    }
  };
  const items = itemList.map((item) => {
    return typeof item === "number" ? {
      onClick: (event) => {
        handleClick(event, item);
      },
      type: "page",
      page: item,
      selected: item === page,
      disabled,
      "aria-current": item === page ? "true" : void 0
    } : {
      onClick: (event) => {
        handleClick(event, buttonPage(item));
      },
      type: item,
      page: buttonPage(item),
      selected: false,
      disabled: disabled || item.indexOf("ellipsis") === -1 && (item === "next" || item === "last" ? page >= count : page <= 1)
    };
  });
  return _extends({
    items
  }, other);
}

// node_modules/@mui/material/usePagination/index.js
"use client";

// node_modules/@mui/material/PaginationItem/PaginationItem.js
init_objectWithoutPropertiesLoose();
init_extends();
var React64 = __toESM(require_react());
var import_prop_types56 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
var import_colorManipulator8 = __toESM(require_colorManipulator());
init_useThemeProps2();

// node_modules/@mui/material/PaginationItem/paginationItemClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getPaginationItemUtilityClass(slot) {
  return generateUtilityClass("MuiPaginationItem", slot);
}
var paginationItemClasses = generateUtilityClasses("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon", "colorPrimary", "colorSecondary"]);
var paginationItemClasses_default = paginationItemClasses;

// node_modules/@mui/material/PaginationItem/PaginationItem.js
init_useTheme();
init_ButtonBase();
init_capitalize();
init_FirstPage();
init_LastPage();

// node_modules/@mui/material/internal/svg-icons/NavigateBefore.js
var React62 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
"use client";
var NavigateBefore_default = createSvgIcon((0, import_jsx_runtime74.jsx)("path", {
  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), "NavigateBefore");

// node_modules/@mui/material/internal/svg-icons/NavigateNext.js
var React63 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
"use client";
var NavigateNext_default = createSvgIcon((0, import_jsx_runtime75.jsx)("path", {
  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), "NavigateNext");

// node_modules/@mui/material/PaginationItem/PaginationItem.js
init_styled();
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
"use client";
var _excluded55 = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "slots", "type", "variant"];
var overridesResolver6 = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [styles5.root, styles5[ownerState.variant], styles5[`size${capitalize_default(ownerState.size)}`], ownerState.variant === "text" && styles5[`text${capitalize_default(ownerState.color)}`], ownerState.variant === "outlined" && styles5[`outlined${capitalize_default(ownerState.color)}`], ownerState.shape === "rounded" && styles5.rounded, ownerState.type === "page" && styles5.page, (ownerState.type === "start-ellipsis" || ownerState.type === "end-ellipsis") && styles5.ellipsis, (ownerState.type === "previous" || ownerState.type === "next") && styles5.previousNext, (ownerState.type === "first" || ownerState.type === "last") && styles5.firstLast];
};
var useUtilityClasses46 = (ownerState) => {
  const {
    classes: classes2,
    color,
    disabled,
    selected,
    size,
    shape,
    type,
    variant
  } = ownerState;
  const slots = {
    root: ["root", `size${capitalize_default(size)}`, variant, shape, color !== "standard" && `color${capitalize_default(color)}`, color !== "standard" && `${variant}${capitalize_default(color)}`, disabled && "disabled", selected && "selected", {
      page: "page",
      first: "firstLast",
      last: "firstLast",
      "start-ellipsis": "ellipsis",
      "end-ellipsis": "ellipsis",
      previous: "previousNext",
      next: "previousNext"
    }[type]],
    icon: ["icon"]
  };
  return composeClasses(slots, getPaginationItemUtilityClass, classes2);
};
var PaginationItemEllipsis = styled_default("div", {
  name: "MuiPaginationItem",
  slot: "Root",
  overridesResolver: overridesResolver6
})(({
  theme,
  ownerState
}) => _extends({}, theme.typography.body2, {
  borderRadius: 32 / 2,
  textAlign: "center",
  boxSizing: "border-box",
  minWidth: 32,
  padding: "0 6px",
  margin: "0 3px",
  color: (theme.vars || theme).palette.text.primary,
  height: "auto",
  [`&.${paginationItemClasses_default.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  }
}, ownerState.size === "small" && {
  minWidth: 26,
  borderRadius: 26 / 2,
  margin: "0 1px",
  padding: "0 4px"
}, ownerState.size === "large" && {
  minWidth: 40,
  borderRadius: 40 / 2,
  padding: "0 10px",
  fontSize: theme.typography.pxToRem(15)
}));
var PaginationItemPage = styled_default(ButtonBase_default, {
  name: "MuiPaginationItem",
  slot: "Root",
  overridesResolver: overridesResolver6
})(({
  theme,
  ownerState
}) => _extends({}, theme.typography.body2, {
  borderRadius: 32 / 2,
  textAlign: "center",
  boxSizing: "border-box",
  minWidth: 32,
  height: 32,
  padding: "0 6px",
  margin: "0 3px",
  color: (theme.vars || theme).palette.text.primary,
  [`&.${paginationItemClasses_default.focusVisible}`]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  [`&.${paginationItemClasses_default.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  },
  transition: theme.transitions.create(["color", "background-color"], {
    duration: theme.transitions.duration.short
  }),
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.action.hover,
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${paginationItemClasses_default.selected}`]: {
    backgroundColor: (theme.vars || theme).palette.action.selected,
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator8.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: (theme.vars || theme).palette.action.selected
      }
    },
    [`&.${paginationItemClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator8.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    [`&.${paginationItemClasses_default.disabled}`]: {
      opacity: 1,
      color: (theme.vars || theme).palette.action.disabled,
      backgroundColor: (theme.vars || theme).palette.action.selected
    }
  }
}, ownerState.size === "small" && {
  minWidth: 26,
  height: 26,
  borderRadius: 26 / 2,
  margin: "0 1px",
  padding: "0 4px"
}, ownerState.size === "large" && {
  minWidth: 40,
  height: 40,
  borderRadius: 40 / 2,
  padding: "0 10px",
  fontSize: theme.typography.pxToRem(15)
}, ownerState.shape === "rounded" && {
  borderRadius: (theme.vars || theme).shape.borderRadius
}), ({
  theme,
  ownerState
}) => _extends({}, ownerState.variant === "text" && {
  [`&.${paginationItemClasses_default.selected}`]: _extends({}, ownerState.color !== "standard" && {
    color: (theme.vars || theme).palette[ownerState.color].contrastText,
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
      "@media (hover: none)": {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    },
    [`&.${paginationItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  }, {
    [`&.${paginationItemClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  })
}, ownerState.variant === "outlined" && {
  border: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
  [`&.${paginationItemClasses_default.selected}`]: _extends({}, ownerState.color !== "standard" && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_colorManipulator8.alpha)(theme.palette[ownerState.color].main, 0.5)}`,
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.activatedOpacity})` : (0, import_colorManipulator8.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity),
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator8.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${paginationItemClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator8.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity)
    }
  }, {
    [`&.${paginationItemClasses_default.disabled}`]: {
      borderColor: (theme.vars || theme).palette.action.disabledBackground,
      color: (theme.vars || theme).palette.action.disabled
    }
  })
}));
var PaginationItemPageIcon = styled_default("div", {
  name: "MuiPaginationItem",
  slot: "Icon",
  overridesResolver: (props, styles5) => styles5.icon
})(({
  theme,
  ownerState
}) => _extends({
  fontSize: theme.typography.pxToRem(20),
  margin: "0 -8px"
}, ownerState.size === "small" && {
  fontSize: theme.typography.pxToRem(18)
}, ownerState.size === "large" && {
  fontSize: theme.typography.pxToRem(22)
}));
var PaginationItem = React64.forwardRef(function PaginationItem2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPaginationItem"
  });
  const {
    className,
    color = "standard",
    component,
    components = {},
    disabled = false,
    page,
    selected = false,
    shape = "circular",
    size = "medium",
    slots = {},
    type = "page",
    variant = "text"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
  const ownerState = _extends({}, props, {
    color,
    disabled,
    selected,
    shape,
    size,
    type,
    variant
  });
  const theme = useTheme();
  const classes2 = useUtilityClasses46(ownerState);
  const normalizedIcons = theme.direction === "rtl" ? {
    previous: slots.next || components.next || NavigateNext_default,
    next: slots.previous || components.previous || NavigateBefore_default,
    last: slots.first || components.first || FirstPage_default,
    first: slots.last || components.last || LastPage_default
  } : {
    previous: slots.previous || components.previous || NavigateBefore_default,
    next: slots.next || components.next || NavigateNext_default,
    first: slots.first || components.first || FirstPage_default,
    last: slots.last || components.last || LastPage_default
  };
  const Icon3 = normalizedIcons[type];
  return type === "start-ellipsis" || type === "end-ellipsis" ? (0, import_jsx_runtime76.jsx)(PaginationItemEllipsis, {
    ref,
    ownerState,
    className: clsx_default(classes2.root, className),
    children: "\u2026"
  }) : (0, import_jsx_runtime77.jsxs)(PaginationItemPage, _extends({
    ref,
    ownerState,
    component,
    disabled,
    className: clsx_default(classes2.root, className)
  }, other, {
    children: [type === "page" && page, Icon3 ? (0, import_jsx_runtime76.jsx)(PaginationItemPageIcon, {
      as: Icon3,
      ownerState,
      className: classes2.icon
    }) : null]
  }));
});
true ? PaginationItem.propTypes = {
  children: import_prop_types56.default.node,
  classes: import_prop_types56.default.object,
  className: import_prop_types56.default.string,
  color: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["primary", "secondary", "standard"]), import_prop_types56.default.string]),
  component: import_prop_types56.default.elementType,
  components: import_prop_types56.default.shape({
    first: import_prop_types56.default.elementType,
    last: import_prop_types56.default.elementType,
    next: import_prop_types56.default.elementType,
    previous: import_prop_types56.default.elementType
  }),
  disabled: import_prop_types56.default.bool,
  page: import_prop_types56.default.node,
  selected: import_prop_types56.default.bool,
  shape: import_prop_types56.default.oneOf(["circular", "rounded"]),
  size: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["small", "medium", "large"]), import_prop_types56.default.string]),
  slots: import_prop_types56.default.shape({
    first: import_prop_types56.default.elementType,
    last: import_prop_types56.default.elementType,
    next: import_prop_types56.default.elementType,
    previous: import_prop_types56.default.elementType
  }),
  sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object]),
  type: import_prop_types56.default.oneOf(["end-ellipsis", "first", "last", "next", "page", "previous", "start-ellipsis"]),
  variant: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["outlined", "text"]), import_prop_types56.default.string])
} : void 0;
var PaginationItem_default = PaginationItem;

// node_modules/@mui/material/PaginationItem/index.js
"use client";

// node_modules/@mui/material/Pagination/Pagination.js
init_styled();
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
"use client";
var _excluded56 = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"];
var useUtilityClasses47 = (ownerState) => {
  const {
    classes: classes2,
    variant
  } = ownerState;
  const slots = {
    root: ["root", variant],
    ul: ["ul"]
  };
  return composeClasses(slots, getPaginationUtilityClass, classes2);
};
var PaginationRoot = styled_default("nav", {
  name: "MuiPagination",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant]];
  }
})({});
var PaginationUl = styled_default("ul", {
  name: "MuiPagination",
  slot: "Ul",
  overridesResolver: (props, styles5) => styles5.ul
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
});
function defaultGetAriaLabel(type, page, selected) {
  if (type === "page") {
    return `${selected ? "" : "Go to "}page ${page}`;
  }
  return `Go to ${type} page`;
}
var Pagination = React65.forwardRef(function Pagination2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPagination"
  });
  const {
    boundaryCount = 1,
    className,
    color = "standard",
    count = 1,
    defaultPage = 1,
    disabled = false,
    getItemAriaLabel = defaultGetAriaLabel,
    hideNextButton = false,
    hidePrevButton = false,
    renderItem = (item) => (0, import_jsx_runtime78.jsx)(PaginationItem_default, _extends({}, item)),
    shape = "circular",
    showFirstButton = false,
    showLastButton = false,
    siblingCount = 1,
    size = "medium",
    variant = "text"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
  const {
    items
  } = usePagination(_extends({}, props, {
    componentName: "Pagination"
  }));
  const ownerState = _extends({}, props, {
    boundaryCount,
    color,
    count,
    defaultPage,
    disabled,
    getItemAriaLabel,
    hideNextButton,
    hidePrevButton,
    renderItem,
    shape,
    showFirstButton,
    showLastButton,
    siblingCount,
    size,
    variant
  });
  const classes2 = useUtilityClasses47(ownerState);
  return (0, import_jsx_runtime78.jsx)(PaginationRoot, _extends({
    "aria-label": "pagination navigation",
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other, {
    children: (0, import_jsx_runtime78.jsx)(PaginationUl, {
      className: classes2.ul,
      ownerState,
      children: items.map((item, index) => (0, import_jsx_runtime78.jsx)("li", {
        children: renderItem(_extends({}, item, {
          color,
          "aria-label": getItemAriaLabel(item.type, item.page, item.selected),
          shape,
          size,
          variant
        }))
      }, index))
    })
  }));
});
true ? Pagination.propTypes = {
  boundaryCount: integerPropType_default,
  classes: import_prop_types57.default.object,
  className: import_prop_types57.default.string,
  color: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["primary", "secondary", "standard"]), import_prop_types57.default.string]),
  count: integerPropType_default,
  defaultPage: integerPropType_default,
  disabled: import_prop_types57.default.bool,
  getItemAriaLabel: import_prop_types57.default.func,
  hideNextButton: import_prop_types57.default.bool,
  hidePrevButton: import_prop_types57.default.bool,
  onChange: import_prop_types57.default.func,
  page: integerPropType_default,
  renderItem: import_prop_types57.default.func,
  shape: import_prop_types57.default.oneOf(["circular", "rounded"]),
  showFirstButton: import_prop_types57.default.bool,
  showLastButton: import_prop_types57.default.bool,
  siblingCount: integerPropType_default,
  size: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["small", "medium", "large"]), import_prop_types57.default.string]),
  sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object]),
  variant: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["outlined", "text"]), import_prop_types57.default.string])
} : void 0;

// node_modules/@mui/material/Pagination/index.js
"use client";

// node_modules/@mui/material/index.js
init_Paper();
init_Paper();
init_Popover();
init_Popover();
init_Popper();
init_Popper();
init_Portal();
init_Portal();

// node_modules/@mui/material/Radio/Radio.js
init_objectWithoutPropertiesLoose();
init_extends();
var React71 = __toESM(require_react());
var import_prop_types59 = __toESM(require_prop_types());
init_clsx();
init_refType();
init_composeClasses();
var import_colorManipulator9 = __toESM(require_colorManipulator());
init_SwitchBase();
init_useThemeProps2();

// node_modules/@mui/material/Radio/RadioButtonIcon.js
init_extends();
var React68 = __toESM(require_react());
var import_prop_types58 = __toESM(require_prop_types());

// node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js
var React66 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
"use client";
var RadioButtonUnchecked_default = createSvgIcon((0, import_jsx_runtime79.jsx)("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "RadioButtonUnchecked");

// node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js
var React67 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
"use client";
var RadioButtonChecked_default = createSvgIcon((0, import_jsx_runtime80.jsx)("path", {
  d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
}), "RadioButtonChecked");

// node_modules/@mui/material/Radio/RadioButtonIcon.js
init_styled();
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
"use client";
var RadioButtonIconRoot = styled_default("span", {
  shouldForwardProp: rootShouldForwardProp
})({
  position: "relative",
  display: "flex"
});
var RadioButtonIconBackground = styled_default(RadioButtonUnchecked_default)({
  transform: "scale(1)"
});
var RadioButtonIconDot = styled_default(RadioButtonChecked_default)(({
  theme,
  ownerState
}) => _extends({
  left: 0,
  position: "absolute",
  transform: "scale(0)",
  transition: theme.transitions.create("transform", {
    easing: theme.transitions.easing.easeIn,
    duration: theme.transitions.duration.shortest
  })
}, ownerState.checked && {
  transform: "scale(1)",
  transition: theme.transitions.create("transform", {
    easing: theme.transitions.easing.easeOut,
    duration: theme.transitions.duration.shortest
  })
}));
function RadioButtonIcon(props) {
  const {
    checked = false,
    classes: classes2 = {},
    fontSize
  } = props;
  const ownerState = _extends({}, props, {
    checked
  });
  return (0, import_jsx_runtime82.jsxs)(RadioButtonIconRoot, {
    className: classes2.root,
    ownerState,
    children: [(0, import_jsx_runtime81.jsx)(RadioButtonIconBackground, {
      fontSize,
      className: classes2.background,
      ownerState
    }), (0, import_jsx_runtime81.jsx)(RadioButtonIconDot, {
      fontSize,
      className: classes2.dot,
      ownerState
    })]
  });
}
true ? RadioButtonIcon.propTypes = {
  checked: import_prop_types58.default.bool,
  classes: import_prop_types58.default.object,
  fontSize: import_prop_types58.default.oneOf(["small", "medium"])
} : void 0;
var RadioButtonIcon_default = RadioButtonIcon;

// node_modules/@mui/material/Radio/Radio.js
init_capitalize();
init_createChainedFunction();

// node_modules/@mui/material/RadioGroup/useRadioGroup.js
var React70 = __toESM(require_react());

// node_modules/@mui/material/RadioGroup/RadioGroupContext.js
var React69 = __toESM(require_react());
var RadioGroupContext = React69.createContext(void 0);
if (true) {
  RadioGroupContext.displayName = "RadioGroupContext";
}
var RadioGroupContext_default = RadioGroupContext;

// node_modules/@mui/material/RadioGroup/useRadioGroup.js
"use client";
function useRadioGroup() {
  return React70.useContext(RadioGroupContext_default);
}

// node_modules/@mui/material/Radio/radioClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getRadioUtilityClass(slot) {
  return generateUtilityClass("MuiRadio", slot);
}
var radioClasses = generateUtilityClasses("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]);
var radioClasses_default = radioClasses;

// node_modules/@mui/material/Radio/Radio.js
init_styled();
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
"use client";
var _excluded57 = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
var useUtilityClasses48 = (ownerState) => {
  const {
    classes: classes2,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", `color${capitalize_default(color)}`, size !== "medium" && `size${capitalize_default(size)}`]
  };
  return _extends({}, classes2, composeClasses(slots, getRadioUtilityClass, classes2));
};
var RadioRoot = styled_default(SwitchBase_default, {
  shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
  name: "MuiRadio",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.size !== "medium" && styles5[`size${capitalize_default(ownerState.size)}`], styles5[`color${capitalize_default(ownerState.color)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends({
  color: (theme.vars || theme).palette.text.secondary
}, !ownerState.disableRipple && {
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator9.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}, ownerState.color !== "default" && {
  [`&.${radioClasses_default.checked}`]: {
    color: (theme.vars || theme).palette[ownerState.color].main
  }
}, {
  [`&.${radioClasses_default.disabled}`]: {
    color: (theme.vars || theme).palette.action.disabled
  }
}));
function areEqualValues(a, b) {
  if (typeof b === "object" && b !== null) {
    return a === b;
  }
  return String(a) === String(b);
}
var defaultCheckedIcon = (0, import_jsx_runtime83.jsx)(RadioButtonIcon_default, {
  checked: true
});
var defaultIcon = (0, import_jsx_runtime83.jsx)(RadioButtonIcon_default, {});
var Radio = React71.forwardRef(function Radio2(inProps, ref) {
  var _defaultIcon$props$fo, _defaultCheckedIcon$p;
  const props = useThemeProps2({
    props: inProps,
    name: "MuiRadio"
  });
  const {
    checked: checkedProp,
    checkedIcon = defaultCheckedIcon,
    color = "primary",
    icon = defaultIcon,
    name: nameProp,
    onChange: onChangeProp,
    size = "medium",
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
  const ownerState = _extends({}, props, {
    color,
    size
  });
  const classes2 = useUtilityClasses48(ownerState);
  const radioGroup = useRadioGroup();
  let checked = checkedProp;
  const onChange = createChainedFunction_default(onChangeProp, radioGroup && radioGroup.onChange);
  let name = nameProp;
  if (radioGroup) {
    if (typeof checked === "undefined") {
      checked = areEqualValues(radioGroup.value, props.value);
    }
    if (typeof name === "undefined") {
      name = radioGroup.name;
    }
  }
  return (0, import_jsx_runtime83.jsx)(RadioRoot, _extends({
    type: "radio",
    icon: React71.cloneElement(icon, {
      fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size
    }),
    checkedIcon: React71.cloneElement(checkedIcon, {
      fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
    }),
    ownerState,
    classes: classes2,
    name,
    checked,
    onChange,
    ref,
    className: clsx_default(classes2.root, className)
  }, other));
});
true ? Radio.propTypes = {
  checked: import_prop_types59.default.bool,
  checkedIcon: import_prop_types59.default.node,
  classes: import_prop_types59.default.object,
  className: import_prop_types59.default.string,
  color: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types59.default.string]),
  disabled: import_prop_types59.default.bool,
  disableRipple: import_prop_types59.default.bool,
  icon: import_prop_types59.default.node,
  id: import_prop_types59.default.string,
  inputProps: import_prop_types59.default.object,
  inputRef: refType_default,
  name: import_prop_types59.default.string,
  onChange: import_prop_types59.default.func,
  required: import_prop_types59.default.bool,
  size: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["medium", "small"]), import_prop_types59.default.string]),
  sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
  value: import_prop_types59.default.any
} : void 0;
var Radio_default = Radio;

// node_modules/@mui/material/Radio/index.js
"use client";

// node_modules/@mui/material/RadioGroup/RadioGroup.js
init_extends();
init_objectWithoutPropertiesLoose();
var React72 = __toESM(require_react());
var import_prop_types60 = __toESM(require_prop_types());
init_FormGroup();
init_useForkRef2();
init_useControlled2();
init_useId2();
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
"use client";
var _excluded58 = ["actions", "children", "defaultValue", "name", "onChange", "value"];
var RadioGroup = React72.forwardRef(function RadioGroup2(props, ref) {
  const {
    actions,
    children,
    defaultValue,
    name: nameProp,
    onChange,
    value: valueProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
  const rootRef = React72.useRef(null);
  const [value, setValueState] = useControlled_default({
    controlled: valueProp,
    default: defaultValue,
    name: "RadioGroup"
  });
  React72.useImperativeHandle(actions, () => ({
    focus: () => {
      let input = rootRef.current.querySelector("input:not(:disabled):checked");
      if (!input) {
        input = rootRef.current.querySelector("input:not(:disabled)");
      }
      if (input) {
        input.focus();
      }
    }
  }), []);
  const handleRef = useForkRef_default(ref, rootRef);
  const name = useId_default(nameProp);
  const contextValue = React72.useMemo(() => ({
    name,
    onChange(event) {
      setValueState(event.target.value);
      if (onChange) {
        onChange(event, event.target.value);
      }
    },
    value
  }), [name, onChange, setValueState, value]);
  return (0, import_jsx_runtime84.jsx)(RadioGroupContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime84.jsx)(FormGroup_default, _extends({
      role: "radiogroup",
      ref: handleRef
    }, other, {
      children
    }))
  });
});
true ? RadioGroup.propTypes = {
  children: import_prop_types60.default.node,
  defaultValue: import_prop_types60.default.any,
  name: import_prop_types60.default.string,
  onChange: import_prop_types60.default.func,
  value: import_prop_types60.default.any
} : void 0;
var RadioGroup_default = RadioGroup;

// node_modules/@mui/material/RadioGroup/index.js
"use client";

// node_modules/@mui/material/Rating/Rating.js
init_objectWithoutPropertiesLoose();
init_extends();
var React75 = __toESM(require_react());
var import_prop_types61 = __toESM(require_prop_types());
init_clsx();
init_clamp();
init_visuallyHidden();
init_chainPropTypes();
init_composeClasses();
init_useTheme();
init_utils2();

// node_modules/@mui/material/internal/svg-icons/Star.js
var React73 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
"use client";
var Star_default = createSvgIcon((0, import_jsx_runtime85.jsx)("path", {
  d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
}), "Star");

// node_modules/@mui/material/internal/svg-icons/StarBorder.js
var React74 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
"use client";
var StarBorder_default = createSvgIcon((0, import_jsx_runtime86.jsx)("path", {
  d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
}), "StarBorder");

// node_modules/@mui/material/Rating/Rating.js
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Rating/ratingClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getRatingUtilityClass(slot) {
  return generateUtilityClass("MuiRating", slot);
}
var ratingClasses = generateUtilityClasses("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]);
var ratingClasses_default = ratingClasses;

// node_modules/@mui/material/Rating/Rating.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
"use client";
var _excluded59 = ["value"];
var _excluded213 = ["className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "highlightSelectedOnly", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"];
function getDecimalPrecision(num) {
  const decimalPart = num.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToPrecision(value, precision) {
  if (value == null) {
    return value;
  }
  const nearest = Math.round(value / precision) * precision;
  return Number(nearest.toFixed(getDecimalPrecision(precision)));
}
var useUtilityClasses49 = (ownerState) => {
  const {
    classes: classes2,
    size,
    readOnly,
    disabled,
    emptyValueFocused,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", `size${capitalize_default(size)}`, disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
    label: ["label", "pristine"],
    labelEmptyValue: [emptyValueFocused && "labelEmptyValueActive"],
    icon: ["icon"],
    iconEmpty: ["iconEmpty"],
    iconFilled: ["iconFilled"],
    iconHover: ["iconHover"],
    iconFocus: ["iconFocus"],
    iconActive: ["iconActive"],
    decimal: ["decimal"],
    visuallyHidden: ["visuallyHidden"]
  };
  return composeClasses(slots, getRatingUtilityClass, classes2);
};
var RatingRoot = styled_default("span", {
  name: "MuiRating",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${ratingClasses_default.visuallyHidden}`]: styles5.visuallyHidden
    }, styles5.root, styles5[`size${capitalize_default(ownerState.size)}`], ownerState.readOnly && styles5.readOnly];
  }
})(({
  theme,
  ownerState
}) => _extends({
  display: "inline-flex",
  position: "relative",
  fontSize: theme.typography.pxToRem(24),
  color: "#faaf00",
  cursor: "pointer",
  textAlign: "left",
  width: "min-content",
  WebkitTapHighlightColor: "transparent",
  [`&.${ratingClasses_default.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity,
    pointerEvents: "none"
  },
  [`&.${ratingClasses_default.focusVisible} .${ratingClasses_default.iconActive}`]: {
    outline: "1px solid #999"
  },
  [`& .${ratingClasses_default.visuallyHidden}`]: visuallyHidden_default
}, ownerState.size === "small" && {
  fontSize: theme.typography.pxToRem(18)
}, ownerState.size === "large" && {
  fontSize: theme.typography.pxToRem(30)
}, ownerState.readOnly && {
  pointerEvents: "none"
}));
var RatingLabel = styled_default("label", {
  name: "MuiRating",
  slot: "Label",
  overridesResolver: ({
    ownerState
  }, styles5) => [styles5.label, ownerState.emptyValueFocused && styles5.labelEmptyValueActive]
})(({
  ownerState
}) => _extends({
  cursor: "inherit"
}, ownerState.emptyValueFocused && {
  top: 0,
  bottom: 0,
  position: "absolute",
  outline: "1px solid #999",
  width: "100%"
}));
var RatingIcon = styled_default("span", {
  name: "MuiRating",
  slot: "Icon",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.icon, ownerState.iconEmpty && styles5.iconEmpty, ownerState.iconFilled && styles5.iconFilled, ownerState.iconHover && styles5.iconHover, ownerState.iconFocus && styles5.iconFocus, ownerState.iconActive && styles5.iconActive];
  }
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  transition: theme.transitions.create("transform", {
    duration: theme.transitions.duration.shortest
  }),
  pointerEvents: "none"
}, ownerState.iconActive && {
  transform: "scale(1.2)"
}, ownerState.iconEmpty && {
  color: (theme.vars || theme).palette.action.disabled
}));
var RatingDecimal = styled_default("span", {
  name: "MuiRating",
  slot: "Decimal",
  shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "iconActive",
  overridesResolver: (props, styles5) => {
    const {
      iconActive
    } = props;
    return [styles5.decimal, iconActive && styles5.iconActive];
  }
})(({
  iconActive
}) => _extends({
  position: "relative"
}, iconActive && {
  transform: "scale(1.2)"
}));
function IconContainer(props) {
  const other = _objectWithoutPropertiesLoose(props, _excluded59);
  return (0, import_jsx_runtime87.jsx)("span", _extends({}, other));
}
true ? IconContainer.propTypes = {
  value: import_prop_types61.default.number.isRequired
} : void 0;
function RatingItem(props) {
  const {
    classes: classes2,
    disabled,
    emptyIcon,
    focus,
    getLabelText,
    highlightSelectedOnly,
    hover,
    icon,
    IconContainerComponent,
    isActive,
    itemValue,
    labelProps,
    name,
    onBlur,
    onChange,
    onClick: onClick2,
    onFocus,
    readOnly,
    ownerState,
    ratingValue,
    ratingValueRounded
  } = props;
  const isFilled = highlightSelectedOnly ? itemValue === ratingValue : itemValue <= ratingValue;
  const isHovered = itemValue <= hover;
  const isFocused = itemValue <= focus;
  const isChecked = itemValue === ratingValueRounded;
  const id = useId_default();
  const container = (0, import_jsx_runtime87.jsx)(RatingIcon, {
    as: IconContainerComponent,
    value: itemValue,
    className: clsx_default(classes2.icon, isFilled ? classes2.iconFilled : classes2.iconEmpty, isHovered && classes2.iconHover, isFocused && classes2.iconFocus, isActive && classes2.iconActive),
    ownerState: _extends({}, ownerState, {
      iconEmpty: !isFilled,
      iconFilled: isFilled,
      iconHover: isHovered,
      iconFocus: isFocused,
      iconActive: isActive
    }),
    children: emptyIcon && !isFilled ? emptyIcon : icon
  });
  if (readOnly) {
    return (0, import_jsx_runtime87.jsx)("span", _extends({}, labelProps, {
      children: container
    }));
  }
  return (0, import_jsx_runtime88.jsxs)(React75.Fragment, {
    children: [(0, import_jsx_runtime88.jsxs)(RatingLabel, _extends({
      ownerState: _extends({}, ownerState, {
        emptyValueFocused: void 0
      }),
      htmlFor: id
    }, labelProps, {
      children: [container, (0, import_jsx_runtime87.jsx)("span", {
        className: classes2.visuallyHidden,
        children: getLabelText(itemValue)
      })]
    })), (0, import_jsx_runtime87.jsx)("input", {
      className: classes2.visuallyHidden,
      onFocus,
      onBlur,
      onChange,
      onClick: onClick2,
      disabled,
      value: itemValue,
      id,
      type: "radio",
      name,
      checked: isChecked
    })]
  });
}
true ? RatingItem.propTypes = {
  classes: import_prop_types61.default.object.isRequired,
  disabled: import_prop_types61.default.bool.isRequired,
  emptyIcon: import_prop_types61.default.node,
  focus: import_prop_types61.default.number.isRequired,
  getLabelText: import_prop_types61.default.func.isRequired,
  highlightSelectedOnly: import_prop_types61.default.bool.isRequired,
  hover: import_prop_types61.default.number.isRequired,
  icon: import_prop_types61.default.node,
  IconContainerComponent: import_prop_types61.default.elementType.isRequired,
  isActive: import_prop_types61.default.bool.isRequired,
  itemValue: import_prop_types61.default.number.isRequired,
  labelProps: import_prop_types61.default.object,
  name: import_prop_types61.default.string,
  onBlur: import_prop_types61.default.func.isRequired,
  onChange: import_prop_types61.default.func.isRequired,
  onClick: import_prop_types61.default.func.isRequired,
  onFocus: import_prop_types61.default.func.isRequired,
  ownerState: import_prop_types61.default.object.isRequired,
  ratingValue: import_prop_types61.default.number,
  ratingValueRounded: import_prop_types61.default.number,
  readOnly: import_prop_types61.default.bool.isRequired
} : void 0;
var defaultIcon2 = (0, import_jsx_runtime87.jsx)(Star_default, {
  fontSize: "inherit"
});
var defaultEmptyIcon = (0, import_jsx_runtime87.jsx)(StarBorder_default, {
  fontSize: "inherit"
});
function defaultLabelText(value) {
  return `${value} Star${value !== 1 ? "s" : ""}`;
}
var Rating = React75.forwardRef(function Rating2(inProps, ref) {
  const props = useThemeProps2({
    name: "MuiRating",
    props: inProps
  });
  const {
    className,
    defaultValue = null,
    disabled = false,
    emptyIcon = defaultEmptyIcon,
    emptyLabelText = "Empty",
    getLabelText = defaultLabelText,
    highlightSelectedOnly = false,
    icon = defaultIcon2,
    IconContainerComponent = IconContainer,
    max: max2 = 5,
    name: nameProp,
    onChange,
    onChangeActive,
    onMouseLeave,
    onMouseMove,
    precision = 1,
    readOnly = false,
    size = "medium",
    value: valueProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded213);
  const name = useId_default(nameProp);
  const [valueDerived, setValueState] = useControlled_default({
    controlled: valueProp,
    default: defaultValue,
    name: "Rating"
  });
  const valueRounded = roundValueToPrecision(valueDerived, precision);
  const theme = useTheme();
  const [{
    hover,
    focus
  }, setState] = React75.useState({
    hover: -1,
    focus: -1
  });
  let value = valueRounded;
  if (hover !== -1) {
    value = hover;
  }
  if (focus !== -1) {
    value = focus;
  }
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible_default();
  const [focusVisible, setFocusVisible] = React75.useState(false);
  const rootRef = React75.useRef();
  const handleRef = useForkRef_default(focusVisibleRef, rootRef, ref);
  const handleMouseMove = (event) => {
    if (onMouseMove) {
      onMouseMove(event);
    }
    const rootNode = rootRef.current;
    const {
      right,
      left,
      width: containerWidth
    } = rootNode.getBoundingClientRect();
    let percent;
    if (theme.direction === "rtl") {
      percent = (right - event.clientX) / containerWidth;
    } else {
      percent = (event.clientX - left) / containerWidth;
    }
    let newHover = roundValueToPrecision(max2 * percent + precision / 2, precision);
    newHover = clamp_default(newHover, precision, max2);
    setState((prev) => prev.hover === newHover && prev.focus === newHover ? prev : {
      hover: newHover,
      focus: newHover
    });
    setFocusVisible(false);
    if (onChangeActive && hover !== newHover) {
      onChangeActive(event, newHover);
    }
  };
  const handleMouseLeave = (event) => {
    if (onMouseLeave) {
      onMouseLeave(event);
    }
    const newHover = -1;
    setState({
      hover: newHover,
      focus: newHover
    });
    if (onChangeActive && hover !== newHover) {
      onChangeActive(event, newHover);
    }
  };
  const handleChange = (event) => {
    let newValue = event.target.value === "" ? null : parseFloat(event.target.value);
    if (hover !== -1) {
      newValue = hover;
    }
    setValueState(newValue);
    if (onChange) {
      onChange(event, newValue);
    }
  };
  const handleClear = (event) => {
    if (event.clientX === 0 && event.clientY === 0) {
      return;
    }
    setState({
      hover: -1,
      focus: -1
    });
    setValueState(null);
    if (onChange && parseFloat(event.target.value) === valueRounded) {
      onChange(event, null);
    }
  };
  const handleFocus = (event) => {
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
    }
    const newFocus = parseFloat(event.target.value);
    setState((prev) => ({
      hover: prev.hover,
      focus: newFocus
    }));
  };
  const handleBlur = (event) => {
    if (hover !== -1) {
      return;
    }
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    const newFocus = -1;
    setState((prev) => ({
      hover: prev.hover,
      focus: newFocus
    }));
  };
  const [emptyValueFocused, setEmptyValueFocused] = React75.useState(false);
  const ownerState = _extends({}, props, {
    defaultValue,
    disabled,
    emptyIcon,
    emptyLabelText,
    emptyValueFocused,
    focusVisible,
    getLabelText,
    icon,
    IconContainerComponent,
    max: max2,
    precision,
    readOnly,
    size
  });
  const classes2 = useUtilityClasses49(ownerState);
  return (0, import_jsx_runtime88.jsxs)(RatingRoot, _extends({
    ref: handleRef,
    onMouseMove: handleMouseMove,
    onMouseLeave: handleMouseLeave,
    className: clsx_default(classes2.root, className, readOnly && "MuiRating-readOnly"),
    ownerState,
    role: readOnly ? "img" : null,
    "aria-label": readOnly ? getLabelText(value) : null
  }, other, {
    children: [Array.from(new Array(max2)).map((_4, index) => {
      const itemValue = index + 1;
      const ratingItemProps = {
        classes: classes2,
        disabled,
        emptyIcon,
        focus,
        getLabelText,
        highlightSelectedOnly,
        hover,
        icon,
        IconContainerComponent,
        name,
        onBlur: handleBlur,
        onChange: handleChange,
        onClick: handleClear,
        onFocus: handleFocus,
        ratingValue: value,
        ratingValueRounded: valueRounded,
        readOnly,
        ownerState
      };
      const isActive = itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1);
      if (precision < 1) {
        const items = Array.from(new Array(1 / precision));
        return (0, import_jsx_runtime87.jsx)(RatingDecimal, {
          className: clsx_default(classes2.decimal, isActive && classes2.iconActive),
          ownerState,
          iconActive: isActive,
          children: items.map(($, indexDecimal) => {
            const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
            return (0, import_jsx_runtime87.jsx)(RatingItem, _extends({}, ratingItemProps, {
              isActive: false,
              itemValue: itemDecimalValue,
              labelProps: {
                style: items.length - 1 === indexDecimal ? {} : {
                  width: itemDecimalValue === value ? `${(indexDecimal + 1) * precision * 100}%` : "0%",
                  overflow: "hidden",
                  position: "absolute"
                }
              }
            }), itemDecimalValue);
          })
        }, itemValue);
      }
      return (0, import_jsx_runtime87.jsx)(RatingItem, _extends({}, ratingItemProps, {
        isActive,
        itemValue
      }), itemValue);
    }), !readOnly && !disabled && (0, import_jsx_runtime88.jsxs)(RatingLabel, {
      className: clsx_default(classes2.label, classes2.labelEmptyValue),
      ownerState,
      children: [(0, import_jsx_runtime87.jsx)("input", {
        className: classes2.visuallyHidden,
        value: "",
        id: `${name}-empty`,
        type: "radio",
        name,
        checked: valueRounded == null,
        onFocus: () => setEmptyValueFocused(true),
        onBlur: () => setEmptyValueFocused(false),
        onChange: handleChange
      }), (0, import_jsx_runtime87.jsx)("span", {
        className: classes2.visuallyHidden,
        children: emptyLabelText
      })]
    })]
  }));
});
true ? Rating.propTypes = {
  classes: import_prop_types61.default.object,
  className: import_prop_types61.default.string,
  defaultValue: import_prop_types61.default.number,
  disabled: import_prop_types61.default.bool,
  emptyIcon: import_prop_types61.default.node,
  emptyLabelText: import_prop_types61.default.node,
  getLabelText: import_prop_types61.default.func,
  highlightSelectedOnly: import_prop_types61.default.bool,
  icon: import_prop_types61.default.node,
  IconContainerComponent: import_prop_types61.default.elementType,
  max: import_prop_types61.default.number,
  name: import_prop_types61.default.string,
  onChange: import_prop_types61.default.func,
  onChangeActive: import_prop_types61.default.func,
  onMouseLeave: import_prop_types61.default.func,
  onMouseMove: import_prop_types61.default.func,
  precision: chainPropTypes(import_prop_types61.default.number, (props) => {
    if (props.precision < 0.1) {
      return new Error(["MUI: The prop `precision` should be above 0.1.", "A value below this limit has an imperceptible impact."].join("\n"));
    }
    return null;
  }),
  readOnly: import_prop_types61.default.bool,
  size: import_prop_types61.default.oneOfType([import_prop_types61.default.oneOf(["small", "medium", "large"]), import_prop_types61.default.string]),
  sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object]),
  value: import_prop_types61.default.number
} : void 0;

// node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js
init_objectWithoutPropertiesLoose();
init_extends();
var React76 = __toESM(require_react());
var import_prop_types62 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getScopedCssBaselineUtilityClass(slot) {
  return generateUtilityClass("MuiScopedCssBaseline", slot);
}
var scopedCssBaselineClasses = generateUtilityClasses("MuiScopedCssBaseline", ["root"]);

// node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
"use client";
var _excluded60 = ["className", "component", "enableColorScheme"];
var useUtilityClasses50 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getScopedCssBaselineUtilityClass, classes2);
};
var ScopedCssBaselineRoot = styled_default("div", {
  name: "MuiScopedCssBaseline",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => {
  const colorSchemeStyles = {};
  if (ownerState.enableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  return _extends({}, html(theme, ownerState.enableColorScheme), body(theme), {
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: theme.typography.fontWeightBold
    }
  }, colorSchemeStyles);
});
var ScopedCssBaseline = React76.forwardRef(function ScopedCssBaseline2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiScopedCssBaseline"
  });
  const {
    className,
    component = "div"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
  const ownerState = _extends({}, props, {
    component
  });
  const classes2 = useUtilityClasses50(ownerState);
  return (0, import_jsx_runtime89.jsx)(ScopedCssBaselineRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other));
});
true ? ScopedCssBaseline.propTypes = {
  children: import_prop_types62.default.node,
  classes: import_prop_types62.default.object,
  className: import_prop_types62.default.string,
  component: import_prop_types62.default.elementType,
  enableColorScheme: import_prop_types62.default.bool,
  sx: import_prop_types62.default.oneOfType([import_prop_types62.default.arrayOf(import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object, import_prop_types62.default.bool])), import_prop_types62.default.func, import_prop_types62.default.object])
} : void 0;

// node_modules/@mui/material/ScopedCssBaseline/index.js
"use client";

// node_modules/@mui/material/index.js
init_Select();
init_Select();

// node_modules/@mui/material/Skeleton/Skeleton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React77 = __toESM(require_react());
init_clsx();
var import_prop_types63 = __toESM(require_prop_types());
init_esm();
init_composeClasses();
init_styles();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/Skeleton/skeletonClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSkeletonUtilityClass(slot) {
  return generateUtilityClass("MuiSkeleton", slot);
}
var skeletonClasses = generateUtilityClasses("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);

// node_modules/@mui/material/Skeleton/Skeleton.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());
"use client";
var _excluded61 = ["animation", "className", "component", "height", "style", "variant", "width"];
var _3 = (t) => t;
var _t7;
var _t23;
var _t33;
var _t43;
var useUtilityClasses51 = (ownerState) => {
  const {
    classes: classes2,
    variant,
    animation,
    hasChildren,
    width,
    height
  } = ownerState;
  const slots = {
    root: ["root", variant, animation, hasChildren && "withChildren", hasChildren && !width && "fitContent", hasChildren && !height && "heightAuto"]
  };
  return composeClasses(slots, getSkeletonUtilityClass, classes2);
};
var pulseKeyframe = keyframes(_t7 || (_t7 = _3`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
var waveKeyframe = keyframes(_t23 || (_t23 = _3`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
var SkeletonRoot = styled_default("span", {
  name: "MuiSkeleton",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.variant], ownerState.animation !== false && styles5[ownerState.animation], ownerState.hasChildren && styles5.withChildren, ownerState.hasChildren && !ownerState.width && styles5.fitContent, ownerState.hasChildren && !ownerState.height && styles5.heightAuto];
  }
})(({
  theme,
  ownerState
}) => {
  const radiusUnit = getUnit(theme.shape.borderRadius) || "px";
  const radiusValue = toUnitless(theme.shape.borderRadius);
  return _extends({
    display: "block",
    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === "light" ? 0.11 : 0.13),
    height: "1.2em"
  }, ownerState.variant === "text" && {
    marginTop: 0,
    marginBottom: 0,
    height: "auto",
    transformOrigin: "0 55%",
    transform: "scale(1, 0.60)",
    borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
    "&:empty:before": {
      content: '"\\00a0"'
    }
  }, ownerState.variant === "circular" && {
    borderRadius: "50%"
  }, ownerState.variant === "rounded" && {
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.hasChildren && {
    "& > *": {
      visibility: "hidden"
    }
  }, ownerState.hasChildren && !ownerState.width && {
    maxWidth: "fit-content"
  }, ownerState.hasChildren && !ownerState.height && {
    height: "auto"
  });
}, ({
  ownerState
}) => ownerState.animation === "pulse" && css(_t33 || (_t33 = _3`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
  ownerState,
  theme
}) => ownerState.animation === "wave" && css(_t43 || (_t43 = _3`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
var Skeleton = React77.forwardRef(function Skeleton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSkeleton"
  });
  const {
    animation = "pulse",
    className,
    component = "span",
    height,
    style,
    variant = "text",
    width
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
  const ownerState = _extends({}, props, {
    animation,
    component,
    variant,
    hasChildren: Boolean(other.children)
  });
  const classes2 = useUtilityClasses51(ownerState);
  return (0, import_jsx_runtime90.jsx)(SkeletonRoot, _extends({
    as: component,
    ref,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    style: _extends({
      width,
      height
    }, style)
  }));
});
true ? Skeleton.propTypes = {
  animation: import_prop_types63.default.oneOf(["pulse", "wave", false]),
  children: import_prop_types63.default.node,
  classes: import_prop_types63.default.object,
  className: import_prop_types63.default.string,
  component: import_prop_types63.default.elementType,
  height: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string]),
  style: import_prop_types63.default.object,
  sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
  variant: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["circular", "rectangular", "rounded", "text"]), import_prop_types63.default.string]),
  width: import_prop_types63.default.oneOfType([import_prop_types63.default.number, import_prop_types63.default.string])
} : void 0;

// node_modules/@mui/material/Skeleton/index.js
"use client";

// node_modules/@mui/material/Slider/Slider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React79 = __toESM(require_react());
var import_prop_types65 = __toESM(require_prop_types());
init_clsx();
init_chainPropTypes();
init_utils4();
init_composeClasses();
init_useSlider();
var import_colorManipulator10 = __toESM(require_colorManipulator());
init_useThemeProps2();
init_styled();
init_useTheme();

// node_modules/@mui/material/utils/shouldSpreadAdditionalProps.js
init_utils4();
var shouldSpreadAdditionalProps = (Slot) => {
  return !Slot || !isHostComponent(Slot);
};
var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

// node_modules/@mui/material/Slider/Slider.js
init_capitalize();

// node_modules/@mui/material/Slider/SliderValueLabel.js
var React78 = __toESM(require_react());
var import_prop_types64 = __toESM(require_prop_types());
init_clsx();

// node_modules/@mui/material/Slider/sliderClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSliderUtilityClass(slot) {
  return generateUtilityClass("MuiSlider", slot);
}
var sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
var sliderClasses_default = sliderClasses;

// node_modules/@mui/material/Slider/SliderValueLabel.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
"use client";
var useValueLabelClasses = (props) => {
  const {
    open
  } = props;
  const utilityClasses = {
    offset: clsx_default(open && sliderClasses_default.valueLabelOpen),
    circle: sliderClasses_default.valueLabelCircle,
    label: sliderClasses_default.valueLabelLabel
  };
  return utilityClasses;
};
function SliderValueLabel(props) {
  const {
    children,
    className,
    value
  } = props;
  const classes2 = useValueLabelClasses(props);
  if (!children) {
    return null;
  }
  return React78.cloneElement(children, {
    className: clsx_default(children.props.className)
  }, (0, import_jsx_runtime92.jsxs)(React78.Fragment, {
    children: [children.props.children, (0, import_jsx_runtime91.jsx)("span", {
      className: clsx_default(classes2.offset, className),
      "aria-hidden": true,
      children: (0, import_jsx_runtime91.jsx)("span", {
        className: classes2.circle,
        children: (0, import_jsx_runtime91.jsx)("span", {
          className: classes2.label,
          children: value
        })
      })
    })]
  }));
}
true ? SliderValueLabel.propTypes = {
  children: import_prop_types64.default.element.isRequired,
  className: import_prop_types64.default.string,
  value: import_prop_types64.default.node
} : void 0;

// node_modules/@mui/material/Slider/Slider.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
"use client";
var _excluded62 = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "shiftStep", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
function Identity(x) {
  return x;
}
var SliderRoot = styled_default("span", {
  name: "MuiSlider",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles5[`size${capitalize_default(ownerState.size)}`], ownerState.marked && styles5.marked, ownerState.orientation === "vertical" && styles5.vertical, ownerState.track === "inverted" && styles5.trackInverted, ownerState.track === false && styles5.trackFalse];
  }
})(({
  theme,
  ownerState
}) => _extends({
  borderRadius: 12,
  boxSizing: "content-box",
  display: "inline-block",
  position: "relative",
  cursor: "pointer",
  touchAction: "none",
  color: (theme.vars || theme).palette[ownerState.color].main,
  WebkitTapHighlightColor: "transparent"
}, ownerState.orientation === "horizontal" && _extends({
  height: 4,
  width: "100%",
  padding: "13px 0",
  "@media (pointer: coarse)": {
    padding: "20px 0"
  }
}, ownerState.size === "small" && {
  height: 2
}, ownerState.marked && {
  marginBottom: 20
}), ownerState.orientation === "vertical" && _extends({
  height: "100%",
  width: 4,
  padding: "0 13px",
  "@media (pointer: coarse)": {
    padding: "0 20px"
  }
}, ownerState.size === "small" && {
  width: 2
}, ownerState.marked && {
  marginRight: 44
}), {
  "@media print": {
    colorAdjust: "exact"
  },
  [`&.${sliderClasses_default.disabled}`]: {
    pointerEvents: "none",
    cursor: "default",
    color: (theme.vars || theme).palette.grey[400]
  },
  [`&.${sliderClasses_default.dragging}`]: {
    [`& .${sliderClasses_default.thumb}, & .${sliderClasses_default.track}`]: {
      transition: "none"
    }
  }
}));
var SliderRail = styled_default("span", {
  name: "MuiSlider",
  slot: "Rail",
  overridesResolver: (props, styles5) => styles5.rail
})(({
  ownerState
}) => _extends({
  display: "block",
  position: "absolute",
  borderRadius: "inherit",
  backgroundColor: "currentColor",
  opacity: 0.38
}, ownerState.orientation === "horizontal" && {
  width: "100%",
  height: "inherit",
  top: "50%",
  transform: "translateY(-50%)"
}, ownerState.orientation === "vertical" && {
  height: "100%",
  width: "inherit",
  left: "50%",
  transform: "translateX(-50%)"
}, ownerState.track === "inverted" && {
  opacity: 1
}));
var SliderTrack = styled_default("span", {
  name: "MuiSlider",
  slot: "Track",
  overridesResolver: (props, styles5) => styles5.track
})(({
  theme,
  ownerState
}) => {
  const color = theme.palette.mode === "light" ? (0, import_colorManipulator10.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, import_colorManipulator10.darken)(theme.palette[ownerState.color].main, 0.5);
  return _extends({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    border: "1px solid currentColor",
    backgroundColor: "currentColor",
    transition: theme.transitions.create(["left", "width", "bottom", "height"], {
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.size === "small" && {
    border: "none"
  }, ownerState.orientation === "horizontal" && {
    height: "inherit",
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.orientation === "vertical" && {
    width: "inherit",
    left: "50%",
    transform: "translateX(-50%)"
  }, ownerState.track === false && {
    display: "none"
  }, ownerState.track === "inverted" && {
    backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color,
    borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color
  });
});
var SliderThumb = styled_default("span", {
  name: "MuiSlider",
  slot: "Thumb",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.thumb, styles5[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles5[`thumbSize${capitalize_default(ownerState.size)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends({
  position: "absolute",
  width: 20,
  height: 20,
  boxSizing: "border-box",
  borderRadius: "50%",
  outline: 0,
  backgroundColor: "currentColor",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
    duration: theme.transitions.duration.shortest
  })
}, ownerState.size === "small" && {
  width: 12,
  height: 12
}, ownerState.orientation === "horizontal" && {
  top: "50%",
  transform: "translate(-50%, -50%)"
}, ownerState.orientation === "vertical" && {
  left: "50%",
  transform: "translate(-50%, 50%)"
}, {
  "&::before": _extends({
    position: "absolute",
    content: '""',
    borderRadius: "inherit",
    width: "100%",
    height: "100%",
    boxShadow: (theme.vars || theme).shadows[2]
  }, ownerState.size === "small" && {
    boxShadow: "none"
  }),
  "&::after": {
    position: "absolute",
    content: '""',
    borderRadius: "50%",
    width: 42,
    height: 42,
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  },
  [`&:hover, &.${sliderClasses_default.focusVisible}`]: {
    boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : (0, import_colorManipulator10.alpha)(theme.palette[ownerState.color].main, 0.16)}`,
    "@media (hover: none)": {
      boxShadow: "none"
    }
  },
  [`&.${sliderClasses_default.active}`]: {
    boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : (0, import_colorManipulator10.alpha)(theme.palette[ownerState.color].main, 0.16)}`
  },
  [`&.${sliderClasses_default.disabled}`]: {
    "&:hover": {
      boxShadow: "none"
    }
  }
}));
var SliderValueLabel2 = styled_default(SliderValueLabel, {
  name: "MuiSlider",
  slot: "ValueLabel",
  overridesResolver: (props, styles5) => styles5.valueLabel
})(({
  theme,
  ownerState
}) => _extends({
  [`&.${sliderClasses_default.valueLabelOpen}`]: {
    transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(1)`
  },
  zIndex: 1,
  whiteSpace: "nowrap"
}, theme.typography.body2, {
  fontWeight: 500,
  transition: theme.transitions.create(["transform"], {
    duration: theme.transitions.duration.shortest
  }),
  transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(0)`,
  position: "absolute",
  backgroundColor: (theme.vars || theme).palette.grey[600],
  borderRadius: 2,
  color: (theme.vars || theme).palette.common.white,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  padding: "0.25rem 0.75rem"
}, ownerState.orientation === "horizontal" && {
  top: "-10px",
  transformOrigin: "bottom center",
  "&::before": {
    position: "absolute",
    content: '""',
    width: 8,
    height: 8,
    transform: "translate(-50%, 50%) rotate(45deg)",
    backgroundColor: "inherit",
    bottom: 0,
    left: "50%"
  }
}, ownerState.orientation === "vertical" && {
  right: ownerState.size === "small" ? "20px" : "30px",
  top: "50%",
  transformOrigin: "right center",
  "&::before": {
    position: "absolute",
    content: '""',
    width: 8,
    height: 8,
    transform: "translate(-50%, -50%) rotate(45deg)",
    backgroundColor: "inherit",
    right: -8,
    top: "50%"
  }
}, ownerState.size === "small" && {
  fontSize: theme.typography.pxToRem(12),
  padding: "0.25rem 0.5rem"
}));
var SliderMark = styled_default("span", {
  name: "MuiSlider",
  slot: "Mark",
  shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
  overridesResolver: (props, styles5) => {
    const {
      markActive
    } = props;
    return [styles5.mark, markActive && styles5.markActive];
  }
})(({
  theme,
  ownerState,
  markActive
}) => _extends({
  position: "absolute",
  width: 2,
  height: 2,
  borderRadius: 1,
  backgroundColor: "currentColor"
}, ownerState.orientation === "horizontal" && {
  top: "50%",
  transform: "translate(-1px, -50%)"
}, ownerState.orientation === "vertical" && {
  left: "50%",
  transform: "translate(-50%, 1px)"
}, markActive && {
  backgroundColor: (theme.vars || theme).palette.background.paper,
  opacity: 0.8
}));
var SliderMarkLabel = styled_default("span", {
  name: "MuiSlider",
  slot: "MarkLabel",
  shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
  overridesResolver: (props, styles5) => styles5.markLabel
})(({
  theme,
  ownerState,
  markLabelActive
}) => _extends({}, theme.typography.body2, {
  color: (theme.vars || theme).palette.text.secondary,
  position: "absolute",
  whiteSpace: "nowrap"
}, ownerState.orientation === "horizontal" && {
  top: 30,
  transform: "translateX(-50%)",
  "@media (pointer: coarse)": {
    top: 40
  }
}, ownerState.orientation === "vertical" && {
  left: 36,
  transform: "translateY(50%)",
  "@media (pointer: coarse)": {
    left: 44
  }
}, markLabelActive && {
  color: (theme.vars || theme).palette.text.primary
}));
var useUtilityClasses52 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track,
    classes: classes2,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color && `color${capitalize_default(color)}`, size && `size${capitalize_default(size)}`],
    rail: ["rail"],
    track: ["track"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize_default(size)}`, color && `thumbColor${capitalize_default(color)}`],
    active: ["active"],
    disabled: ["disabled"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses(slots, getSliderUtilityClass, classes2);
};
var Forward = ({
  children
}) => children;
var Slider = React79.forwardRef(function Slider2(inputProps, ref) {
  var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
  const props = useThemeProps2({
    props: inputProps,
    name: "MuiSlider"
  });
  const theme = useTheme();
  const isRtl = theme.direction === "rtl";
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    "aria-labelledby": ariaLabelledby,
    component = "span",
    components = {},
    componentsProps = {},
    color = "primary",
    classes: classesProp,
    className,
    disableSwap = false,
    disabled = false,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max: max2 = 100,
    min: min2 = 0,
    orientation = "horizontal",
    shiftStep = 10,
    size = "medium",
    step = 1,
    scale = Identity,
    slotProps,
    slots,
    track = "normal",
    valueLabelDisplay = "off",
    valueLabelFormat = Identity
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
  const ownerState = _extends({}, props, {
    isRtl,
    max: max2,
    min: min2,
    classes: classesProp,
    disabled,
    disableSwap,
    orientation,
    marks: marksProp,
    color,
    size,
    step,
    shiftStep,
    scale,
    track,
    valueLabelDisplay,
    valueLabelFormat
  });
  const {
    axisProps,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    open,
    active,
    axis,
    focusedThumbIndex,
    range: range2,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap,
    getThumbStyle
  } = useSlider(_extends({}, ownerState, {
    rootRef: ref
  }));
  ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
  ownerState.dragging = dragging;
  ownerState.focusedThumbIndex = focusedThumbIndex;
  const classes2 = useUtilityClasses52(ownerState);
  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
  const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
  const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
  const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
  const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : SliderValueLabel2;
  const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
  const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
  const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
  const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
  const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
  const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
  const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
  const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
  const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
  const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
  const rootProps = useSlotProps({
    elementType: RootSlot,
    getSlotProps: getRootProps,
    externalSlotProps: rootSlotProps,
    externalForwardedProps: other,
    additionalProps: _extends({}, shouldSpreadAdditionalProps_default(RootSlot) && {
      as: component
    }),
    ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
    className: [classes2.root, className]
  });
  const railProps = useSlotProps({
    elementType: RailSlot,
    externalSlotProps: railSlotProps,
    ownerState,
    className: classes2.rail
  });
  const trackProps = useSlotProps({
    elementType: TrackSlot,
    externalSlotProps: trackSlotProps,
    additionalProps: {
      style: _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))
    },
    ownerState: _extends({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
    className: classes2.track
  });
  const thumbProps = useSlotProps({
    elementType: ThumbSlot,
    getSlotProps: getThumbProps,
    externalSlotProps: thumbSlotProps,
    ownerState: _extends({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
    className: classes2.thumb
  });
  const valueLabelProps = useSlotProps({
    elementType: ValueLabelSlot,
    externalSlotProps: valueLabelSlotProps,
    ownerState: _extends({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
    className: classes2.valueLabel
  });
  const markProps = useSlotProps({
    elementType: MarkSlot,
    externalSlotProps: markSlotProps,
    ownerState,
    className: classes2.mark
  });
  const markLabelProps = useSlotProps({
    elementType: MarkLabelSlot,
    externalSlotProps: markLabelSlotProps,
    ownerState,
    className: classes2.markLabel
  });
  const inputSliderProps = useSlotProps({
    elementType: InputSlot,
    getSlotProps: getHiddenInputProps,
    externalSlotProps: inputSlotProps,
    ownerState
  });
  return (0, import_jsx_runtime94.jsxs)(RootSlot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime93.jsx)(RailSlot, _extends({}, railProps)), (0, import_jsx_runtime93.jsx)(TrackSlot, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index) => {
      const percent = valueToPercent(mark.value, min2, max2);
      const style = axisProps[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range2 ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range2 ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime94.jsxs)(React79.Fragment, {
        children: [(0, import_jsx_runtime93.jsx)(MarkSlot, _extends({
          "data-index": index
        }, markProps, !isHostComponent(MarkSlot) && {
          markActive
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_default(markProps.className, markActive && classes2.markActive)
        })), mark.label != null ? (0, import_jsx_runtime93.jsx)(MarkLabelSlot, _extends({
          "aria-hidden": true,
          "data-index": index
        }, markLabelProps, !isHostComponent(MarkLabelSlot) && {
          markLabelActive: markActive
        }, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_default(classes2.markLabel, markLabelProps.className, markActive && classes2.markLabelActive),
          children: mark.label
        })) : null]
      }, index);
    }), values.map((value, index) => {
      const percent = valueToPercent(value, min2, max2);
      const style = axisProps[axis].offset(percent);
      const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
      return (0, import_jsx_runtime93.jsx)(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {
        valueLabelFormat,
        valueLabelDisplay,
        value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat,
        index,
        open: open === index || active === index || valueLabelDisplay === "on",
        disabled
      }, valueLabelProps, {
        children: (0, import_jsx_runtime93.jsx)(ThumbSlot, _extends({
          "data-index": index
        }, thumbProps, {
          className: clsx_default(classes2.thumb, thumbProps.className, active === index && classes2.active, focusedThumbIndex === index && classes2.focusVisible),
          style: _extends({}, style, getThumbStyle(index), thumbProps.style),
          children: (0, import_jsx_runtime93.jsx)(InputSlot, _extends({
            "data-index": index,
            "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
            "aria-valuenow": scale(value),
            "aria-labelledby": ariaLabelledby,
            "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
            value: values[index]
          }, inputSliderProps))
        }))
      }), index);
    })]
  }));
});
true ? Slider.propTypes = {
  "aria-label": chainPropTypes(import_prop_types65.default.string, (props) => {
    const range2 = Array.isArray(props.value || props.defaultValue);
    if (range2 && props["aria-label"] != null) {
      return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
    }
    return null;
  }),
  "aria-labelledby": import_prop_types65.default.string,
  "aria-valuetext": chainPropTypes(import_prop_types65.default.string, (props) => {
    const range2 = Array.isArray(props.value || props.defaultValue);
    if (range2 && props["aria-valuetext"] != null) {
      return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
    }
    return null;
  }),
  children: import_prop_types65.default.node,
  classes: import_prop_types65.default.object,
  className: import_prop_types65.default.string,
  color: import_prop_types65.default.oneOfType([import_prop_types65.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types65.default.string]),
  components: import_prop_types65.default.shape({
    Input: import_prop_types65.default.elementType,
    Mark: import_prop_types65.default.elementType,
    MarkLabel: import_prop_types65.default.elementType,
    Rail: import_prop_types65.default.elementType,
    Root: import_prop_types65.default.elementType,
    Thumb: import_prop_types65.default.elementType,
    Track: import_prop_types65.default.elementType,
    ValueLabel: import_prop_types65.default.elementType
  }),
  componentsProps: import_prop_types65.default.shape({
    input: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    mark: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    markLabel: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    rail: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    root: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    thumb: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    track: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    valueLabel: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.shape({
      children: import_prop_types65.default.element,
      className: import_prop_types65.default.string,
      open: import_prop_types65.default.bool,
      style: import_prop_types65.default.object,
      value: import_prop_types65.default.number,
      valueLabelDisplay: import_prop_types65.default.oneOf(["auto", "off", "on"])
    })])
  }),
  defaultValue: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.number), import_prop_types65.default.number]),
  disabled: import_prop_types65.default.bool,
  disableSwap: import_prop_types65.default.bool,
  getAriaLabel: import_prop_types65.default.func,
  getAriaValueText: import_prop_types65.default.func,
  marks: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.shape({
    label: import_prop_types65.default.node,
    value: import_prop_types65.default.number.isRequired
  })), import_prop_types65.default.bool]),
  max: import_prop_types65.default.number,
  min: import_prop_types65.default.number,
  name: import_prop_types65.default.string,
  onChange: import_prop_types65.default.func,
  onChangeCommitted: import_prop_types65.default.func,
  orientation: import_prop_types65.default.oneOf(["horizontal", "vertical"]),
  scale: import_prop_types65.default.func,
  shiftStep: import_prop_types65.default.number,
  size: import_prop_types65.default.oneOfType([import_prop_types65.default.oneOf(["small", "medium"]), import_prop_types65.default.string]),
  slotProps: import_prop_types65.default.shape({
    input: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    mark: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    markLabel: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    rail: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    root: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    thumb: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    track: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    valueLabel: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.shape({
      children: import_prop_types65.default.element,
      className: import_prop_types65.default.string,
      open: import_prop_types65.default.bool,
      style: import_prop_types65.default.object,
      value: import_prop_types65.default.number,
      valueLabelDisplay: import_prop_types65.default.oneOf(["auto", "off", "on"])
    })])
  }),
  slots: import_prop_types65.default.shape({
    input: import_prop_types65.default.elementType,
    mark: import_prop_types65.default.elementType,
    markLabel: import_prop_types65.default.elementType,
    rail: import_prop_types65.default.elementType,
    root: import_prop_types65.default.elementType,
    thumb: import_prop_types65.default.elementType,
    track: import_prop_types65.default.elementType,
    valueLabel: import_prop_types65.default.elementType
  }),
  step: import_prop_types65.default.number,
  sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object]),
  tabIndex: import_prop_types65.default.number,
  track: import_prop_types65.default.oneOf(["inverted", "normal", false]),
  value: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.number), import_prop_types65.default.number]),
  valueLabelDisplay: import_prop_types65.default.oneOf(["auto", "off", "on"]),
  valueLabelFormat: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.string])
} : void 0;

// node_modules/@mui/material/Slider/index.js
"use client";

// node_modules/@mui/material/Snackbar/Snackbar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React81 = __toESM(require_react());
var import_prop_types67 = __toESM(require_prop_types());
init_utils4();
init_composeClasses();
init_ClickAwayListener();
init_useSnackbar();
init_styled();
init_useTheme();
init_useThemeProps2();
init_capitalize();
init_Grow();

// node_modules/@mui/material/SnackbarContent/SnackbarContent.js
init_objectWithoutPropertiesLoose();
init_extends();
var React80 = __toESM(require_react());
var import_prop_types66 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
var import_colorManipulator11 = __toESM(require_colorManipulator());
init_styled();
init_useThemeProps2();
init_Paper();

// node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSnackbarContentUtilityClass(slot) {
  return generateUtilityClass("MuiSnackbarContent", slot);
}
var snackbarContentClasses = generateUtilityClasses("MuiSnackbarContent", ["root", "message", "action"]);

// node_modules/@mui/material/SnackbarContent/SnackbarContent.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
"use client";
var _excluded63 = ["action", "className", "message", "role"];
var useUtilityClasses53 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    action: ["action"],
    message: ["message"]
  };
  return composeClasses(slots, getSnackbarContentUtilityClass, classes2);
};
var SnackbarContentRoot = styled_default(Paper_default, {
  name: "MuiSnackbarContent",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme
}) => {
  const emphasis = theme.palette.mode === "light" ? 0.8 : 0.98;
  const backgroundColor = (0, import_colorManipulator11.emphasize)(theme.palette.background.default, emphasis);
  return _extends({}, theme.typography.body2, {
    color: theme.vars ? theme.vars.palette.SnackbarContent.color : theme.palette.getContrastText(backgroundColor),
    backgroundColor: theme.vars ? theme.vars.palette.SnackbarContent.bg : backgroundColor,
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    padding: "6px 16px",
    borderRadius: (theme.vars || theme).shape.borderRadius,
    flexGrow: 1,
    [theme.breakpoints.up("sm")]: {
      flexGrow: "initial",
      minWidth: 288
    }
  });
});
var SnackbarContentMessage = styled_default("div", {
  name: "MuiSnackbarContent",
  slot: "Message",
  overridesResolver: (props, styles5) => styles5.message
})({
  padding: "8px 0"
});
var SnackbarContentAction = styled_default("div", {
  name: "MuiSnackbarContent",
  slot: "Action",
  overridesResolver: (props, styles5) => styles5.action
})({
  display: "flex",
  alignItems: "center",
  marginLeft: "auto",
  paddingLeft: 16,
  marginRight: -8
});
var SnackbarContent = React80.forwardRef(function SnackbarContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSnackbarContent"
  });
  const {
    action,
    className,
    message,
    role = "alert"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
  const ownerState = props;
  const classes2 = useUtilityClasses53(ownerState);
  return (0, import_jsx_runtime96.jsxs)(SnackbarContentRoot, _extends({
    role,
    square: true,
    elevation: 6,
    className: clsx_default(classes2.root, className),
    ownerState,
    ref
  }, other, {
    children: [(0, import_jsx_runtime95.jsx)(SnackbarContentMessage, {
      className: classes2.message,
      ownerState,
      children: message
    }), action ? (0, import_jsx_runtime95.jsx)(SnackbarContentAction, {
      className: classes2.action,
      ownerState,
      children: action
    }) : null]
  }));
});
true ? SnackbarContent.propTypes = {
  action: import_prop_types66.default.node,
  classes: import_prop_types66.default.object,
  className: import_prop_types66.default.string,
  message: import_prop_types66.default.node,
  role: import_prop_types66.default.string,
  sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
} : void 0;
var SnackbarContent_default = SnackbarContent;

// node_modules/@mui/material/SnackbarContent/index.js
"use client";

// node_modules/@mui/material/Snackbar/snackbarClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSnackbarUtilityClass(slot) {
  return generateUtilityClass("MuiSnackbar", slot);
}
var snackbarClasses = generateUtilityClasses("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);

// node_modules/@mui/material/Snackbar/Snackbar.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
"use client";
var _excluded64 = ["onEnter", "onExited"];
var _excluded214 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];
var useUtilityClasses54 = (ownerState) => {
  const {
    classes: classes2,
    anchorOrigin
  } = ownerState;
  const slots = {
    root: ["root", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`]
  };
  return composeClasses(slots, getSnackbarUtilityClass, classes2);
};
var SnackbarRoot = styled_default("div", {
  name: "MuiSnackbar",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  const center = {
    left: "50%",
    right: "auto",
    transform: "translateX(-50%)"
  };
  return _extends({
    zIndex: (theme.vars || theme).zIndex.snackbar,
    position: "fixed",
    display: "flex",
    left: 8,
    right: 8,
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.anchorOrigin.vertical === "top" ? {
    top: 8
  } : {
    bottom: 8
  }, ownerState.anchorOrigin.horizontal === "left" && {
    justifyContent: "flex-start"
  }, ownerState.anchorOrigin.horizontal === "right" && {
    justifyContent: "flex-end"
  }, {
    [theme.breakpoints.up("sm")]: _extends({}, ownerState.anchorOrigin.vertical === "top" ? {
      top: 24
    } : {
      bottom: 24
    }, ownerState.anchorOrigin.horizontal === "center" && center, ownerState.anchorOrigin.horizontal === "left" && {
      left: 24,
      right: "auto"
    }, ownerState.anchorOrigin.horizontal === "right" && {
      right: 24,
      left: "auto"
    })
  });
});
var Snackbar = React81.forwardRef(function Snackbar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSnackbar"
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    action,
    anchorOrigin: {
      vertical,
      horizontal
    } = {
      vertical: "bottom",
      horizontal: "left"
    },
    autoHideDuration = null,
    children,
    className,
    ClickAwayListenerProps,
    ContentProps,
    disableWindowBlurListener = false,
    message,
    open,
    TransitionComponent = Grow_default,
    transitionDuration = defaultTransitionDuration,
    TransitionProps: {
      onEnter,
      onExited
    } = {}
  } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded64), other = _objectWithoutPropertiesLoose(props, _excluded214);
  const ownerState = _extends({}, props, {
    anchorOrigin: {
      vertical,
      horizontal
    },
    autoHideDuration,
    disableWindowBlurListener,
    TransitionComponent,
    transitionDuration
  });
  const classes2 = useUtilityClasses54(ownerState);
  const {
    getRootProps,
    onClickAway
  } = useSnackbar(_extends({}, ownerState));
  const [exited, setExited] = React81.useState(true);
  const rootProps = useSlotProps({
    elementType: SnackbarRoot,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      ref
    },
    className: [classes2.root, className]
  });
  const handleExited = (node) => {
    setExited(true);
    if (onExited) {
      onExited(node);
    }
  };
  const handleEnter = (node, isAppearing) => {
    setExited(false);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  };
  if (!open && exited) {
    return null;
  }
  return (0, import_jsx_runtime97.jsx)(ClickAwayListener, _extends({
    onClickAway
  }, ClickAwayListenerProps, {
    children: (0, import_jsx_runtime97.jsx)(SnackbarRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime97.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        timeout: transitionDuration,
        direction: vertical === "top" ? "down" : "up",
        onEnter: handleEnter,
        onExited: handleExited
      }, TransitionProps, {
        children: children || (0, import_jsx_runtime97.jsx)(SnackbarContent_default, _extends({
          message,
          action
        }, ContentProps))
      }))
    }))
  }));
});
true ? Snackbar.propTypes = {
  action: import_prop_types67.default.node,
  anchorOrigin: import_prop_types67.default.shape({
    horizontal: import_prop_types67.default.oneOf(["center", "left", "right"]).isRequired,
    vertical: import_prop_types67.default.oneOf(["bottom", "top"]).isRequired
  }),
  autoHideDuration: import_prop_types67.default.number,
  children: import_prop_types67.default.element,
  classes: import_prop_types67.default.object,
  className: import_prop_types67.default.string,
  ClickAwayListenerProps: import_prop_types67.default.object,
  ContentProps: import_prop_types67.default.object,
  disableWindowBlurListener: import_prop_types67.default.bool,
  key: () => null,
  message: import_prop_types67.default.node,
  onBlur: import_prop_types67.default.func,
  onClose: import_prop_types67.default.func,
  onFocus: import_prop_types67.default.func,
  onMouseEnter: import_prop_types67.default.func,
  onMouseLeave: import_prop_types67.default.func,
  open: import_prop_types67.default.bool,
  resumeHideDuration: import_prop_types67.default.number,
  sx: import_prop_types67.default.oneOfType([import_prop_types67.default.arrayOf(import_prop_types67.default.oneOfType([import_prop_types67.default.func, import_prop_types67.default.object, import_prop_types67.default.bool])), import_prop_types67.default.func, import_prop_types67.default.object]),
  TransitionComponent: import_prop_types67.default.elementType,
  transitionDuration: import_prop_types67.default.oneOfType([import_prop_types67.default.number, import_prop_types67.default.shape({
    appear: import_prop_types67.default.number,
    enter: import_prop_types67.default.number,
    exit: import_prop_types67.default.number
  })]),
  TransitionProps: import_prop_types67.default.object
} : void 0;

// node_modules/@mui/material/Snackbar/index.js
"use client";

// node_modules/@mui/material/SpeedDial/SpeedDial.js
init_objectWithoutPropertiesLoose();
init_extends();
var React83 = __toESM(require_react());
var import_react_is6 = __toESM(require_react_is());
var import_prop_types69 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_useTimeout();
init_clamp();
init_styled();
init_useThemeProps2();
init_useTheme();

// node_modules/@mui/material/Zoom/Zoom.js
init_extends();
init_objectWithoutPropertiesLoose();
var React82 = __toESM(require_react());
var import_prop_types68 = __toESM(require_prop_types());
init_esm2();
init_elementAcceptingRef();
init_useTheme();
init_utils3();
init_useForkRef2();
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
"use client";
var _excluded65 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
var styles3 = {
  entering: {
    transform: "none"
  },
  entered: {
    transform: "none"
  }
};
var Zoom = React82.forwardRef(function Zoom2(props, ref) {
  const theme = useTheme();
  const defaultTimeout = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    addEndListener,
    appear = true,
    children,
    easing,
    in: inProp,
    onEnter,
    onEntered,
    onEntering,
    onExit,
    onExited,
    onExiting,
    style,
    timeout = defaultTimeout,
    TransitionComponent = Transition_default
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
  const nodeRef = React82.useRef(null);
  const handleRef = useForkRef_default(nodeRef, children.ref, ref);
  const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
    if (callback) {
      const node = nodeRef.current;
      if (maybeIsAppearing === void 0) {
        callback(node);
      } else {
        callback(node, maybeIsAppearing);
      }
    }
  };
  const handleEntering = normalizedTransitionCallback(onEntering);
  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
    reflow(node);
    const transitionProps = getTransitionProps({
      style,
      timeout,
      easing
    }, {
      mode: "enter"
    });
    node.style.webkitTransition = theme.transitions.create("transform", transitionProps);
    node.style.transition = theme.transitions.create("transform", transitionProps);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback(onEntered);
  const handleExiting = normalizedTransitionCallback(onExiting);
  const handleExit = normalizedTransitionCallback((node) => {
    const transitionProps = getTransitionProps({
      style,
      timeout,
      easing
    }, {
      mode: "exit"
    });
    node.style.webkitTransition = theme.transitions.create("transform", transitionProps);
    node.style.transition = theme.transitions.create("transform", transitionProps);
    if (onExit) {
      onExit(node);
    }
  });
  const handleExited = normalizedTransitionCallback(onExited);
  const handleAddEndListener = (next) => {
    if (addEndListener) {
      addEndListener(nodeRef.current, next);
    }
  };
  return (0, import_jsx_runtime98.jsx)(TransitionComponent, _extends({
    appear,
    in: inProp,
    nodeRef,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    timeout
  }, other, {
    children: (state, childProps) => {
      return React82.cloneElement(children, _extends({
        style: _extends({
          transform: "scale(0)",
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles3[state], style, children.props.style),
        ref: handleRef
      }, childProps));
    }
  }));
});
true ? Zoom.propTypes = {
  addEndListener: import_prop_types68.default.func,
  appear: import_prop_types68.default.bool,
  children: elementAcceptingRef_default.isRequired,
  easing: import_prop_types68.default.oneOfType([import_prop_types68.default.shape({
    enter: import_prop_types68.default.string,
    exit: import_prop_types68.default.string
  }), import_prop_types68.default.string]),
  in: import_prop_types68.default.bool,
  onEnter: import_prop_types68.default.func,
  onEntered: import_prop_types68.default.func,
  onEntering: import_prop_types68.default.func,
  onExit: import_prop_types68.default.func,
  onExited: import_prop_types68.default.func,
  onExiting: import_prop_types68.default.func,
  style: import_prop_types68.default.object,
  timeout: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.shape({
    appear: import_prop_types68.default.number,
    enter: import_prop_types68.default.number,
    exit: import_prop_types68.default.number
  })])
} : void 0;
var Zoom_default = Zoom;

// node_modules/@mui/material/Zoom/index.js
"use client";

// node_modules/@mui/material/SpeedDial/SpeedDial.js
init_capitalize();
init_isMuiElement();
init_useForkRef2();
init_useControlled2();

// node_modules/@mui/material/SpeedDial/speedDialClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSpeedDialUtilityClass(slot) {
  return generateUtilityClass("MuiSpeedDial", slot);
}
var speedDialClasses = generateUtilityClasses("MuiSpeedDial", ["root", "fab", "directionUp", "directionDown", "directionLeft", "directionRight", "actions", "actionsClosed"]);
var speedDialClasses_default = speedDialClasses;

// node_modules/@mui/material/SpeedDial/SpeedDial.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
var import_jsx_runtime100 = __toESM(require_jsx_runtime());
"use client";
var _excluded66 = ["ref"];
var _excluded215 = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"];
var _excluded310 = ["ref"];
var useUtilityClasses55 = (ownerState) => {
  const {
    classes: classes2,
    open,
    direction
  } = ownerState;
  const slots = {
    root: ["root", `direction${capitalize_default(direction)}`],
    fab: ["fab"],
    actions: ["actions", !open && "actionsClosed"]
  };
  return composeClasses(slots, getSpeedDialUtilityClass, classes2);
};
function getOrientation(direction) {
  if (direction === "up" || direction === "down") {
    return "vertical";
  }
  if (direction === "right" || direction === "left") {
    return "horizontal";
  }
  return void 0;
}
var dialRadius = 32;
var spacingActions = 16;
var SpeedDialRoot = styled_default("div", {
  name: "MuiSpeedDial",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`direction${capitalize_default(ownerState.direction)}`]];
  }
})(({
  theme,
  ownerState
}) => _extends({
  zIndex: (theme.vars || theme).zIndex.speedDial,
  display: "flex",
  alignItems: "center",
  pointerEvents: "none"
}, ownerState.direction === "up" && {
  flexDirection: "column-reverse",
  [`& .${speedDialClasses_default.actions}`]: {
    flexDirection: "column-reverse",
    marginBottom: -dialRadius,
    paddingBottom: spacingActions + dialRadius
  }
}, ownerState.direction === "down" && {
  flexDirection: "column",
  [`& .${speedDialClasses_default.actions}`]: {
    flexDirection: "column",
    marginTop: -dialRadius,
    paddingTop: spacingActions + dialRadius
  }
}, ownerState.direction === "left" && {
  flexDirection: "row-reverse",
  [`& .${speedDialClasses_default.actions}`]: {
    flexDirection: "row-reverse",
    marginRight: -dialRadius,
    paddingRight: spacingActions + dialRadius
  }
}, ownerState.direction === "right" && {
  flexDirection: "row",
  [`& .${speedDialClasses_default.actions}`]: {
    flexDirection: "row",
    marginLeft: -dialRadius,
    paddingLeft: spacingActions + dialRadius
  }
}));
var SpeedDialFab = styled_default(Fab_default, {
  name: "MuiSpeedDial",
  slot: "Fab",
  overridesResolver: (props, styles5) => styles5.fab
})(() => ({
  pointerEvents: "auto"
}));
var SpeedDialActions = styled_default("div", {
  name: "MuiSpeedDial",
  slot: "Actions",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.actions, !ownerState.open && styles5.actionsClosed];
  }
})(({
  ownerState
}) => _extends({
  display: "flex",
  pointerEvents: "auto"
}, !ownerState.open && {
  transition: "top 0s linear 0.2s",
  pointerEvents: "none"
}));
var SpeedDial = React83.forwardRef(function SpeedDial2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSpeedDial"
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    ariaLabel,
    FabProps: {
      ref: origDialButtonRef
    } = {},
    children: childrenProp,
    className,
    direction = "up",
    hidden = false,
    icon,
    onBlur,
    onClose,
    onFocus,
    onKeyDown,
    onMouseEnter,
    onMouseLeave,
    onOpen,
    open: openProp,
    TransitionComponent = Zoom_default,
    transitionDuration = defaultTransitionDuration,
    TransitionProps
  } = props, FabProps = _objectWithoutPropertiesLoose(props.FabProps, _excluded66), other = _objectWithoutPropertiesLoose(props, _excluded215);
  const [open, setOpenState] = useControlled_default({
    controlled: openProp,
    default: false,
    name: "SpeedDial",
    state: "open"
  });
  const ownerState = _extends({}, props, {
    open,
    direction
  });
  const classes2 = useUtilityClasses55(ownerState);
  const eventTimer = useTimeout();
  const focusedAction = React83.useRef(0);
  const nextItemArrowKey = React83.useRef();
  const actions = React83.useRef([]);
  actions.current = [actions.current[0]];
  const handleOwnFabRef = React83.useCallback((fabFef) => {
    actions.current[0] = fabFef;
  }, []);
  const handleFabRef = useForkRef_default(origDialButtonRef, handleOwnFabRef);
  const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {
    return (buttonRef) => {
      actions.current[dialActionIndex + 1] = buttonRef;
      if (origButtonRef) {
        origButtonRef(buttonRef);
      }
    };
  };
  const handleKeyDown = (event) => {
    if (onKeyDown) {
      onKeyDown(event);
    }
    const key = event.key.replace("Arrow", "").toLowerCase();
    const {
      current: nextItemArrowKeyCurrent = key
    } = nextItemArrowKey;
    if (event.key === "Escape") {
      setOpenState(false);
      actions.current[0].focus();
      if (onClose) {
        onClose(event, "escapeKeyDown");
      }
      return;
    }
    if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== void 0) {
      event.preventDefault();
      const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1;
      const nextAction = clamp_default(focusedAction.current + actionStep, 0, actions.current.length - 1);
      actions.current[nextAction].focus();
      focusedAction.current = nextAction;
      nextItemArrowKey.current = nextItemArrowKeyCurrent;
    }
  };
  React83.useEffect(() => {
    if (!open) {
      focusedAction.current = 0;
      nextItemArrowKey.current = void 0;
    }
  }, [open]);
  const handleClose2 = (event) => {
    if (event.type === "mouseleave" && onMouseLeave) {
      onMouseLeave(event);
    }
    if (event.type === "blur" && onBlur) {
      onBlur(event);
    }
    eventTimer.clear();
    if (event.type === "blur") {
      eventTimer.start(0, () => {
        setOpenState(false);
        if (onClose) {
          onClose(event, "blur");
        }
      });
    } else {
      setOpenState(false);
      if (onClose) {
        onClose(event, "mouseLeave");
      }
    }
  };
  const handleClick = (event) => {
    if (FabProps.onClick) {
      FabProps.onClick(event);
    }
    eventTimer.clear();
    if (open) {
      setOpenState(false);
      if (onClose) {
        onClose(event, "toggle");
      }
    } else {
      setOpenState(true);
      if (onOpen) {
        onOpen(event, "toggle");
      }
    }
  };
  const handleOpen = (event) => {
    if (event.type === "mouseenter" && onMouseEnter) {
      onMouseEnter(event);
    }
    if (event.type === "focus" && onFocus) {
      onFocus(event);
    }
    eventTimer.clear();
    if (!open) {
      eventTimer.start(0, () => {
        setOpenState(true);
        if (onOpen) {
          const eventMap = {
            focus: "focus",
            mouseenter: "mouseEnter"
          };
          onOpen(event, eventMap[event.type]);
        }
      });
    }
  };
  const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, "");
  const allItems = React83.Children.toArray(childrenProp).filter((child) => {
    if (true) {
      if ((0, import_react_is6.isFragment)(child)) {
        console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React83.isValidElement(child);
  });
  const children = allItems.map((child, index) => {
    const _child$props = child.props, {
      FabProps: {
        ref: origButtonRef
      } = {},
      tooltipPlacement: tooltipPlacementProp
    } = _child$props, ChildFabProps = _objectWithoutPropertiesLoose(_child$props.FabProps, _excluded310);
    const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction) === "vertical" ? "left" : "top");
    return React83.cloneElement(child, {
      FabProps: _extends({}, ChildFabProps, {
        ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
      }),
      delay: 30 * (open ? index : allItems.length - index),
      open,
      tooltipPlacement,
      id: `${id}-action-${index}`
    });
  });
  return (0, import_jsx_runtime100.jsxs)(SpeedDialRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    role: "presentation",
    onKeyDown: handleKeyDown,
    onBlur: handleClose2,
    onFocus: handleOpen,
    onMouseEnter: handleOpen,
    onMouseLeave: handleClose2,
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime99.jsx)(TransitionComponent, _extends({
      in: !hidden,
      timeout: transitionDuration,
      unmountOnExit: true
    }, TransitionProps, {
      children: (0, import_jsx_runtime99.jsx)(SpeedDialFab, _extends({
        color: "primary",
        "aria-label": ariaLabel,
        "aria-haspopup": "true",
        "aria-expanded": open,
        "aria-controls": `${id}-actions`
      }, FabProps, {
        onClick: handleClick,
        className: clsx_default(classes2.fab, FabProps.className),
        ref: handleFabRef,
        ownerState,
        children: React83.isValidElement(icon) && isMuiElement_default(icon, ["SpeedDialIcon"]) ? React83.cloneElement(icon, {
          open
        }) : icon
      }))
    })), (0, import_jsx_runtime99.jsx)(SpeedDialActions, {
      id: `${id}-actions`,
      role: "menu",
      "aria-orientation": getOrientation(direction),
      className: clsx_default(classes2.actions, !open && classes2.actionsClosed),
      ownerState,
      children
    })]
  }));
});
true ? SpeedDial.propTypes = {
  ariaLabel: import_prop_types69.default.string.isRequired,
  children: import_prop_types69.default.node,
  classes: import_prop_types69.default.object,
  className: import_prop_types69.default.string,
  direction: import_prop_types69.default.oneOf(["down", "left", "right", "up"]),
  FabProps: import_prop_types69.default.object,
  hidden: import_prop_types69.default.bool,
  icon: import_prop_types69.default.node,
  onBlur: import_prop_types69.default.func,
  onClose: import_prop_types69.default.func,
  onFocus: import_prop_types69.default.func,
  onKeyDown: import_prop_types69.default.func,
  onMouseEnter: import_prop_types69.default.func,
  onMouseLeave: import_prop_types69.default.func,
  onOpen: import_prop_types69.default.func,
  open: import_prop_types69.default.bool,
  openIcon: import_prop_types69.default.node,
  sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object]),
  TransitionComponent: import_prop_types69.default.elementType,
  transitionDuration: import_prop_types69.default.oneOfType([import_prop_types69.default.number, import_prop_types69.default.shape({
    appear: import_prop_types69.default.number,
    enter: import_prop_types69.default.number,
    exit: import_prop_types69.default.number
  })]),
  TransitionProps: import_prop_types69.default.object
} : void 0;

// node_modules/@mui/material/SpeedDial/index.js
"use client";

// node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js
init_objectWithoutPropertiesLoose();
init_extends();
var React84 = __toESM(require_react());
var import_prop_types70 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
var import_colorManipulator12 = __toESM(require_colorManipulator());
init_styled();
init_useThemeProps2();
init_Tooltip();
init_capitalize();

// node_modules/@mui/material/SpeedDialAction/speedDialActionClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSpeedDialActionUtilityClass(slot) {
  return generateUtilityClass("MuiSpeedDialAction", slot);
}
var speedDialActionClasses = generateUtilityClasses("MuiSpeedDialAction", ["fab", "fabClosed", "staticTooltip", "staticTooltipClosed", "staticTooltipLabel", "tooltipPlacementLeft", "tooltipPlacementRight"]);
var speedDialActionClasses_default = speedDialActionClasses;

// node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var import_jsx_runtime102 = __toESM(require_jsx_runtime());
"use client";
var _excluded67 = ["className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"];
var useUtilityClasses56 = (ownerState) => {
  const {
    open,
    tooltipPlacement,
    classes: classes2
  } = ownerState;
  const slots = {
    fab: ["fab", !open && "fabClosed"],
    staticTooltip: ["staticTooltip", `tooltipPlacement${capitalize_default(tooltipPlacement)}`, !open && "staticTooltipClosed"],
    staticTooltipLabel: ["staticTooltipLabel"]
  };
  return composeClasses(slots, getSpeedDialActionUtilityClass, classes2);
};
var SpeedDialActionFab = styled_default(Fab_default, {
  name: "MuiSpeedDialAction",
  slot: "Fab",
  skipVariantsResolver: false,
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.fab, !ownerState.open && styles5.fabClosed];
  }
})(({
  theme,
  ownerState
}) => _extends({
  margin: 8,
  color: (theme.vars || theme).palette.text.secondary,
  backgroundColor: (theme.vars || theme).palette.background.paper,
  "&:hover": {
    backgroundColor: theme.vars ? theme.vars.palette.SpeedDialAction.fabHoverBg : (0, import_colorManipulator12.emphasize)(theme.palette.background.paper, 0.15)
  },
  transition: `${theme.transitions.create("transform", {
    duration: theme.transitions.duration.shorter
  })}, opacity 0.8s`,
  opacity: 1
}, !ownerState.open && {
  opacity: 0,
  transform: "scale(0)"
}));
var SpeedDialActionStaticTooltip = styled_default("span", {
  name: "MuiSpeedDialAction",
  slot: "StaticTooltip",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.staticTooltip, !ownerState.open && styles5.staticTooltipClosed, styles5[`tooltipPlacement${capitalize_default(ownerState.tooltipPlacement)}`]];
  }
})(({
  theme,
  ownerState
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  [`& .${speedDialActionClasses_default.staticTooltipLabel}`]: _extends({
    transition: theme.transitions.create(["transform", "opacity"], {
      duration: theme.transitions.duration.shorter
    }),
    opacity: 1
  }, !ownerState.open && {
    opacity: 0,
    transform: "scale(0.5)"
  }, ownerState.tooltipPlacement === "left" && {
    transformOrigin: "100% 50%",
    right: "100%",
    marginRight: 8
  }, ownerState.tooltipPlacement === "right" && {
    transformOrigin: "0% 50%",
    left: "100%",
    marginLeft: 8
  })
}));
var SpeedDialActionStaticTooltipLabel = styled_default("span", {
  name: "MuiSpeedDialAction",
  slot: "StaticTooltipLabel",
  overridesResolver: (props, styles5) => styles5.staticTooltipLabel
})(({
  theme
}) => _extends({
  position: "absolute"
}, theme.typography.body1, {
  backgroundColor: (theme.vars || theme).palette.background.paper,
  borderRadius: (theme.vars || theme).shape.borderRadius,
  boxShadow: (theme.vars || theme).shadows[1],
  color: (theme.vars || theme).palette.text.secondary,
  padding: "4px 16px",
  wordBreak: "keep-all"
}));
var SpeedDialAction = React84.forwardRef(function SpeedDialAction2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSpeedDialAction"
  });
  const {
    className,
    delay = 0,
    FabProps = {},
    icon,
    id,
    open,
    TooltipClasses,
    tooltipOpen: tooltipOpenProp = false,
    tooltipPlacement = "left",
    tooltipTitle
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
  const ownerState = _extends({}, props, {
    tooltipPlacement
  });
  const classes2 = useUtilityClasses56(ownerState);
  const [tooltipOpen, setTooltipOpen] = React84.useState(tooltipOpenProp);
  const handleTooltipClose = () => {
    setTooltipOpen(false);
  };
  const handleTooltipOpen = () => {
    setTooltipOpen(true);
  };
  const transitionStyle = {
    transitionDelay: `${delay}ms`
  };
  const fab = (0, import_jsx_runtime101.jsx)(SpeedDialActionFab, _extends({
    size: "small",
    className: clsx_default(classes2.fab, className),
    tabIndex: -1,
    role: "menuitem",
    ownerState
  }, FabProps, {
    style: _extends({}, transitionStyle, FabProps.style),
    children: icon
  }));
  if (tooltipOpenProp) {
    return (0, import_jsx_runtime102.jsxs)(SpeedDialActionStaticTooltip, _extends({
      id,
      ref,
      className: classes2.staticTooltip,
      ownerState
    }, other, {
      children: [(0, import_jsx_runtime101.jsx)(SpeedDialActionStaticTooltipLabel, {
        style: transitionStyle,
        id: `${id}-label`,
        className: classes2.staticTooltipLabel,
        ownerState,
        children: tooltipTitle
      }), React84.cloneElement(fab, {
        "aria-labelledby": `${id}-label`
      })]
    }));
  }
  if (!open && tooltipOpen) {
    setTooltipOpen(false);
  }
  return (0, import_jsx_runtime101.jsx)(Tooltip_default, _extends({
    id,
    ref,
    title: tooltipTitle,
    placement: tooltipPlacement,
    onClose: handleTooltipClose,
    onOpen: handleTooltipOpen,
    open: open && tooltipOpen,
    classes: TooltipClasses
  }, other, {
    children: fab
  }));
});
true ? SpeedDialAction.propTypes = {
  classes: import_prop_types70.default.object,
  className: import_prop_types70.default.string,
  delay: import_prop_types70.default.number,
  FabProps: import_prop_types70.default.object,
  icon: import_prop_types70.default.node,
  id: import_prop_types70.default.string,
  open: import_prop_types70.default.bool,
  sx: import_prop_types70.default.oneOfType([import_prop_types70.default.arrayOf(import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object, import_prop_types70.default.bool])), import_prop_types70.default.func, import_prop_types70.default.object]),
  TooltipClasses: import_prop_types70.default.object,
  tooltipOpen: import_prop_types70.default.bool,
  tooltipPlacement: import_prop_types70.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  tooltipTitle: import_prop_types70.default.node
} : void 0;

// node_modules/@mui/material/SpeedDialAction/index.js
"use client";

// node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js
init_objectWithoutPropertiesLoose();
init_extends();
var React86 = __toESM(require_react());
var import_prop_types71 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/internal/svg-icons/Add.js
var React85 = __toESM(require_react());
init_utils2();
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
"use client";
var Add_default = createSvgIcon((0, import_jsx_runtime103.jsx)("path", {
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), "Add");

// node_modules/@mui/material/SpeedDialIcon/speedDialIconClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSpeedDialIconUtilityClass(slot) {
  return generateUtilityClass("MuiSpeedDialIcon", slot);
}
var speedDialIconClasses = generateUtilityClasses("MuiSpeedDialIcon", ["root", "icon", "iconOpen", "iconWithOpenIconOpen", "openIcon", "openIconOpen"]);
var speedDialIconClasses_default = speedDialIconClasses;

// node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
var import_jsx_runtime105 = __toESM(require_jsx_runtime());
"use client";
var _excluded68 = ["className", "icon", "open", "openIcon"];
var useUtilityClasses57 = (ownerState) => {
  const {
    classes: classes2,
    open,
    openIcon
  } = ownerState;
  const slots = {
    root: ["root"],
    icon: ["icon", open && "iconOpen", openIcon && open && "iconWithOpenIconOpen"],
    openIcon: ["openIcon", open && "openIconOpen"]
  };
  return composeClasses(slots, getSpeedDialIconUtilityClass, classes2);
};
var SpeedDialIconRoot = styled_default("span", {
  name: "MuiSpeedDialIcon",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${speedDialIconClasses_default.icon}`]: styles5.icon
    }, {
      [`& .${speedDialIconClasses_default.icon}`]: ownerState.open && styles5.iconOpen
    }, {
      [`& .${speedDialIconClasses_default.icon}`]: ownerState.open && ownerState.openIcon && styles5.iconWithOpenIconOpen
    }, {
      [`& .${speedDialIconClasses_default.openIcon}`]: styles5.openIcon
    }, {
      [`& .${speedDialIconClasses_default.openIcon}`]: ownerState.open && styles5.openIconOpen
    }, styles5.root];
  }
})(({
  theme,
  ownerState
}) => ({
  height: 24,
  [`& .${speedDialIconClasses_default.icon}`]: _extends({
    transition: theme.transitions.create(["transform", "opacity"], {
      duration: theme.transitions.duration.short
    })
  }, ownerState.open && _extends({
    transform: "rotate(45deg)"
  }, ownerState.openIcon && {
    opacity: 0
  })),
  [`& .${speedDialIconClasses_default.openIcon}`]: _extends({
    position: "absolute",
    transition: theme.transitions.create(["transform", "opacity"], {
      duration: theme.transitions.duration.short
    }),
    opacity: 0,
    transform: "rotate(-45deg)"
  }, ownerState.open && {
    transform: "rotate(0deg)",
    opacity: 1
  })
}));
var SpeedDialIcon = React86.forwardRef(function SpeedDialIcon2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSpeedDialIcon"
  });
  const {
    className,
    icon: iconProp,
    openIcon: openIconProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
  const ownerState = props;
  const classes2 = useUtilityClasses57(ownerState);
  function formatIcon(icon, newClassName) {
    if (React86.isValidElement(icon)) {
      return React86.cloneElement(icon, {
        className: newClassName
      });
    }
    return icon;
  }
  return (0, import_jsx_runtime105.jsxs)(SpeedDialIconRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: [openIconProp ? formatIcon(openIconProp, classes2.openIcon) : null, iconProp ? formatIcon(iconProp, classes2.icon) : (0, import_jsx_runtime104.jsx)(Add_default, {
      className: classes2.icon
    })]
  }));
});
true ? SpeedDialIcon.propTypes = {
  classes: import_prop_types71.default.object,
  className: import_prop_types71.default.string,
  icon: import_prop_types71.default.node,
  open: import_prop_types71.default.bool,
  openIcon: import_prop_types71.default.node,
  sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object])
} : void 0;
SpeedDialIcon.muiName = "SpeedDialIcon";

// node_modules/@mui/material/SpeedDialIcon/index.js
"use client";

// node_modules/@mui/material/index.js
init_Stack();
init_Stack();

// node_modules/@mui/material/Step/Step.js
init_objectWithoutPropertiesLoose();
init_extends();
var React89 = __toESM(require_react());
var import_prop_types72 = __toESM(require_prop_types());
init_clsx();
init_integerPropType();
init_composeClasses();

// node_modules/@mui/material/Stepper/StepperContext.js
var React87 = __toESM(require_react());
var StepperContext = React87.createContext({});
if (true) {
  StepperContext.displayName = "StepperContext";
}
var StepperContext_default = StepperContext;

// node_modules/@mui/material/Step/StepContext.js
var React88 = __toESM(require_react());
var StepContext = React88.createContext({});
if (true) {
  StepContext.displayName = "StepContext";
}
var StepContext_default = StepContext;

// node_modules/@mui/material/Step/Step.js
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Step/stepClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepUtilityClass(slot) {
  return generateUtilityClass("MuiStep", slot);
}
var stepClasses = generateUtilityClasses("MuiStep", ["root", "horizontal", "vertical", "alternativeLabel", "completed"]);

// node_modules/@mui/material/Step/Step.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime());
var import_jsx_runtime107 = __toESM(require_jsx_runtime());
"use client";
var _excluded69 = ["active", "children", "className", "component", "completed", "disabled", "expanded", "index", "last"];
var useUtilityClasses58 = (ownerState) => {
  const {
    classes: classes2,
    orientation,
    alternativeLabel,
    completed
  } = ownerState;
  const slots = {
    root: ["root", orientation, alternativeLabel && "alternativeLabel", completed && "completed"]
  };
  return composeClasses(slots, getStepUtilityClass, classes2);
};
var StepRoot = styled_default("div", {
  name: "MuiStep",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.orientation], ownerState.alternativeLabel && styles5.alternativeLabel, ownerState.completed && styles5.completed];
  }
})(({
  ownerState
}) => _extends({}, ownerState.orientation === "horizontal" && {
  paddingLeft: 8,
  paddingRight: 8
}, ownerState.alternativeLabel && {
  flex: 1,
  position: "relative"
}));
var Step = React89.forwardRef(function Step2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStep"
  });
  const {
    active: activeProp,
    children,
    className,
    component = "div",
    completed: completedProp,
    disabled: disabledProp,
    expanded = false,
    index,
    last
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
  const {
    activeStep,
    connector,
    alternativeLabel,
    orientation,
    nonLinear
  } = React89.useContext(StepperContext_default);
  let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];
  if (activeStep === index) {
    active = activeProp !== void 0 ? activeProp : true;
  } else if (!nonLinear && activeStep > index) {
    completed = completedProp !== void 0 ? completedProp : true;
  } else if (!nonLinear && activeStep < index) {
    disabled = disabledProp !== void 0 ? disabledProp : true;
  }
  const contextValue = React89.useMemo(() => ({
    index,
    last,
    expanded,
    icon: index + 1,
    active,
    completed,
    disabled
  }), [index, last, expanded, active, completed, disabled]);
  const ownerState = _extends({}, props, {
    active,
    orientation,
    alternativeLabel,
    completed,
    disabled,
    expanded,
    component
  });
  const classes2 = useUtilityClasses58(ownerState);
  const newChildren = (0, import_jsx_runtime106.jsxs)(StepRoot, _extends({
    as: component,
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: [connector && alternativeLabel && index !== 0 ? connector : null, children]
  }));
  return (0, import_jsx_runtime107.jsx)(StepContext_default.Provider, {
    value: contextValue,
    children: connector && !alternativeLabel && index !== 0 ? (0, import_jsx_runtime106.jsxs)(React89.Fragment, {
      children: [connector, newChildren]
    }) : newChildren
  });
});
true ? Step.propTypes = {
  active: import_prop_types72.default.bool,
  children: import_prop_types72.default.node,
  classes: import_prop_types72.default.object,
  className: import_prop_types72.default.string,
  completed: import_prop_types72.default.bool,
  component: import_prop_types72.default.elementType,
  disabled: import_prop_types72.default.bool,
  expanded: import_prop_types72.default.bool,
  index: integerPropType_default,
  last: import_prop_types72.default.bool,
  sx: import_prop_types72.default.oneOfType([import_prop_types72.default.arrayOf(import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object, import_prop_types72.default.bool])), import_prop_types72.default.func, import_prop_types72.default.object])
} : void 0;

// node_modules/@mui/material/Step/index.js
"use client";

// node_modules/@mui/material/StepButton/StepButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React94 = __toESM(require_react());
var import_prop_types75 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_ButtonBase();

// node_modules/@mui/material/StepLabel/StepLabel.js
init_objectWithoutPropertiesLoose();
init_extends();
var React93 = __toESM(require_react());
var import_prop_types74 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/StepIcon/StepIcon.js
init_extends();
init_objectWithoutPropertiesLoose();
var React92 = __toESM(require_react());
var import_prop_types73 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/internal/svg-icons/CheckCircle.js
var React90 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
"use client";
var CheckCircle_default = createSvgIcon((0, import_jsx_runtime108.jsx)("path", {
  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
}), "CheckCircle");

// node_modules/@mui/material/internal/svg-icons/Warning.js
var React91 = __toESM(require_react());
init_createSvgIcon();
var import_jsx_runtime109 = __toESM(require_jsx_runtime());
"use client";
var Warning_default = createSvgIcon((0, import_jsx_runtime109.jsx)("path", {
  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
}), "Warning");

// node_modules/@mui/material/StepIcon/StepIcon.js
init_SvgIcon();

// node_modules/@mui/material/StepIcon/stepIconClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepIconUtilityClass(slot) {
  return generateUtilityClass("MuiStepIcon", slot);
}
var stepIconClasses = generateUtilityClasses("MuiStepIcon", ["root", "active", "completed", "error", "text"]);
var stepIconClasses_default = stepIconClasses;

// node_modules/@mui/material/StepIcon/StepIcon.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
"use client";
var _circle;
var _excluded70 = ["active", "className", "completed", "error", "icon"];
var useUtilityClasses59 = (ownerState) => {
  const {
    classes: classes2,
    active,
    completed,
    error
  } = ownerState;
  const slots = {
    root: ["root", active && "active", completed && "completed", error && "error"],
    text: ["text"]
  };
  return composeClasses(slots, getStepIconUtilityClass, classes2);
};
var StepIconRoot = styled_default(SvgIcon_default, {
  name: "MuiStepIcon",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme
}) => ({
  display: "block",
  transition: theme.transitions.create("color", {
    duration: theme.transitions.duration.shortest
  }),
  color: (theme.vars || theme).palette.text.disabled,
  [`&.${stepIconClasses_default.completed}`]: {
    color: (theme.vars || theme).palette.primary.main
  },
  [`&.${stepIconClasses_default.active}`]: {
    color: (theme.vars || theme).palette.primary.main
  },
  [`&.${stepIconClasses_default.error}`]: {
    color: (theme.vars || theme).palette.error.main
  }
}));
var StepIconText = styled_default("text", {
  name: "MuiStepIcon",
  slot: "Text",
  overridesResolver: (props, styles5) => styles5.text
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.primary.contrastText,
  fontSize: theme.typography.caption.fontSize,
  fontFamily: theme.typography.fontFamily
}));
var StepIcon = React92.forwardRef(function StepIcon2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStepIcon"
  });
  const {
    active = false,
    className: classNameProp,
    completed = false,
    error = false,
    icon
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
  const ownerState = _extends({}, props, {
    active,
    completed,
    error
  });
  const classes2 = useUtilityClasses59(ownerState);
  if (typeof icon === "number" || typeof icon === "string") {
    const className = clsx_default(classNameProp, classes2.root);
    if (error) {
      return (0, import_jsx_runtime110.jsx)(StepIconRoot, _extends({
        as: Warning_default,
        className,
        ref,
        ownerState
      }, other));
    }
    if (completed) {
      return (0, import_jsx_runtime110.jsx)(StepIconRoot, _extends({
        as: CheckCircle_default,
        className,
        ref,
        ownerState
      }, other));
    }
    return (0, import_jsx_runtime111.jsxs)(StepIconRoot, _extends({
      className,
      ref,
      ownerState
    }, other, {
      children: [_circle || (_circle = (0, import_jsx_runtime110.jsx)("circle", {
        cx: "12",
        cy: "12",
        r: "12"
      })), (0, import_jsx_runtime110.jsx)(StepIconText, {
        className: classes2.text,
        x: "12",
        y: "12",
        textAnchor: "middle",
        dominantBaseline: "central",
        ownerState,
        children: icon
      })]
    }));
  }
  return icon;
});
true ? StepIcon.propTypes = {
  active: import_prop_types73.default.bool,
  classes: import_prop_types73.default.object,
  className: import_prop_types73.default.string,
  completed: import_prop_types73.default.bool,
  error: import_prop_types73.default.bool,
  icon: import_prop_types73.default.node,
  sx: import_prop_types73.default.oneOfType([import_prop_types73.default.arrayOf(import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object, import_prop_types73.default.bool])), import_prop_types73.default.func, import_prop_types73.default.object])
} : void 0;
var StepIcon_default = StepIcon;

// node_modules/@mui/material/StepIcon/index.js
"use client";

// node_modules/@mui/material/StepLabel/stepLabelClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepLabelUtilityClass(slot) {
  return generateUtilityClass("MuiStepLabel", slot);
}
var stepLabelClasses = generateUtilityClasses("MuiStepLabel", ["root", "horizontal", "vertical", "label", "active", "completed", "error", "disabled", "iconContainer", "alternativeLabel", "labelContainer"]);
var stepLabelClasses_default = stepLabelClasses;

// node_modules/@mui/material/StepLabel/StepLabel.js
var import_jsx_runtime112 = __toESM(require_jsx_runtime());
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
"use client";
var _excluded71 = ["children", "className", "componentsProps", "error", "icon", "optional", "slotProps", "StepIconComponent", "StepIconProps"];
var useUtilityClasses60 = (ownerState) => {
  const {
    classes: classes2,
    orientation,
    active,
    completed,
    error,
    disabled,
    alternativeLabel
  } = ownerState;
  const slots = {
    root: ["root", orientation, error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
    label: ["label", active && "active", completed && "completed", error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
    iconContainer: ["iconContainer", active && "active", completed && "completed", error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
    labelContainer: ["labelContainer", alternativeLabel && "alternativeLabel"]
  };
  return composeClasses(slots, getStepLabelUtilityClass, classes2);
};
var StepLabelRoot = styled_default("span", {
  name: "MuiStepLabel",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.orientation]];
  }
})(({
  ownerState
}) => _extends({
  display: "flex",
  alignItems: "center",
  [`&.${stepLabelClasses_default.alternativeLabel}`]: {
    flexDirection: "column"
  },
  [`&.${stepLabelClasses_default.disabled}`]: {
    cursor: "default"
  }
}, ownerState.orientation === "vertical" && {
  textAlign: "left",
  padding: "8px 0"
}));
var StepLabelLabel = styled_default("span", {
  name: "MuiStepLabel",
  slot: "Label",
  overridesResolver: (props, styles5) => styles5.label
})(({
  theme
}) => _extends({}, theme.typography.body2, {
  display: "block",
  transition: theme.transitions.create("color", {
    duration: theme.transitions.duration.shortest
  }),
  [`&.${stepLabelClasses_default.active}`]: {
    color: (theme.vars || theme).palette.text.primary,
    fontWeight: 500
  },
  [`&.${stepLabelClasses_default.completed}`]: {
    color: (theme.vars || theme).palette.text.primary,
    fontWeight: 500
  },
  [`&.${stepLabelClasses_default.alternativeLabel}`]: {
    marginTop: 16
  },
  [`&.${stepLabelClasses_default.error}`]: {
    color: (theme.vars || theme).palette.error.main
  }
}));
var StepLabelIconContainer = styled_default("span", {
  name: "MuiStepLabel",
  slot: "IconContainer",
  overridesResolver: (props, styles5) => styles5.iconContainer
})(() => ({
  flexShrink: 0,
  display: "flex",
  paddingRight: 8,
  [`&.${stepLabelClasses_default.alternativeLabel}`]: {
    paddingRight: 0
  }
}));
var StepLabelLabelContainer = styled_default("span", {
  name: "MuiStepLabel",
  slot: "LabelContainer",
  overridesResolver: (props, styles5) => styles5.labelContainer
})(({
  theme
}) => ({
  width: "100%",
  color: (theme.vars || theme).palette.text.secondary,
  [`&.${stepLabelClasses_default.alternativeLabel}`]: {
    textAlign: "center"
  }
}));
var StepLabel = React93.forwardRef(function StepLabel2(inProps, ref) {
  var _slotProps$label;
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStepLabel"
  });
  const {
    children,
    className,
    componentsProps = {},
    error = false,
    icon: iconProp,
    optional,
    slotProps = {},
    StepIconComponent: StepIconComponentProp,
    StepIconProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
  const {
    alternativeLabel,
    orientation
  } = React93.useContext(StepperContext_default);
  const {
    active,
    disabled,
    completed,
    icon: iconContext
  } = React93.useContext(StepContext_default);
  const icon = iconProp || iconContext;
  let StepIconComponent = StepIconComponentProp;
  if (icon && !StepIconComponent) {
    StepIconComponent = StepIcon_default;
  }
  const ownerState = _extends({}, props, {
    active,
    alternativeLabel,
    completed,
    disabled,
    error,
    orientation
  });
  const classes2 = useUtilityClasses60(ownerState);
  const labelSlotProps = (_slotProps$label = slotProps.label) != null ? _slotProps$label : componentsProps.label;
  return (0, import_jsx_runtime113.jsxs)(StepLabelRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: [icon || StepIconComponent ? (0, import_jsx_runtime112.jsx)(StepLabelIconContainer, {
      className: classes2.iconContainer,
      ownerState,
      children: (0, import_jsx_runtime112.jsx)(StepIconComponent, _extends({
        completed,
        active,
        error,
        icon
      }, StepIconProps))
    }) : null, (0, import_jsx_runtime113.jsxs)(StepLabelLabelContainer, {
      className: classes2.labelContainer,
      ownerState,
      children: [children ? (0, import_jsx_runtime112.jsx)(StepLabelLabel, _extends({
        ownerState
      }, labelSlotProps, {
        className: clsx_default(classes2.label, labelSlotProps == null ? void 0 : labelSlotProps.className),
        children
      })) : null, optional]
    })]
  }));
});
true ? StepLabel.propTypes = {
  children: import_prop_types74.default.node,
  classes: import_prop_types74.default.object,
  className: import_prop_types74.default.string,
  componentsProps: import_prop_types74.default.shape({
    label: import_prop_types74.default.object
  }),
  error: import_prop_types74.default.bool,
  icon: import_prop_types74.default.node,
  optional: import_prop_types74.default.node,
  slotProps: import_prop_types74.default.shape({
    label: import_prop_types74.default.object
  }),
  StepIconComponent: import_prop_types74.default.elementType,
  StepIconProps: import_prop_types74.default.object,
  sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object])
} : void 0;
StepLabel.muiName = "StepLabel";
var StepLabel_default = StepLabel;

// node_modules/@mui/material/StepLabel/index.js
"use client";

// node_modules/@mui/material/StepButton/StepButton.js
init_isMuiElement();

// node_modules/@mui/material/StepButton/stepButtonClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepButtonUtilityClass(slot) {
  return generateUtilityClass("MuiStepButton", slot);
}
var stepButtonClasses = generateUtilityClasses("MuiStepButton", ["root", "horizontal", "vertical", "touchRipple"]);
var stepButtonClasses_default = stepButtonClasses;

// node_modules/@mui/material/StepButton/StepButton.js
var import_jsx_runtime114 = __toESM(require_jsx_runtime());
"use client";
var _excluded72 = ["children", "className", "icon", "optional"];
var useUtilityClasses61 = (ownerState) => {
  const {
    classes: classes2,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation],
    touchRipple: ["touchRipple"]
  };
  return composeClasses(slots, getStepButtonUtilityClass, classes2);
};
var StepButtonRoot = styled_default(ButtonBase_default, {
  name: "MuiStepButton",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${stepButtonClasses_default.touchRipple}`]: styles5.touchRipple
    }, styles5.root, styles5[ownerState.orientation]];
  }
})(({
  ownerState
}) => _extends({
  width: "100%",
  padding: "24px 16px",
  margin: "-24px -16px",
  boxSizing: "content-box"
}, ownerState.orientation === "vertical" && {
  justifyContent: "flex-start",
  padding: "8px",
  margin: "-8px"
}, {
  [`& .${stepButtonClasses_default.touchRipple}`]: {
    color: "rgba(0, 0, 0, 0.3)"
  }
}));
var StepButton = React94.forwardRef(function StepButton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStepButton"
  });
  const {
    children,
    className,
    icon,
    optional
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
  const {
    disabled,
    active
  } = React94.useContext(StepContext_default);
  const {
    orientation
  } = React94.useContext(StepperContext_default);
  const ownerState = _extends({}, props, {
    orientation
  });
  const classes2 = useUtilityClasses61(ownerState);
  const childProps = {
    icon,
    optional
  };
  const child = isMuiElement_default(children, ["StepLabel"]) ? React94.cloneElement(children, childProps) : (0, import_jsx_runtime114.jsx)(StepLabel_default, _extends({}, childProps, {
    children
  }));
  return (0, import_jsx_runtime114.jsx)(StepButtonRoot, _extends({
    focusRipple: true,
    disabled,
    TouchRippleProps: {
      className: classes2.touchRipple
    },
    className: clsx_default(classes2.root, className),
    ref,
    ownerState,
    "aria-current": active ? "step" : void 0
  }, other, {
    children: child
  }));
});
true ? StepButton.propTypes = {
  children: import_prop_types75.default.node,
  classes: import_prop_types75.default.object,
  className: import_prop_types75.default.string,
  icon: import_prop_types75.default.node,
  optional: import_prop_types75.default.node,
  sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object])
} : void 0;

// node_modules/@mui/material/StepButton/index.js
"use client";

// node_modules/@mui/material/StepConnector/StepConnector.js
init_objectWithoutPropertiesLoose();
init_extends();
var React95 = __toESM(require_react());
var import_prop_types76 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_capitalize();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/StepConnector/stepConnectorClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepConnectorUtilityClass(slot) {
  return generateUtilityClass("MuiStepConnector", slot);
}
var stepConnectorClasses = generateUtilityClasses("MuiStepConnector", ["root", "horizontal", "vertical", "alternativeLabel", "active", "completed", "disabled", "line", "lineHorizontal", "lineVertical"]);

// node_modules/@mui/material/StepConnector/StepConnector.js
var import_jsx_runtime115 = __toESM(require_jsx_runtime());
"use client";
var _excluded73 = ["className"];
var useUtilityClasses62 = (ownerState) => {
  const {
    classes: classes2,
    orientation,
    alternativeLabel,
    active,
    completed,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", orientation, alternativeLabel && "alternativeLabel", active && "active", completed && "completed", disabled && "disabled"],
    line: ["line", `line${capitalize_default(orientation)}`]
  };
  return composeClasses(slots, getStepConnectorUtilityClass, classes2);
};
var StepConnectorRoot = styled_default("div", {
  name: "MuiStepConnector",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.orientation], ownerState.alternativeLabel && styles5.alternativeLabel, ownerState.completed && styles5.completed];
  }
})(({
  ownerState
}) => _extends({
  flex: "1 1 auto"
}, ownerState.orientation === "vertical" && {
  marginLeft: 12
}, ownerState.alternativeLabel && {
  position: "absolute",
  top: 8 + 4,
  left: "calc(-50% + 20px)",
  right: "calc(50% + 20px)"
}));
var StepConnectorLine = styled_default("span", {
  name: "MuiStepConnector",
  slot: "Line",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.line, styles5[`line${capitalize_default(ownerState.orientation)}`]];
  }
})(({
  ownerState,
  theme
}) => {
  const borderColor = theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600];
  return _extends({
    display: "block",
    borderColor: theme.vars ? theme.vars.palette.StepConnector.border : borderColor
  }, ownerState.orientation === "horizontal" && {
    borderTopStyle: "solid",
    borderTopWidth: 1
  }, ownerState.orientation === "vertical" && {
    borderLeftStyle: "solid",
    borderLeftWidth: 1,
    minHeight: 24
  });
});
var StepConnector = React95.forwardRef(function StepConnector2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStepConnector"
  });
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
  const {
    alternativeLabel,
    orientation = "horizontal"
  } = React95.useContext(StepperContext_default);
  const {
    active,
    disabled,
    completed
  } = React95.useContext(StepContext_default);
  const ownerState = _extends({}, props, {
    alternativeLabel,
    orientation,
    active,
    completed,
    disabled
  });
  const classes2 = useUtilityClasses62(ownerState);
  return (0, import_jsx_runtime115.jsx)(StepConnectorRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime115.jsx)(StepConnectorLine, {
      className: classes2.line,
      ownerState
    })
  }));
});
true ? StepConnector.propTypes = {
  classes: import_prop_types76.default.object,
  className: import_prop_types76.default.string,
  sx: import_prop_types76.default.oneOfType([import_prop_types76.default.arrayOf(import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object, import_prop_types76.default.bool])), import_prop_types76.default.func, import_prop_types76.default.object])
} : void 0;
var StepConnector_default = StepConnector;

// node_modules/@mui/material/StepConnector/index.js
"use client";

// node_modules/@mui/material/StepContent/StepContent.js
init_objectWithoutPropertiesLoose();
init_extends();
var React96 = __toESM(require_react());
var import_prop_types77 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_styled();
init_useThemeProps2();

// node_modules/@mui/material/StepContent/stepContentClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepContentUtilityClass(slot) {
  return generateUtilityClass("MuiStepContent", slot);
}
var stepContentClasses = generateUtilityClasses("MuiStepContent", ["root", "last", "transition"]);

// node_modules/@mui/material/StepContent/StepContent.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime());
"use client";
var _excluded74 = ["children", "className", "TransitionComponent", "transitionDuration", "TransitionProps"];
var useUtilityClasses63 = (ownerState) => {
  const {
    classes: classes2,
    last
  } = ownerState;
  const slots = {
    root: ["root", last && "last"],
    transition: ["transition"]
  };
  return composeClasses(slots, getStepContentUtilityClass, classes2);
};
var StepContentRoot = styled_default("div", {
  name: "MuiStepContent",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.last && styles5.last];
  }
})(({
  ownerState,
  theme
}) => _extends({
  marginLeft: 12,
  paddingLeft: 8 + 12,
  paddingRight: 8,
  borderLeft: theme.vars ? `1px solid ${theme.vars.palette.StepContent.border}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600]}`
}, ownerState.last && {
  borderLeft: "none"
}));
var StepContentTransition = styled_default(Collapse_default, {
  name: "MuiStepContent",
  slot: "Transition",
  overridesResolver: (props, styles5) => styles5.transition
})({});
var StepContent = React96.forwardRef(function StepContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStepContent"
  });
  const {
    children,
    className,
    TransitionComponent = Collapse_default,
    transitionDuration: transitionDurationProp = "auto",
    TransitionProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
  const {
    orientation
  } = React96.useContext(StepperContext_default);
  const {
    active,
    last,
    expanded
  } = React96.useContext(StepContext_default);
  const ownerState = _extends({}, props, {
    last
  });
  const classes2 = useUtilityClasses63(ownerState);
  if (true) {
    if (orientation !== "vertical") {
      console.error("MUI: <StepContent /> is only designed for use with the vertical stepper.");
    }
  }
  let transitionDuration = transitionDurationProp;
  if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
    transitionDuration = void 0;
  }
  return (0, import_jsx_runtime116.jsx)(StepContentRoot, _extends({
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime116.jsx)(StepContentTransition, _extends({
      as: TransitionComponent,
      in: active || expanded,
      className: classes2.transition,
      ownerState,
      timeout: transitionDuration,
      unmountOnExit: true
    }, TransitionProps, {
      children
    }))
  }));
});
true ? StepContent.propTypes = {
  children: import_prop_types77.default.node,
  classes: import_prop_types77.default.object,
  className: import_prop_types77.default.string,
  sx: import_prop_types77.default.oneOfType([import_prop_types77.default.arrayOf(import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object, import_prop_types77.default.bool])), import_prop_types77.default.func, import_prop_types77.default.object]),
  TransitionComponent: import_prop_types77.default.elementType,
  transitionDuration: import_prop_types77.default.oneOfType([import_prop_types77.default.oneOf(["auto"]), import_prop_types77.default.number, import_prop_types77.default.shape({
    appear: import_prop_types77.default.number,
    enter: import_prop_types77.default.number,
    exit: import_prop_types77.default.number
  })]),
  TransitionProps: import_prop_types77.default.object
} : void 0;

// node_modules/@mui/material/StepContent/index.js
"use client";

// node_modules/@mui/material/Stepper/Stepper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React97 = __toESM(require_react());
var import_prop_types78 = __toESM(require_prop_types());
init_clsx();
init_integerPropType();
init_composeClasses();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Stepper/stepperClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getStepperUtilityClass(slot) {
  return generateUtilityClass("MuiStepper", slot);
}
var stepperClasses = generateUtilityClasses("MuiStepper", ["root", "horizontal", "vertical", "alternativeLabel"]);

// node_modules/@mui/material/Stepper/Stepper.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime());
"use client";
var _excluded75 = ["activeStep", "alternativeLabel", "children", "className", "component", "connector", "nonLinear", "orientation"];
var useUtilityClasses64 = (ownerState) => {
  const {
    orientation,
    alternativeLabel,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", orientation, alternativeLabel && "alternativeLabel"]
  };
  return composeClasses(slots, getStepperUtilityClass, classes2);
};
var StepperRoot = styled_default("div", {
  name: "MuiStepper",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[ownerState.orientation], ownerState.alternativeLabel && styles5.alternativeLabel];
  }
})(({
  ownerState
}) => _extends({
  display: "flex"
}, ownerState.orientation === "horizontal" && {
  flexDirection: "row",
  alignItems: "center"
}, ownerState.orientation === "vertical" && {
  flexDirection: "column"
}, ownerState.alternativeLabel && {
  alignItems: "flex-start"
}));
var defaultConnector = (0, import_jsx_runtime117.jsx)(StepConnector_default, {});
var Stepper = React97.forwardRef(function Stepper2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiStepper"
  });
  const {
    activeStep = 0,
    alternativeLabel = false,
    children,
    className,
    component = "div",
    connector = defaultConnector,
    nonLinear = false,
    orientation = "horizontal"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded75);
  const ownerState = _extends({}, props, {
    alternativeLabel,
    orientation,
    component
  });
  const classes2 = useUtilityClasses64(ownerState);
  const childrenArray = React97.Children.toArray(children).filter(Boolean);
  const steps = childrenArray.map((step, index) => {
    return React97.cloneElement(step, _extends({
      index,
      last: index + 1 === childrenArray.length
    }, step.props));
  });
  const contextValue = React97.useMemo(() => ({
    activeStep,
    alternativeLabel,
    connector,
    nonLinear,
    orientation
  }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
  return (0, import_jsx_runtime117.jsx)(StepperContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime117.jsx)(StepperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: steps
    }))
  });
});
true ? Stepper.propTypes = {
  activeStep: integerPropType_default,
  alternativeLabel: import_prop_types78.default.bool,
  children: import_prop_types78.default.node,
  classes: import_prop_types78.default.object,
  className: import_prop_types78.default.string,
  component: import_prop_types78.default.elementType,
  connector: import_prop_types78.default.element,
  nonLinear: import_prop_types78.default.bool,
  orientation: import_prop_types78.default.oneOf(["horizontal", "vertical"]),
  sx: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object, import_prop_types78.default.bool])), import_prop_types78.default.func, import_prop_types78.default.object])
} : void 0;

// node_modules/@mui/material/Stepper/index.js
"use client";

// node_modules/@mui/material/index.js
init_SvgIcon();
init_SvgIcon();

// node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React99 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var import_prop_types80 = __toESM(require_prop_types());
init_elementTypeAcceptingRef();
init_useThemeProps();
init_base();
init_useForkRef2();
init_ownerDocument();
init_ownerWindow();
init_useEventCallback2();
init_useEnhancedEffect2();
init_useTheme();
init_utils3();

// node_modules/@mui/material/SwipeableDrawer/SwipeArea.js
init_objectWithoutPropertiesLoose();
init_extends();
var React98 = __toESM(require_react());
var import_prop_types79 = __toESM(require_prop_types());
init_clsx();
init_styled();
init_capitalize();
var import_jsx_runtime118 = __toESM(require_jsx_runtime());
"use client";
var _excluded76 = ["anchor", "classes", "className", "width", "style"];
var SwipeAreaRoot = styled_default("div", {
  shouldForwardProp: rootShouldForwardProp
})(({
  theme,
  ownerState
}) => _extends({
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  zIndex: theme.zIndex.drawer - 1
}, ownerState.anchor === "left" && {
  right: "auto"
}, ownerState.anchor === "right" && {
  left: "auto",
  right: 0
}, ownerState.anchor === "top" && {
  bottom: "auto",
  right: 0
}, ownerState.anchor === "bottom" && {
  top: "auto",
  bottom: 0,
  right: 0
}));
var SwipeArea = React98.forwardRef(function SwipeArea2(props, ref) {
  const {
    anchor,
    classes: classes2 = {},
    className,
    width,
    style
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded76);
  const ownerState = props;
  return (0, import_jsx_runtime118.jsx)(SwipeAreaRoot, _extends({
    className: clsx_default("PrivateSwipeArea-root", classes2.root, classes2[`anchor${capitalize_default(anchor)}`], className),
    ref,
    style: _extends({
      [isHorizontal(anchor) ? "width" : "height"]: width
    }, style),
    ownerState
  }, other));
});
true ? SwipeArea.propTypes = {
  anchor: import_prop_types79.default.oneOf(["left", "top", "right", "bottom"]).isRequired,
  classes: import_prop_types79.default.object,
  className: import_prop_types79.default.string,
  style: import_prop_types79.default.object,
  width: import_prop_types79.default.number.isRequired
} : void 0;
var SwipeArea_default = SwipeArea;

// node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime());
var import_jsx_runtime120 = __toESM(require_jsx_runtime());
"use client";
var _excluded77 = ["BackdropProps"];
var _excluded216 = ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "allowSwipeInChildren", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"];
var UNCERTAINTY_THRESHOLD = 3;
var DRAG_STARTED_SIGNAL = 20;
var claimedSwipeInstance = null;
function calculateCurrentX(anchor, touches, doc) {
  return anchor === "right" ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;
}
function calculateCurrentY(anchor, touches, containerWindow) {
  return anchor === "bottom" ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;
}
function getMaxTranslate(horizontalSwipe, paperInstance) {
  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
}
function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
}
function getDomTreeShapes(element, rootNode) {
  const domTreeShapes = [];
  while (element && element !== rootNode.parentElement) {
    const style = ownerWindow_default(rootNode).getComputedStyle(element);
    if (style.getPropertyValue("position") === "absolute" || style.getPropertyValue("overflow-x") === "hidden") {
    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
      domTreeShapes.push(element);
    }
    element = element.parentElement;
  }
  return domTreeShapes;
}
function computeHasNativeHandler({
  domTreeShapes,
  start,
  current,
  anchor
}) {
  const axisProperties = {
    scrollPosition: {
      x: "scrollLeft",
      y: "scrollTop"
    },
    scrollLength: {
      x: "scrollWidth",
      y: "scrollHeight"
    },
    clientLength: {
      x: "clientWidth",
      y: "clientHeight"
    }
  };
  return domTreeShapes.some((shape) => {
    let goingForward = current >= start;
    if (anchor === "top" || anchor === "left") {
      goingForward = !goingForward;
    }
    const axis = anchor === "left" || anchor === "right" ? "x" : "y";
    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);
    const areNotAtStart = scrollPosition > 0;
    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];
    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
      return true;
    }
    return false;
  });
}
var iOS = typeof navigator !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent);
var SwipeableDrawer = React99.forwardRef(function SwipeableDrawer2(inProps, ref) {
  const props = useThemeProps({
    name: "MuiSwipeableDrawer",
    props: inProps
  });
  const theme = useTheme();
  const transitionDurationDefault = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    anchor = "left",
    disableBackdropTransition = false,
    disableDiscovery = false,
    disableSwipeToOpen = iOS,
    hideBackdrop,
    hysteresis = 0.52,
    allowSwipeInChildren = false,
    minFlingVelocity = 450,
    ModalProps: {
      BackdropProps
    } = {},
    onClose,
    onOpen,
    open = false,
    PaperProps = {},
    SwipeAreaProps,
    swipeAreaWidth = 20,
    transitionDuration = transitionDurationDefault,
    variant = "temporary"
  } = props, ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded77), other = _objectWithoutPropertiesLoose(props, _excluded216);
  const [maybeSwiping, setMaybeSwiping] = React99.useState(false);
  const swipeInstance = React99.useRef({
    isSwiping: null
  });
  const swipeAreaRef = React99.useRef();
  const backdropRef = React99.useRef();
  const paperRef = React99.useRef();
  const handleRef = useForkRef_default(PaperProps.ref, paperRef);
  const touchDetected = React99.useRef(false);
  const calculatedDurationRef = React99.useRef();
  useEnhancedEffect_default2(() => {
    calculatedDurationRef.current = null;
  }, [open]);
  const setPosition = React99.useCallback((translate, options = {}) => {
    const {
      mode = null,
      changeTransition = true
    } = options;
    const anchorRtl = getAnchor(theme, anchor);
    const rtlTranslateMultiplier = ["right", "bottom"].indexOf(anchorRtl) !== -1 ? 1 : -1;
    const horizontalSwipe = isHorizontal(anchor);
    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;
    const drawerStyle = paperRef.current.style;
    drawerStyle.webkitTransform = transform;
    drawerStyle.transform = transform;
    let transition = "";
    if (mode) {
      transition = theme.transitions.create("all", getTransitionProps({
        easing: void 0,
        style: void 0,
        timeout: transitionDuration
      }, {
        mode
      }));
    }
    if (changeTransition) {
      drawerStyle.webkitTransition = transition;
      drawerStyle.transition = transition;
    }
    if (!disableBackdropTransition && !hideBackdrop) {
      const backdropStyle = backdropRef.current.style;
      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);
      if (changeTransition) {
        backdropStyle.webkitTransition = transition;
        backdropStyle.transition = transition;
      }
    }
  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
  const handleBodyTouchEnd = useEventCallback_default2((nativeEvent) => {
    if (!touchDetected.current) {
      return;
    }
    claimedSwipeInstance = null;
    touchDetected.current = false;
    ReactDOM.flushSync(() => {
      setMaybeSwiping(false);
    });
    if (!swipeInstance.current.isSwiping) {
      swipeInstance.current.isSwiping = null;
      return;
    }
    swipeInstance.current.isSwiping = null;
    const anchorRtl = getAnchor(theme, anchor);
    const horizontal = isHorizontal(anchor);
    let current;
    if (horizontal) {
      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument_default(nativeEvent.currentTarget));
    } else {
      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow_default(nativeEvent.currentTarget));
    }
    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);
    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
    const translateRatio = currentTranslate / maxTranslate;
    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1e3;
    }
    if (open) {
      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
        onClose();
      } else {
        setPosition(0, {
          mode: "exit"
        });
      }
      return;
    }
    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
      onOpen();
    } else {
      setPosition(getMaxTranslate(horizontal, paperRef.current), {
        mode: "enter"
      });
    }
  });
  const startMaybeSwiping = (force = false) => {
    if (!maybeSwiping) {
      if (force || !(disableDiscovery && allowSwipeInChildren)) {
        ReactDOM.flushSync(() => {
          setMaybeSwiping(true);
        });
      }
      const horizontalSwipe = isHorizontal(anchor);
      if (!open && paperRef.current) {
        setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {
          changeTransition: false
        });
      }
      swipeInstance.current.velocity = 0;
      swipeInstance.current.lastTime = null;
      swipeInstance.current.lastTranslate = null;
      swipeInstance.current.paperHit = false;
      touchDetected.current = true;
    }
  };
  const handleBodyTouchMove = useEventCallback_default2((nativeEvent) => {
    if (!paperRef.current || !touchDetected.current) {
      return;
    }
    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {
      return;
    }
    startMaybeSwiping(true);
    const anchorRtl = getAnchor(theme, anchor);
    const horizontalSwipe = isHorizontal(anchor);
    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument_default(nativeEvent.currentTarget));
    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow_default(nativeEvent.currentTarget));
    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {
      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);
      const hasNativeHandler = computeHasNativeHandler({
        domTreeShapes,
        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
        current: horizontalSwipe ? currentX : currentY,
        anchor
      });
      if (hasNativeHandler) {
        claimedSwipeInstance = true;
        return;
      }
      claimedSwipeInstance = swipeInstance.current;
    }
    if (swipeInstance.current.isSwiping == null) {
      const dx = Math.abs(currentX - swipeInstance.current.startX);
      const dy = Math.abs(currentY - swipeInstance.current.startY);
      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;
      if (definitelySwiping && nativeEvent.cancelable) {
        nativeEvent.preventDefault();
      }
      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
        swipeInstance.current.isSwiping = definitelySwiping;
        if (!definitelySwiping) {
          handleBodyTouchEnd(nativeEvent);
          return;
        }
        swipeInstance.current.startX = currentX;
        swipeInstance.current.startY = currentY;
        if (!disableDiscovery && !open) {
          if (horizontalSwipe) {
            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;
          } else {
            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;
          }
        }
      }
    }
    if (!swipeInstance.current.isSwiping) {
      return;
    }
    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;
    if (open && !swipeInstance.current.paperHit) {
      startLocation = Math.min(startLocation, maxTranslate);
    }
    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);
    if (open) {
      if (!swipeInstance.current.paperHit) {
        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;
        if (paperHit) {
          swipeInstance.current.paperHit = true;
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
        } else {
          return;
        }
      } else if (translate === 0) {
        swipeInstance.current.startX = currentX;
        swipeInstance.current.startY = currentY;
      }
    }
    if (swipeInstance.current.lastTranslate === null) {
      swipeInstance.current.lastTranslate = translate;
      swipeInstance.current.lastTime = performance.now() + 1;
    }
    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;
    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
    swipeInstance.current.lastTranslate = translate;
    swipeInstance.current.lastTime = performance.now();
    if (nativeEvent.cancelable) {
      nativeEvent.preventDefault();
    }
    setPosition(translate);
  });
  const handleBodyTouchStart = useEventCallback_default2((nativeEvent) => {
    if (nativeEvent.defaultPrevented) {
      return;
    }
    if (nativeEvent.defaultMuiPrevented) {
      return;
    }
    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {
      return;
    }
    const anchorRtl = getAnchor(theme, anchor);
    const horizontalSwipe = isHorizontal(anchor);
    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument_default(nativeEvent.currentTarget));
    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow_default(nativeEvent.currentTarget));
    if (!open) {
      var _paperRef$current;
      if (disableSwipeToOpen || !(nativeEvent.target === swipeAreaRef.current || (_paperRef$current = paperRef.current) != null && _paperRef$current.contains(nativeEvent.target) && (typeof allowSwipeInChildren === "function" ? allowSwipeInChildren(nativeEvent, swipeAreaRef.current, paperRef.current) : allowSwipeInChildren))) {
        return;
      }
      if (horizontalSwipe) {
        if (currentX > swipeAreaWidth) {
          return;
        }
      } else if (currentY > swipeAreaWidth) {
        return;
      }
    }
    nativeEvent.defaultMuiPrevented = true;
    claimedSwipeInstance = null;
    swipeInstance.current.startX = currentX;
    swipeInstance.current.startY = currentY;
    startMaybeSwiping();
  });
  React99.useEffect(() => {
    if (variant === "temporary") {
      const doc = ownerDocument_default(paperRef.current);
      doc.addEventListener("touchstart", handleBodyTouchStart);
      doc.addEventListener("touchmove", handleBodyTouchMove, {
        passive: !open
      });
      doc.addEventListener("touchend", handleBodyTouchEnd);
      return () => {
        doc.removeEventListener("touchstart", handleBodyTouchStart);
        doc.removeEventListener("touchmove", handleBodyTouchMove, {
          passive: !open
        });
        doc.removeEventListener("touchend", handleBodyTouchEnd);
      };
    }
    return void 0;
  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
  React99.useEffect(() => () => {
    if (claimedSwipeInstance === swipeInstance.current) {
      claimedSwipeInstance = null;
    }
  }, []);
  React99.useEffect(() => {
    if (!open) {
      setMaybeSwiping(false);
    }
  }, [open]);
  return (0, import_jsx_runtime120.jsxs)(React99.Fragment, {
    children: [(0, import_jsx_runtime119.jsx)(Drawer_default, _extends({
      open: variant === "temporary" && maybeSwiping ? true : open,
      variant,
      ModalProps: _extends({
        BackdropProps: _extends({}, BackdropProps, {
          ref: backdropRef
        })
      }, variant === "temporary" && {
        keepMounted: true
      }, ModalPropsProp),
      hideBackdrop,
      PaperProps: _extends({}, PaperProps, {
        style: _extends({
          pointerEvents: variant === "temporary" && !open && !allowSwipeInChildren ? "none" : ""
        }, PaperProps.style),
        ref: handleRef
      }),
      anchor,
      transitionDuration: calculatedDurationRef.current || transitionDuration,
      onClose,
      ref
    }, other)), !disableSwipeToOpen && variant === "temporary" && (0, import_jsx_runtime119.jsx)(NoSsr, {
      children: (0, import_jsx_runtime119.jsx)(SwipeArea_default, _extends({
        anchor,
        ref: swipeAreaRef,
        width: swipeAreaWidth
      }, SwipeAreaProps))
    })]
  });
});
true ? SwipeableDrawer.propTypes = {
  allowSwipeInChildren: import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.bool]),
  anchor: import_prop_types80.default.oneOf(["bottom", "left", "right", "top"]),
  children: import_prop_types80.default.node,
  disableBackdropTransition: import_prop_types80.default.bool,
  disableDiscovery: import_prop_types80.default.bool,
  disableSwipeToOpen: import_prop_types80.default.bool,
  hideBackdrop: import_prop_types80.default.bool,
  hysteresis: import_prop_types80.default.number,
  minFlingVelocity: import_prop_types80.default.number,
  ModalProps: import_prop_types80.default.shape({
    BackdropProps: import_prop_types80.default.shape({
      component: elementTypeAcceptingRef_default
    })
  }),
  onClose: import_prop_types80.default.func.isRequired,
  onOpen: import_prop_types80.default.func.isRequired,
  open: import_prop_types80.default.bool,
  PaperProps: import_prop_types80.default.shape({
    component: elementTypeAcceptingRef_default,
    style: import_prop_types80.default.object
  }),
  SwipeAreaProps: import_prop_types80.default.object,
  swipeAreaWidth: import_prop_types80.default.number,
  transitionDuration: import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.shape({
    appear: import_prop_types80.default.number,
    enter: import_prop_types80.default.number,
    exit: import_prop_types80.default.number
  })]),
  variant: import_prop_types80.default.oneOf(["permanent", "persistent", "temporary"])
} : void 0;

// node_modules/@mui/material/SwipeableDrawer/index.js
"use client";

// node_modules/@mui/material/Switch/Switch.js
init_objectWithoutPropertiesLoose();
init_extends();
var React100 = __toESM(require_react());
var import_prop_types81 = __toESM(require_prop_types());
init_clsx();
init_refType();
init_composeClasses();
var import_colorManipulator13 = __toESM(require_colorManipulator());
init_capitalize();
init_SwitchBase();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/Switch/switchClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getSwitchUtilityClass(slot) {
  return generateUtilityClass("MuiSwitch", slot);
}
var switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
var switchClasses_default = switchClasses;

// node_modules/@mui/material/Switch/Switch.js
var import_jsx_runtime121 = __toESM(require_jsx_runtime());
var import_jsx_runtime122 = __toESM(require_jsx_runtime());
"use client";
var _excluded78 = ["className", "color", "edge", "size", "sx"];
var useUtilityClasses65 = (ownerState) => {
  const {
    classes: classes2,
    edge,
    size,
    color,
    checked,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
    switchBase: ["switchBase", `color${capitalize_default(color)}`, checked && "checked", disabled && "disabled"],
    thumb: ["thumb"],
    track: ["track"],
    input: ["input"]
  };
  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes2);
  return _extends({}, classes2, composedClasses);
};
var SwitchRoot = styled_default("span", {
  name: "MuiSwitch",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.edge && styles5[`edge${capitalize_default(ownerState.edge)}`], styles5[`size${capitalize_default(ownerState.size)}`]];
  }
})(({
  ownerState
}) => _extends({
  display: "inline-flex",
  width: 34 + 12 * 2,
  height: 14 + 12 * 2,
  overflow: "hidden",
  padding: 12,
  boxSizing: "border-box",
  position: "relative",
  flexShrink: 0,
  zIndex: 0,
  verticalAlign: "middle",
  "@media print": {
    colorAdjust: "exact"
  }
}, ownerState.edge === "start" && {
  marginLeft: -8
}, ownerState.edge === "end" && {
  marginRight: -8
}, ownerState.size === "small" && {
  width: 40,
  height: 24,
  padding: 7,
  [`& .${switchClasses_default.thumb}`]: {
    width: 16,
    height: 16
  },
  [`& .${switchClasses_default.switchBase}`]: {
    padding: 4,
    [`&.${switchClasses_default.checked}`]: {
      transform: "translateX(16px)"
    }
  }
}));
var SwitchSwitchBase = styled_default(SwitchBase_default, {
  name: "MuiSwitch",
  slot: "SwitchBase",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.switchBase, {
      [`& .${switchClasses_default.input}`]: styles5.input
    }, ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`]];
  }
})(({
  theme
}) => ({
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: 1,
  color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
  transition: theme.transitions.create(["left", "transform"], {
    duration: theme.transitions.duration.shortest
  }),
  [`&.${switchClasses_default.checked}`]: {
    transform: "translateX(20px)"
  },
  [`&.${switchClasses_default.disabled}`]: {
    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
  },
  [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
    opacity: 0.5
  },
  [`&.${switchClasses_default.disabled} + .${switchClasses_default.track}`]: {
    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
  },
  [`& .${switchClasses_default.input}`]: {
    left: "-100%",
    width: "300%"
  }
}), ({
  theme,
  ownerState
}) => _extends({
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator13.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}, ownerState.color !== "default" && {
  [`&.${switchClasses_default.checked}`]: {
    color: (theme.vars || theme).palette[ownerState.color].main,
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator13.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${switchClasses_default.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === "light" ? (0, import_colorManipulator13.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, import_colorManipulator13.darken)(theme.palette[ownerState.color].main, 0.55)}`
    }
  },
  [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
  }
}));
var SwitchTrack = styled_default("span", {
  name: "MuiSwitch",
  slot: "Track",
  overridesResolver: (props, styles5) => styles5.track
})(({
  theme
}) => ({
  height: "100%",
  width: "100%",
  borderRadius: 14 / 2,
  zIndex: -1,
  transition: theme.transitions.create(["opacity", "background-color"], {
    duration: theme.transitions.duration.shortest
  }),
  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
  opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
}));
var SwitchThumb = styled_default("span", {
  name: "MuiSwitch",
  slot: "Thumb",
  overridesResolver: (props, styles5) => styles5.thumb
})(({
  theme
}) => ({
  boxShadow: (theme.vars || theme).shadows[1],
  backgroundColor: "currentColor",
  width: 20,
  height: 20,
  borderRadius: "50%"
}));
var Switch = React100.forwardRef(function Switch2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiSwitch"
  });
  const {
    className,
    color = "primary",
    edge = false,
    size = "medium",
    sx
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
  const ownerState = _extends({}, props, {
    color,
    edge,
    size
  });
  const classes2 = useUtilityClasses65(ownerState);
  const icon = (0, import_jsx_runtime121.jsx)(SwitchThumb, {
    className: classes2.thumb,
    ownerState
  });
  return (0, import_jsx_runtime122.jsxs)(SwitchRoot, {
    className: clsx_default(classes2.root, className),
    sx,
    ownerState,
    children: [(0, import_jsx_runtime121.jsx)(SwitchSwitchBase, _extends({
      type: "checkbox",
      icon,
      checkedIcon: icon,
      ref,
      ownerState
    }, other, {
      classes: _extends({}, classes2, {
        root: classes2.switchBase
      })
    })), (0, import_jsx_runtime121.jsx)(SwitchTrack, {
      className: classes2.track,
      ownerState
    })]
  });
});
true ? Switch.propTypes = {
  checked: import_prop_types81.default.bool,
  checkedIcon: import_prop_types81.default.node,
  classes: import_prop_types81.default.object,
  className: import_prop_types81.default.string,
  color: import_prop_types81.default.oneOfType([import_prop_types81.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types81.default.string]),
  defaultChecked: import_prop_types81.default.bool,
  disabled: import_prop_types81.default.bool,
  disableRipple: import_prop_types81.default.bool,
  edge: import_prop_types81.default.oneOf(["end", "start", false]),
  icon: import_prop_types81.default.node,
  id: import_prop_types81.default.string,
  inputProps: import_prop_types81.default.object,
  inputRef: refType_default,
  onChange: import_prop_types81.default.func,
  required: import_prop_types81.default.bool,
  size: import_prop_types81.default.oneOfType([import_prop_types81.default.oneOf(["medium", "small"]), import_prop_types81.default.string]),
  sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object]),
  value: import_prop_types81.default.any
} : void 0;

// node_modules/@mui/material/Switch/index.js
"use client";

// node_modules/@mui/material/Tab/Tab.js
init_objectWithoutPropertiesLoose();
init_extends();
var React101 = __toESM(require_react());
var import_prop_types82 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_ButtonBase();
init_capitalize();
init_useThemeProps2();
init_styled();
init_unsupportedProp();

// node_modules/@mui/material/Tab/tabClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getTabUtilityClass(slot) {
  return generateUtilityClass("MuiTab", slot);
}
var tabClasses = generateUtilityClasses("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]);
var tabClasses_default = tabClasses;

// node_modules/@mui/material/Tab/Tab.js
var import_jsx_runtime123 = __toESM(require_jsx_runtime());
"use client";
var _excluded79 = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
var useUtilityClasses66 = (ownerState) => {
  const {
    classes: classes2,
    textColor,
    fullWidth,
    wrapped,
    icon,
    label,
    selected,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", icon && label && "labelIcon", `textColor${capitalize_default(textColor)}`, fullWidth && "fullWidth", wrapped && "wrapped", selected && "selected", disabled && "disabled"],
    iconWrapper: ["iconWrapper"]
  };
  return composeClasses(slots, getTabUtilityClass, classes2);
};
var TabRoot = styled_default(ButtonBase_default, {
  name: "MuiTab",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.label && ownerState.icon && styles5.labelIcon, styles5[`textColor${capitalize_default(ownerState.textColor)}`], ownerState.fullWidth && styles5.fullWidth, ownerState.wrapped && styles5.wrapped];
  }
})(({
  theme,
  ownerState
}) => _extends({}, theme.typography.button, {
  maxWidth: 360,
  minWidth: 90,
  position: "relative",
  minHeight: 48,
  flexShrink: 0,
  padding: "12px 16px",
  overflow: "hidden",
  whiteSpace: "normal",
  textAlign: "center"
}, ownerState.label && {
  flexDirection: ownerState.iconPosition === "top" || ownerState.iconPosition === "bottom" ? "column" : "row"
}, {
  lineHeight: 1.25
}, ownerState.icon && ownerState.label && {
  minHeight: 72,
  paddingTop: 9,
  paddingBottom: 9,
  [`& > .${tabClasses_default.iconWrapper}`]: _extends({}, ownerState.iconPosition === "top" && {
    marginBottom: 6
  }, ownerState.iconPosition === "bottom" && {
    marginTop: 6
  }, ownerState.iconPosition === "start" && {
    marginRight: theme.spacing(1)
  }, ownerState.iconPosition === "end" && {
    marginLeft: theme.spacing(1)
  })
}, ownerState.textColor === "inherit" && {
  color: "inherit",
  opacity: 0.6,
  [`&.${tabClasses_default.selected}`]: {
    opacity: 1
  },
  [`&.${tabClasses_default.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity
  }
}, ownerState.textColor === "primary" && {
  color: (theme.vars || theme).palette.text.secondary,
  [`&.${tabClasses_default.selected}`]: {
    color: (theme.vars || theme).palette.primary.main
  },
  [`&.${tabClasses_default.disabled}`]: {
    color: (theme.vars || theme).palette.text.disabled
  }
}, ownerState.textColor === "secondary" && {
  color: (theme.vars || theme).palette.text.secondary,
  [`&.${tabClasses_default.selected}`]: {
    color: (theme.vars || theme).palette.secondary.main
  },
  [`&.${tabClasses_default.disabled}`]: {
    color: (theme.vars || theme).palette.text.disabled
  }
}, ownerState.fullWidth && {
  flexShrink: 1,
  flexGrow: 1,
  flexBasis: 0,
  maxWidth: "none"
}, ownerState.wrapped && {
  fontSize: theme.typography.pxToRem(12)
}));
var Tab = React101.forwardRef(function Tab2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiTab"
  });
  const {
    className,
    disabled = false,
    disableFocusRipple = false,
    fullWidth,
    icon: iconProp,
    iconPosition = "top",
    indicator,
    label,
    onChange,
    onClick: onClick2,
    onFocus,
    selected,
    selectionFollowsFocus,
    textColor = "inherit",
    value,
    wrapped = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
  const ownerState = _extends({}, props, {
    disabled,
    disableFocusRipple,
    selected,
    icon: !!iconProp,
    iconPosition,
    label: !!label,
    fullWidth,
    textColor,
    wrapped
  });
  const classes2 = useUtilityClasses66(ownerState);
  const icon = iconProp && label && React101.isValidElement(iconProp) ? React101.cloneElement(iconProp, {
    className: clsx_default(classes2.iconWrapper, iconProp.props.className)
  }) : iconProp;
  const handleClick = (event) => {
    if (!selected && onChange) {
      onChange(event, value);
    }
    if (onClick2) {
      onClick2(event);
    }
  };
  const handleFocus = (event) => {
    if (selectionFollowsFocus && !selected && onChange) {
      onChange(event, value);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  return (0, import_jsx_runtime123.jsxs)(TabRoot, _extends({
    focusRipple: !disableFocusRipple,
    className: clsx_default(classes2.root, className),
    ref,
    role: "tab",
    "aria-selected": selected,
    disabled,
    onClick: handleClick,
    onFocus: handleFocus,
    ownerState,
    tabIndex: selected ? 0 : -1
  }, other, {
    children: [iconPosition === "top" || iconPosition === "start" ? (0, import_jsx_runtime123.jsxs)(React101.Fragment, {
      children: [icon, label]
    }) : (0, import_jsx_runtime123.jsxs)(React101.Fragment, {
      children: [label, icon]
    }), indicator]
  }));
});
true ? Tab.propTypes = {
  children: unsupportedProp_default,
  classes: import_prop_types82.default.object,
  className: import_prop_types82.default.string,
  disabled: import_prop_types82.default.bool,
  disableFocusRipple: import_prop_types82.default.bool,
  disableRipple: import_prop_types82.default.bool,
  icon: import_prop_types82.default.oneOfType([import_prop_types82.default.element, import_prop_types82.default.string]),
  iconPosition: import_prop_types82.default.oneOf(["bottom", "end", "start", "top"]),
  label: import_prop_types82.default.node,
  onChange: import_prop_types82.default.func,
  onClick: import_prop_types82.default.func,
  onFocus: import_prop_types82.default.func,
  sx: import_prop_types82.default.oneOfType([import_prop_types82.default.arrayOf(import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.object, import_prop_types82.default.bool])), import_prop_types82.default.func, import_prop_types82.default.object]),
  value: import_prop_types82.default.any,
  wrapped: import_prop_types82.default.bool
} : void 0;
var Tab_default = Tab;

// node_modules/@mui/material/Tab/index.js
"use client";

// node_modules/@mui/material/index.js
init_Table();
init_Table();
init_TableBody();
init_TableBody();
init_TableCell();
init_TableCell();

// node_modules/@mui/material/TableContainer/TableContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React102 = __toESM(require_react());
var import_prop_types83 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/TableContainer/tableContainerClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getTableContainerUtilityClass(slot) {
  return generateUtilityClass("MuiTableContainer", slot);
}
var tableContainerClasses = generateUtilityClasses("MuiTableContainer", ["root"]);

// node_modules/@mui/material/TableContainer/TableContainer.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime());
"use client";
var _excluded80 = ["className", "component"];
var useUtilityClasses67 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getTableContainerUtilityClass, classes2);
};
var TableContainerRoot = styled_default("div", {
  name: "MuiTableContainer",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  width: "100%",
  overflowX: "auto"
});
var TableContainer = React102.forwardRef(function TableContainer2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiTableContainer"
  });
  const {
    className,
    component = "div"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
  const ownerState = _extends({}, props, {
    component
  });
  const classes2 = useUtilityClasses67(ownerState);
  return (0, import_jsx_runtime124.jsx)(TableContainerRoot, _extends({
    ref,
    as: component,
    className: clsx_default(classes2.root, className),
    ownerState
  }, other));
});
true ? TableContainer.propTypes = {
  children: import_prop_types83.default.node,
  classes: import_prop_types83.default.object,
  className: import_prop_types83.default.string,
  component: import_prop_types83.default.elementType,
  sx: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object, import_prop_types83.default.bool])), import_prop_types83.default.func, import_prop_types83.default.object])
} : void 0;

// node_modules/@mui/material/TableContainer/index.js
"use client";

// node_modules/@mui/material/index.js
init_TableFooter();
init_TableFooter();
init_TableHead();
init_TableHead();
init_TablePagination();
init_TablePagination();
init_TableRow();
init_TableRow();
init_TableSortLabel();
init_TableSortLabel();

// node_modules/@mui/material/Tabs/Tabs.js
init_objectWithoutPropertiesLoose();
init_extends();
var React105 = __toESM(require_react());
var import_react_is7 = __toESM(require_react_is());
var import_prop_types86 = __toESM(require_prop_types());
init_clsx();
init_refType();
init_utils4();
init_composeClasses();
init_styled();
init_useThemeProps2();
init_useTheme();
init_debounce();

// node_modules/@mui/material/utils/scrollLeft.js
init_utils();

// node_modules/@mui/material/internal/animate.js
function easeInOutSin(time) {
  return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
}
function animate(property, element, to2, options = {}, cb = () => {
}) {
  const {
    ease = easeInOutSin,
    duration: duration2 = 300
  } = options;
  let start = null;
  const from2 = element[property];
  let cancelled = false;
  const cancel = () => {
    cancelled = true;
  };
  const step = (timestamp) => {
    if (cancelled) {
      cb(new Error("Animation cancelled"));
      return;
    }
    if (start === null) {
      start = timestamp;
    }
    const time = Math.min(1, (timestamp - start) / duration2);
    element[property] = ease(time) * (to2 - from2) + from2;
    if (time >= 1) {
      requestAnimationFrame(() => {
        cb(null);
      });
      return;
    }
    requestAnimationFrame(step);
  };
  if (from2 === to2) {
    cb(new Error("Element already at target position"));
    return cancel;
  }
  requestAnimationFrame(step);
  return cancel;
}

// node_modules/@mui/material/Tabs/ScrollbarSize.js
init_extends();
init_objectWithoutPropertiesLoose();
var React103 = __toESM(require_react());
var import_prop_types84 = __toESM(require_prop_types());
init_debounce();
init_utils2();
var import_jsx_runtime125 = __toESM(require_jsx_runtime());
"use client";
var _excluded81 = ["onChange"];
var styles4 = {
  width: 99,
  height: 99,
  position: "absolute",
  top: -9999,
  overflow: "scroll"
};
function ScrollbarSize(props) {
  const {
    onChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
  const scrollbarHeight = React103.useRef();
  const nodeRef = React103.useRef(null);
  const setMeasurements = () => {
    scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
  };
  useEnhancedEffect_default2(() => {
    const handleResize = debounce_default(() => {
      const prevHeight = scrollbarHeight.current;
      setMeasurements();
      if (prevHeight !== scrollbarHeight.current) {
        onChange(scrollbarHeight.current);
      }
    });
    const containerWindow = ownerWindow_default(nodeRef.current);
    containerWindow.addEventListener("resize", handleResize);
    return () => {
      handleResize.clear();
      containerWindow.removeEventListener("resize", handleResize);
    };
  }, [onChange]);
  React103.useEffect(() => {
    setMeasurements();
    onChange(scrollbarHeight.current);
  }, [onChange]);
  return (0, import_jsx_runtime125.jsx)("div", _extends({
    style: styles4,
    ref: nodeRef
  }, other));
}
true ? ScrollbarSize.propTypes = {
  onChange: import_prop_types84.default.func.isRequired
} : void 0;

// node_modules/@mui/material/TabScrollButton/TabScrollButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React104 = __toESM(require_react());
var import_prop_types85 = __toESM(require_prop_types());
init_clsx();
init_utils4();
init_composeClasses();
init_KeyboardArrowLeft();
init_KeyboardArrowRight();
init_ButtonBase();
init_useTheme();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getTabScrollButtonUtilityClass(slot) {
  return generateUtilityClass("MuiTabScrollButton", slot);
}
var tabScrollButtonClasses = generateUtilityClasses("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
var tabScrollButtonClasses_default = tabScrollButtonClasses;

// node_modules/@mui/material/TabScrollButton/TabScrollButton.js
var import_jsx_runtime126 = __toESM(require_jsx_runtime());
"use client";
var _excluded82 = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
var useUtilityClasses68 = (ownerState) => {
  const {
    classes: classes2,
    orientation,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled"]
  };
  return composeClasses(slots, getTabScrollButtonUtilityClass, classes2);
};
var TabScrollButtonRoot = styled_default(ButtonBase_default, {
  name: "MuiTabScrollButton",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.orientation && styles5[ownerState.orientation]];
  }
})(({
  ownerState
}) => _extends({
  width: 40,
  flexShrink: 0,
  opacity: 0.8,
  [`&.${tabScrollButtonClasses_default.disabled}`]: {
    opacity: 0
  }
}, ownerState.orientation === "vertical" && {
  width: "100%",
  height: 40,
  "& svg": {
    transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
  }
}));
var TabScrollButton = React104.forwardRef(function TabScrollButton2(inProps, ref) {
  var _slots$StartScrollBut, _slots$EndScrollButto;
  const props = useThemeProps2({
    props: inProps,
    name: "MuiTabScrollButton"
  });
  const {
    className,
    slots = {},
    slotProps = {},
    direction
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
  const theme = useTheme();
  const isRtl = theme.direction === "rtl";
  const ownerState = _extends({
    isRtl
  }, props);
  const classes2 = useUtilityClasses68(ownerState);
  const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft_default;
  const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight_default;
  const startButtonIconProps = useSlotProps({
    elementType: StartButtonIcon,
    externalSlotProps: slotProps.startScrollButtonIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState
  });
  const endButtonIconProps = useSlotProps({
    elementType: EndButtonIcon,
    externalSlotProps: slotProps.endScrollButtonIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState
  });
  return (0, import_jsx_runtime126.jsx)(TabScrollButtonRoot, _extends({
    component: "div",
    className: clsx_default(classes2.root, className),
    ref,
    role: null,
    ownerState,
    tabIndex: null
  }, other, {
    children: direction === "left" ? (0, import_jsx_runtime126.jsx)(StartButtonIcon, _extends({}, startButtonIconProps)) : (0, import_jsx_runtime126.jsx)(EndButtonIcon, _extends({}, endButtonIconProps))
  }));
});
true ? TabScrollButton.propTypes = {
  children: import_prop_types85.default.node,
  classes: import_prop_types85.default.object,
  className: import_prop_types85.default.string,
  direction: import_prop_types85.default.oneOf(["left", "right"]).isRequired,
  disabled: import_prop_types85.default.bool,
  orientation: import_prop_types85.default.oneOf(["horizontal", "vertical"]).isRequired,
  slotProps: import_prop_types85.default.shape({
    endScrollButtonIcon: import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object]),
    startScrollButtonIcon: import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object])
  }),
  slots: import_prop_types85.default.shape({
    EndScrollButtonIcon: import_prop_types85.default.elementType,
    StartScrollButtonIcon: import_prop_types85.default.elementType
  }),
  sx: import_prop_types85.default.oneOfType([import_prop_types85.default.arrayOf(import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object, import_prop_types85.default.bool])), import_prop_types85.default.func, import_prop_types85.default.object])
} : void 0;
var TabScrollButton_default = TabScrollButton;

// node_modules/@mui/material/TabScrollButton/index.js
"use client";

// node_modules/@mui/material/Tabs/Tabs.js
init_useEventCallback2();

// node_modules/@mui/material/Tabs/tabsClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getTabsUtilityClass(slot) {
  return generateUtilityClass("MuiTabs", slot);
}
var tabsClasses = generateUtilityClasses("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
var tabsClasses_default = tabsClasses;

// node_modules/@mui/material/Tabs/Tabs.js
init_ownerDocument();
init_ownerWindow();
var import_jsx_runtime127 = __toESM(require_jsx_runtime());
var import_jsx_runtime128 = __toESM(require_jsx_runtime());
"use client";
var _excluded83 = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
var nextItem = (list, item) => {
  if (list === item) {
    return list.firstChild;
  }
  if (item && item.nextElementSibling) {
    return item.nextElementSibling;
  }
  return list.firstChild;
};
var previousItem = (list, item) => {
  if (list === item) {
    return list.lastChild;
  }
  if (item && item.previousElementSibling) {
    return item.previousElementSibling;
  }
  return list.lastChild;
};
var moveFocus = (list, currentFocus, traversalFunction) => {
  let wrappedOnce = false;
  let nextFocus = traversalFunction(list, currentFocus);
  while (nextFocus) {
    if (nextFocus === list.firstChild) {
      if (wrappedOnce) {
        return;
      }
      wrappedOnce = true;
    }
    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
    if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
      nextFocus = traversalFunction(list, nextFocus);
    } else {
      nextFocus.focus();
      return;
    }
  }
};
var useUtilityClasses69 = (ownerState) => {
  const {
    vertical,
    fixed,
    hideScrollbar,
    scrollableX,
    scrollableY,
    centered,
    scrollButtonsHideMobile,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", vertical && "vertical"],
    scroller: ["scroller", fixed && "fixed", hideScrollbar && "hideScrollbar", scrollableX && "scrollableX", scrollableY && "scrollableY"],
    flexContainer: ["flexContainer", vertical && "flexContainerVertical", centered && "centered"],
    indicator: ["indicator"],
    scrollButtons: ["scrollButtons", scrollButtonsHideMobile && "scrollButtonsHideMobile"],
    scrollableX: [scrollableX && "scrollableX"],
    hideScrollbar: [hideScrollbar && "hideScrollbar"]
  };
  return composeClasses(slots, getTabsUtilityClass, classes2);
};
var TabsRoot = styled_default("div", {
  name: "MuiTabs",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${tabsClasses_default.scrollButtons}`]: styles5.scrollButtons
    }, {
      [`& .${tabsClasses_default.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles5.scrollButtonsHideMobile
    }, styles5.root, ownerState.vertical && styles5.vertical];
  }
})(({
  ownerState,
  theme
}) => _extends({
  overflow: "hidden",
  minHeight: 48,
  WebkitOverflowScrolling: "touch",
  display: "flex"
}, ownerState.vertical && {
  flexDirection: "column"
}, ownerState.scrollButtonsHideMobile && {
  [`& .${tabsClasses_default.scrollButtons}`]: {
    [theme.breakpoints.down("sm")]: {
      display: "none"
    }
  }
}));
var TabsScroller = styled_default("div", {
  name: "MuiTabs",
  slot: "Scroller",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.scroller, ownerState.fixed && styles5.fixed, ownerState.hideScrollbar && styles5.hideScrollbar, ownerState.scrollableX && styles5.scrollableX, ownerState.scrollableY && styles5.scrollableY];
  }
})(({
  ownerState
}) => _extends({
  position: "relative",
  display: "inline-block",
  flex: "1 1 auto",
  whiteSpace: "nowrap"
}, ownerState.fixed && {
  overflowX: "hidden",
  width: "100%"
}, ownerState.hideScrollbar && {
  scrollbarWidth: "none",
  "&::-webkit-scrollbar": {
    display: "none"
  }
}, ownerState.scrollableX && {
  overflowX: "auto",
  overflowY: "hidden"
}, ownerState.scrollableY && {
  overflowY: "auto",
  overflowX: "hidden"
}));
var FlexContainer = styled_default("div", {
  name: "MuiTabs",
  slot: "FlexContainer",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.flexContainer, ownerState.vertical && styles5.flexContainerVertical, ownerState.centered && styles5.centered];
  }
})(({
  ownerState
}) => _extends({
  display: "flex"
}, ownerState.vertical && {
  flexDirection: "column"
}, ownerState.centered && {
  justifyContent: "center"
}));
var TabsIndicator = styled_default("span", {
  name: "MuiTabs",
  slot: "Indicator",
  overridesResolver: (props, styles5) => styles5.indicator
})(({
  ownerState,
  theme
}) => _extends({
  position: "absolute",
  height: 2,
  bottom: 0,
  width: "100%",
  transition: theme.transitions.create()
}, ownerState.indicatorColor === "primary" && {
  backgroundColor: (theme.vars || theme).palette.primary.main
}, ownerState.indicatorColor === "secondary" && {
  backgroundColor: (theme.vars || theme).palette.secondary.main
}, ownerState.vertical && {
  height: "100%",
  width: 2,
  right: 0
}));
var TabsScrollbarSize = styled_default(ScrollbarSize)({
  overflowX: "auto",
  overflowY: "hidden",
  scrollbarWidth: "none",
  "&::-webkit-scrollbar": {
    display: "none"
  }
});
var defaultIndicatorStyle = {};
var warnedOnceTabPresent = false;
var Tabs = React105.forwardRef(function Tabs2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiTabs"
  });
  const theme = useTheme();
  const isRtl = theme.direction === "rtl";
  const {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    action,
    centered = false,
    children: childrenProp,
    className,
    component = "div",
    allowScrollButtonsMobile = false,
    indicatorColor = "primary",
    onChange,
    orientation = "horizontal",
    ScrollButtonComponent = TabScrollButton_default,
    scrollButtons = "auto",
    selectionFollowsFocus,
    slots = {},
    slotProps = {},
    TabIndicatorProps = {},
    TabScrollButtonProps = {},
    textColor = "primary",
    value,
    variant = "standard",
    visibleScrollbar = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
  const scrollable = variant === "scrollable";
  const vertical = orientation === "vertical";
  const scrollStart = vertical ? "scrollTop" : "scrollLeft";
  const start = vertical ? "top" : "left";
  const end = vertical ? "bottom" : "right";
  const clientSize = vertical ? "clientHeight" : "clientWidth";
  const size = vertical ? "height" : "width";
  const ownerState = _extends({}, props, {
    component,
    allowScrollButtonsMobile,
    indicatorColor,
    orientation,
    vertical,
    scrollButtons,
    textColor,
    variant,
    visibleScrollbar,
    fixed: !scrollable,
    hideScrollbar: scrollable && !visibleScrollbar,
    scrollableX: scrollable && !vertical,
    scrollableY: scrollable && vertical,
    centered: centered && !scrollable,
    scrollButtonsHideMobile: !allowScrollButtonsMobile
  });
  const classes2 = useUtilityClasses69(ownerState);
  const startScrollButtonIconProps = useSlotProps({
    elementType: slots.StartScrollButtonIcon,
    externalSlotProps: slotProps.startScrollButtonIcon,
    ownerState
  });
  const endScrollButtonIconProps = useSlotProps({
    elementType: slots.EndScrollButtonIcon,
    externalSlotProps: slotProps.endScrollButtonIcon,
    ownerState
  });
  if (true) {
    if (centered && scrollable) {
      console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
    }
  }
  const [mounted, setMounted] = React105.useState(false);
  const [indicatorStyle, setIndicatorStyle] = React105.useState(defaultIndicatorStyle);
  const [displayStartScroll, setDisplayStartScroll] = React105.useState(false);
  const [displayEndScroll, setDisplayEndScroll] = React105.useState(false);
  const [updateScrollObserver, setUpdateScrollObserver] = React105.useState(false);
  const [scrollerStyle, setScrollerStyle] = React105.useState({
    overflow: "hidden",
    scrollbarWidth: 0
  });
  const valueToIndex = /* @__PURE__ */ new Map();
  const tabsRef = React105.useRef(null);
  const tabListRef = React105.useRef(null);
  const getTabsMeta = () => {
    const tabsNode = tabsRef.current;
    let tabsMeta;
    if (tabsNode) {
      const rect = tabsNode.getBoundingClientRect();
      tabsMeta = {
        clientWidth: tabsNode.clientWidth,
        scrollLeft: tabsNode.scrollLeft,
        scrollTop: tabsNode.scrollTop,
        scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
        scrollWidth: tabsNode.scrollWidth,
        top: rect.top,
        bottom: rect.bottom,
        left: rect.left,
        right: rect.right
      };
    }
    let tabMeta;
    if (tabsNode && value !== false) {
      const children2 = tabListRef.current.children;
      if (children2.length > 0) {
        const tab = children2[valueToIndex.get(value)];
        if (true) {
          if (!tab) {
            console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(", ")}.` : null].join("\n"));
          }
        }
        tabMeta = tab ? tab.getBoundingClientRect() : null;
        if (true) {
          if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0 && tabsMeta.clientWidth !== 0) {
            tabsMeta = null;
            console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join("\n"));
            warnedOnceTabPresent = true;
          }
        }
      }
    }
    return {
      tabsMeta,
      tabMeta
    };
  };
  const updateIndicatorState = useEventCallback_default2(() => {
    const {
      tabsMeta,
      tabMeta
    } = getTabsMeta();
    let startValue = 0;
    let startIndicator;
    if (vertical) {
      startIndicator = "top";
      if (tabMeta && tabsMeta) {
        startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
      }
    } else {
      startIndicator = isRtl ? "right" : "left";
      if (tabMeta && tabsMeta) {
        const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
        startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
      }
    }
    const newIndicatorStyle = {
      [startIndicator]: startValue,
      [size]: tabMeta ? tabMeta[size] : 0
    };
    if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
      setIndicatorStyle(newIndicatorStyle);
    } else {
      const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
      const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
      if (dStart >= 1 || dSize >= 1) {
        setIndicatorStyle(newIndicatorStyle);
      }
    }
  });
  const scroll2 = (scrollValue, {
    animation = true
  } = {}) => {
    if (animation) {
      animate(scrollStart, tabsRef.current, scrollValue, {
        duration: theme.transitions.duration.standard
      });
    } else {
      tabsRef.current[scrollStart] = scrollValue;
    }
  };
  const moveTabsScroll = (delta) => {
    let scrollValue = tabsRef.current[scrollStart];
    if (vertical) {
      scrollValue += delta;
    } else {
      scrollValue += delta * (isRtl ? -1 : 1);
      scrollValue *= isRtl && detectScrollType() === "reverse" ? -1 : 1;
    }
    scroll2(scrollValue);
  };
  const getScrollSize = () => {
    const containerSize = tabsRef.current[clientSize];
    let totalSize = 0;
    const children2 = Array.from(tabListRef.current.children);
    for (let i = 0; i < children2.length; i += 1) {
      const tab = children2[i];
      if (totalSize + tab[clientSize] > containerSize) {
        if (i === 0) {
          totalSize = containerSize;
        }
        break;
      }
      totalSize += tab[clientSize];
    }
    return totalSize;
  };
  const handleStartScrollClick = () => {
    moveTabsScroll(-1 * getScrollSize());
  };
  const handleEndScrollClick = () => {
    moveTabsScroll(getScrollSize());
  };
  const handleScrollbarSizeChange = React105.useCallback((scrollbarWidth) => {
    setScrollerStyle({
      overflow: null,
      scrollbarWidth
    });
  }, []);
  const getConditionalElements = () => {
    const conditionalElements2 = {};
    conditionalElements2.scrollbarSizeListener = scrollable ? (0, import_jsx_runtime127.jsx)(TabsScrollbarSize, {
      onChange: handleScrollbarSizeChange,
      className: clsx_default(classes2.scrollableX, classes2.hideScrollbar)
    }) : null;
    const scrollButtonsActive = displayStartScroll || displayEndScroll;
    const showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === true);
    conditionalElements2.scrollButtonStart = showScrollButtons ? (0, import_jsx_runtime127.jsx)(ScrollButtonComponent, _extends({
      slots: {
        StartScrollButtonIcon: slots.StartScrollButtonIcon
      },
      slotProps: {
        startScrollButtonIcon: startScrollButtonIconProps
      },
      orientation,
      direction: isRtl ? "right" : "left",
      onClick: handleStartScrollClick,
      disabled: !displayStartScroll
    }, TabScrollButtonProps, {
      className: clsx_default(classes2.scrollButtons, TabScrollButtonProps.className)
    })) : null;
    conditionalElements2.scrollButtonEnd = showScrollButtons ? (0, import_jsx_runtime127.jsx)(ScrollButtonComponent, _extends({
      slots: {
        EndScrollButtonIcon: slots.EndScrollButtonIcon
      },
      slotProps: {
        endScrollButtonIcon: endScrollButtonIconProps
      },
      orientation,
      direction: isRtl ? "left" : "right",
      onClick: handleEndScrollClick,
      disabled: !displayEndScroll
    }, TabScrollButtonProps, {
      className: clsx_default(classes2.scrollButtons, TabScrollButtonProps.className)
    })) : null;
    return conditionalElements2;
  };
  const scrollSelectedIntoView = useEventCallback_default2((animation) => {
    const {
      tabsMeta,
      tabMeta
    } = getTabsMeta();
    if (!tabMeta || !tabsMeta) {
      return;
    }
    if (tabMeta[start] < tabsMeta[start]) {
      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
      scroll2(nextScrollStart, {
        animation
      });
    } else if (tabMeta[end] > tabsMeta[end]) {
      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
      scroll2(nextScrollStart, {
        animation
      });
    }
  });
  const updateScrollButtonState = useEventCallback_default2(() => {
    if (scrollable && scrollButtons !== false) {
      setUpdateScrollObserver(!updateScrollObserver);
    }
  });
  React105.useEffect(() => {
    const handleResize = debounce_default(() => {
      if (tabsRef.current) {
        updateIndicatorState();
      }
    });
    let resizeObserver;
    const handleMutation = (records) => {
      records.forEach((record) => {
        record.removedNodes.forEach((item) => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.unobserve(item);
        });
        record.addedNodes.forEach((item) => {
          var _resizeObserver2;
          (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.observe(item);
        });
      });
      handleResize();
      updateScrollButtonState();
    };
    const win = ownerWindow_default(tabsRef.current);
    win.addEventListener("resize", handleResize);
    let mutationObserver;
    if (typeof ResizeObserver !== "undefined") {
      resizeObserver = new ResizeObserver(handleResize);
      Array.from(tabListRef.current.children).forEach((child) => {
        resizeObserver.observe(child);
      });
    }
    if (typeof MutationObserver !== "undefined") {
      mutationObserver = new MutationObserver(handleMutation);
      mutationObserver.observe(tabListRef.current, {
        childList: true
      });
    }
    return () => {
      var _mutationObserver, _resizeObserver3;
      handleResize.clear();
      win.removeEventListener("resize", handleResize);
      (_mutationObserver = mutationObserver) == null || _mutationObserver.disconnect();
      (_resizeObserver3 = resizeObserver) == null || _resizeObserver3.disconnect();
    };
  }, [updateIndicatorState, updateScrollButtonState]);
  React105.useEffect(() => {
    const tabListChildren = Array.from(tabListRef.current.children);
    const length = tabListChildren.length;
    if (typeof IntersectionObserver !== "undefined" && length > 0 && scrollable && scrollButtons !== false) {
      const firstTab = tabListChildren[0];
      const lastTab = tabListChildren[length - 1];
      const observerOptions = {
        root: tabsRef.current,
        threshold: 0.99
      };
      const handleScrollButtonStart = (entries) => {
        setDisplayStartScroll(!entries[0].isIntersecting);
      };
      const firstObserver = new IntersectionObserver(handleScrollButtonStart, observerOptions);
      firstObserver.observe(firstTab);
      const handleScrollButtonEnd = (entries) => {
        setDisplayEndScroll(!entries[0].isIntersecting);
      };
      const lastObserver = new IntersectionObserver(handleScrollButtonEnd, observerOptions);
      lastObserver.observe(lastTab);
      return () => {
        firstObserver.disconnect();
        lastObserver.disconnect();
      };
    }
    return void 0;
  }, [scrollable, scrollButtons, updateScrollObserver, childrenProp == null ? void 0 : childrenProp.length]);
  React105.useEffect(() => {
    setMounted(true);
  }, []);
  React105.useEffect(() => {
    updateIndicatorState();
  });
  React105.useEffect(() => {
    scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
  }, [scrollSelectedIntoView, indicatorStyle]);
  React105.useImperativeHandle(action, () => ({
    updateIndicator: updateIndicatorState,
    updateScrollButtons: updateScrollButtonState
  }), [updateIndicatorState, updateScrollButtonState]);
  const indicator = (0, import_jsx_runtime127.jsx)(TabsIndicator, _extends({}, TabIndicatorProps, {
    className: clsx_default(classes2.indicator, TabIndicatorProps.className),
    ownerState,
    style: _extends({}, indicatorStyle, TabIndicatorProps.style)
  }));
  let childIndex = 0;
  const children = React105.Children.map(childrenProp, (child) => {
    if (!React105.isValidElement(child)) {
      return null;
    }
    if (true) {
      if ((0, import_react_is7.isFragment)(child)) {
        console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    const childValue = child.props.value === void 0 ? childIndex : child.props.value;
    valueToIndex.set(childValue, childIndex);
    const selected = childValue === value;
    childIndex += 1;
    return React105.cloneElement(child, _extends({
      fullWidth: variant === "fullWidth",
      indicator: selected && !mounted && indicator,
      selected,
      selectionFollowsFocus,
      onChange,
      textColor,
      value: childValue
    }, childIndex === 1 && value === false && !child.props.tabIndex ? {
      tabIndex: 0
    } : {}));
  });
  const handleKeyDown = (event) => {
    const list = tabListRef.current;
    const currentFocus = ownerDocument_default(list).activeElement;
    const role = currentFocus.getAttribute("role");
    if (role !== "tab") {
      return;
    }
    let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
    let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
    if (orientation === "horizontal" && isRtl) {
      previousItemKey = "ArrowRight";
      nextItemKey = "ArrowLeft";
    }
    switch (event.key) {
      case previousItemKey:
        event.preventDefault();
        moveFocus(list, currentFocus, previousItem);
        break;
      case nextItemKey:
        event.preventDefault();
        moveFocus(list, currentFocus, nextItem);
        break;
      case "Home":
        event.preventDefault();
        moveFocus(list, null, nextItem);
        break;
      case "End":
        event.preventDefault();
        moveFocus(list, null, previousItem);
        break;
      default:
        break;
    }
  };
  const conditionalElements = getConditionalElements();
  return (0, import_jsx_runtime128.jsxs)(TabsRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState,
    ref,
    as: component
  }, other, {
    children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, (0, import_jsx_runtime128.jsxs)(TabsScroller, {
      className: classes2.scroller,
      ownerState,
      style: {
        overflow: scrollerStyle.overflow,
        [vertical ? `margin${isRtl ? "Left" : "Right"}` : "marginBottom"]: visibleScrollbar ? void 0 : -scrollerStyle.scrollbarWidth
      },
      ref: tabsRef,
      children: [(0, import_jsx_runtime127.jsx)(FlexContainer, {
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-orientation": orientation === "vertical" ? "vertical" : null,
        className: classes2.flexContainer,
        ownerState,
        onKeyDown: handleKeyDown,
        ref: tabListRef,
        role: "tablist",
        children
      }), mounted && indicator]
    }), conditionalElements.scrollButtonEnd]
  }));
});
true ? Tabs.propTypes = {
  action: refType_default,
  allowScrollButtonsMobile: import_prop_types86.default.bool,
  "aria-label": import_prop_types86.default.string,
  "aria-labelledby": import_prop_types86.default.string,
  centered: import_prop_types86.default.bool,
  children: import_prop_types86.default.node,
  classes: import_prop_types86.default.object,
  className: import_prop_types86.default.string,
  component: import_prop_types86.default.elementType,
  indicatorColor: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["primary", "secondary"]), import_prop_types86.default.string]),
  onChange: import_prop_types86.default.func,
  orientation: import_prop_types86.default.oneOf(["horizontal", "vertical"]),
  ScrollButtonComponent: import_prop_types86.default.elementType,
  scrollButtons: import_prop_types86.default.oneOf(["auto", false, true]),
  selectionFollowsFocus: import_prop_types86.default.bool,
  slotProps: import_prop_types86.default.shape({
    endScrollButtonIcon: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object]),
    startScrollButtonIcon: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object])
  }),
  slots: import_prop_types86.default.shape({
    EndScrollButtonIcon: import_prop_types86.default.elementType,
    StartScrollButtonIcon: import_prop_types86.default.elementType
  }),
  sx: import_prop_types86.default.oneOfType([import_prop_types86.default.arrayOf(import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object, import_prop_types86.default.bool])), import_prop_types86.default.func, import_prop_types86.default.object]),
  TabIndicatorProps: import_prop_types86.default.object,
  TabScrollButtonProps: import_prop_types86.default.object,
  textColor: import_prop_types86.default.oneOf(["inherit", "primary", "secondary"]),
  value: import_prop_types86.default.any,
  variant: import_prop_types86.default.oneOf(["fullWidth", "scrollable", "standard"]),
  visibleScrollbar: import_prop_types86.default.bool
} : void 0;
var Tabs_default = Tabs;

// node_modules/@mui/material/Tabs/index.js
"use client";

// node_modules/@mui/material/index.js
init_TextField();
init_TextField();

// node_modules/@mui/material/TextareaAutosize/index.js
init_TextareaAutosize();

// node_modules/@mui/material/ToggleButton/ToggleButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React108 = __toESM(require_react());
var import_prop_types87 = __toESM(require_prop_types());
init_clsx();
init_resolveProps();
init_composeClasses();
init_styles();
init_ButtonBase();
init_capitalize();
init_useThemeProps2();
init_styled();

// node_modules/@mui/material/ToggleButton/toggleButtonClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getToggleButtonUtilityClass(slot) {
  return generateUtilityClass("MuiToggleButton", slot);
}
var toggleButtonClasses = generateUtilityClasses("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge", "fullWidth"]);
var toggleButtonClasses_default = toggleButtonClasses;

// node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupContext.js
var React106 = __toESM(require_react());
var ToggleButtonGroupContext = React106.createContext({});
if (true) {
  ToggleButtonGroupContext.displayName = "ToggleButtonGroupContext";
}
var ToggleButtonGroupContext_default = ToggleButtonGroupContext;

// node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupButtonContext.js
var React107 = __toESM(require_react());
var ToggleButtonGroupButtonContext = React107.createContext(void 0);
if (true) {
  ToggleButtonGroupButtonContext.displayName = "ToggleButtonGroupButtonContext";
}
var ToggleButtonGroupButtonContext_default = ToggleButtonGroupButtonContext;

// node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js
function isValueSelected(value, candidate) {
  if (candidate === void 0 || value === void 0) {
    return false;
  }
  if (Array.isArray(candidate)) {
    return candidate.indexOf(value) >= 0;
  }
  return value === candidate;
}

// node_modules/@mui/material/ToggleButton/ToggleButton.js
var import_jsx_runtime129 = __toESM(require_jsx_runtime());
"use client";
var _excluded84 = ["value"];
var _excluded217 = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];
var useUtilityClasses70 = (ownerState) => {
  const {
    classes: classes2,
    fullWidth,
    selected,
    disabled,
    size,
    color
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected", disabled && "disabled", fullWidth && "fullWidth", `size${capitalize_default(size)}`, color]
  };
  return composeClasses(slots, getToggleButtonUtilityClass, classes2);
};
var ToggleButtonRoot = styled_default(ButtonBase_default, {
  name: "MuiToggleButton",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, styles5[`size${capitalize_default(ownerState.size)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  let selectedColor = ownerState.color === "standard" ? theme.palette.text.primary : theme.palette[ownerState.color].main;
  let selectedColorChannel;
  if (theme.vars) {
    selectedColor = ownerState.color === "standard" ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;
    selectedColorChannel = ownerState.color === "standard" ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;
  }
  return _extends({}, theme.typography.button, {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    padding: 11,
    border: `1px solid ${(theme.vars || theme).palette.divider}`,
    color: (theme.vars || theme).palette.action.active
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [`&.${toggleButtonClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled,
      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
    },
    "&:hover": {
      textDecoration: "none",
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${toggleButtonClasses_default.selected}`]: {
      color: selectedColor,
      backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity)
        }
      }
    }
  }, ownerState.size === "small" && {
    padding: 7,
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === "large" && {
    padding: 15,
    fontSize: theme.typography.pxToRem(15)
  });
});
var ToggleButton = React108.forwardRef(function ToggleButton2(inProps, ref) {
  const _React$useContext = React108.useContext(ToggleButtonGroupContext_default), {
    value: contextValue
  } = _React$useContext, contextProps = _objectWithoutPropertiesLoose(_React$useContext, _excluded84);
  const toggleButtonGroupButtonContextPositionClassName = React108.useContext(ToggleButtonGroupButtonContext_default);
  const resolvedProps = resolveProps(_extends({}, contextProps, {
    selected: isValueSelected(inProps.value, contextValue)
  }), inProps);
  const props = useThemeProps2({
    props: resolvedProps,
    name: "MuiToggleButton"
  });
  const {
    children,
    className,
    color = "standard",
    disabled = false,
    disableFocusRipple = false,
    fullWidth = false,
    onChange,
    onClick: onClick2,
    selected,
    size = "medium",
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded217);
  const ownerState = _extends({}, props, {
    color,
    disabled,
    disableFocusRipple,
    fullWidth,
    size
  });
  const classes2 = useUtilityClasses70(ownerState);
  const handleChange = (event) => {
    if (onClick2) {
      onClick2(event, value);
      if (event.defaultPrevented) {
        return;
      }
    }
    if (onChange) {
      onChange(event, value);
    }
  };
  const positionClassName = toggleButtonGroupButtonContextPositionClassName || "";
  return (0, import_jsx_runtime129.jsx)(ToggleButtonRoot, _extends({
    className: clsx_default(contextProps.className, classes2.root, className, positionClassName),
    disabled,
    focusRipple: !disableFocusRipple,
    ref,
    onClick: handleChange,
    onChange,
    value,
    ownerState,
    "aria-pressed": selected
  }, other, {
    children
  }));
});
true ? ToggleButton.propTypes = {
  children: import_prop_types87.default.node,
  classes: import_prop_types87.default.object,
  className: import_prop_types87.default.string,
  color: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types87.default.string]),
  disabled: import_prop_types87.default.bool,
  disableFocusRipple: import_prop_types87.default.bool,
  disableRipple: import_prop_types87.default.bool,
  fullWidth: import_prop_types87.default.bool,
  onChange: import_prop_types87.default.func,
  onClick: import_prop_types87.default.func,
  selected: import_prop_types87.default.bool,
  size: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["small", "medium", "large"]), import_prop_types87.default.string]),
  sx: import_prop_types87.default.oneOfType([import_prop_types87.default.arrayOf(import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object, import_prop_types87.default.bool])), import_prop_types87.default.func, import_prop_types87.default.object]),
  value: import_prop_types87.default.any.isRequired
} : void 0;

// node_modules/@mui/material/ToggleButton/index.js
"use client";

// node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React109 = __toESM(require_react());
var import_react_is8 = __toESM(require_react_is());
var import_prop_types88 = __toESM(require_prop_types());
init_clsx();
init_composeClasses();
init_getValidReactChildren();
init_styled();
init_useThemeProps2();
init_capitalize();

// node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js
init_generateUtilityClasses();
init_generateUtilityClass();
function getToggleButtonGroupUtilityClass(slot) {
  return generateUtilityClass("MuiToggleButtonGroup", slot);
}
var toggleButtonGroupClasses = generateUtilityClasses("MuiToggleButtonGroup", ["root", "selected", "vertical", "disabled", "grouped", "groupedHorizontal", "groupedVertical", "fullWidth", "firstButton", "lastButton", "middleButton"]);
var toggleButtonGroupClasses_default = toggleButtonGroupClasses;

// node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
var import_jsx_runtime130 = __toESM(require_jsx_runtime());
"use client";
var _excluded85 = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];
var useUtilityClasses71 = (ownerState) => {
  const {
    classes: classes2,
    orientation,
    fullWidth,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", orientation === "vertical" && "vertical", fullWidth && "fullWidth"],
    grouped: ["grouped", `grouped${capitalize_default(orientation)}`, disabled && "disabled"],
    firstButton: ["firstButton"],
    lastButton: ["lastButton"],
    middleButton: ["middleButton"]
  };
  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes2);
};
var ToggleButtonGroupRoot = styled_default("div", {
  name: "MuiToggleButtonGroup",
  slot: "Root",
  overridesResolver: (props, styles5) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${toggleButtonGroupClasses_default.grouped}`]: styles5.grouped
    }, {
      [`& .${toggleButtonGroupClasses_default.grouped}`]: styles5[`grouped${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${toggleButtonGroupClasses_default.firstButton}`]: styles5.firstButton
    }, {
      [`& .${toggleButtonGroupClasses_default.lastButton}`]: styles5.lastButton
    }, {
      [`& .${toggleButtonGroupClasses_default.middleButton}`]: styles5.middleButton
    }, styles5.root, ownerState.orientation === "vertical" && styles5.vertical, ownerState.fullWidth && styles5.fullWidth];
  }
})(({
  ownerState,
  theme
}) => _extends({
  display: "inline-flex",
  borderRadius: (theme.vars || theme).shape.borderRadius
}, ownerState.orientation === "vertical" && {
  flexDirection: "column"
}, ownerState.fullWidth && {
  width: "100%"
}, {
  [`& .${toggleButtonGroupClasses_default.grouped}`]: _extends({}, ownerState.orientation === "horizontal" ? {
    [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
      borderLeft: 0,
      marginLeft: 0
    }
  } : {
    [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
      borderTop: 0,
      marginTop: 0
    }
  })
}, ownerState.orientation === "horizontal" ? {
  [`& .${toggleButtonGroupClasses_default.firstButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  },
  [`& .${toggleButtonGroupClasses_default.lastButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
    marginLeft: -1,
    borderLeft: "1px solid transparent",
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }
} : {
  [`& .${toggleButtonGroupClasses_default.firstButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
    borderBottomLeftRadius: 0,
    borderBottomRightRadius: 0
  },
  [`& .${toggleButtonGroupClasses_default.lastButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
    marginTop: -1,
    borderTop: "1px solid transparent",
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0
  }
}, ownerState.orientation === "horizontal" ? {
  [`& .${toggleButtonGroupClasses_default.lastButton}.${toggleButtonClasses_default.disabled},& .${toggleButtonGroupClasses_default.middleButton}.${toggleButtonClasses_default.disabled}`]: {
    borderLeft: "1px solid transparent"
  }
} : {
  [`& .${toggleButtonGroupClasses_default.lastButton}.${toggleButtonClasses_default.disabled},& .${toggleButtonGroupClasses_default.middleButton}.${toggleButtonClasses_default.disabled}`]: {
    borderTop: "1px solid transparent"
  }
}));
var ToggleButtonGroup = React109.forwardRef(function ToggleButtonGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiToggleButtonGroup"
  });
  const {
    children,
    className,
    color = "standard",
    disabled = false,
    exclusive = false,
    fullWidth = false,
    onChange,
    orientation = "horizontal",
    size = "medium",
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded85);
  const ownerState = _extends({}, props, {
    disabled,
    fullWidth,
    orientation,
    size
  });
  const classes2 = useUtilityClasses71(ownerState);
  const handleChange = React109.useCallback((event, buttonValue) => {
    if (!onChange) {
      return;
    }
    const index = value && value.indexOf(buttonValue);
    let newValue;
    if (value && index >= 0) {
      newValue = value.slice();
      newValue.splice(index, 1);
    } else {
      newValue = value ? value.concat(buttonValue) : [buttonValue];
    }
    onChange(event, newValue);
  }, [onChange, value]);
  const handleExclusiveChange = React109.useCallback((event, buttonValue) => {
    if (!onChange) {
      return;
    }
    onChange(event, value === buttonValue ? null : buttonValue);
  }, [onChange, value]);
  const context = React109.useMemo(() => ({
    className: classes2.grouped,
    onChange: exclusive ? handleExclusiveChange : handleChange,
    value,
    size,
    fullWidth,
    color,
    disabled
  }), [classes2.grouped, exclusive, handleExclusiveChange, handleChange, value, size, fullWidth, color, disabled]);
  const validChildren = getValidReactChildren(children);
  const childrenCount = validChildren.length;
  const getButtonPositionClassName = (index) => {
    const isFirstButton = index === 0;
    const isLastButton = index === childrenCount - 1;
    if (isFirstButton && isLastButton) {
      return "";
    }
    if (isFirstButton) {
      return classes2.firstButton;
    }
    if (isLastButton) {
      return classes2.lastButton;
    }
    return classes2.middleButton;
  };
  return (0, import_jsx_runtime130.jsx)(ToggleButtonGroupRoot, _extends({
    role: "group",
    className: clsx_default(classes2.root, className),
    ref,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime130.jsx)(ToggleButtonGroupContext_default.Provider, {
      value: context,
      children: validChildren.map((child, index) => {
        if (true) {
          if ((0, import_react_is8.isFragment)(child)) {
            console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        return (0, import_jsx_runtime130.jsx)(ToggleButtonGroupButtonContext_default.Provider, {
          value: getButtonPositionClassName(index),
          children: child
        }, index);
      })
    })
  }));
});
true ? ToggleButtonGroup.propTypes = {
  children: import_prop_types88.default.node,
  classes: import_prop_types88.default.object,
  className: import_prop_types88.default.string,
  color: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types88.default.string]),
  disabled: import_prop_types88.default.bool,
  exclusive: import_prop_types88.default.bool,
  fullWidth: import_prop_types88.default.bool,
  onChange: import_prop_types88.default.func,
  orientation: import_prop_types88.default.oneOf(["horizontal", "vertical"]),
  size: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["small", "medium", "large"]), import_prop_types88.default.string]),
  sx: import_prop_types88.default.oneOfType([import_prop_types88.default.arrayOf(import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object, import_prop_types88.default.bool])), import_prop_types88.default.func, import_prop_types88.default.object]),
  value: import_prop_types88.default.any
} : void 0;

// node_modules/@mui/material/ToggleButtonGroup/index.js
"use client";

// node_modules/@mui/material/index.js
init_Toolbar();
init_Toolbar();
init_Tooltip();
init_Tooltip();
init_Typography();
init_Typography();

// node_modules/@mui/material/useScrollTrigger/useScrollTrigger.js
init_extends();
init_objectWithoutPropertiesLoose();
var React110 = __toESM(require_react());
"use client";

// node_modules/@mui/material/useScrollTrigger/index.js
"use client";

// node_modules/@mui/material/useAutocomplete/useAutocomplete.js
init_useAutocomplete();
init_useAutocomplete();
"use client";

// node_modules/@mui/material/useAutocomplete/index.js
"use client";

// node_modules/@mui/material/index.js
init_GlobalStyles();
init_GlobalStyles();
init_composeClasses2();

// node_modules/@mui/material/generateUtilityClass/index.js
init_utils();

// node_modules/@mui/material/generateUtilityClasses/index.js
init_utils();

// node_modules/@mui/material/index.js
init_Unstable_TrapFocus();

// node_modules/@devexpress/dx-react-scheduler-material-ui/dist/dx-react-scheduler-material-ui.es.js
init_clsx_m();

// node_modules/@mui/icons-material/esm/utils/createSvgIcon.js
init_utils2();
"use client";

// node_modules/@mui/icons-material/esm/Repeat.js
var import_jsx_runtime131 = __toESM(require_jsx_runtime());
"use client";
var Repeat_default = createSvgIcon((0, import_jsx_runtime131.jsx)("path", {
  d: "M7 7h10v3l4-4-4-4v3H5v6h2zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2z"
}), "Repeat");

// node_modules/@mui/icons-material/esm/CalendarToday.js
var import_jsx_runtime132 = __toESM(require_jsx_runtime());
"use client";
var CalendarToday_default = createSvgIcon((0, import_jsx_runtime132.jsx)("path", {
  d: "M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 18H4V8h16z"
}), "CalendarToday");

// node_modules/@mui/icons-material/esm/ChevronLeft.js
var import_jsx_runtime133 = __toESM(require_jsx_runtime());
"use client";
var ChevronLeft_default = createSvgIcon((0, import_jsx_runtime133.jsx)("path", {
  d: "M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), "ChevronLeft");

// node_modules/@mui/icons-material/esm/ChevronRight.js
var import_jsx_runtime134 = __toESM(require_jsx_runtime());
"use client";
var ChevronRight_default = createSvgIcon((0, import_jsx_runtime134.jsx)("path", {
  d: "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), "ChevronRight");

// node_modules/@mui/icons-material/esm/AccessTime.js
var import_jsx_runtime135 = __toESM(require_jsx_runtime());
"use client";
var AccessTime_default = createSvgIcon([(0, import_jsx_runtime135.jsx)("path", {
  d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8"
}, "0"), (0, import_jsx_runtime135.jsx)("path", {
  d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
}, "1")], "AccessTime");

// node_modules/@mui/icons-material/esm/Lens.js
var import_jsx_runtime136 = __toESM(require_jsx_runtime());
"use client";
var Lens_default = createSvgIcon((0, import_jsx_runtime136.jsx)("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2"
}), "Lens");

// node_modules/@mui/icons-material/esm/Edit.js
var import_jsx_runtime137 = __toESM(require_jsx_runtime());
"use client";
var Edit_default = createSvgIcon((0, import_jsx_runtime137.jsx)("path", {
  d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z"
}), "Edit");

// node_modules/@mui/icons-material/esm/Close.js
var import_jsx_runtime138 = __toESM(require_jsx_runtime());
"use client";
var Close_default2 = createSvgIcon((0, import_jsx_runtime138.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@mui/icons-material/esm/Delete.js
var import_jsx_runtime139 = __toESM(require_jsx_runtime());
"use client";
var Delete_default = createSvgIcon((0, import_jsx_runtime139.jsx)("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z"
}), "Delete");

// node_modules/@mui/x-date-pickers/AdapterMoment/AdapterMoment.js
init_extends();
var formatTokenMap = {
  Y: "year",
  YY: "year",
  YYYY: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  M: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  MM: "month",
  MMM: {
    sectionType: "month",
    contentType: "letter"
  },
  MMMM: {
    sectionType: "month",
    contentType: "letter"
  },
  D: {
    sectionType: "day",
    contentType: "digit",
    maxLength: 2
  },
  DD: "day",
  Do: {
    sectionType: "day",
    contentType: "digit-with-letter"
  },
  E: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  e: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  d: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  dd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  ddd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  dddd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  A: "meridiem",
  a: "meridiem",
  H: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  HH: "hours",
  h: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  hh: "hours",
  m: {
    sectionType: "minutes",
    contentType: "digit",
    maxLength: 2
  },
  mm: "minutes",
  s: {
    sectionType: "seconds",
    contentType: "digit",
    maxLength: 2
  },
  ss: "seconds"
};
var defaultFormats = {
  year: "YYYY",
  month: "MMMM",
  monthShort: "MMM",
  dayOfMonth: "D",
  weekday: "dddd",
  weekdayShort: "ddd",
  hours24h: "HH",
  hours12h: "hh",
  meridiem: "A",
  minutes: "mm",
  seconds: "ss",
  fullDate: "ll",
  fullDateWithWeekday: "dddd, LL",
  keyboardDate: "L",
  shortDate: "MMM D",
  normalDate: "D MMMM",
  normalDateWithWeekday: "ddd, MMM D",
  monthAndYear: "MMMM YYYY",
  monthAndDate: "MMMM D",
  fullTime: "LT",
  fullTime12h: "hh:mm A",
  fullTime24h: "HH:mm",
  fullDateTime: "lll",
  fullDateTime12h: "ll hh:mm A",
  fullDateTime24h: "ll HH:mm",
  keyboardDateTime: "L LT",
  keyboardDateTime12h: "L hh:mm A",
  keyboardDateTime24h: "L HH:mm"
};
var MISSING_TIMEZONE_PLUGIN = ["Missing timezone plugin", "To be able to use timezones, you have to pass the default export from `moment-timezone` to the `dateLibInstance` prop of `LocalizationProvider`", "Find more information on https://mui.com/x/react-date-pickers/timezone/#moment-and-timezone"].join("\n");
var AdapterMoment = class {
  constructor({
    locale: locale2,
    formats,
    instance
  } = {}) {
    this.isMUIAdapter = true;
    this.isTimezoneCompatible = true;
    this.lib = "moment";
    this.moment = void 0;
    this.locale = void 0;
    this.formats = void 0;
    this.escapedCharacters = {
      start: "[",
      end: "]"
    };
    this.formatTokenMap = formatTokenMap;
    this.setLocaleToValue = (value) => {
      const expectedLocale = this.getCurrentLocaleCode();
      if (expectedLocale === value.locale()) {
        return value;
      }
      return value.locale(expectedLocale);
    };
    this.syncMomentLocale = (runner) => {
      var _this$locale;
      const momentLocale = moment_default.locale();
      const adapterLocale = (_this$locale = this.locale) != null ? _this$locale : "en-us";
      if (momentLocale !== adapterLocale) {
        moment_default.locale(adapterLocale);
        const result = runner();
        moment_default.locale(momentLocale);
        return result;
      }
      return runner();
    };
    this.hasTimezonePlugin = () => typeof this.moment.tz !== "undefined";
    this.createSystemDate = (value) => {
      const parsedValue = this.moment(value).local();
      if (this.locale === void 0) {
        return parsedValue;
      }
      return parsedValue.locale(this.locale);
    };
    this.createUTCDate = (value) => {
      const parsedValue = this.moment.utc(value);
      if (this.locale === void 0) {
        return parsedValue;
      }
      return parsedValue.locale(this.locale);
    };
    this.createTZDate = (value, timezone) => {
      if (!this.hasTimezonePlugin()) {
        throw new Error(MISSING_TIMEZONE_PLUGIN);
      }
      const parsedValue = timezone === "default" ? this.moment(value) : this.moment.tz(value, timezone);
      if (this.locale === void 0) {
        return parsedValue;
      }
      return parsedValue.locale(this.locale);
    };
    this.date = (value) => {
      if (value === null) {
        return null;
      }
      const moment = this.moment(value);
      moment.locale(this.getCurrentLocaleCode());
      return moment;
    };
    this.dateWithTimezone = (value, timezone) => {
      if (value === null) {
        return null;
      }
      if (timezone === "UTC") {
        return this.createUTCDate(value);
      }
      if (timezone === "system" || timezone === "default" && !this.hasTimezonePlugin()) {
        return this.createSystemDate(value);
      }
      return this.createTZDate(value, timezone);
    };
    this.getTimezone = (value) => {
      var _value$_z, _ref, _this$moment$defaultZ;
      const zone = (_value$_z = value._z) == null ? void 0 : _value$_z.name;
      const defaultZone = value.isUTC() ? "UTC" : "system";
      return (_ref = zone != null ? zone : (_this$moment$defaultZ = this.moment.defaultZone) == null ? void 0 : _this$moment$defaultZ.name) != null ? _ref : defaultZone;
    };
    this.setTimezone = (value, timezone) => {
      var _this$moment$defaultZ2, _this$moment$defaultZ3;
      if (this.getTimezone(value) === timezone) {
        return value;
      }
      if (timezone === "UTC") {
        return value.clone().utc();
      }
      if (timezone === "system") {
        return value.clone().local();
      }
      if (!this.hasTimezonePlugin()) {
        if (timezone !== "default") {
          throw new Error(MISSING_TIMEZONE_PLUGIN);
        }
        return value;
      }
      const cleanZone = timezone === "default" ? (_this$moment$defaultZ2 = (_this$moment$defaultZ3 = this.moment.defaultZone) == null ? void 0 : _this$moment$defaultZ3.name) != null ? _this$moment$defaultZ2 : "system" : timezone;
      if (cleanZone === "system") {
        return value.clone().local();
      }
      const newValue = value.clone();
      newValue.tz(cleanZone);
      return newValue;
    };
    this.toJsDate = (value) => {
      return value.toDate();
    };
    this.parseISO = (isoString) => {
      return this.moment(isoString, true);
    };
    this.toISO = (value) => {
      return value.toISOString();
    };
    this.parse = (value, format2) => {
      if (value === "") {
        return null;
      }
      if (this.locale) {
        return this.moment(value, format2, this.locale, true);
      }
      return this.moment(value, format2, true);
    };
    this.getCurrentLocaleCode = () => {
      return this.locale || moment_default.locale();
    };
    this.is12HourCycleInCurrentLocale = () => {
      return /A|a/.test(moment_default.localeData(this.getCurrentLocaleCode()).longDateFormat("LT"));
    };
    this.expandFormat = (format2) => {
      const localFormattingTokens2 = /(\[[^[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
      return format2.match(localFormattingTokens2).map((token2) => {
        const firstCharacter = token2[0];
        if (firstCharacter === "L" || firstCharacter === ";") {
          return moment_default.localeData(this.getCurrentLocaleCode()).longDateFormat(token2);
        }
        return token2;
      }).join("");
    };
    this.getFormatHelperText = (format2) => {
      return this.expandFormat(format2).replace(/a/gi, "(a|p)m").toLocaleLowerCase();
    };
    this.isNull = (value) => {
      return value === null;
    };
    this.isValid = (value) => {
      return this.moment(value).isValid();
    };
    this.format = (value, formatKey) => {
      return this.formatByString(value, this.formats[formatKey]);
    };
    this.formatByString = (value, formatString) => {
      const clonedDate = value.clone();
      clonedDate.locale(this.getCurrentLocaleCode());
      return clonedDate.format(formatString);
    };
    this.formatNumber = (numberToFormat) => {
      return numberToFormat;
    };
    this.getDiff = (value, comparing, unit) => {
      return value.diff(comparing, unit);
    };
    this.isEqual = (value, comparing) => {
      if (value === null && comparing === null) {
        return true;
      }
      return this.moment(value).isSame(comparing);
    };
    this.isSameYear = (value, comparing) => {
      return value.isSame(comparing, "year");
    };
    this.isSameMonth = (value, comparing) => {
      return value.isSame(comparing, "month");
    };
    this.isSameDay = (value, comparing) => {
      return value.isSame(comparing, "day");
    };
    this.isSameHour = (value, comparing) => {
      return value.isSame(comparing, "hour");
    };
    this.isAfter = (value, comparing) => {
      return value.isAfter(comparing);
    };
    this.isAfterYear = (value, comparing) => {
      return value.isAfter(comparing, "year");
    };
    this.isAfterDay = (value, comparing) => {
      return value.isAfter(comparing, "day");
    };
    this.isBefore = (value, comparing) => {
      return value.isBefore(comparing);
    };
    this.isBeforeYear = (value, comparing) => {
      return value.isBefore(comparing, "year");
    };
    this.isBeforeDay = (value, comparing) => {
      return value.isBefore(comparing, "day");
    };
    this.isWithinRange = (value, [start, end]) => {
      return value.isBetween(start, end, null, "[]");
    };
    this.startOfYear = (value) => {
      return value.clone().startOf("year");
    };
    this.startOfMonth = (value) => {
      return value.clone().startOf("month");
    };
    this.startOfWeek = (value) => {
      return value.clone().startOf("week");
    };
    this.startOfDay = (value) => {
      return value.clone().startOf("day");
    };
    this.endOfYear = (value) => {
      return value.clone().endOf("year");
    };
    this.endOfMonth = (value) => {
      return value.clone().endOf("month");
    };
    this.endOfWeek = (value) => {
      return value.clone().endOf("week");
    };
    this.endOfDay = (value) => {
      return value.clone().endOf("day");
    };
    this.addYears = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "years") : value.clone().add(amount, "years");
    };
    this.addMonths = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "months") : value.clone().add(amount, "months");
    };
    this.addWeeks = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "weeks") : value.clone().add(amount, "weeks");
    };
    this.addDays = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "days") : value.clone().add(amount, "days");
    };
    this.addHours = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "hours") : value.clone().add(amount, "hours");
    };
    this.addMinutes = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "minutes") : value.clone().add(amount, "minutes");
    };
    this.addSeconds = (value, amount) => {
      return amount < 0 ? value.clone().subtract(Math.abs(amount), "seconds") : value.clone().add(amount, "seconds");
    };
    this.getYear = (value) => {
      return value.get("year");
    };
    this.getMonth = (value) => {
      return value.get("month");
    };
    this.getDate = (value) => {
      return value.get("date");
    };
    this.getHours = (value) => {
      return value.get("hours");
    };
    this.getMinutes = (value) => {
      return value.get("minutes");
    };
    this.getSeconds = (value) => {
      return value.get("seconds");
    };
    this.getMilliseconds = (value) => {
      return value.get("milliseconds");
    };
    this.setYear = (value, year) => {
      return value.clone().year(year);
    };
    this.setMonth = (value, month) => {
      return value.clone().month(month);
    };
    this.setDate = (value, date) => {
      return value.clone().date(date);
    };
    this.setHours = (value, hours2) => {
      return value.clone().hours(hours2);
    };
    this.setMinutes = (value, minutes2) => {
      return value.clone().minutes(minutes2);
    };
    this.setSeconds = (value, seconds2) => {
      return value.clone().seconds(seconds2);
    };
    this.setMilliseconds = (value, milliseconds2) => {
      return value.clone().milliseconds(milliseconds2);
    };
    this.getDaysInMonth = (value) => {
      return value.daysInMonth();
    };
    this.getNextMonth = (value) => {
      return value.clone().add(1, "month");
    };
    this.getPreviousMonth = (value) => {
      return value.clone().subtract(1, "month");
    };
    this.getMonthArray = (value) => {
      const firstMonth = this.startOfYear(value);
      const monthArray = [firstMonth];
      while (monthArray.length < 12) {
        const prevMonth = monthArray[monthArray.length - 1];
        monthArray.push(this.getNextMonth(prevMonth));
      }
      return monthArray;
    };
    this.mergeDateAndTime = (dateParam, timeParam) => {
      return dateParam.clone().hour(timeParam.hour()).minute(timeParam.minute()).second(timeParam.second());
    };
    this.getWeekdays = () => this.syncMomentLocale(() => moment_default.weekdaysShort(true));
    this.getWeekArray = (value) => {
      const cleanValue = this.setLocaleToValue(value);
      const start = cleanValue.clone().startOf("month").startOf("week");
      const end = cleanValue.clone().endOf("month").endOf("week");
      let count = 0;
      let current = start;
      const nestedWeeks = [];
      while (current.isBefore(end)) {
        const weekNumber = Math.floor(count / 7);
        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
        nestedWeeks[weekNumber].push(current);
        current = current.clone().add(1, "day");
        count += 1;
      }
      return nestedWeeks;
    };
    this.getWeekNumber = (value) => {
      return value.week();
    };
    this.getYearRange = (start, end) => {
      const startDate = this.moment(start).startOf("year");
      const endDate = this.moment(end).endOf("year");
      const years2 = [];
      let current = startDate;
      while (current.isBefore(endDate)) {
        years2.push(current);
        current = current.clone().add(1, "year");
      }
      return years2;
    };
    this.getMeridiemText = (ampm) => {
      if (this.is12HourCycleInCurrentLocale()) {
        return moment_default.localeData(this.getCurrentLocaleCode()).meridiem(ampm === "am" ? 0 : 13, 0, false);
      }
      return ampm === "am" ? "AM" : "PM";
    };
    this.moment = instance || moment_default;
    this.locale = locale2;
    this.formats = _extends({}, defaultFormats, formats);
  }
};

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React169 = __toESM(require_react());
var import_prop_types106 = __toESM(require_prop_types());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
init_extends();
var React166 = __toESM(require_react());
var import_prop_types104 = __toESM(require_prop_types());
init_utils4();
init_utils();

// node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js
init_objectWithoutPropertiesLoose();

// node_modules/@mui/x-date-pickers/internals/utils/views.js
var areViewsEqual = (views, expectedViews) => {
  if (views.length !== expectedViews.length) {
    return false;
  }
  return expectedViews.every((expectedView) => views.includes(expectedView));
};
var applyDefaultViewProps = ({
  openTo,
  defaultOpenTo,
  views,
  defaultViews
}) => {
  const viewsWithDefault = views != null ? views : defaultViews;
  let openToWithDefault;
  if (openTo != null) {
    openToWithDefault = openTo;
  } else if (viewsWithDefault.includes(defaultOpenTo)) {
    openToWithDefault = defaultOpenTo;
  } else if (viewsWithDefault.length > 0) {
    openToWithDefault = viewsWithDefault[0];
  } else {
    throw new Error("MUI: The `views` prop must contain at least one view");
  }
  return {
    views: viewsWithDefault,
    openTo: openToWithDefault
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/date-utils.js
var findClosestEnabledDate = ({
  date,
  disableFuture,
  disablePast,
  maxDate,
  minDate,
  isDateDisabled,
  utils,
  timezone
}) => {
  const today = utils.startOfDay(utils.dateWithTimezone(void 0, timezone));
  if (disablePast && utils.isBefore(minDate, today)) {
    minDate = today;
  }
  if (disableFuture && utils.isAfter(maxDate, today)) {
    maxDate = today;
  }
  let forward = date;
  let backward = date;
  if (utils.isBefore(date, minDate)) {
    forward = minDate;
    backward = null;
  }
  if (utils.isAfter(date, maxDate)) {
    if (backward) {
      backward = maxDate;
    }
    forward = null;
  }
  while (forward || backward) {
    if (forward && utils.isAfter(forward, maxDate)) {
      forward = null;
    }
    if (backward && utils.isBefore(backward, minDate)) {
      backward = null;
    }
    if (forward) {
      if (!isDateDisabled(forward)) {
        return forward;
      }
      forward = utils.addDays(forward, 1);
    }
    if (backward) {
      if (!isDateDisabled(backward)) {
        return backward;
      }
      backward = utils.addDays(backward, -1);
    }
  }
  return null;
};
var replaceInvalidDateByNull = (utils, value) => value == null || !utils.isValid(value) ? null : value;
var applyDefaultDate = (utils, value, defaultValue) => {
  if (value == null || !utils.isValid(value)) {
    return defaultValue;
  }
  return value;
};
var areDatesEqual = (utils, a, b) => {
  if (!utils.isValid(a) && a != null && !utils.isValid(b) && b != null) {
    return true;
  }
  return utils.isEqual(a, b);
};
var getMonthsInYear = (utils, year) => {
  const firstMonth = utils.startOfYear(year);
  const months2 = [firstMonth];
  while (months2.length < 12) {
    const prevMonth = months2[months2.length - 1];
    months2.push(utils.addMonths(prevMonth, 1));
  }
  return months2;
};
var mergeDateAndTime = (utils, dateParam, timeParam) => {
  let mergedDate = dateParam;
  mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));
  mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));
  mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));
  return mergedDate;
};
var getTodayDate = (utils, timezone, valueType) => valueType === "date" ? utils.startOfDay(utils.dateWithTimezone(void 0, timezone)) : utils.dateWithTimezone(void 0, timezone);
var formatMeridiem = (utils, meridiem2) => {
  const date = utils.setHours(utils.date(), meridiem2 === "am" ? 2 : 14);
  return utils.format(date, "meridiem");
};
var dateViews = ["year", "month", "day"];
var isDatePickerView = (view) => dateViews.includes(view);
var resolveDateFormat = (utils, {
  format: format2,
  views
}, isInToolbar) => {
  if (format2 != null) {
    return format2;
  }
  const formats = utils.formats;
  if (areViewsEqual(views, ["year"])) {
    return formats.year;
  }
  if (areViewsEqual(views, ["month"])) {
    return formats.month;
  }
  if (areViewsEqual(views, ["day"])) {
    return formats.dayOfMonth;
  }
  if (areViewsEqual(views, ["month", "year"])) {
    return `${formats.month} ${formats.year}`;
  }
  if (areViewsEqual(views, ["day", "month"])) {
    return `${formats.month} ${formats.dayOfMonth}`;
  }
  if (isInToolbar) {
    return /en/.test(utils.getCurrentLocaleCode()) ? formats.normalDateWithWeekday : formats.normalDate;
  }
  return formats.keyboardDate;
};
var getWeekdays = (utils, date) => {
  const start = utils.startOfWeek(date);
  return [0, 1, 2, 3, 4, 5, 6].map((diff2) => utils.addDays(start, diff2));
};

// node_modules/@mui/x-date-pickers/internals/utils/time-utils.js
var timeViews = ["hours", "minutes", "seconds"];
var isTimeView = (view) => timeViews.includes(view);
var isInternalTimeView = (view) => timeViews.includes(view) || view === "meridiem";
var getMeridiem = (date, utils) => {
  if (!date) {
    return null;
  }
  return utils.getHours(date) >= 12 ? "pm" : "am";
};
var convertValueToMeridiem = (value, meridiem2, ampm) => {
  if (ampm) {
    const currentMeridiem = value >= 12 ? "pm" : "am";
    if (currentMeridiem !== meridiem2) {
      return meridiem2 === "am" ? value - 12 : value + 12;
    }
  }
  return value;
};
var convertToMeridiem = (time, meridiem2, ampm, utils) => {
  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem2, ampm);
  return utils.setHours(time, newHoursAmount);
};
var getSecondsInDay = (date, utils) => {
  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
};
var createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {
  if (disableIgnoringDatePartForTimeValidation) {
    return utils.isAfter(dateLeft, dateRight);
  }
  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
};
var resolveTimeFormat = (utils, {
  format: format2,
  views,
  ampm
}) => {
  if (format2 != null) {
    return format2;
  }
  const formats = utils.formats;
  if (areViewsEqual(views, ["hours"])) {
    return ampm ? `${formats.hours12h} ${formats.meridiem}` : formats.hours24h;
  }
  if (areViewsEqual(views, ["minutes"])) {
    return formats.minutes;
  }
  if (areViewsEqual(views, ["seconds"])) {
    return formats.seconds;
  }
  if (areViewsEqual(views, ["minutes", "seconds"])) {
    return `${formats.minutes}:${formats.seconds}`;
  }
  if (areViewsEqual(views, ["hours", "minutes", "seconds"])) {
    return ampm ? `${formats.hours12h}:${formats.minutes}:${formats.seconds} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}:${formats.seconds}`;
  }
  return ampm ? `${formats.hours12h}:${formats.minutes} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}`;
};

// node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.js
var SECTION_TYPE_GRANULARITY = {
  year: 1,
  month: 2,
  day: 3,
  hours: 4,
  minutes: 5,
  seconds: 6,
  milliseconds: 7
};
var getSectionTypeGranularity = (sections) => Math.max(...sections.map((section) => {
  var _SECTION_TYPE_GRANULA;
  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;
}));
var roundDate = (utils, granularity, date) => {
  if (granularity === SECTION_TYPE_GRANULARITY.year) {
    return utils.startOfYear(date);
  }
  if (granularity === SECTION_TYPE_GRANULARITY.month) {
    return utils.startOfMonth(date);
  }
  if (granularity === SECTION_TYPE_GRANULARITY.day) {
    return utils.startOfDay(date);
  }
  let roundedDate = date;
  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {
    roundedDate = utils.setMinutes(roundedDate, 0);
  }
  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {
    roundedDate = utils.setSeconds(roundedDate, 0);
  }
  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {
    roundedDate = utils.setMilliseconds(roundedDate, 0);
  }
  return roundedDate;
};
var getDefaultReferenceDate = ({
  props,
  utils,
  granularity,
  timezone,
  getTodayDate: inGetTodayDate
}) => {
  var _props$disableIgnorin;
  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));
  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {
    referenceDate = roundDate(utils, granularity, props.minDate);
  }
  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {
    referenceDate = roundDate(utils, granularity, props.maxDate);
  }
  const isAfter2 = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);
  if (props.minTime != null && isAfter2(props.minTime, referenceDate)) {
    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));
  }
  if (props.maxTime != null && isAfter2(referenceDate, props.maxTime)) {
    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));
  }
  return referenceDate;
};

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js
init_extends();
var getDateSectionConfigFromFormatToken = (utils, formatToken) => {
  const config = utils.formatTokenMap[formatToken];
  if (config == null) {
    throw new Error([`MUI: The token "${formatToken}" is not supported by the Date and Time Pickers.`, "Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported."].join("\n"));
  }
  if (typeof config === "string") {
    return {
      type: config,
      contentType: config === "meridiem" ? "letter" : "digit",
      maxLength: void 0
    };
  }
  return {
    type: config.sectionType,
    contentType: config.contentType,
    maxLength: config.maxLength
  };
};
var getDeltaFromKeyCode = (keyCode) => {
  switch (keyCode) {
    case "ArrowUp":
      return 1;
    case "ArrowDown":
      return -1;
    case "PageUp":
      return 5;
    case "PageDown":
      return -5;
    default:
      return 0;
  }
};
var getDaysInWeekStr = (utils, timezone, format2) => {
  const elements = [];
  const now2 = utils.dateWithTimezone(void 0, timezone);
  const startDate = utils.startOfWeek(now2);
  const endDate = utils.endOfWeek(now2);
  let current = startDate;
  while (utils.isBefore(current, endDate)) {
    elements.push(current);
    current = utils.addDays(current, 1);
  }
  return elements.map((weekDay) => utils.formatByString(weekDay, format2));
};
var getLetterEditingOptions = (utils, timezone, sectionType, format2) => {
  switch (sectionType) {
    case "month": {
      return getMonthsInYear(utils, utils.dateWithTimezone(void 0, timezone)).map((month) => utils.formatByString(month, format2));
    }
    case "weekDay": {
      return getDaysInWeekStr(utils, timezone, format2);
    }
    case "meridiem": {
      const now2 = utils.dateWithTimezone(void 0, timezone);
      return [utils.startOfDay(now2), utils.endOfDay(now2)].map((date) => utils.formatByString(date, format2));
    }
    default: {
      return [];
    }
  }
};
var cleanLeadingZeros = (utils, valueStr, size) => {
  let cleanValueStr = valueStr;
  cleanValueStr = Number(cleanValueStr).toString();
  while (cleanValueStr.length < size) {
    cleanValueStr = `0${cleanValueStr}`;
  }
  return cleanValueStr;
};
var cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {
  if (true) {
    if (section.type !== "day" && section.contentType === "digit-with-letter") {
      throw new Error([`MUI: The token "${section.format}" is a digit format with letter in it.'
             This type of format is only supported for 'day' sections`].join("\n"));
    }
  }
  if (section.type === "day" && section.contentType === "digit-with-letter") {
    const date = utils.setDate(sectionBoundaries.longestMonth, value);
    return utils.formatByString(date, section.format);
  }
  const valueStr = value.toString();
  if (section.hasLeadingZerosInInput) {
    return cleanLeadingZeros(utils, valueStr, section.maxLength);
  }
  return valueStr;
};
var adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {
  const delta = getDeltaFromKeyCode(keyCode);
  const isStart = keyCode === "Home";
  const isEnd = keyCode === "End";
  const shouldSetAbsolute = section.value === "" || isStart || isEnd;
  const adjustDigitSection = () => {
    const sectionBoundaries = sectionsValueBoundaries[section.type]({
      currentDate: activeDate,
      format: section.format,
      contentType: section.contentType
    });
    const getCleanValue = (value) => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);
    const step = section.type === "minutes" && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;
    const currentSectionValue = parseInt(section.value, 10);
    let newSectionValueNumber = currentSectionValue + delta * step;
    if (shouldSetAbsolute) {
      if (section.type === "year" && !isEnd && !isStart) {
        return utils.formatByString(utils.dateWithTimezone(void 0, timezone), section.format);
      }
      if (delta > 0 || isStart) {
        newSectionValueNumber = sectionBoundaries.minimum;
      } else {
        newSectionValueNumber = sectionBoundaries.maximum;
      }
    }
    if (newSectionValueNumber % step !== 0) {
      if (delta < 0 || isStart) {
        newSectionValueNumber += step - (step + newSectionValueNumber) % step;
      }
      if (delta > 0 || isEnd) {
        newSectionValueNumber -= newSectionValueNumber % step;
      }
    }
    if (newSectionValueNumber > sectionBoundaries.maximum) {
      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
    }
    if (newSectionValueNumber < sectionBoundaries.minimum) {
      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
    }
    return getCleanValue(newSectionValueNumber);
  };
  const adjustLetterSection = () => {
    const options = getLetterEditingOptions(utils, timezone, section.type, section.format);
    if (options.length === 0) {
      return section.value;
    }
    if (shouldSetAbsolute) {
      if (delta > 0 || isStart) {
        return options[0];
      }
      return options[options.length - 1];
    }
    const currentOptionIndex = options.indexOf(section.value);
    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;
    return options[newOptionIndex];
  };
  if (section.contentType === "digit" || section.contentType === "digit-with-letter") {
    return adjustDigitSection();
  }
  return adjustLetterSection();
};
var getSectionVisibleValue = (section, target) => {
  let value = section.value || section.placeholder;
  const hasLeadingZeros = target === "non-input" ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;
  if (target === "non-input" && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {
    value = Number(value).toString();
  }
  const shouldAddInvisibleSpace = ["input-rtl", "input-ltr"].includes(target) && section.contentType === "digit" && !hasLeadingZeros && value.length === 1;
  if (shouldAddInvisibleSpace) {
    value = `${value}\u200E`;
  }
  if (target === "input-rtl") {
    value = `\u2068${value}\u2069`;
  }
  return value;
};
var cleanString = (dirtyString) => dirtyString.replace(/[\u2066\u2067\u2068\u2069]/g, "");
var addPositionPropertiesToSections = (sections, isRTL) => {
  let position = 0;
  let positionInInput = isRTL ? 1 : 0;
  const newSections = [];
  for (let i = 0; i < sections.length; i += 1) {
    const section = sections[i];
    const renderedValue = getSectionVisibleValue(section, isRTL ? "input-rtl" : "input-ltr");
    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;
    const sectionLength = cleanString(sectionStr).length;
    const sectionLengthInInput = sectionStr.length;
    const cleanedValue = cleanString(renderedValue);
    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;
    const endInInput = startInInput + cleanedValue.length;
    newSections.push(_extends({}, section, {
      start: position,
      end: position + sectionLength,
      startInInput,
      endInInput
    }));
    position += sectionLength;
    positionInInput += sectionLengthInInput;
  }
  return newSections;
};
var getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, sectionFormat) => {
  switch (sectionConfig.type) {
    case "year": {
      return localeText.fieldYearPlaceholder({
        digitAmount: utils.formatByString(utils.dateWithTimezone(void 0, timezone), sectionFormat).length,
        format: sectionFormat
      });
    }
    case "month": {
      return localeText.fieldMonthPlaceholder({
        contentType: sectionConfig.contentType,
        format: sectionFormat
      });
    }
    case "day": {
      return localeText.fieldDayPlaceholder({
        format: sectionFormat
      });
    }
    case "weekDay": {
      return localeText.fieldWeekDayPlaceholder({
        contentType: sectionConfig.contentType,
        format: sectionFormat
      });
    }
    case "hours": {
      return localeText.fieldHoursPlaceholder({
        format: sectionFormat
      });
    }
    case "minutes": {
      return localeText.fieldMinutesPlaceholder({
        format: sectionFormat
      });
    }
    case "seconds": {
      return localeText.fieldSecondsPlaceholder({
        format: sectionFormat
      });
    }
    case "meridiem": {
      return localeText.fieldMeridiemPlaceholder({
        format: sectionFormat
      });
    }
    default: {
      return sectionFormat;
    }
  }
};
var changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {
  if (true) {
    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === "weekDay") {
      throw new Error("changeSectionValueFormat doesn't support week day formats");
    }
  }
  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);
};
var isFourDigitYearFormat = (utils, timezone, format2) => utils.formatByString(utils.dateWithTimezone(void 0, timezone), format2).length === 4;
var doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format2) => {
  if (contentType !== "digit") {
    return false;
  }
  const now2 = utils.dateWithTimezone(void 0, timezone);
  switch (sectionType) {
    case "year": {
      if (isFourDigitYearFormat(utils, timezone, format2)) {
        const formatted0001 = utils.formatByString(utils.setYear(now2, 1), format2);
        return formatted0001 === "0001";
      }
      const formatted2001 = utils.formatByString(utils.setYear(now2, 2001), format2);
      return formatted2001 === "01";
    }
    case "month": {
      return utils.formatByString(utils.startOfYear(now2), format2).length > 1;
    }
    case "day": {
      return utils.formatByString(utils.startOfMonth(now2), format2).length > 1;
    }
    case "weekDay": {
      return utils.formatByString(utils.startOfWeek(now2), format2).length > 1;
    }
    case "hours": {
      return utils.formatByString(utils.setHours(now2, 1), format2).length > 1;
    }
    case "minutes": {
      return utils.formatByString(utils.setMinutes(now2, 1), format2).length > 1;
    }
    case "seconds": {
      return utils.formatByString(utils.setSeconds(now2, 1), format2).length > 1;
    }
    default: {
      throw new Error("Invalid section type");
    }
  }
};
var getEscapedPartsFromFormat = (utils, format2) => {
  const escapedParts = [];
  const {
    start: startChar,
    end: endChar
  } = utils.escapedCharacters;
  const regExp = new RegExp(`(\\${startChar}[^\\${endChar}]*\\${endChar})+`, "g");
  let match = null;
  while (match = regExp.exec(format2)) {
    escapedParts.push({
      start: match.index,
      end: regExp.lastIndex - 1
    });
  }
  return escapedParts;
};
var splitFormatIntoSections = (utils, timezone, localeText, format2, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {
  let startSeparator = "";
  const sections = [];
  const now2 = utils.date();
  const commitToken = (token2) => {
    if (token2 === "") {
      return null;
    }
    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token2);
    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token2);
    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === "digit";
    const isValidDate = date != null && utils.isValid(date);
    let sectionValue = isValidDate ? utils.formatByString(date, token2) : "";
    let maxLength = null;
    if (hasLeadingZerosInInput) {
      if (hasLeadingZerosInFormat) {
        maxLength = sectionValue === "" ? utils.formatByString(now2, token2).length : sectionValue.length;
      } else {
        if (sectionConfig.maxLength == null) {
          throw new Error(`MUI: The token ${token2} should have a 'maxDigitNumber' property on it's adapter`);
        }
        maxLength = sectionConfig.maxLength;
        if (isValidDate) {
          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);
        }
      }
    }
    sections.push(_extends({}, sectionConfig, {
      format: token2,
      maxLength,
      value: sectionValue,
      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token2),
      hasLeadingZeros: hasLeadingZerosInFormat,
      hasLeadingZerosInFormat,
      hasLeadingZerosInInput,
      startSeparator: sections.length === 0 ? startSeparator : "",
      endSeparator: "",
      modified: false
    }));
    return null;
  };
  let formatExpansionOverflow = 10;
  let prevFormat = format2;
  let nextFormat = utils.expandFormat(format2);
  while (nextFormat !== prevFormat) {
    prevFormat = nextFormat;
    nextFormat = utils.expandFormat(prevFormat);
    formatExpansionOverflow -= 1;
    if (formatExpansionOverflow < 0) {
      throw new Error("MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component");
    }
  }
  const expandedFormat = nextFormat;
  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);
  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).sort((a, b) => b.length - a.length).join("|")})`, "g");
  let currentTokenValue = "";
  for (let i = 0; i < expandedFormat.length; i += 1) {
    const escapedPartOfCurrentChar = escapedParts.find((escapeIndex) => escapeIndex.start <= i && escapeIndex.end >= i);
    const char = expandedFormat[i];
    const isEscapedChar = escapedPartOfCurrentChar != null;
    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;
    const regExpMatch = isTokenStartRegExp.test(potentialToken);
    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && regExpMatch) {
      currentTokenValue = potentialToken.slice(0, isTokenStartRegExp.lastIndex);
      i += isTokenStartRegExp.lastIndex - 1;
    } else {
      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;
      if (!isEscapeBoundary) {
        commitToken(currentTokenValue);
        currentTokenValue = "";
        if (sections.length === 0) {
          startSeparator += char;
        } else {
          sections[sections.length - 1].endSeparator += char;
        }
      }
    }
  }
  commitToken(currentTokenValue);
  return sections.map((section) => {
    const cleanSeparator = (separator) => {
      let cleanedSeparator = separator;
      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(" ")) {
        cleanedSeparator = `\u2069${cleanedSeparator}\u2066`;
      }
      if (formatDensity === "spacious" && ["/", ".", "-"].includes(cleanedSeparator)) {
        cleanedSeparator = ` ${cleanedSeparator} `;
      }
      return cleanedSeparator;
    };
    section.startSeparator = cleanSeparator(section.startSeparator);
    section.endSeparator = cleanSeparator(section.endSeparator);
    return section;
  });
};
var getDateFromDateSections = (utils, sections) => {
  const shouldSkipWeekDays = sections.some((section) => section.type === "day");
  const sectionFormats = [];
  const sectionValues = [];
  for (let i = 0; i < sections.length; i += 1) {
    const section = sections[i];
    const shouldSkip = shouldSkipWeekDays && section.type === "weekDay";
    if (!shouldSkip) {
      sectionFormats.push(section.format);
      sectionValues.push(getSectionVisibleValue(section, "non-input"));
    }
  }
  const formatWithoutSeparator = sectionFormats.join(" ");
  const dateWithoutSeparatorStr = sectionValues.join(" ");
  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);
};
var createDateStrForInputFromSections = (sections, isRTL) => {
  const formattedSections = sections.map((section) => {
    const dateValue = getSectionVisibleValue(section, isRTL ? "input-rtl" : "input-ltr");
    return `${section.startSeparator}${dateValue}${section.endSeparator}`;
  });
  const dateStr = formattedSections.join("");
  if (!isRTL) {
    return dateStr;
  }
  return `\u2066${dateStr}\u2069`;
};
var getSectionsBoundaries = (utils, timezone) => {
  const today = utils.dateWithTimezone(void 0, timezone);
  const endOfYear = utils.endOfYear(today);
  const endOfDay = utils.endOfDay(today);
  const {
    maxDaysInMonth,
    longestMonth
  } = getMonthsInYear(utils, today).reduce((acc, month) => {
    const daysInMonth2 = utils.getDaysInMonth(month);
    if (daysInMonth2 > acc.maxDaysInMonth) {
      return {
        maxDaysInMonth: daysInMonth2,
        longestMonth: month
      };
    }
    return acc;
  }, {
    maxDaysInMonth: 0,
    longestMonth: null
  });
  return {
    year: ({
      format: format2
    }) => ({
      minimum: 0,
      maximum: isFourDigitYearFormat(utils, timezone, format2) ? 9999 : 99
    }),
    month: () => ({
      minimum: 1,
      maximum: utils.getMonth(endOfYear) + 1
    }),
    day: ({
      currentDate
    }) => ({
      minimum: 1,
      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,
      longestMonth
    }),
    weekDay: ({
      format: format2,
      contentType
    }) => {
      if (contentType === "digit") {
        const daysInWeek = getDaysInWeekStr(utils, timezone, format2).map(Number);
        return {
          minimum: Math.min(...daysInWeek),
          maximum: Math.max(...daysInWeek)
        };
      }
      return {
        minimum: 1,
        maximum: 7
      };
    },
    hours: ({
      format: format2
    }) => {
      const lastHourInDay = utils.getHours(endOfDay);
      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format2) !== lastHourInDay.toString();
      if (hasMeridiem) {
        return {
          minimum: 1,
          maximum: Number(utils.formatByString(utils.startOfDay(today), format2))
        };
      }
      return {
        minimum: 0,
        maximum: lastHourInDay
      };
    },
    minutes: () => ({
      minimum: 0,
      maximum: utils.getMinutes(endOfDay)
    }),
    seconds: () => ({
      minimum: 0,
      maximum: utils.getSeconds(endOfDay)
    }),
    meridiem: () => ({
      minimum: 0,
      maximum: 0
    })
  };
};
var warnedOnceInvalidSection = false;
var validateSections = (sections, valueType) => {
  if (true) {
    if (!warnedOnceInvalidSection) {
      const supportedSections = [];
      if (["date", "date-time"].includes(valueType)) {
        supportedSections.push("weekDay", "day", "month", "year");
      }
      if (["time", "date-time"].includes(valueType)) {
        supportedSections.push("hours", "minutes", "seconds", "meridiem");
      }
      const invalidSection = sections.find((section) => !supportedSections.includes(section.type));
      if (invalidSection) {
        console.warn(`MUI: The field component you are using is not compatible with the "${invalidSection.type} date section.`, `The supported date sections are ["${supportedSections.join('", "')}"]\`.`);
        warnedOnceInvalidSection = true;
      }
    }
  }
};
var transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {
  switch (section.type) {
    case "year": {
      return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));
    }
    case "month": {
      return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));
    }
    case "weekDay": {
      const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);
      const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);
      const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);
      const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);
      const diff2 = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;
      return utils.addDays(dateToTransferFrom, diff2);
    }
    case "day": {
      return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));
    }
    case "meridiem": {
      const isAM = utils.getHours(dateToTransferFrom) < 12;
      const mergedDateHours = utils.getHours(dateToTransferTo);
      if (isAM && mergedDateHours >= 12) {
        return utils.addHours(dateToTransferTo, -12);
      }
      if (!isAM && mergedDateHours < 12) {
        return utils.addHours(dateToTransferTo, 12);
      }
      return dateToTransferTo;
    }
    case "hours": {
      return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));
    }
    case "minutes": {
      return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));
    }
    case "seconds": {
      return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));
    }
    default: {
      return dateToTransferTo;
    }
  }
};
var reliableSectionModificationOrder = {
  year: 1,
  month: 2,
  day: 3,
  weekDay: 4,
  hours: 5,
  minutes: 6,
  seconds: 7,
  meridiem: 8
};
var mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => [...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {
  if (!shouldLimitToEditedSections || section.modified) {
    return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);
  }
  return mergedDate;
}, referenceDate);
var isAndroid = () => navigator.userAgent.toLowerCase().indexOf("android") > -1;
var getSectionOrder = (sections, isRTL) => {
  const neighbors = {};
  if (!isRTL) {
    sections.forEach((_4, index) => {
      const leftIndex = index === 0 ? null : index - 1;
      const rightIndex = index === sections.length - 1 ? null : index + 1;
      neighbors[index] = {
        leftIndex,
        rightIndex
      };
    });
    return {
      neighbors,
      startIndex: 0,
      endIndex: sections.length - 1
    };
  }
  const rtl2ltr = {};
  const ltr2rtl = {};
  let groupedSectionsStart = 0;
  let groupedSectionsEnd = 0;
  let RTLIndex = sections.length - 1;
  while (RTLIndex >= 0) {
    groupedSectionsEnd = sections.findIndex(
      (section, index) => {
        var _section$endSeparator;
        return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(" ")) && section.endSeparator !== " / ";
      }
    );
    if (groupedSectionsEnd === -1) {
      groupedSectionsEnd = sections.length - 1;
    }
    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {
      ltr2rtl[i] = RTLIndex;
      rtl2ltr[RTLIndex] = i;
      RTLIndex -= 1;
    }
    groupedSectionsStart = groupedSectionsEnd + 1;
  }
  sections.forEach((_4, index) => {
    const rtlIndex = ltr2rtl[index];
    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];
    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];
    neighbors[index] = {
      leftIndex,
      rightIndex
    };
  });
  return {
    neighbors,
    startIndex: rtl2ltr[0],
    endIndex: rtl2ltr[sections.length - 1]
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js
var _excluded86 = ["value", "referenceDate"];
var singleItemValueManager = {
  emptyValue: null,
  getTodayValue: getTodayDate,
  getInitialReferenceValue: (_ref) => {
    let {
      value,
      referenceDate
    } = _ref, params = _objectWithoutPropertiesLoose(_ref, _excluded86);
    if (value != null && params.utils.isValid(value)) {
      return value;
    }
    if (referenceDate != null) {
      return referenceDate;
    }
    return getDefaultReferenceDate(params);
  },
  cleanValue: replaceInvalidDateByNull,
  areValuesEqual: areDatesEqual,
  isSameError: (a, b) => a === b,
  hasError: (error) => error != null,
  defaultErrorState: null,
  getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),
  setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)
};
var singleItemFieldValueManager = {
  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,
  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {
    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
    if (shouldReUsePrevDateSections) {
      return prevSections;
    }
    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);
  },
  getValueStrFromSections: createDateStrForInputFromSections,
  getActiveDateManager: (utils, state) => ({
    date: state.value,
    referenceDate: state.referenceValue,
    getSections: (sections) => sections,
    getNewValuesFromNewActiveDate: (newActiveDate) => ({
      value: newActiveDate,
      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
    })
  }),
  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)
};

// node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.js
init_extends();
init_objectWithoutPropertiesLoose();
var React142 = __toESM(require_react());
var import_prop_types94 = __toESM(require_prop_types());
init_TextField();
init_styles();
init_utils4();
init_utils();

// node_modules/@mui/x-date-pickers/DateTimeField/useDateTimeField.js
init_extends();

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js
init_extends();
init_objectWithoutPropertiesLoose();
var React117 = __toESM(require_react());
init_useEnhancedEffect();
init_useEventCallback();
init_useForkRef();
init_styles();

// node_modules/@mui/x-date-pickers/internals/hooks/useValidation.js
var React113 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/internals/hooks/useUtils.js
init_extends();
var React112 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
init_extends();
init_objectWithoutPropertiesLoose();
var React111 = __toESM(require_react());
var import_prop_types89 = __toESM(require_prop_types());
init_styles();
var import_jsx_runtime140 = __toESM(require_jsx_runtime());
var _excluded87 = ["localeText"];
var MuiPickersAdapterContext = React111.createContext(null);
if (true) {
  MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
}
var LocalizationProvider = function LocalizationProvider2(inProps) {
  var _React$useContext;
  const {
    localeText: inLocaleText
  } = inProps, otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded87);
  const {
    utils: parentUtils,
    localeText: parentLocaleText
  } = (_React$useContext = React111.useContext(MuiPickersAdapterContext)) != null ? _React$useContext : {
    utils: void 0,
    localeText: void 0
  };
  const props = useThemeProps2({
    props: otherInProps,
    name: "MuiLocalizationProvider"
  });
  const {
    children,
    dateAdapter: DateAdapter,
    dateFormats,
    dateLibInstance,
    adapterLocale,
    localeText: themeLocaleText
  } = props;
  const localeText = React111.useMemo(() => _extends({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
  const utils = React111.useMemo(() => {
    if (!DateAdapter) {
      if (parentUtils) {
        return parentUtils;
      }
      return null;
    }
    const adapter = new DateAdapter({
      locale: adapterLocale,
      formats: dateFormats,
      instance: dateLibInstance
    });
    if (!adapter.isMUIAdapter) {
      throw new Error(["MUI: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`", "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", "More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation"].join(`
`));
    }
    return adapter;
  }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);
  const defaultDates = React111.useMemo(() => {
    if (!utils) {
      return null;
    }
    return {
      minDate: utils.date("1900-01-01T00:00:00.000"),
      maxDate: utils.date("2099-12-31T00:00:00.000")
    };
  }, [utils]);
  const contextValue = React111.useMemo(() => {
    return {
      utils,
      defaultDates,
      localeText
    };
  }, [defaultDates, utils, localeText]);
  return (0, import_jsx_runtime140.jsx)(MuiPickersAdapterContext.Provider, {
    value: contextValue,
    children
  });
};
true ? LocalizationProvider.propTypes = {
  adapterLocale: import_prop_types89.default.any,
  children: import_prop_types89.default.node,
  dateAdapter: import_prop_types89.default.func,
  dateFormats: import_prop_types89.default.shape({
    dayOfMonth: import_prop_types89.default.string,
    fullDate: import_prop_types89.default.string,
    fullDateTime: import_prop_types89.default.string,
    fullDateTime12h: import_prop_types89.default.string,
    fullDateTime24h: import_prop_types89.default.string,
    fullDateWithWeekday: import_prop_types89.default.string,
    fullTime: import_prop_types89.default.string,
    fullTime12h: import_prop_types89.default.string,
    fullTime24h: import_prop_types89.default.string,
    hours12h: import_prop_types89.default.string,
    hours24h: import_prop_types89.default.string,
    keyboardDate: import_prop_types89.default.string,
    keyboardDateTime: import_prop_types89.default.string,
    keyboardDateTime12h: import_prop_types89.default.string,
    keyboardDateTime24h: import_prop_types89.default.string,
    meridiem: import_prop_types89.default.string,
    minutes: import_prop_types89.default.string,
    month: import_prop_types89.default.string,
    monthAndDate: import_prop_types89.default.string,
    monthAndYear: import_prop_types89.default.string,
    monthShort: import_prop_types89.default.string,
    normalDate: import_prop_types89.default.string,
    normalDateWithWeekday: import_prop_types89.default.string,
    seconds: import_prop_types89.default.string,
    shortDate: import_prop_types89.default.string,
    weekday: import_prop_types89.default.string,
    weekdayShort: import_prop_types89.default.string,
    year: import_prop_types89.default.string
  }),
  dateLibInstance: import_prop_types89.default.any,
  localeText: import_prop_types89.default.object
} : void 0;

// node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
init_extends();
var getPickersLocalization = (pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/locales/enUS.js
var enUSPickers = {
  previousMonth: "Previous month",
  nextMonth: "Next month",
  openPreviousView: "open previous view",
  openNextView: "open next view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  start: "Start",
  end: "End",
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  datePickerToolbarTitle: "Select date",
  dateTimePickerToolbarTitle: "Select date & time",
  timePickerToolbarTitle: "Select time",
  dateRangePickerToolbarTitle: "Select date range",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours2) => `${hours2} hours`,
  minutesClockNumberText: (minutes2) => `${minutes2} minutes`,
  secondsClockNumberText: (seconds2) => `${seconds2} seconds`,
  selectViewText: (view) => `Select ${view}`,
  calendarWeekNumberHeaderLabel: "Week number",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Week ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose date, selected date is ${utils.format(value, "fullDate")}` : "Choose date",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose time, selected time is ${utils.format(value, "fullTime")}` : "Choose time",
  fieldClearLabel: "Clear value",
  timeTableLabel: "pick time",
  dateTableLabel: "pick date",
  fieldYearPlaceholder: (params) => "Y".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa"
};
var DEFAULT_LOCALE = enUSPickers;
var enUS = getPickersLocalization(enUSPickers);

// node_modules/@mui/x-date-pickers/internals/hooks/useUtils.js
var useLocalizationContext = () => {
  const localization = React112.useContext(MuiPickersAdapterContext);
  if (localization === null) {
    throw new Error(["MUI: Can not find the date and time pickers localization context.", "It looks like you forgot to wrap your component in LocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package"].join("\n"));
  }
  if (localization.utils === null) {
    throw new Error(["MUI: Can not find the date and time pickers adapter from its localization context.", "It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider."].join("\n"));
  }
  const localeText = React112.useMemo(() => _extends({}, DEFAULT_LOCALE, localization.localeText), [localization.localeText]);
  return React112.useMemo(() => _extends({}, localization, {
    localeText
  }), [localization, localeText]);
};
var useUtils = () => useLocalizationContext().utils;
var useDefaultDates = () => useLocalizationContext().defaultDates;
var useLocaleText = () => useLocalizationContext().localeText;
var useNow = (timezone) => {
  const utils = useUtils();
  const now2 = React112.useRef();
  if (now2.current === void 0) {
    now2.current = utils.dateWithTimezone(void 0, timezone);
  }
  return now2.current;
};

// node_modules/@mui/x-date-pickers/internals/hooks/useValidation.js
function useValidation(props, validate, isSameError, defaultErrorState) {
  const {
    value,
    onError
  } = props;
  const adapter = useLocalizationContext();
  const previousValidationErrorRef = React113.useRef(defaultErrorState);
  const validationError = validate({
    adapter,
    value,
    props
  });
  React113.useEffect(() => {
    if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
      onError(validationError, value);
    }
    previousValidationErrorRef.current = validationError;
  }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
  return validationError;
}

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js
init_extends();
var React115 = __toESM(require_react());
init_useControlled();
init_styles();

// node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.js
var React114 = __toESM(require_react());
init_useEventCallback();
init_useControlled();
var useValueWithTimezone = ({
  timezone: timezoneProp,
  value: valueProp,
  defaultValue,
  onChange,
  valueManager
}) => {
  var _ref, _ref2;
  const utils = useUtils();
  const firstDefaultValue = React114.useRef(defaultValue);
  const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;
  const inputTimezone = React114.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);
  const setInputTimezone = useEventCallback_default((newValue) => {
    if (inputTimezone == null) {
      return newValue;
    }
    return valueManager.setTimezone(utils, inputTimezone, newValue);
  });
  const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : "default";
  const valueWithTimezoneToRender = React114.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);
  const handleValueChange = useEventCallback_default((newValue, ...otherParams) => {
    const newValueWithInputTimezone = setInputTimezone(newValue);
    onChange == null || onChange(newValueWithInputTimezone, ...otherParams);
  });
  return {
    value: valueWithTimezoneToRender,
    handleValueChange,
    timezone: timezoneToRender
  };
};
var useControlledValueWithTimezone = ({
  name,
  timezone: timezoneProp,
  value: valueProp,
  defaultValue,
  onChange: onChangeProp,
  valueManager
}) => {
  const [valueWithInputTimezone, setValue] = useControlled({
    name,
    state: "value",
    controlled: valueProp,
    default: defaultValue != null ? defaultValue : valueManager.emptyValue
  });
  const onChange = useEventCallback_default((newValue, ...otherParams) => {
    setValue(newValue);
    onChangeProp == null || onChangeProp(newValue, ...otherParams);
  });
  return useValueWithTimezone({
    timezone: timezoneProp,
    value: valueWithInputTimezone,
    defaultValue: void 0,
    onChange,
    valueManager
  });
};

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js
var useFieldState = (params) => {
  const utils = useUtils();
  const localeText = useLocaleText();
  const adapter = useLocalizationContext();
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const {
    valueManager,
    fieldValueManager,
    valueType,
    validator,
    internalProps,
    internalProps: {
      value: valueProp,
      defaultValue,
      referenceDate: referenceDateProp,
      onChange,
      format: format2,
      formatDensity = "dense",
      selectedSections: selectedSectionsProp,
      onSelectedSectionsChange,
      shouldRespectLeadingZeros = false,
      timezone: timezoneProp
    }
  } = params;
  const {
    timezone,
    value: valueFromTheOutside,
    handleValueChange
  } = useValueWithTimezone({
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager
  });
  const sectionsValueBoundaries = React115.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);
  const getSectionsFromValue = React115.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, (date) => splitFormatIntoSections(utils, timezone, localeText, format2, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format2, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);
  const placeholder = React115.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);
  const [state, setState] = React115.useState(() => {
    const sections = getSectionsFromValue(valueFromTheOutside);
    validateSections(sections, valueType);
    const stateWithoutReferenceDate = {
      sections,
      value: valueFromTheOutside,
      referenceValue: valueManager.emptyValue,
      tempValueStrAndroid: null
    };
    const granularity = getSectionTypeGranularity(sections);
    const referenceValue = valueManager.getInitialReferenceValue({
      referenceDate: referenceDateProp,
      value: valueFromTheOutside,
      utils,
      props: internalProps,
      granularity,
      timezone
    });
    return _extends({}, stateWithoutReferenceDate, {
      referenceValue
    });
  });
  const [selectedSections, innerSetSelectedSections] = useControlled({
    controlled: selectedSectionsProp,
    default: null,
    name: "useField",
    state: "selectedSectionIndexes"
  });
  const setSelectedSections = (newSelectedSections) => {
    innerSetSelectedSections(newSelectedSections);
    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
    setState((prevState) => _extends({}, prevState, {
      selectedSectionQuery: null
    }));
  };
  const selectedSectionIndexes = React115.useMemo(() => {
    if (selectedSections == null) {
      return null;
    }
    if (selectedSections === "all") {
      return {
        startIndex: 0,
        endIndex: state.sections.length - 1,
        shouldSelectBoundarySelectors: true
      };
    }
    if (typeof selectedSections === "number") {
      return {
        startIndex: selectedSections,
        endIndex: selectedSections
      };
    }
    if (typeof selectedSections === "string") {
      const selectedSectionIndex = state.sections.findIndex((section) => section.type === selectedSections);
      return {
        startIndex: selectedSectionIndex,
        endIndex: selectedSectionIndex
      };
    }
    return selectedSections;
  }, [selectedSections, state.sections]);
  const publishValue = ({
    value,
    referenceValue,
    sections
  }) => {
    setState((prevState) => _extends({}, prevState, {
      sections,
      value,
      referenceValue,
      tempValueStrAndroid: null
    }));
    if (valueManager.areValuesEqual(utils, state.value, value)) {
      return;
    }
    const context = {
      validationError: validator({
        adapter,
        value,
        props: _extends({}, internalProps, {
          value,
          timezone
        })
      })
    };
    handleValueChange(value, context);
  };
  const setSectionValue = (sectionIndex, newSectionValue) => {
    const newSections = [...state.sections];
    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {
      value: newSectionValue,
      modified: true
    });
    return addPositionPropertiesToSections(newSections, isRTL);
  };
  const clearValue = () => {
    publishValue({
      value: valueManager.emptyValue,
      referenceValue: state.referenceValue,
      sections: getSectionsFromValue(valueManager.emptyValue)
    });
  };
  const clearActiveSection = () => {
    if (selectedSectionIndexes == null) {
      return;
    }
    const activeSection = state.sections[selectedSectionIndexes.startIndex];
    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter((section) => section.value !== "").length;
    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === "" ? 0 : 1);
    const newSections = setSectionValue(selectedSectionIndexes.startIndex, "");
    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(""));
    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {
      publishValue(_extends({}, newValues, {
        sections: newSections
      }));
    } else {
      setState((prevState) => _extends({}, prevState, newValues, {
        sections: newSections,
        tempValueStrAndroid: null
      }));
    }
  };
  const updateValueFromValueStr = (valueStr) => {
    const parseDateStr = (dateStr, referenceDate) => {
      const date = utils.parse(dateStr, format2);
      if (date == null || !utils.isValid(date)) {
        return null;
      }
      const sections = splitFormatIntoSections(utils, timezone, localeText, format2, date, formatDensity, shouldRespectLeadingZeros, isRTL);
      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);
    };
    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);
    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);
    publishValue({
      value: newValue,
      referenceValue: newReferenceValue,
      sections: getSectionsFromValue(newValue, state.sections)
    });
  };
  const updateSectionValue = ({
    activeSection,
    newSectionValue,
    shouldGoToNextSection
  }) => {
    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {
      setSelectedSections(selectedSectionIndexes.startIndex + 1);
    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
      setSelectedSections(selectedSectionIndexes.startIndex);
    }
    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);
    const newActiveDateSections = activeDateManager.getSections(newSections);
    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);
    let values;
    let shouldPublish;
    if (newActiveDate != null && utils.isValid(newActiveDate)) {
      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);
      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);
      shouldPublish = true;
    } else {
      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));
    }
    if (shouldPublish) {
      return publishValue(_extends({}, values, {
        sections: newSections
      }));
    }
    return setState((prevState) => _extends({}, prevState, values, {
      sections: newSections,
      tempValueStrAndroid: null
    }));
  };
  const setTempAndroidValueStr = (tempValueStrAndroid) => setState((prev) => _extends({}, prev, {
    tempValueStrAndroid
  }));
  React115.useEffect(() => {
    const sections = getSectionsFromValue(state.value);
    validateSections(sections, valueType);
    setState((prevState) => _extends({}, prevState, {
      sections
    }));
  }, [format2, utils.locale]);
  React115.useEffect(() => {
    let shouldUpdate = false;
    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {
      shouldUpdate = true;
    } else {
      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);
    }
    if (shouldUpdate) {
      setState((prevState) => _extends({}, prevState, {
        value: valueFromTheOutside,
        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),
        sections: getSectionsFromValue(valueFromTheOutside)
      }));
    }
  }, [valueFromTheOutside]);
  return {
    state,
    selectedSectionIndexes,
    setSelectedSections,
    clearValue,
    clearActiveSection,
    updateSectionValue,
    updateValueFromValueStr,
    setTempAndroidValueStr,
    sectionsValueBoundaries,
    placeholder,
    timezone
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js
init_extends();
var React116 = __toESM(require_react());
init_useEventCallback();
var QUERY_LIFE_DURATION_MS = 5e3;
var isQueryResponseWithoutValue = (response) => response.saveQuery != null;
var useFieldCharacterEditing = ({
  sections,
  updateSectionValue,
  sectionsValueBoundaries,
  setTempAndroidValueStr,
  timezone
}) => {
  const utils = useUtils();
  const [query, setQuery] = React116.useState(null);
  const resetQuery = useEventCallback_default(() => setQuery(null));
  React116.useEffect(() => {
    var _sections$query$secti;
    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {
      resetQuery();
    }
  }, [sections, query, resetQuery]);
  React116.useEffect(() => {
    if (query != null) {
      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);
      return () => {
        window.clearTimeout(timeout);
      };
    }
    return () => {
    };
  }, [query, resetQuery]);
  const applyQuery = ({
    keyPressed,
    sectionIndex
  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {
    const cleanKeyPressed = keyPressed.toLowerCase();
    const activeSection = sections[sectionIndex];
    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {
      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;
      const queryResponse2 = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);
      if (!isQueryResponseWithoutValue(queryResponse2)) {
        setQuery({
          sectionIndex,
          value: concatenatedQueryValue,
          sectionType: activeSection.type
        });
        return queryResponse2;
      }
    }
    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);
    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {
      resetQuery();
      return null;
    }
    setQuery({
      sectionIndex,
      value: cleanKeyPressed,
      sectionType: activeSection.type
    });
    if (isQueryResponseWithoutValue(queryResponse)) {
      return null;
    }
    return queryResponse;
  };
  const applyLetterEditing = (params) => {
    const findMatchingOptions = (format2, options, queryValue) => {
      const matchingValues = options.filter((option) => option.toLowerCase().startsWith(queryValue));
      if (matchingValues.length === 0) {
        return {
          saveQuery: false
        };
      }
      return {
        sectionValue: matchingValues[0],
        shouldGoToNextSection: matchingValues.length === 1
      };
    };
    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {
      const getOptions = (format2) => getLetterEditingOptions(utils, timezone, activeSection.type, format2);
      if (activeSection.contentType === "letter") {
        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);
      }
      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === "letter") {
        const fallbackOptions = getOptions(fallbackFormat);
        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);
        if (isQueryResponseWithoutValue(response)) {
          return {
            saveQuery: false
          };
        }
        return _extends({}, response, {
          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)
        });
      }
      return {
        saveQuery: false
      };
    };
    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
      switch (activeSection.type) {
        case "month": {
          const formatFallbackValue = (fallbackValue) => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);
          return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);
        }
        case "weekDay": {
          const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();
          return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);
        }
        case "meridiem": {
          return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);
        }
        default: {
          return {
            saveQuery: false
          };
        }
      }
    };
    return applyQuery(params, getFirstSectionValueMatchingWithQuery);
  };
  const applyNumericEditing = (params) => {
    const getNewSectionValue = (queryValue, section) => {
      const queryValueNumber = Number(`${queryValue}`);
      const sectionBoundaries = sectionsValueBoundaries[section.type]({
        currentDate: null,
        format: section.format,
        contentType: section.contentType
      });
      if (queryValueNumber > sectionBoundaries.maximum) {
        return {
          saveQuery: false
        };
      }
      if (queryValueNumber < sectionBoundaries.minimum) {
        return {
          saveQuery: true
        };
      }
      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;
      const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);
      return {
        sectionValue: newSectionValue,
        shouldGoToNextSection
      };
    };
    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
      if (activeSection.contentType === "digit" || activeSection.contentType === "digit-with-letter") {
        return getNewSectionValue(queryValue, activeSection);
      }
      if (activeSection.type === "month") {
        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, "digit", "month", "MM");
        const response = getNewSectionValue(queryValue, {
          type: activeSection.type,
          format: "MM",
          hasLeadingZerosInFormat,
          hasLeadingZerosInInput: true,
          contentType: "digit",
          maxLength: 2
        });
        if (isQueryResponseWithoutValue(response)) {
          return response;
        }
        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, "MM", activeSection.format);
        return _extends({}, response, {
          sectionValue: formattedValue
        });
      }
      if (activeSection.type === "weekDay") {
        const response = getNewSectionValue(queryValue, activeSection);
        if (isQueryResponseWithoutValue(response)) {
          return response;
        }
        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];
        return _extends({}, response, {
          sectionValue: formattedValue
        });
      }
      return {
        saveQuery: false
      };
    };
    return applyQuery(params, getFirstSectionValueMatchingWithQuery, (queryValue) => !Number.isNaN(Number(queryValue)));
  };
  const applyCharacterEditing = useEventCallback_default((params) => {
    const activeSection = sections[params.sectionIndex];
    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));
    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);
    if (response == null) {
      setTempAndroidValueStr(null);
    } else {
      updateSectionValue({
        activeSection,
        newSectionValue: response.sectionValue,
        shouldGoToNextSection: response.shouldGoToNextSection
      });
    }
  });
  return {
    applyCharacterEditing,
    resetCharacterQuery: resetQuery
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/utils.js
function arrayIncludes(array, itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.every((item) => array.indexOf(item) !== -1);
  }
  return array.indexOf(itemOrItems) !== -1;
}
var onSpaceOrEnter = (innerFn, externalEvent) => (event) => {
  if (event.key === "Enter" || event.key === " ") {
    innerFn(event);
    event.preventDefault();
    event.stopPropagation();
  }
  if (externalEvent) {
    externalEvent(event);
  }
};
var getActiveElement = (root = document) => {
  const activeEl = root.activeElement;
  if (!activeEl) {
    return null;
  }
  if (activeEl.shadowRoot) {
    return getActiveElement(activeEl.shadowRoot);
  }
  return activeEl;
};
var DEFAULT_DESKTOP_MODE_MEDIA_QUERY = "@media (pointer: fine)";

// node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js
var _excluded88 = ["onClick", "onKeyDown", "onFocus", "onBlur", "onMouseUp", "onPaste", "error", "clearable", "onClear", "disabled"];
var useField = (params) => {
  const utils = useUtils();
  const {
    state,
    selectedSectionIndexes,
    setSelectedSections,
    clearValue,
    clearActiveSection,
    updateSectionValue,
    updateValueFromValueStr,
    setTempAndroidValueStr,
    sectionsValueBoundaries,
    placeholder,
    timezone
  } = useFieldState(params);
  const {
    inputRef: inputRefProp,
    internalProps,
    internalProps: {
      readOnly = false,
      unstableFieldRef,
      minutesStep
    },
    forwardedProps: {
      onClick: onClick2,
      onKeyDown,
      onFocus,
      onBlur,
      onMouseUp,
      onPaste,
      error,
      clearable,
      onClear,
      disabled
    },
    fieldValueManager,
    valueManager,
    validator
  } = params, otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded88);
  const {
    applyCharacterEditing,
    resetCharacterQuery
  } = useFieldCharacterEditing({
    sections: state.sections,
    updateSectionValue,
    sectionsValueBoundaries,
    setTempAndroidValueStr,
    timezone
  });
  const inputRef = React117.useRef(null);
  const handleRef = useForkRef(inputRefProp, inputRef);
  const focusTimeoutRef = React117.useRef(void 0);
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const sectionOrder = React117.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);
  const syncSelectionFromDOM = () => {
    var _selectionStart;
    if (readOnly) {
      setSelectedSections(null);
      return;
    }
    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;
    let nextSectionIndex;
    if (browserStartIndex <= state.sections[0].startInInput) {
      nextSectionIndex = 1;
    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {
      nextSectionIndex = 1;
    } else {
      nextSectionIndex = state.sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
    }
    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
    setSelectedSections(sectionIndex);
  };
  const handleInputClick = useEventCallback_default((event, ...args) => {
    if (event.isDefaultPrevented()) {
      return;
    }
    onClick2 == null || onClick2(event, ...args);
    syncSelectionFromDOM();
  });
  const handleInputMouseUp = useEventCallback_default((event) => {
    onMouseUp == null || onMouseUp(event);
    event.preventDefault();
  });
  const handleInputFocus = useEventCallback_default((...args) => {
    onFocus == null || onFocus(...args);
    const input = inputRef.current;
    window.clearTimeout(focusTimeoutRef.current);
    focusTimeoutRef.current = setTimeout(() => {
      if (!input || input !== inputRef.current) {
        return;
      }
      if (selectedSectionIndexes != null || readOnly) {
        return;
      }
      if (input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {
        setSelectedSections("all");
      } else {
        syncSelectionFromDOM();
      }
    });
  });
  const handleInputBlur = useEventCallback_default((...args) => {
    onBlur == null || onBlur(...args);
    setSelectedSections(null);
  });
  const handleInputPaste = useEventCallback_default((event) => {
    onPaste == null || onPaste(event);
    if (readOnly) {
      event.preventDefault();
      return;
    }
    const pastedValue = event.clipboardData.getData("text");
    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {
      const activeSection = state.sections[selectedSectionIndexes.startIndex];
      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
      const digitsOnly = /^[0-9]+$/.test(pastedValue);
      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
      const isValidPastedValue = activeSection.contentType === "letter" && lettersOnly || activeSection.contentType === "digit" && digitsOnly || activeSection.contentType === "digit-with-letter" && digitsAndLetterOnly;
      if (isValidPastedValue) {
        resetCharacterQuery();
        updateSectionValue({
          activeSection,
          newSectionValue: pastedValue,
          shouldGoToNextSection: true
        });
        event.preventDefault();
        return;
      }
      if (lettersOnly || digitsOnly) {
        event.preventDefault();
        return;
      }
    }
    event.preventDefault();
    resetCharacterQuery();
    updateValueFromValueStr(pastedValue);
  });
  const handleInputChange = useEventCallback_default((event) => {
    if (readOnly) {
      return;
    }
    const targetValue = event.target.value;
    if (targetValue === "") {
      resetCharacterQuery();
      clearValue();
      return;
    }
    const eventData = event.nativeEvent.data;
    const shouldUseEventData = eventData && eventData.length > 1;
    const valueStr2 = shouldUseEventData ? eventData : targetValue;
    const cleanValueStr = cleanString(valueStr2);
    if (selectedSectionIndexes == null || shouldUseEventData) {
      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);
      return;
    }
    let keyPressed;
    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {
      keyPressed = cleanValueStr;
    } else {
      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));
      let startOfDiffIndex = -1;
      let endOfDiffIndex = -1;
      for (let i = 0; i < prevValueStr.length; i += 1) {
        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {
          startOfDiffIndex = i;
        }
        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {
          endOfDiffIndex = i;
        }
      }
      const activeSection = state.sections[selectedSectionIndexes.startIndex];
      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;
      if (hasDiffOutsideOfActiveSection) {
        return;
      }
      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || "").length;
      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || "").length, activeSectionEndRelativeToNewValue);
    }
    if (keyPressed.length === 0) {
      if (isAndroid()) {
        setTempAndroidValueStr(valueStr2);
      } else {
        resetCharacterQuery();
        clearActiveSection();
      }
      return;
    }
    applyCharacterEditing({
      keyPressed,
      sectionIndex: selectedSectionIndexes.startIndex
    });
  });
  const handleInputKeyDown = useEventCallback_default((event) => {
    onKeyDown == null || onKeyDown(event);
    switch (true) {
      case (event.key === "a" && (event.ctrlKey || event.metaKey)): {
        event.preventDefault();
        setSelectedSections("all");
        break;
      }
      case event.key === "ArrowRight": {
        event.preventDefault();
        if (selectedSectionIndexes == null) {
          setSelectedSections(sectionOrder.startIndex);
        } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
          setSelectedSections(selectedSectionIndexes.endIndex);
        } else {
          const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;
          if (nextSectionIndex !== null) {
            setSelectedSections(nextSectionIndex);
          }
        }
        break;
      }
      case event.key === "ArrowLeft": {
        event.preventDefault();
        if (selectedSectionIndexes == null) {
          setSelectedSections(sectionOrder.endIndex);
        } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
          setSelectedSections(selectedSectionIndexes.startIndex);
        } else {
          const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;
          if (nextSectionIndex !== null) {
            setSelectedSections(nextSectionIndex);
          }
        }
        break;
      }
      case event.key === "Delete": {
        event.preventDefault();
        if (readOnly) {
          break;
        }
        if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {
          clearValue();
        } else {
          clearActiveSection();
        }
        resetCharacterQuery();
        break;
      }
      case ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"].includes(event.key): {
        event.preventDefault();
        if (readOnly || selectedSectionIndexes == null) {
          break;
        }
        const activeSection = state.sections[selectedSectionIndexes.startIndex];
        const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
        const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {
          minutesStep
        });
        updateSectionValue({
          activeSection,
          newSectionValue,
          shouldGoToNextSection: false
        });
        break;
      }
    }
  });
  useEnhancedEffect_default(() => {
    if (!inputRef.current) {
      return;
    }
    if (selectedSectionIndexes == null) {
      if (inputRef.current.scrollLeft) {
        inputRef.current.scrollLeft = 0;
      }
      return;
    }
    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];
    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];
    let selectionStart = firstSelectedSection.startInInput;
    let selectionEnd = lastSelectedSection.endInInput;
    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {
      selectionStart -= firstSelectedSection.startSeparator.length;
      selectionEnd += lastSelectedSection.endSeparator.length;
    }
    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {
      const currentScrollTop = inputRef.current.scrollTop;
      if (inputRef.current === getActiveElement(document)) {
        inputRef.current.setSelectionRange(selectionStart, selectionEnd);
      }
      inputRef.current.scrollTop = currentScrollTop;
    }
  });
  const validationError = useValidation(_extends({}, internalProps, {
    value: state.value,
    timezone
  }), validator, valueManager.isSameError, valueManager.defaultErrorState);
  const inputError = React117.useMemo(() => {
    if (error !== void 0) {
      return error;
    }
    return valueManager.hasError(validationError);
  }, [valueManager, validationError, error]);
  React117.useEffect(() => {
    if (!inputError && !selectedSectionIndexes) {
      resetCharacterQuery();
    }
  }, [state.referenceValue, selectedSectionIndexes, inputError]);
  React117.useEffect(() => {
    if (inputRef.current && inputRef.current === document.activeElement) {
      setSelectedSections("all");
    }
    return () => window.clearTimeout(focusTimeoutRef.current);
  }, []);
  React117.useEffect(() => {
    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {
      resetCharacterQuery();
      clearActiveSection();
    }
  }, [state.tempValueStrAndroid]);
  const valueStr = React117.useMemo(() => {
    var _state$tempValueStrAn;
    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);
  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);
  const inputMode = React117.useMemo(() => {
    if (selectedSectionIndexes == null) {
      return "text";
    }
    if (state.sections[selectedSectionIndexes.startIndex].contentType === "letter") {
      return "text";
    }
    return "numeric";
  }, [selectedSectionIndexes, state.sections]);
  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
  const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);
  const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;
  React117.useImperativeHandle(unstableFieldRef, () => ({
    getSections: () => state.sections,
    getActiveSectionIndex: () => {
      var _selectionStart2, _selectionEnd;
      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;
      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;
      if (browserStartIndex === 0 && browserEndIndex === 0) {
        return null;
      }
      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 : state.sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
    },
    setSelectedSections: (activeSectionIndex) => setSelectedSections(activeSectionIndex)
  }));
  const handleClearValue = useEventCallback_default((event, ...args) => {
    var _inputRef$current;
    event.preventDefault();
    onClear == null || onClear(event, ...args);
    clearValue();
    inputRef == null || (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();
    setSelectedSections(0);
  });
  return _extends({
    placeholder,
    autoComplete: "off",
    disabled: Boolean(disabled)
  }, otherForwardedProps, {
    value: shouldShowPlaceholder ? "" : valueStr,
    inputMode,
    readOnly,
    onClick: handleInputClick,
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    onPaste: handleInputPaste,
    onChange: handleInputChange,
    onKeyDown: handleInputKeyDown,
    onMouseUp: handleInputMouseUp,
    onClear: handleClearValue,
    error: inputError,
    ref: handleRef,
    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)
  });
};

// node_modules/@mui/x-date-pickers/internals/utils/validation/validateDate.js
var validateDate = ({
  props,
  value,
  adapter
}) => {
  if (value === null) {
    return null;
  }
  const {
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    disablePast,
    disableFuture,
    timezone
  } = props;
  const now2 = adapter.utils.dateWithTimezone(void 0, timezone);
  const minDate = applyDefaultDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
  const maxDate = applyDefaultDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);
  switch (true) {
    case !adapter.utils.isValid(value):
      return "invalidDate";
    case Boolean(shouldDisableDate && shouldDisableDate(value)):
      return "shouldDisableDate";
    case Boolean(shouldDisableMonth && shouldDisableMonth(value)):
      return "shouldDisableMonth";
    case Boolean(shouldDisableYear && shouldDisableYear(value)):
      return "shouldDisableYear";
    case Boolean(disableFuture && adapter.utils.isAfterDay(value, now2)):
      return "disableFuture";
    case Boolean(disablePast && adapter.utils.isBeforeDay(value, now2)):
      return "disablePast";
    case Boolean(minDate && adapter.utils.isBeforeDay(value, minDate)):
      return "minDate";
    case Boolean(maxDate && adapter.utils.isAfterDay(value, maxDate)):
      return "maxDate";
    default:
      return null;
  }
};

// node_modules/@mui/x-date-pickers/internals/utils/validation/validateTime.js
var validateTime = ({
  adapter,
  value,
  props
}) => {
  if (value === null) {
    return null;
  }
  const {
    minTime,
    maxTime,
    minutesStep,
    shouldDisableClock,
    shouldDisableTime,
    disableIgnoringDatePartForTimeValidation = false,
    disablePast,
    disableFuture,
    timezone
  } = props;
  const now2 = adapter.utils.dateWithTimezone(void 0, timezone);
  const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
  switch (true) {
    case !adapter.utils.isValid(value):
      return "invalidDate";
    case Boolean(minTime && isAfter2(minTime, value)):
      return "minTime";
    case Boolean(maxTime && isAfter2(value, maxTime)):
      return "maxTime";
    case Boolean(disableFuture && adapter.utils.isAfter(value, now2)):
      return "disableFuture";
    case Boolean(disablePast && adapter.utils.isBefore(value, now2)):
      return "disablePast";
    case Boolean(shouldDisableTime && shouldDisableTime(value, "hours")):
      return "shouldDisableTime-hours";
    case Boolean(shouldDisableTime && shouldDisableTime(value, "minutes")):
      return "shouldDisableTime-minutes";
    case Boolean(shouldDisableTime && shouldDisableTime(value, "seconds")):
      return "shouldDisableTime-seconds";
    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getHours(value), "hours")):
      return "shouldDisableClock-hours";
    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getMinutes(value), "minutes")):
      return "shouldDisableClock-minutes";
    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getSeconds(value), "seconds")):
      return "shouldDisableClock-seconds";
    case Boolean(minutesStep && adapter.utils.getMinutes(value) % minutesStep !== 0):
      return "minutesStep";
    default:
      return null;
  }
};

// node_modules/@mui/x-date-pickers/internals/utils/validation/validateDateTime.js
var validateDateTime = ({
  props,
  value,
  adapter
}) => {
  const dateValidationResult = validateDate({
    adapter,
    value,
    props
  });
  if (dateValidationResult !== null) {
    return dateValidationResult;
  }
  return validateTime({
    adapter,
    value,
    props
  });
};

// node_modules/@mui/x-date-pickers/internals/utils/fields.js
init_extends();

// node_modules/@mui/x-date-pickers/internals/utils/validation/extractValidationProps.js
var DATE_VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minDate", "maxDate", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear"];
var TIME_VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minTime", "maxTime", "shouldDisableClock", "shouldDisableTime", "minutesStep", "ampm", "disableIgnoringDatePartForTimeValidation"];
var DATE_TIME_VALIDATION_PROP_NAMES = ["minDateTime", "maxDateTime"];
var VALIDATION_PROP_NAMES = [...DATE_VALIDATION_PROP_NAMES, ...TIME_VALIDATION_PROP_NAMES, ...DATE_TIME_VALIDATION_PROP_NAMES];
var extractValidationProps = (props) => VALIDATION_PROP_NAMES.reduce((extractedProps, propName) => {
  if (props.hasOwnProperty(propName)) {
    extractedProps[propName] = props[propName];
  }
  return extractedProps;
}, {});

// node_modules/@mui/x-date-pickers/internals/utils/fields.js
var SHARED_FIELD_INTERNAL_PROP_NAMES = ["value", "defaultValue", "referenceDate", "format", "formatDensity", "onChange", "timezone", "readOnly", "onError", "shouldRespectLeadingZeros", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef"];
var splitFieldInternalAndForwardedProps = (props, valueType) => {
  const forwardedProps = _extends({}, props);
  const internalProps = {};
  const extractProp = (propName) => {
    if (forwardedProps.hasOwnProperty(propName)) {
      internalProps[propName] = forwardedProps[propName];
      delete forwardedProps[propName];
    }
  };
  SHARED_FIELD_INTERNAL_PROP_NAMES.forEach(extractProp);
  if (valueType === "date") {
    DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
  } else if (valueType === "time") {
    TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
  } else if (valueType === "date-time") {
    DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
    TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
    DATE_TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
  }
  return {
    forwardedProps,
    internalProps
  };
};

// node_modules/@mui/x-date-pickers/DateTimeField/useDateTimeField.js
var useDefaultizedDateTimeField = (props) => {
  var _props$ampm, _props$disablePast, _props$disableFuture, _props$format, _props$minDateTime, _props$maxDateTime, _props$minDateTime2, _props$maxDateTime2;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils.is12HourCycleInCurrentLocale();
  const defaultFormat = ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h;
  return _extends({}, props, {
    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
    format: (_props$format = props.format) != null ? _props$format : defaultFormat,
    disableIgnoringDatePartForTimeValidation: Boolean(props.minDateTime || props.maxDateTime),
    minDate: applyDefaultDate(utils, (_props$minDateTime = props.minDateTime) != null ? _props$minDateTime : props.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, (_props$maxDateTime = props.maxDateTime) != null ? _props$maxDateTime : props.maxDate, defaultDates.maxDate),
    minTime: (_props$minDateTime2 = props.minDateTime) != null ? _props$minDateTime2 : props.minTime,
    maxTime: (_props$maxDateTime2 = props.maxDateTime) != null ? _props$maxDateTime2 : props.maxTime
  });
};
var useDateTimeField = ({
  props: inProps,
  inputRef
}) => {
  const props = useDefaultizedDateTimeField(inProps);
  const {
    forwardedProps,
    internalProps
  } = splitFieldInternalAndForwardedProps(props, "date-time");
  return useField({
    inputRef,
    forwardedProps,
    internalProps,
    valueManager: singleItemValueManager,
    fieldValueManager: singleItemFieldValueManager,
    validator: validateDateTime,
    valueType: "date-time"
  });
};

// node_modules/@mui/x-date-pickers/hooks/useClearableField.js
init_extends();
init_objectWithoutPropertiesLoose();
var React141 = __toESM(require_react());
init_utils4();
init_IconButton();

// node_modules/@mui/x-date-pickers/icons/index.js
init_utils2();
var React118 = __toESM(require_react());
var import_jsx_runtime141 = __toESM(require_jsx_runtime());
var import_jsx_runtime142 = __toESM(require_jsx_runtime());
var ArrowDropDownIcon = createSvgIcon((0, import_jsx_runtime141.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");
var ArrowLeftIcon = createSvgIcon((0, import_jsx_runtime141.jsx)("path", {
  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
}), "ArrowLeft");
var ArrowRightIcon = createSvgIcon((0, import_jsx_runtime141.jsx)("path", {
  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "ArrowRight");
var CalendarIcon = createSvgIcon((0, import_jsx_runtime141.jsx)("path", {
  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
}), "Calendar");
var ClockIcon = createSvgIcon((0, import_jsx_runtime142.jsxs)(React118.Fragment, {
  children: [(0, import_jsx_runtime141.jsx)("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), (0, import_jsx_runtime141.jsx)("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Clock");
var DateRangeIcon = createSvgIcon((0, import_jsx_runtime141.jsx)("path", {
  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
}), "DateRange");
var TimeIcon = createSvgIcon((0, import_jsx_runtime142.jsxs)(React118.Fragment, {
  children: [(0, import_jsx_runtime141.jsx)("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), (0, import_jsx_runtime141.jsx)("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Time");
var ClearIcon = createSvgIcon((0, import_jsx_runtime141.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Clear");

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
init_objectWithoutPropertiesLoose();
init_extends();
var React119 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default2 = clsx;

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
init_Typography();
init_styles();
init_utils();
init_utils4();
init_IconButton();

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/pickersArrowSwitcherClasses.js
init_utils();
function getPickersArrowSwitcherUtilityClass(slot) {
  return generateUtilityClass("MuiPickersArrowSwitcher", slot);
}
var pickersArrowSwitcherClasses = generateUtilityClasses("MuiPickersArrowSwitcher", ["root", "spacer", "button"]);

// node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.js
var import_jsx_runtime143 = __toESM(require_jsx_runtime());
var import_jsx_runtime144 = __toESM(require_jsx_runtime());
var _excluded89 = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel"];
var _excluded218 = ["ownerState"];
var _excluded311 = ["ownerState"];
var PickersArrowSwitcherRoot = styled_default("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  display: "flex"
});
var PickersArrowSwitcherSpacer = styled_default("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Spacer",
  overridesResolver: (props, styles5) => styles5.spacer
})(({
  theme
}) => ({
  width: theme.spacing(3)
}));
var PickersArrowSwitcherButton = styled_default(IconButton_default, {
  name: "MuiPickersArrowSwitcher",
  slot: "Button",
  overridesResolver: (props, styles5) => styles5.button
})(({
  ownerState
}) => _extends({}, ownerState.hidden && {
  visibility: "hidden"
}));
var useUtilityClasses72 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    spacer: ["spacer"],
    button: ["button"]
  };
  return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes2);
};
var PickersArrowSwitcher = React119.forwardRef(function PickersArrowSwitcher2(inProps, ref) {
  var _slots$previousIconBu, _slots$nextIconButton, _slots$leftArrowIcon, _slots$rightArrowIcon;
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersArrowSwitcher"
  });
  const {
    children,
    className,
    slots,
    slotProps,
    isNextDisabled,
    isNextHidden,
    onGoToNext,
    nextLabel,
    isPreviousDisabled,
    isPreviousHidden,
    onGoToPrevious,
    previousLabel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
  const ownerState = props;
  const classes2 = useUtilityClasses72(ownerState);
  const nextProps = {
    isDisabled: isNextDisabled,
    isHidden: isNextHidden,
    goTo: onGoToNext,
    label: nextLabel
  };
  const previousProps = {
    isDisabled: isPreviousDisabled,
    isHidden: isPreviousHidden,
    goTo: onGoToPrevious,
    label: previousLabel
  };
  const PreviousIconButton = (_slots$previousIconBu = slots == null ? void 0 : slots.previousIconButton) != null ? _slots$previousIconBu : PickersArrowSwitcherButton;
  const previousIconButtonProps = useSlotProps({
    elementType: PreviousIconButton,
    externalSlotProps: slotProps == null ? void 0 : slotProps.previousIconButton,
    additionalProps: {
      size: "medium",
      title: previousProps.label,
      "aria-label": previousProps.label,
      disabled: previousProps.isDisabled,
      edge: "end",
      onClick: previousProps.goTo
    },
    ownerState: _extends({}, ownerState, {
      hidden: previousProps.isHidden
    }),
    className: classes2.button
  });
  const NextIconButton = (_slots$nextIconButton = slots == null ? void 0 : slots.nextIconButton) != null ? _slots$nextIconButton : PickersArrowSwitcherButton;
  const nextIconButtonProps = useSlotProps({
    elementType: NextIconButton,
    externalSlotProps: slotProps == null ? void 0 : slotProps.nextIconButton,
    additionalProps: {
      size: "medium",
      title: nextProps.label,
      "aria-label": nextProps.label,
      disabled: nextProps.isDisabled,
      edge: "start",
      onClick: nextProps.goTo
    },
    ownerState: _extends({}, ownerState, {
      hidden: nextProps.isHidden
    }),
    className: classes2.button
  });
  const LeftArrowIcon = (_slots$leftArrowIcon = slots == null ? void 0 : slots.leftArrowIcon) != null ? _slots$leftArrowIcon : ArrowLeftIcon;
  const _useSlotProps = useSlotProps({
    elementType: LeftArrowIcon,
    externalSlotProps: slotProps == null ? void 0 : slotProps.leftArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: void 0
  }), leftArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded218);
  const RightArrowIcon = (_slots$rightArrowIcon = slots == null ? void 0 : slots.rightArrowIcon) != null ? _slots$rightArrowIcon : ArrowRightIcon;
  const _useSlotProps2 = useSlotProps({
    elementType: RightArrowIcon,
    externalSlotProps: slotProps == null ? void 0 : slotProps.rightArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: void 0
  }), rightArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded311);
  return (0, import_jsx_runtime144.jsxs)(PickersArrowSwitcherRoot, _extends({
    ref,
    className: clsx_default2(classes2.root, className),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime143.jsx)(PreviousIconButton, _extends({}, previousIconButtonProps, {
      children: isRTL ? (0, import_jsx_runtime143.jsx)(RightArrowIcon, _extends({}, rightArrowIconProps)) : (0, import_jsx_runtime143.jsx)(LeftArrowIcon, _extends({}, leftArrowIconProps))
    })), children ? (0, import_jsx_runtime143.jsx)(Typography_default, {
      variant: "subtitle1",
      component: "span",
      children
    }) : (0, import_jsx_runtime143.jsx)(PickersArrowSwitcherSpacer, {
      className: classes2.spacer,
      ownerState
    }), (0, import_jsx_runtime143.jsx)(NextIconButton, _extends({}, nextIconButtonProps, {
      children: isRTL ? (0, import_jsx_runtime143.jsx)(LeftArrowIcon, _extends({}, leftArrowIconProps)) : (0, import_jsx_runtime143.jsx)(RightArrowIcon, _extends({}, rightArrowIconProps))
    }))]
  }));
});

// node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
init_extends();
var React120 = __toESM(require_react());
init_Fade();
init_styles();

// node_modules/@mui/x-date-pickers/internals/constants/dimensions.js
var DAY_SIZE = 36;
var DAY_MARGIN = 2;
var DIALOG_WIDTH = 320;
var MAX_CALENDAR_HEIGHT = 280;
var VIEW_HEIGHT = 334;
var DIGITAL_CLOCK_VIEW_HEIGHT = 232;
var MULTI_SECTION_CLOCK_SECTION_WIDTH = 48;

// node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
var import_jsx_runtime145 = __toESM(require_jsx_runtime());
var PickersModalDialogRoot = styled_default(Dialog_default)({
  [`& .${dialogClasses_default.container}`]: {
    outline: 0
  },
  [`& .${dialogClasses_default.paper}`]: {
    outline: 0,
    minWidth: DIALOG_WIDTH
  }
});
var PickersModalDialogContent = styled_default(DialogContent_default)({
  "&:first-of-type": {
    padding: 0
  }
});
function PickersModalDialog(props) {
  var _slots$dialog, _slots$mobileTransiti;
  const {
    children,
    onDismiss,
    open,
    slots,
    slotProps
  } = props;
  const Dialog3 = (_slots$dialog = slots == null ? void 0 : slots.dialog) != null ? _slots$dialog : PickersModalDialogRoot;
  const Transition = (_slots$mobileTransiti = slots == null ? void 0 : slots.mobileTransition) != null ? _slots$mobileTransiti : Fade_default;
  return (0, import_jsx_runtime145.jsx)(Dialog3, _extends({
    open,
    onClose: onDismiss
  }, slotProps == null ? void 0 : slotProps.dialog, {
    TransitionComponent: Transition,
    TransitionProps: slotProps == null ? void 0 : slotProps.mobileTransition,
    PaperComponent: slots == null ? void 0 : slots.mobilePaper,
    PaperProps: slotProps == null ? void 0 : slotProps.mobilePaper,
    children: (0, import_jsx_runtime145.jsx)(PickersModalDialogContent, {
      children
    })
  }));
}

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React121 = __toESM(require_react());
init_utils4();
init_Grow();
init_Fade();
init_Paper();
init_Popper();
init_Unstable_TrapFocus();
init_utils();
init_styles();

// node_modules/@mui/x-date-pickers/internals/components/pickersPopperClasses.js
init_utils();
function getPickersPopperUtilityClass(slot) {
  return generateUtilityClass("MuiPickersPopper", slot);
}
var pickersPopperClasses = generateUtilityClasses("MuiPickersPopper", ["root", "paper"]);

// node_modules/@mui/x-date-pickers/internals/hooks/useDefaultReduceAnimations.js
var PREFERS_REDUCED_MOTION = "@media (prefers-reduced-motion: reduce)";
var mobileVersionMatches = typeof navigator !== "undefined" && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i);
var androidVersion = mobileVersionMatches && mobileVersionMatches[1] ? parseInt(mobileVersionMatches[1], 10) : null;
var iOSVersion = mobileVersionMatches && mobileVersionMatches[2] ? parseInt(mobileVersionMatches[2], 10) : null;
var slowAnimationDevices = androidVersion && androidVersion < 10 || iOSVersion && iOSVersion < 13 || false;
var useDefaultReduceAnimations = () => {
  const prefersReduced = useMediaQuery(PREFERS_REDUCED_MOTION, {
    defaultMatches: false
  });
  return prefersReduced || slowAnimationDevices;
};

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
var import_jsx_runtime146 = __toESM(require_jsx_runtime());
var _excluded90 = ["PaperComponent", "popperPlacement", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"];
var useUtilityClasses73 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    paper: ["paper"]
  };
  return composeClasses(slots, getPickersPopperUtilityClass, classes2);
};
var PickersPopperRoot = styled_default(Popper_default, {
  name: "MuiPickersPopper",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var PickersPopperPaper = styled_default(Paper_default, {
  name: "MuiPickersPopper",
  slot: "Paper",
  overridesResolver: (_4, styles5) => styles5.paper
})(({
  ownerState
}) => _extends({
  outline: 0,
  transformOrigin: "top center"
}, ownerState.placement.includes("top") && {
  transformOrigin: "bottom center"
}));
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function useClickAwayListener(active, onClickAway) {
  const movedRef = React121.useRef(false);
  const syntheticEventRef = React121.useRef(false);
  const nodeRef = React121.useRef(null);
  const activatedRef = React121.useRef(false);
  React121.useEffect(() => {
    if (!active) {
      return void 0;
    }
    function armClickAwayListener() {
      activatedRef.current = true;
    }
    document.addEventListener("mousedown", armClickAwayListener, true);
    document.addEventListener("touchstart", armClickAwayListener, true);
    return () => {
      document.removeEventListener("mousedown", armClickAwayListener, true);
      document.removeEventListener("touchstart", armClickAwayListener, true);
      activatedRef.current = false;
    };
  }, [active]);
  const handleClickAway = useEventCallback_default((event) => {
    if (!activatedRef.current) {
      return;
    }
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument(nodeRef.current);
    if (!nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && !insideReactTree) {
      onClickAway(event);
    }
  });
  const handleSynthetic = () => {
    syntheticEventRef.current = true;
  };
  React121.useEffect(() => {
    if (active) {
      const doc = ownerDocument(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener("touchstart", handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener("touchstart", handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  React121.useEffect(() => {
    if (active) {
      const doc = ownerDocument(nodeRef.current);
      doc.addEventListener("click", handleClickAway);
      return () => {
        doc.removeEventListener("click", handleClickAway);
        syntheticEventRef.current = false;
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  return [nodeRef, handleSynthetic, handleSynthetic];
}
var PickersPopperPaperWrapper = React121.forwardRef((props, ref) => {
  const {
    PaperComponent,
    popperPlacement,
    ownerState: inOwnerState,
    children,
    paperSlotProps,
    paperClasses,
    onPaperClick,
    onPaperTouchStart
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded90);
  const ownerState = _extends({}, inOwnerState, {
    placement: popperPlacement
  });
  const paperProps = useSlotProps({
    elementType: PaperComponent,
    externalSlotProps: paperSlotProps,
    additionalProps: {
      tabIndex: -1,
      elevation: 8,
      ref
    },
    className: paperClasses,
    ownerState
  });
  return (0, import_jsx_runtime146.jsx)(PaperComponent, _extends({}, other, paperProps, {
    onClick: (event) => {
      var _paperProps$onClick;
      onPaperClick(event);
      (_paperProps$onClick = paperProps.onClick) == null || _paperProps$onClick.call(paperProps, event);
    },
    onTouchStart: (event) => {
      var _paperProps$onTouchSt;
      onPaperTouchStart(event);
      (_paperProps$onTouchSt = paperProps.onTouchStart) == null || _paperProps$onTouchSt.call(paperProps, event);
    },
    ownerState,
    children
  }));
});
function PickersPopper(inProps) {
  var _slots$desktopTransit, _slots$desktopTrapFoc, _slots$desktopPaper, _slots$popper;
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersPopper"
  });
  const {
    anchorEl,
    children,
    containerRef = null,
    shouldRestoreFocus,
    onBlur,
    onDismiss,
    open,
    role,
    placement,
    slots,
    slotProps,
    reduceAnimations: inReduceAnimations
  } = props;
  React121.useEffect(() => {
    function handleKeyDown2(nativeEvent) {
      if (open && (nativeEvent.key === "Escape" || nativeEvent.key === "Esc")) {
        onDismiss();
      }
    }
    document.addEventListener("keydown", handleKeyDown2);
    return () => {
      document.removeEventListener("keydown", handleKeyDown2);
    };
  }, [onDismiss, open]);
  const lastFocusedElementRef = React121.useRef(null);
  React121.useEffect(() => {
    if (role === "tooltip" || shouldRestoreFocus && !shouldRestoreFocus()) {
      return;
    }
    if (open) {
      lastFocusedElementRef.current = getActiveElement(document);
    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
      setTimeout(() => {
        if (lastFocusedElementRef.current instanceof HTMLElement) {
          lastFocusedElementRef.current.focus();
        }
      });
    }
  }, [open, role, shouldRestoreFocus]);
  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onDismiss);
  const paperRef = React121.useRef(null);
  const handleRef = useForkRef(paperRef, containerRef);
  const handlePaperRef = useForkRef(handleRef, clickAwayRef);
  const ownerState = props;
  const classes2 = useUtilityClasses73(ownerState);
  const defaultReduceAnimations = useDefaultReduceAnimations();
  const reduceAnimations = inReduceAnimations != null ? inReduceAnimations : defaultReduceAnimations;
  const handleKeyDown = (event) => {
    if (event.key === "Escape") {
      event.stopPropagation();
      onDismiss();
    }
  };
  const Transition = ((_slots$desktopTransit = slots == null ? void 0 : slots.desktopTransition) != null ? _slots$desktopTransit : reduceAnimations) ? Fade_default : Grow_default;
  const FocusTrap2 = (_slots$desktopTrapFoc = slots == null ? void 0 : slots.desktopTrapFocus) != null ? _slots$desktopTrapFoc : FocusTrap;
  const Paper = (_slots$desktopPaper = slots == null ? void 0 : slots.desktopPaper) != null ? _slots$desktopPaper : PickersPopperPaper;
  const Popper = (_slots$popper = slots == null ? void 0 : slots.popper) != null ? _slots$popper : PickersPopperRoot;
  const popperProps = useSlotProps({
    elementType: Popper,
    externalSlotProps: slotProps == null ? void 0 : slotProps.popper,
    additionalProps: {
      transition: true,
      role,
      open,
      anchorEl,
      placement,
      onKeyDown: handleKeyDown
    },
    className: classes2.root,
    ownerState: props
  });
  return (0, import_jsx_runtime146.jsx)(Popper, _extends({}, popperProps, {
    children: ({
      TransitionProps,
      placement: popperPlacement
    }) => (0, import_jsx_runtime146.jsx)(FocusTrap2, _extends({
      open,
      disableAutoFocus: true,
      disableRestoreFocus: true,
      disableEnforceFocus: role === "tooltip",
      isEnabled: () => true
    }, slotProps == null ? void 0 : slotProps.desktopTrapFocus, {
      children: (0, import_jsx_runtime146.jsx)(Transition, _extends({}, TransitionProps, slotProps == null ? void 0 : slotProps.desktopTransition, {
        children: (0, import_jsx_runtime146.jsx)(PickersPopperPaperWrapper, {
          PaperComponent: Paper,
          ownerState,
          popperPlacement,
          ref: handlePaperRef,
          onPaperClick,
          onPaperTouchStart,
          paperClasses: classes2.paper,
          paperSlotProps: slotProps == null ? void 0 : slotProps.desktopPaper,
          children
        })
      }))
    }))
  }));
}

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.js
init_extends();
var React122 = __toESM(require_react());
init_Typography();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/pickersToolbarClasses.js
init_utils();
function getPickersToolbarUtilityClass(slot) {
  return generateUtilityClass("MuiPickersToolbar", slot);
}
var pickersToolbarClasses = generateUtilityClasses("MuiPickersToolbar", ["root", "content"]);

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.js
var import_jsx_runtime147 = __toESM(require_jsx_runtime());
var import_jsx_runtime148 = __toESM(require_jsx_runtime());
var useUtilityClasses74 = (ownerState) => {
  const {
    classes: classes2,
    isLandscape
  } = ownerState;
  const slots = {
    root: ["root"],
    content: ["content"],
    penIconButton: ["penIconButton", isLandscape && "penIconButtonLandscape"]
  };
  return composeClasses(slots, getPickersToolbarUtilityClass, classes2);
};
var PickersToolbarRoot = styled_default("div", {
  name: "MuiPickersToolbar",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start",
  justifyContent: "space-between",
  padding: theme.spacing(2, 3)
}, ownerState.isLandscape && {
  height: "auto",
  maxWidth: 160,
  padding: 16,
  justifyContent: "flex-start",
  flexWrap: "wrap"
}));
var PickersToolbarContent = styled_default("div", {
  name: "MuiPickersToolbar",
  slot: "Content",
  overridesResolver: (props, styles5) => styles5.content
})(({
  ownerState
}) => {
  var _ownerState$landscape;
  return {
    display: "flex",
    flexWrap: "wrap",
    width: "100%",
    justifyContent: ownerState.isLandscape ? "flex-start" : "space-between",
    flexDirection: ownerState.isLandscape ? (_ownerState$landscape = ownerState.landscapeDirection) != null ? _ownerState$landscape : "column" : "row",
    flex: 1,
    alignItems: ownerState.isLandscape ? "flex-start" : "center"
  };
});
var PickersToolbar = React122.forwardRef(function PickersToolbar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersToolbar"
  });
  const {
    children,
    className,
    toolbarTitle,
    hidden,
    titleId
  } = props;
  const ownerState = props;
  const classes2 = useUtilityClasses74(ownerState);
  if (hidden) {
    return null;
  }
  return (0, import_jsx_runtime148.jsxs)(PickersToolbarRoot, {
    ref,
    className: clsx_default2(classes2.root, className),
    ownerState,
    children: [(0, import_jsx_runtime147.jsx)(Typography_default, {
      color: "text.secondary",
      variant: "overline",
      id: titleId,
      children: toolbarTitle
    }), (0, import_jsx_runtime147.jsx)(PickersToolbarContent, {
      className: classes2.content,
      ownerState,
      children
    })]
  });
});

// node_modules/@mui/x-date-pickers/internals/components/pickersToolbarButtonClasses.js
init_utils();
var pickersToolbarButtonClasses = generateUtilityClasses("MuiPickersToolbarButton", ["root"]);

// node_modules/@mui/x-date-pickers/internals/components/pickersToolbarTextClasses.js
init_utils();
function getPickersToolbarTextUtilityClass(slot) {
  return generateUtilityClass("MuiPickersToolbarText", slot);
}
var pickersToolbarTextClasses = generateUtilityClasses("MuiPickersToolbarText", ["root", "selected"]);

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js
init_extends();
init_objectWithoutPropertiesLoose();
var React124 = __toESM(require_react());
init_Button();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React123 = __toESM(require_react());
init_Typography();
init_styles();
init_utils();
var import_jsx_runtime149 = __toESM(require_jsx_runtime());
var _excluded91 = ["className", "selected", "value"];
var useUtilityClasses75 = (ownerState) => {
  const {
    classes: classes2,
    selected
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected"]
  };
  return composeClasses(slots, getPickersToolbarTextUtilityClass, classes2);
};
var PickersToolbarTextRoot = styled_default(Typography_default, {
  name: "MuiPickersToolbarText",
  slot: "Root",
  overridesResolver: (_4, styles5) => [styles5.root, {
    [`&.${pickersToolbarTextClasses.selected}`]: styles5.selected
  }]
})(({
  theme
}) => ({
  transition: theme.transitions.create("color"),
  color: (theme.vars || theme).palette.text.secondary,
  [`&.${pickersToolbarTextClasses.selected}`]: {
    color: (theme.vars || theme).palette.text.primary
  }
}));
var PickersToolbarText = React123.forwardRef(function PickersToolbarText2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersToolbarText"
  });
  const {
    className,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
  const classes2 = useUtilityClasses75(props);
  return (0, import_jsx_runtime149.jsx)(PickersToolbarTextRoot, _extends({
    ref,
    className: clsx_default2(className, classes2.root),
    component: "span"
  }, other, {
    children: value
  }));
});

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js
var import_jsx_runtime150 = __toESM(require_jsx_runtime());
var _excluded92 = ["align", "className", "selected", "typographyClassName", "value", "variant", "width"];
var useUtilityClasses76 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getPickersToolbarUtilityClass, classes2);
};
var PickersToolbarButtonRoot = styled_default(Button_default, {
  name: "MuiPickersToolbarButton",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})({
  padding: 0,
  minWidth: 16,
  textTransform: "none"
});
var PickersToolbarButton = React124.forwardRef(function PickersToolbarButton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersToolbarButton"
  });
  const {
    align,
    className,
    selected,
    typographyClassName,
    value,
    variant,
    width
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
  const classes2 = useUtilityClasses76(props);
  return (0, import_jsx_runtime150.jsx)(PickersToolbarButtonRoot, _extends({
    variant: "text",
    ref,
    className: clsx_default2(className, classes2.root)
  }, width ? {
    sx: {
      width
    }
  } : {}, other, {
    children: (0, import_jsx_runtime150.jsx)(PickersToolbarText, {
      align,
      className: typographyClassName,
      variant,
      value,
      selected
    })
  }));
});

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js
init_extends();
var React126 = __toESM(require_react());
init_utils();
init_useEventCallback();

// node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js
var React125 = __toESM(require_react());
var useOpenState = ({
  open,
  onOpen,
  onClose
}) => {
  const isControllingOpenProp = React125.useRef(typeof open === "boolean").current;
  const [openState, setIsOpenState] = React125.useState(false);
  React125.useEffect(() => {
    if (isControllingOpenProp) {
      if (typeof open !== "boolean") {
        throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
      }
      setIsOpenState(open);
    }
  }, [isControllingOpenProp, open]);
  const setIsOpen = React125.useCallback((newIsOpen) => {
    if (!isControllingOpenProp) {
      setIsOpenState(newIsOpen);
    }
    if (newIsOpen && onOpen) {
      onOpen();
    }
    if (!newIsOpen && onClose) {
      onClose();
    }
  }, [isControllingOpenProp, onOpen, onClose]);
  return {
    isOpen: openState,
    setIsOpen
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.js
var shouldPublishValue = (params) => {
  const {
    action,
    hasChanged,
    dateState,
    isControlled
  } = params;
  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
  if (action.name === "setValueFromField") {
    return true;
  }
  if (action.name === "setValueFromAction") {
    if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
      return true;
    }
    return hasChanged(dateState.lastPublishedValue);
  }
  if (action.name === "setValueFromView" && action.selectionState !== "shallow") {
    if (isCurrentValueTheDefaultValue) {
      return true;
    }
    return hasChanged(dateState.lastPublishedValue);
  }
  if (action.name === "setValueFromShortcut") {
    if (isCurrentValueTheDefaultValue) {
      return true;
    }
    return hasChanged(dateState.lastPublishedValue);
  }
  return false;
};
var shouldCommitValue = (params) => {
  const {
    action,
    hasChanged,
    dateState,
    isControlled,
    closeOnSelect
  } = params;
  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
  if (action.name === "setValueFromAction") {
    if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
      return true;
    }
    return hasChanged(dateState.lastCommittedValue);
  }
  if (action.name === "setValueFromView" && action.selectionState === "finish" && closeOnSelect) {
    if (isCurrentValueTheDefaultValue) {
      return true;
    }
    return hasChanged(dateState.lastCommittedValue);
  }
  if (action.name === "setValueFromShortcut") {
    return action.changeImportance === "accept" && hasChanged(dateState.lastCommittedValue);
  }
  return false;
};
var shouldClosePicker = (params) => {
  const {
    action,
    closeOnSelect
  } = params;
  if (action.name === "setValueFromAction") {
    return true;
  }
  if (action.name === "setValueFromView") {
    return action.selectionState === "finish" && closeOnSelect;
  }
  if (action.name === "setValueFromShortcut") {
    return action.changeImportance === "accept";
  }
  return false;
};
var usePickerValue = ({
  props,
  valueManager,
  valueType,
  wrapperVariant,
  validator
}) => {
  const {
    onAccept,
    onChange,
    value: inValue,
    defaultValue: inDefaultValue,
    closeOnSelect = wrapperVariant === "desktop",
    selectedSections: selectedSectionsProp,
    onSelectedSectionsChange,
    timezone: timezoneProp
  } = props;
  const {
    current: defaultValue
  } = React126.useRef(inDefaultValue);
  const {
    current: isControlled
  } = React126.useRef(inValue !== void 0);
  if (true) {
    React126.useEffect(() => {
      if (isControlled !== (inValue !== void 0)) {
        console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled value of a picker to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled valuefor the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
      }
    }, [inValue]);
    React126.useEffect(() => {
      if (!isControlled && defaultValue !== inDefaultValue) {
        console.error([`MUI: A component is changing the defaultValue of an uncontrolled picker after being initialized. To suppress this warning opt to use a controlled value.`].join("\n"));
      }
    }, [JSON.stringify(defaultValue)]);
  }
  const utils = useUtils();
  const adapter = useLocalizationContext();
  const [selectedSections, setSelectedSections] = useControlled({
    controlled: selectedSectionsProp,
    default: null,
    name: "usePickerValue",
    state: "selectedSections"
  });
  const {
    isOpen,
    setIsOpen
  } = useOpenState(props);
  const [dateState, setDateState] = React126.useState(() => {
    let initialValue;
    if (inValue !== void 0) {
      initialValue = inValue;
    } else if (defaultValue !== void 0) {
      initialValue = defaultValue;
    } else {
      initialValue = valueManager.emptyValue;
    }
    return {
      draft: initialValue,
      lastPublishedValue: initialValue,
      lastCommittedValue: initialValue,
      lastControlledValue: inValue,
      hasBeenModifiedSinceMount: false
    };
  });
  const {
    timezone,
    handleValueChange
  } = useValueWithTimezone({
    timezone: timezoneProp,
    value: inValue,
    defaultValue,
    onChange,
    valueManager
  });
  useValidation(_extends({}, props, {
    value: dateState.draft,
    timezone
  }), validator, valueManager.isSameError, valueManager.defaultErrorState);
  const updateDate = useEventCallback_default((action) => {
    const updaterParams = {
      action,
      dateState,
      hasChanged: (comparison) => !valueManager.areValuesEqual(utils, action.value, comparison),
      isControlled,
      closeOnSelect
    };
    const shouldPublish = shouldPublishValue(updaterParams);
    const shouldCommit = shouldCommitValue(updaterParams);
    const shouldClose = shouldClosePicker(updaterParams);
    setDateState((prev) => _extends({}, prev, {
      draft: action.value,
      lastPublishedValue: shouldPublish ? action.value : prev.lastPublishedValue,
      lastCommittedValue: shouldCommit ? action.value : prev.lastCommittedValue,
      hasBeenModifiedSinceMount: true
    }));
    if (shouldPublish) {
      const validationError = action.name === "setValueFromField" ? action.context.validationError : validator({
        adapter,
        value: action.value,
        props: _extends({}, props, {
          value: action.value,
          timezone
        })
      });
      const context = {
        validationError
      };
      if (action.name === "setValueFromShortcut" && action.shortcut != null) {
        context.shortcut = action.shortcut;
      }
      handleValueChange(action.value, context);
    }
    if (shouldCommit && onAccept) {
      onAccept(action.value);
    }
    if (shouldClose) {
      setIsOpen(false);
    }
  });
  if (inValue !== void 0 && (dateState.lastControlledValue === void 0 || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValue))) {
    const isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValue);
    setDateState((prev) => _extends({}, prev, {
      lastControlledValue: inValue
    }, isUpdateComingFromPicker ? {} : {
      lastCommittedValue: inValue,
      lastPublishedValue: inValue,
      draft: inValue,
      hasBeenModifiedSinceMount: true
    }));
  }
  const handleClear = useEventCallback_default(() => {
    updateDate({
      value: valueManager.emptyValue,
      name: "setValueFromAction",
      pickerAction: "clear"
    });
  });
  const handleAccept = useEventCallback_default(() => {
    updateDate({
      value: dateState.lastPublishedValue,
      name: "setValueFromAction",
      pickerAction: "accept"
    });
  });
  const handleDismiss = useEventCallback_default(() => {
    updateDate({
      value: dateState.lastPublishedValue,
      name: "setValueFromAction",
      pickerAction: "dismiss"
    });
  });
  const handleCancel2 = useEventCallback_default(() => {
    updateDate({
      value: dateState.lastCommittedValue,
      name: "setValueFromAction",
      pickerAction: "cancel"
    });
  });
  const handleSetToday = useEventCallback_default(() => {
    updateDate({
      value: valueManager.getTodayValue(utils, timezone, valueType),
      name: "setValueFromAction",
      pickerAction: "today"
    });
  });
  const handleOpen = useEventCallback_default(() => setIsOpen(true));
  const handleClose2 = useEventCallback_default(() => setIsOpen(false));
  const handleChange = useEventCallback_default((newValue, selectionState = "partial") => updateDate({
    name: "setValueFromView",
    value: newValue,
    selectionState
  }));
  const handleSelectShortcut = useEventCallback_default((newValue, changeImportance, shortcut) => updateDate({
    name: "setValueFromShortcut",
    value: newValue,
    changeImportance: changeImportance != null ? changeImportance : "accept",
    shortcut
  }));
  const handleChangeFromField = useEventCallback_default((newValue, context) => updateDate({
    name: "setValueFromField",
    value: newValue,
    context
  }));
  const handleFieldSelectedSectionsChange = useEventCallback_default((newSelectedSections) => {
    setSelectedSections(newSelectedSections);
    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
  });
  const actions = {
    onClear: handleClear,
    onAccept: handleAccept,
    onDismiss: handleDismiss,
    onCancel: handleCancel2,
    onSetToday: handleSetToday,
    onOpen: handleOpen,
    onClose: handleClose2
  };
  const fieldResponse = {
    value: dateState.draft,
    onChange: handleChangeFromField,
    selectedSections,
    onSelectedSectionsChange: handleFieldSelectedSectionsChange
  };
  const viewValue = React126.useMemo(() => valueManager.cleanValue(utils, dateState.draft), [utils, valueManager, dateState.draft]);
  const viewResponse = {
    value: viewValue,
    onChange: handleChange,
    onClose: handleClose2,
    open: isOpen,
    onSelectedSectionsChange: handleFieldSelectedSectionsChange
  };
  const isValid2 = (testedValue) => {
    const error = validator({
      adapter,
      value: testedValue,
      props: _extends({}, props, {
        value: testedValue,
        timezone
      })
    });
    return !valueManager.hasError(error);
  };
  const layoutResponse = _extends({}, actions, {
    value: viewValue,
    onChange: handleChange,
    onSelectShortcut: handleSelectShortcut,
    isValid: isValid2
  });
  return {
    open: isOpen,
    fieldProps: fieldResponse,
    viewProps: viewResponse,
    layoutProps: layoutResponse,
    actions
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js
init_extends();
init_objectWithoutPropertiesLoose();
var React128 = __toESM(require_react());
init_useEnhancedEffect();
init_useEventCallback();

// node_modules/@mui/x-date-pickers/internals/hooks/useViews.js
var React127 = __toESM(require_react());
init_useEventCallback();
init_utils();
var warnedOnceNotValidView = false;
function useViews({
  onChange,
  onViewChange,
  openTo,
  view: inView,
  views,
  autoFocus,
  focusedView: inFocusedView,
  onFocusedViewChange
}) {
  var _views, _views2;
  if (true) {
    if (!warnedOnceNotValidView) {
      if (inView != null && !views.includes(inView)) {
        console.warn(`MUI: \`view="${inView}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
        warnedOnceNotValidView = true;
      }
      if (inView == null && openTo != null && !views.includes(openTo)) {
        console.warn(`MUI: \`openTo="${openTo}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
        warnedOnceNotValidView = true;
      }
    }
  }
  const previousOpenTo = React127.useRef(openTo);
  const previousViews = React127.useRef(views);
  const defaultView = React127.useRef(views.includes(openTo) ? openTo : views[0]);
  const [view, setView] = useControlled({
    name: "useViews",
    state: "view",
    controlled: inView,
    default: defaultView.current
  });
  const defaultFocusedView = React127.useRef(autoFocus ? view : null);
  const [focusedView, setFocusedView] = useControlled({
    name: "useViews",
    state: "focusedView",
    controlled: inFocusedView,
    default: defaultFocusedView.current
  });
  React127.useEffect(() => {
    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some((previousView2) => !views.includes(previousView2))) {
      setView(views.includes(openTo) ? openTo : views[0]);
      previousViews.current = views;
      previousOpenTo.current = openTo;
    }
  }, [openTo, setView, view, views]);
  const viewIndex = views.indexOf(view);
  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;
  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;
  const handleFocusedViewChange = useEventCallback_default((viewToFocus, hasFocus) => {
    if (hasFocus) {
      setFocusedView(viewToFocus);
    } else {
      setFocusedView(
        (prevFocusedView) => viewToFocus === prevFocusedView ? null : prevFocusedView
      );
    }
    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);
  });
  const handleChangeView = useEventCallback_default((newView) => {
    handleFocusedViewChange(newView, true);
    if (newView === view) {
      return;
    }
    setView(newView);
    if (onViewChange) {
      onViewChange(newView);
    }
  });
  const goToNextView = useEventCallback_default(() => {
    if (nextView) {
      handleChangeView(nextView);
    }
  });
  const setValueAndGoToNextView = useEventCallback_default((value, currentViewSelectionState, selectedView) => {
    const isSelectionFinishedOnCurrentView = currentViewSelectionState === "finish";
    const hasMoreViews = selectedView ? views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);
    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? "partial" : currentViewSelectionState;
    onChange(value, globalSelectionState, selectedView);
    if (selectedView && selectedView !== view) {
      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];
      if (nextViewAfterSelected) {
        handleChangeView(nextViewAfterSelected);
      }
    } else if (isSelectionFinishedOnCurrentView) {
      goToNextView();
    }
  });
  return {
    view,
    setView: handleChangeView,
    focusedView,
    setFocusedView: handleFocusedViewChange,
    nextView,
    previousView,
    defaultView: views.includes(openTo) ? openTo : views[0],
    goToNextView,
    setValueAndGoToNextView
  };
}

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.js
var _excluded93 = ["className", "sx"];
var usePickerViews = ({
  props,
  propsFromPickerValue,
  additionalViewProps,
  inputRef,
  autoFocusView
}) => {
  const {
    onChange,
    open,
    onSelectedSectionsChange,
    onClose
  } = propsFromPickerValue;
  const {
    views,
    openTo,
    onViewChange,
    disableOpenPicker,
    viewRenderers,
    timezone
  } = props;
  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded93);
  const {
    view,
    setView,
    defaultView,
    focusedView,
    setFocusedView,
    setValueAndGoToNextView
  } = useViews({
    view: void 0,
    views,
    openTo,
    onChange,
    onViewChange,
    autoFocus: autoFocusView
  });
  const {
    hasUIView,
    viewModeLookup
  } = React128.useMemo(() => views.reduce((acc, viewForReduce) => {
    let viewMode;
    if (disableOpenPicker) {
      viewMode = "field";
    } else if (viewRenderers[viewForReduce] != null) {
      viewMode = "UI";
    } else {
      viewMode = "field";
    }
    acc.viewModeLookup[viewForReduce] = viewMode;
    if (viewMode === "UI") {
      acc.hasUIView = true;
    }
    return acc;
  }, {
    hasUIView: false,
    viewModeLookup: {}
  }), [disableOpenPicker, viewRenderers, views]);
  const timeViewsCount = React128.useMemo(() => views.reduce((acc, viewForReduce) => {
    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {
      return acc + 1;
    }
    return acc;
  }, 0), [viewRenderers, views]);
  const currentViewMode = viewModeLookup[view];
  const shouldRestoreFocus = useEventCallback_default(() => currentViewMode === "UI");
  const [popperView, setPopperView] = React128.useState(currentViewMode === "UI" ? view : null);
  if (popperView !== view && viewModeLookup[view] === "UI") {
    setPopperView(view);
  }
  useEnhancedEffect_default(() => {
    if (currentViewMode === "field" && open) {
      onClose();
      setTimeout(() => {
        inputRef == null || inputRef.current.focus();
        onSelectedSectionsChange(view);
      });
    }
  }, [view]);
  useEnhancedEffect_default(() => {
    if (!open) {
      return;
    }
    let newView = view;
    if (currentViewMode === "field" && popperView != null) {
      newView = popperView;
    }
    if (newView !== defaultView && viewModeLookup[newView] === "UI" && viewModeLookup[defaultView] === "UI") {
      newView = defaultView;
    }
    if (newView !== view) {
      setView(newView);
    }
    setFocusedView(newView, true);
  }, [open]);
  const layoutProps = {
    views,
    view: popperView,
    onViewChange: setView
  };
  return {
    hasUIView,
    shouldRestoreFocus,
    layoutProps,
    renderCurrentView: () => {
      if (popperView == null) {
        return null;
      }
      const renderer = viewRenderers[popperView];
      if (renderer == null) {
        return null;
      }
      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {
        views,
        timezone,
        onChange: setValueAndGoToNextView,
        view: popperView,
        onViewChange: setView,
        focusedView,
        onFocusedViewChange: setFocusedView,
        showViewSwitcher: timeViewsCount > 1,
        timeViewsCount
      }));
    }
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.js
init_extends();

// node_modules/@mui/x-date-pickers/internals/hooks/useIsLandscape.js
var React129 = __toESM(require_react());
init_utils();
function getOrientation2() {
  if (typeof window === "undefined") {
    return "portrait";
  }
  if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
    return Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait";
  }
  if (window.orientation) {
    return Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
  }
  return "portrait";
}
var useIsLandscape = (views, customOrientation) => {
  const [orientation, setOrientation] = React129.useState(getOrientation2);
  useEnhancedEffect_default(() => {
    const eventHandler = () => {
      setOrientation(getOrientation2());
    };
    window.addEventListener("orientationchange", eventHandler);
    return () => {
      window.removeEventListener("orientationchange", eventHandler);
    };
  }, []);
  if (arrayIncludes(views, ["hours", "minutes", "seconds"])) {
    return false;
  }
  const orientationToUse = customOrientation || orientation;
  return orientationToUse === "landscape";
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.js
var usePickerLayoutProps = ({
  props,
  propsFromPickerValue,
  propsFromPickerViews,
  wrapperVariant
}) => {
  const {
    orientation
  } = props;
  const isLandscape = useIsLandscape(propsFromPickerViews.views, orientation);
  const layoutProps = _extends({}, propsFromPickerViews, propsFromPickerValue, {
    isLandscape,
    wrapperVariant,
    disabled: props.disabled,
    readOnly: props.readOnly
  });
  return {
    layoutProps
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/warning.js
var buildWarning = (message, gravity = "warning") => {
  let alreadyWarned = false;
  const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
  return () => {
    if (!alreadyWarned) {
      alreadyWarned = true;
      if (gravity === "error") {
        console.error(cleanMessage);
      } else {
        console.warn(cleanMessage);
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePicker.js
var warnRenderInputIsDefined = buildWarning(["The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.", "You can replace it with the `textField` component slot in most cases.", "For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5)."]);
var usePicker = ({
  props,
  valueManager,
  valueType,
  wrapperVariant,
  inputRef,
  additionalViewProps,
  validator,
  autoFocusView
}) => {
  if (true) {
    if (props.renderInput != null) {
      warnRenderInputIsDefined();
    }
  }
  const pickerValueResponse = usePickerValue({
    props,
    valueManager,
    valueType,
    wrapperVariant,
    validator
  });
  const pickerViewsResponse = usePickerViews({
    props,
    inputRef,
    additionalViewProps,
    autoFocusView,
    propsFromPickerValue: pickerValueResponse.viewProps
  });
  const pickerLayoutResponse = usePickerLayoutProps({
    props,
    wrapperVariant,
    propsFromPickerValue: pickerValueResponse.layoutProps,
    propsFromPickerViews: pickerViewsResponse.layoutProps
  });
  return {
    open: pickerValueResponse.open,
    actions: pickerValueResponse.actions,
    fieldProps: pickerValueResponse.fieldProps,
    renderCurrentView: pickerViewsResponse.renderCurrentView,
    hasUIView: pickerViewsResponse.hasUIView,
    shouldRestoreFocus: pickerViewsResponse.shouldRestoreFocus,
    layoutProps: pickerLayoutResponse.layoutProps
  };
};

// node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/useStaticPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React134 = __toESM(require_react());
init_styles();

// node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.js
var React133 = __toESM(require_react());
var import_prop_types92 = __toESM(require_prop_types());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/PickersLayout/pickersLayoutClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getPickersLayoutUtilityClass(slot) {
  return generateUtilityClass("MuiPickersLayout", slot);
}
var pickersLayoutClasses = generateUtilityClasses("MuiPickersLayout", ["root", "landscape", "contentWrapper", "toolbar", "actionBar", "tabs", "shortcuts"]);

// node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.js
init_extends();
var React132 = __toESM(require_react());
init_utils4();
init_utils();

// node_modules/@mui/x-date-pickers/PickersActionBar/PickersActionBar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React130 = __toESM(require_react());
var import_prop_types90 = __toESM(require_prop_types());
init_Button();
var import_jsx_runtime151 = __toESM(require_jsx_runtime());
var _excluded94 = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
function PickersActionBar(props) {
  const {
    onAccept,
    onClear,
    onCancel,
    onSetToday,
    actions
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
  const localeText = useLocaleText();
  if (actions == null || actions.length === 0) {
    return null;
  }
  const buttons = actions == null ? void 0 : actions.map((actionType) => {
    switch (actionType) {
      case "clear":
        return (0, import_jsx_runtime151.jsx)(Button_default, {
          onClick: onClear,
          children: localeText.clearButtonLabel
        }, actionType);
      case "cancel":
        return (0, import_jsx_runtime151.jsx)(Button_default, {
          onClick: onCancel,
          children: localeText.cancelButtonLabel
        }, actionType);
      case "accept":
        return (0, import_jsx_runtime151.jsx)(Button_default, {
          onClick: onAccept,
          children: localeText.okButtonLabel
        }, actionType);
      case "today":
        return (0, import_jsx_runtime151.jsx)(Button_default, {
          onClick: onSetToday,
          children: localeText.todayButtonLabel
        }, actionType);
      default:
        return null;
    }
  });
  return (0, import_jsx_runtime151.jsx)(DialogActions_default, _extends({}, other, {
    children: buttons
  }));
}
true ? PickersActionBar.propTypes = {
  actions: import_prop_types90.default.arrayOf(import_prop_types90.default.oneOf(["accept", "cancel", "clear", "today"]).isRequired),
  disableSpacing: import_prop_types90.default.bool,
  onAccept: import_prop_types90.default.func.isRequired,
  onCancel: import_prop_types90.default.func.isRequired,
  onClear: import_prop_types90.default.func.isRequired,
  onSetToday: import_prop_types90.default.func.isRequired,
  sx: import_prop_types90.default.oneOfType([import_prop_types90.default.arrayOf(import_prop_types90.default.oneOfType([import_prop_types90.default.func, import_prop_types90.default.object, import_prop_types90.default.bool])), import_prop_types90.default.func, import_prop_types90.default.object])
} : void 0;

// node_modules/@mui/x-date-pickers/PickersShortcuts/PickersShortcuts.js
init_extends();
init_objectWithoutPropertiesLoose();
var React131 = __toESM(require_react());
var import_prop_types91 = __toESM(require_prop_types());
init_List();
init_Chip();
var import_jsx_runtime152 = __toESM(require_jsx_runtime());
var _excluded95 = ["items", "changeImportance", "isLandscape", "onChange", "isValid"];
var _excluded219 = ["getValue"];
function PickersShortcuts(props) {
  const {
    items,
    changeImportance,
    onChange,
    isValid: isValid2
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
  if (items == null || items.length === 0) {
    return null;
  }
  const resolvedItems = items.map((_ref) => {
    let {
      getValue
    } = _ref, item = _objectWithoutPropertiesLoose(_ref, _excluded219);
    const newValue = getValue({
      isValid: isValid2
    });
    return {
      label: item.label,
      onClick: () => {
        onChange(newValue, changeImportance, item);
      },
      disabled: !isValid2(newValue)
    };
  });
  return (0, import_jsx_runtime152.jsx)(List_default, _extends({
    dense: true,
    sx: [{
      maxHeight: VIEW_HEIGHT,
      maxWidth: 200,
      overflow: "auto"
    }, ...Array.isArray(other.sx) ? other.sx : [other.sx]]
  }, other, {
    children: resolvedItems.map((item) => {
      return (0, import_jsx_runtime152.jsx)(ListItem_default, {
        children: (0, import_jsx_runtime152.jsx)(Chip_default, _extends({}, item))
      }, item.label);
    })
  }));
}
true ? PickersShortcuts.propTypes = {
  changeImportance: import_prop_types91.default.oneOf(["accept", "set"]),
  className: import_prop_types91.default.string,
  component: import_prop_types91.default.elementType,
  dense: import_prop_types91.default.bool,
  disablePadding: import_prop_types91.default.bool,
  isLandscape: import_prop_types91.default.bool.isRequired,
  isValid: import_prop_types91.default.func.isRequired,
  items: import_prop_types91.default.arrayOf(import_prop_types91.default.shape({
    getValue: import_prop_types91.default.func.isRequired,
    label: import_prop_types91.default.string.isRequired
  })),
  onChange: import_prop_types91.default.func.isRequired,
  style: import_prop_types91.default.object,
  subheader: import_prop_types91.default.node,
  sx: import_prop_types91.default.oneOfType([import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object, import_prop_types91.default.bool])), import_prop_types91.default.func, import_prop_types91.default.object])
} : void 0;

// node_modules/@mui/x-date-pickers/internals/utils/slots-migration.js
init_extends();
var uncapitalizeObjectKeys = (capitalizedObject) => {
  if (capitalizedObject === void 0) {
    return void 0;
  }
  return Object.keys(capitalizedObject).reduce((acc, key) => _extends({}, acc, {
    [`${key.slice(0, 1).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
  }), {});
};

// node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.js
var import_jsx_runtime153 = __toESM(require_jsx_runtime());
function toolbarHasView(toolbarProps) {
  return toolbarProps.view !== null;
}
var useUtilityClasses77 = (ownerState) => {
  const {
    classes: classes2,
    isLandscape
  } = ownerState;
  const slots = {
    root: ["root", isLandscape && "landscape"],
    contentWrapper: ["contentWrapper"],
    toolbar: ["toolbar"],
    actionBar: ["actionBar"],
    tabs: ["tabs"],
    landscape: ["landscape"],
    shortcuts: ["shortcuts"]
  };
  return composeClasses(slots, getPickersLayoutUtilityClass, classes2);
};
var usePickerLayout = (props) => {
  var _slots$actionBar, _slots$shortcuts;
  const {
    wrapperVariant,
    onAccept,
    onClear,
    onCancel,
    onSetToday,
    view,
    views,
    onViewChange,
    value,
    onChange,
    onSelectShortcut,
    isValid: isValid2,
    isLandscape,
    disabled,
    readOnly,
    children,
    components,
    componentsProps,
    slots: innerSlots,
    slotProps: innerSlotProps
  } = props;
  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
  const classes2 = useUtilityClasses77(props);
  const ActionBar = (_slots$actionBar = slots == null ? void 0 : slots.actionBar) != null ? _slots$actionBar : PickersActionBar;
  const actionBarProps = useSlotProps({
    elementType: ActionBar,
    externalSlotProps: slotProps == null ? void 0 : slotProps.actionBar,
    additionalProps: {
      onAccept,
      onClear,
      onCancel,
      onSetToday,
      actions: wrapperVariant === "desktop" ? [] : ["cancel", "accept"],
      className: classes2.actionBar
    },
    ownerState: _extends({}, props, {
      wrapperVariant
    })
  });
  const actionBar = (0, import_jsx_runtime153.jsx)(ActionBar, _extends({}, actionBarProps));
  const Toolbar4 = slots == null ? void 0 : slots.toolbar;
  const toolbarProps = useSlotProps({
    elementType: Toolbar4,
    externalSlotProps: slotProps == null ? void 0 : slotProps.toolbar,
    additionalProps: {
      isLandscape,
      onChange,
      value,
      view,
      onViewChange,
      views,
      disabled,
      readOnly,
      className: classes2.toolbar
    },
    ownerState: _extends({}, props, {
      wrapperVariant
    })
  });
  const toolbar = toolbarHasView(toolbarProps) && !!Toolbar4 ? (0, import_jsx_runtime153.jsx)(Toolbar4, _extends({}, toolbarProps)) : null;
  const content = children;
  const Tabs3 = slots == null ? void 0 : slots.tabs;
  const tabs = view && Tabs3 ? (0, import_jsx_runtime153.jsx)(Tabs3, _extends({
    view,
    onViewChange,
    className: classes2.tabs
  }, slotProps == null ? void 0 : slotProps.tabs)) : null;
  const Shortcuts = (_slots$shortcuts = slots == null ? void 0 : slots.shortcuts) != null ? _slots$shortcuts : PickersShortcuts;
  const shortcutsProps = useSlotProps({
    elementType: Shortcuts,
    externalSlotProps: slotProps == null ? void 0 : slotProps.shortcuts,
    additionalProps: {
      isValid: isValid2,
      isLandscape,
      onChange: onSelectShortcut,
      className: classes2.shortcuts
    },
    ownerState: {
      isValid: isValid2,
      isLandscape,
      onChange: onSelectShortcut,
      className: classes2.shortcuts,
      wrapperVariant
    }
  });
  const shortcuts = view && !!Shortcuts ? (0, import_jsx_runtime153.jsx)(Shortcuts, _extends({}, shortcutsProps)) : null;
  return {
    toolbar,
    content,
    tabs,
    actionBar,
    shortcuts
  };
};
var usePickerLayout_default = usePickerLayout;

// node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.js
var import_jsx_runtime154 = __toESM(require_jsx_runtime());
var import_jsx_runtime155 = __toESM(require_jsx_runtime());
var useUtilityClasses78 = (ownerState) => {
  const {
    isLandscape,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root", isLandscape && "landscape"],
    contentWrapper: ["contentWrapper"]
  };
  return composeClasses(slots, getPickersLayoutUtilityClass, classes2);
};
var PickersLayoutRoot = styled_default("div", {
  name: "MuiPickersLayout",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => ({
  display: "grid",
  gridAutoColumns: "max-content auto max-content",
  gridAutoRows: "max-content auto max-content",
  [`& .${pickersLayoutClasses.toolbar}`]: ownerState.isLandscape ? {
    gridColumn: theme.direction === "rtl" ? 3 : 1,
    gridRow: "2 / 3"
  } : {
    gridColumn: "2 / 4",
    gridRow: 1
  },
  [`.${pickersLayoutClasses.shortcuts}`]: ownerState.isLandscape ? {
    gridColumn: "2 / 4",
    gridRow: 1
  } : {
    gridColumn: theme.direction === "rtl" ? 3 : 1,
    gridRow: "2 / 3"
  },
  [`& .${pickersLayoutClasses.actionBar}`]: {
    gridColumn: "1 / 4",
    gridRow: 3
  }
}));
PickersLayoutRoot.propTypes = {
  as: import_prop_types92.default.elementType,
  ownerState: import_prop_types92.default.shape({
    isLandscape: import_prop_types92.default.bool.isRequired
  }).isRequired,
  sx: import_prop_types92.default.oneOfType([import_prop_types92.default.arrayOf(import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object, import_prop_types92.default.bool])), import_prop_types92.default.func, import_prop_types92.default.object])
};
var PickersLayoutContentWrapper = styled_default("div", {
  name: "MuiPickersLayout",
  slot: "ContentWrapper",
  overridesResolver: (props, styles5) => styles5.contentWrapper
})({
  gridColumn: 2,
  gridRow: 2,
  display: "flex",
  flexDirection: "column"
});
var PickersLayout = function PickersLayout2(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersLayout"
  });
  const {
    toolbar,
    content,
    tabs,
    actionBar,
    shortcuts
  } = usePickerLayout_default(props);
  const {
    sx,
    className,
    isLandscape,
    ref,
    wrapperVariant
  } = props;
  const ownerState = props;
  const classes2 = useUtilityClasses78(ownerState);
  return (0, import_jsx_runtime154.jsxs)(PickersLayoutRoot, {
    ref,
    sx,
    className: clsx_default2(className, classes2.root),
    ownerState,
    children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, (0, import_jsx_runtime155.jsx)(PickersLayoutContentWrapper, {
      className: classes2.contentWrapper,
      children: wrapperVariant === "desktop" ? (0, import_jsx_runtime154.jsxs)(React133.Fragment, {
        children: [content, tabs]
      }) : (0, import_jsx_runtime154.jsxs)(React133.Fragment, {
        children: [tabs, content]
      })
    }), actionBar]
  });
};
true ? PickersLayout.propTypes = {
  children: import_prop_types92.default.node,
  classes: import_prop_types92.default.object,
  className: import_prop_types92.default.string,
  components: import_prop_types92.default.object,
  componentsProps: import_prop_types92.default.object,
  disabled: import_prop_types92.default.bool,
  isLandscape: import_prop_types92.default.bool.isRequired,
  isValid: import_prop_types92.default.func.isRequired,
  onAccept: import_prop_types92.default.func.isRequired,
  onCancel: import_prop_types92.default.func.isRequired,
  onChange: import_prop_types92.default.func.isRequired,
  onClear: import_prop_types92.default.func.isRequired,
  onClose: import_prop_types92.default.func.isRequired,
  onDismiss: import_prop_types92.default.func.isRequired,
  onOpen: import_prop_types92.default.func.isRequired,
  onSelectShortcut: import_prop_types92.default.func.isRequired,
  onSetToday: import_prop_types92.default.func.isRequired,
  onViewChange: import_prop_types92.default.func.isRequired,
  orientation: import_prop_types92.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types92.default.bool,
  slotProps: import_prop_types92.default.object,
  slots: import_prop_types92.default.object,
  sx: import_prop_types92.default.oneOfType([import_prop_types92.default.arrayOf(import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object, import_prop_types92.default.bool])), import_prop_types92.default.func, import_prop_types92.default.object]),
  value: import_prop_types92.default.any,
  view: import_prop_types92.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  views: import_prop_types92.default.arrayOf(import_prop_types92.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired,
  wrapperVariant: import_prop_types92.default.oneOf(["desktop", "mobile"])
} : void 0;

// node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/useStaticPicker.js
var import_jsx_runtime156 = __toESM(require_jsx_runtime());
var PickerStaticLayout = styled_default(PickersLayout)(({
  theme
}) => ({
  overflow: "hidden",
  minWidth: DIALOG_WIDTH,
  backgroundColor: (theme.vars || theme).palette.background.paper
}));

// node_modules/@mui/x-date-pickers/internals/hooks/date-helpers-hooks.js
var React135 = __toESM(require_react());
function useNextMonthDisabled(month, {
  disableFuture,
  maxDate,
  timezone
}) {
  const utils = useUtils();
  return React135.useMemo(() => {
    const now2 = utils.dateWithTimezone(void 0, timezone);
    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now2, maxDate) ? now2 : maxDate);
    return !utils.isAfter(lastEnabledMonth, month);
  }, [disableFuture, maxDate, month, utils, timezone]);
}
function usePreviousMonthDisabled(month, {
  disablePast,
  minDate,
  timezone
}) {
  const utils = useUtils();
  return React135.useMemo(() => {
    const now2 = utils.dateWithTimezone(void 0, timezone);
    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now2, minDate) ? now2 : minDate);
    return !utils.isBefore(firstEnabledMonth, month);
  }, [disablePast, minDate, month, utils, timezone]);
}
function useMeridiemMode(date, ampm, onChange, selectionState) {
  const utils = useUtils();
  const meridiemMode = getMeridiem(date, utils);
  const handleMeridiemChange = React135.useCallback((mode) => {
    const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils);
    onChange(timeWithMeridiem, selectionState != null ? selectionState : "partial");
  }, [ampm, date, onChange, selectionState, utils]);
  return {
    meridiemMode,
    handleMeridiemChange
  };
}

// node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React139 = __toESM(require_react());
init_useEventCallback();
init_Typography();
init_utils4();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/PickersDay/PickersDay.js
init_objectWithoutPropertiesLoose();
init_extends();
var React136 = __toESM(require_react());
var import_prop_types93 = __toESM(require_prop_types());
init_ButtonBase();
init_utils();
init_styles();

// node_modules/@mui/x-date-pickers/PickersDay/pickersDayClasses.js
init_utils();
function getPickersDayUtilityClass(slot) {
  return generateUtilityClass("MuiPickersDay", slot);
}
var pickersDayClasses = generateUtilityClasses("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);

// node_modules/@mui/x-date-pickers/PickersDay/PickersDay.js
var import_jsx_runtime157 = __toESM(require_jsx_runtime());
var _excluded96 = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today", "isFirstVisibleCell", "isLastVisibleCell"];
var useUtilityClasses79 = (ownerState) => {
  const {
    selected,
    disableMargin,
    disableHighlightToday,
    today,
    disabled,
    outsideCurrentMonth,
    showDaysOutsideCurrentMonth,
    classes: classes2
  } = ownerState;
  const isHiddenDaySpacingFiller = outsideCurrentMonth && !showDaysOutsideCurrentMonth;
  const slots = {
    root: ["root", selected && !isHiddenDaySpacingFiller && "selected", disabled && "disabled", !disableMargin && "dayWithMargin", !disableHighlightToday && today && "today", outsideCurrentMonth && showDaysOutsideCurrentMonth && "dayOutsideMonth", isHiddenDaySpacingFiller && "hiddenDaySpacingFiller"],
    hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
  };
  return composeClasses(slots, getPickersDayUtilityClass, classes2);
};
var styleArg = ({
  theme,
  ownerState
}) => _extends({}, theme.typography.caption, {
  width: DAY_SIZE,
  height: DAY_SIZE,
  borderRadius: "50%",
  padding: 0,
  backgroundColor: "transparent",
  transition: theme.transitions.create("background-color", {
    duration: theme.transitions.duration.short
  }),
  color: (theme.vars || theme).palette.text.primary,
  "@media (pointer: fine)": {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
    }
  },
  "&:focus": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity),
    [`&.${pickersDayClasses.selected}`]: {
      willChange: "background-color",
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  [`&.${pickersDayClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText,
    backgroundColor: (theme.vars || theme).palette.primary.main,
    fontWeight: theme.typography.fontWeightMedium,
    "&:hover": {
      willChange: "background-color",
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  [`&.${pickersDayClasses.disabled}:not(.${pickersDayClasses.selected})`]: {
    color: (theme.vars || theme).palette.text.disabled
  },
  [`&.${pickersDayClasses.disabled}&.${pickersDayClasses.selected}`]: {
    opacity: 0.6
  }
}, !ownerState.disableMargin && {
  margin: `0 ${DAY_MARGIN}px`
}, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
  color: (theme.vars || theme).palette.text.secondary
}, !ownerState.disableHighlightToday && ownerState.today && {
  [`&:not(.${pickersDayClasses.selected})`]: {
    border: `1px solid ${(theme.vars || theme).palette.text.secondary}`
  }
});
var overridesResolver7 = (props, styles5) => {
  const {
    ownerState
  } = props;
  return [styles5.root, !ownerState.disableMargin && styles5.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles5.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles5.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles5.hiddenDaySpacingFiller];
};
var PickersDayRoot = styled_default(ButtonBase_default, {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver: overridesResolver7
})(styleArg);
var PickersDayFiller = styled_default("div", {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver: overridesResolver7
})(({
  theme,
  ownerState
}) => _extends({}, styleArg({
  theme,
  ownerState
}), {
  opacity: 0,
  pointerEvents: "none"
}));
var noop = () => {
};
var PickersDayRaw = React136.forwardRef(function PickersDay(inProps, forwardedRef) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersDay"
  });
  const {
    autoFocus = false,
    className,
    day,
    disabled = false,
    disableHighlightToday = false,
    disableMargin = false,
    isAnimating,
    onClick: onClick2,
    onDaySelect,
    onFocus = noop,
    onBlur = noop,
    onKeyDown = noop,
    onMouseDown = noop,
    onMouseEnter = noop,
    outsideCurrentMonth,
    selected = false,
    showDaysOutsideCurrentMonth = false,
    children,
    today: isToday = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded96);
  const ownerState = _extends({}, props, {
    autoFocus,
    disabled,
    disableHighlightToday,
    disableMargin,
    selected,
    showDaysOutsideCurrentMonth,
    today: isToday
  });
  const classes2 = useUtilityClasses79(ownerState);
  const utils = useUtils();
  const ref = React136.useRef(null);
  const handleRef = useForkRef(ref, forwardedRef);
  useEnhancedEffect_default(() => {
    if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
      ref.current.focus();
    }
  }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);
  const handleMouseDown = (event) => {
    onMouseDown(event);
    if (outsideCurrentMonth) {
      event.preventDefault();
    }
  };
  const handleClick = (event) => {
    if (!disabled) {
      onDaySelect(day);
    }
    if (outsideCurrentMonth) {
      event.currentTarget.focus();
    }
    if (onClick2) {
      onClick2(event);
    }
  };
  if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
    return (0, import_jsx_runtime157.jsx)(PickersDayFiller, {
      className: clsx_default2(classes2.root, classes2.hiddenDaySpacingFiller, className),
      ownerState,
      role: other.role
    });
  }
  return (0, import_jsx_runtime157.jsx)(PickersDayRoot, _extends({
    className: clsx_default2(classes2.root, className),
    ref: handleRef,
    centerRipple: true,
    disabled,
    tabIndex: selected ? 0 : -1,
    onKeyDown: (event) => onKeyDown(event, day),
    onFocus: (event) => onFocus(event, day),
    onBlur: (event) => onBlur(event, day),
    onMouseEnter: (event) => onMouseEnter(event, day),
    onClick: handleClick,
    onMouseDown: handleMouseDown
  }, other, {
    ownerState,
    children: !children ? utils.format(day, "dayOfMonth") : children
  }));
});
true ? PickersDayRaw.propTypes = {
  action: import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.shape({
    current: import_prop_types93.default.shape({
      focusVisible: import_prop_types93.default.func.isRequired
    })
  })]),
  centerRipple: import_prop_types93.default.bool,
  classes: import_prop_types93.default.object,
  className: import_prop_types93.default.string,
  component: import_prop_types93.default.elementType,
  day: import_prop_types93.default.any.isRequired,
  disabled: import_prop_types93.default.bool,
  disableHighlightToday: import_prop_types93.default.bool,
  disableMargin: import_prop_types93.default.bool,
  disableRipple: import_prop_types93.default.bool,
  disableTouchRipple: import_prop_types93.default.bool,
  focusRipple: import_prop_types93.default.bool,
  focusVisibleClassName: import_prop_types93.default.string,
  isAnimating: import_prop_types93.default.bool,
  isFirstVisibleCell: import_prop_types93.default.bool.isRequired,
  isLastVisibleCell: import_prop_types93.default.bool.isRequired,
  onBlur: import_prop_types93.default.func,
  onDaySelect: import_prop_types93.default.func.isRequired,
  onFocus: import_prop_types93.default.func,
  onFocusVisible: import_prop_types93.default.func,
  onKeyDown: import_prop_types93.default.func,
  onMouseEnter: import_prop_types93.default.func,
  outsideCurrentMonth: import_prop_types93.default.bool.isRequired,
  selected: import_prop_types93.default.bool,
  showDaysOutsideCurrentMonth: import_prop_types93.default.bool,
  style: import_prop_types93.default.object,
  sx: import_prop_types93.default.oneOfType([import_prop_types93.default.arrayOf(import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object, import_prop_types93.default.bool])), import_prop_types93.default.func, import_prop_types93.default.object]),
  tabIndex: import_prop_types93.default.number,
  today: import_prop_types93.default.bool,
  TouchRippleProps: import_prop_types93.default.object,
  touchRippleRef: import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.shape({
    current: import_prop_types93.default.shape({
      pulsate: import_prop_types93.default.func.isRequired,
      start: import_prop_types93.default.func.isRequired,
      stop: import_prop_types93.default.func.isRequired
    })
  })])
} : void 0;
var PickersDay2 = React136.memo(PickersDayRaw);

// node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.js
init_extends();
init_objectWithoutPropertiesLoose();
var React137 = __toESM(require_react());
init_styles();
init_composeClasses();
init_esm2();

// node_modules/@mui/x-date-pickers/DateCalendar/pickersSlideTransitionClasses.js
init_utils();
var getPickersSlideTransitionUtilityClass = (slot) => generateUtilityClass("MuiPickersSlideTransition", slot);
var pickersSlideTransitionClasses = generateUtilityClasses("MuiPickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]);

// node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.js
var import_jsx_runtime158 = __toESM(require_jsx_runtime());
var _excluded97 = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"];
var useUtilityClasses80 = (ownerState) => {
  const {
    classes: classes2,
    slideDirection
  } = ownerState;
  const slots = {
    root: ["root"],
    exit: ["slideExit"],
    enterActive: ["slideEnterActive"],
    enter: [`slideEnter-${slideDirection}`],
    exitActive: [`slideExitActiveLeft-${slideDirection}`]
  };
  return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes2);
};
var PickersSlideTransitionRoot = styled_default(TransitionGroup_default, {
  name: "MuiPickersSlideTransition",
  slot: "Root",
  overridesResolver: (_4, styles5) => [styles5.root, {
    [`.${pickersSlideTransitionClasses["slideEnter-left"]}`]: styles5["slideEnter-left"]
  }, {
    [`.${pickersSlideTransitionClasses["slideEnter-right"]}`]: styles5["slideEnter-right"]
  }, {
    [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles5.slideEnterActive
  }, {
    [`.${pickersSlideTransitionClasses.slideExit}`]: styles5.slideExit
  }, {
    [`.${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: styles5["slideExitActiveLeft-left"]
  }, {
    [`.${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: styles5["slideExitActiveLeft-right"]
  }]
})(({
  theme
}) => {
  const slideTransition = theme.transitions.create("transform", {
    duration: theme.transitions.duration.complex,
    easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
  });
  return {
    display: "block",
    position: "relative",
    overflowX: "hidden",
    "& > *": {
      position: "absolute",
      top: 0,
      right: 0,
      left: 0
    },
    [`& .${pickersSlideTransitionClasses["slideEnter-left"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      zIndex: 1
    },
    [`& .${pickersSlideTransitionClasses["slideEnter-right"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      zIndex: 1
    },
    [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
      transform: "translate(0%)",
      transition: slideTransition
    },
    [`& .${pickersSlideTransitionClasses.slideExit}`]: {
      transform: "translate(0%)"
    },
    [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      transition: slideTransition,
      zIndex: 0
    },
    [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      transition: slideTransition,
      zIndex: 0
    }
  };
});
function PickersSlideTransition(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersSlideTransition"
  });
  const {
    children,
    className,
    reduceAnimations,
    transKey
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
  const classes2 = useUtilityClasses80(props);
  const theme = useTheme();
  if (reduceAnimations) {
    return (0, import_jsx_runtime158.jsx)("div", {
      className: clsx_default2(classes2.root, className),
      children
    });
  }
  const transitionClasses = {
    exit: classes2.exit,
    enterActive: classes2.enterActive,
    enter: classes2.enter,
    exitActive: classes2.exitActive
  };
  return (0, import_jsx_runtime158.jsx)(PickersSlideTransitionRoot, {
    className: clsx_default2(classes2.root, className),
    childFactory: (element) => React137.cloneElement(element, {
      classNames: transitionClasses
    }),
    role: "presentation",
    children: (0, import_jsx_runtime158.jsx)(CSSTransition_default, _extends({
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: theme.transitions.duration.complex,
      classNames: transitionClasses
    }, other, {
      children
    }), transKey)
  });
}

// node_modules/@mui/x-date-pickers/DateCalendar/useIsDateDisabled.js
var React138 = __toESM(require_react());
var useIsDateDisabled = ({
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  minDate,
  maxDate,
  disableFuture,
  disablePast,
  timezone
}) => {
  const adapter = useLocalizationContext();
  return React138.useCallback((day) => validateDate({
    adapter,
    value: day,
    props: {
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      minDate,
      maxDate,
      disableFuture,
      disablePast,
      timezone
    }
  }) !== null, [adapter, shouldDisableDate, shouldDisableMonth, shouldDisableYear, minDate, maxDate, disableFuture, disablePast, timezone]);
};

// node_modules/@mui/x-date-pickers/DateCalendar/dayCalendarClasses.js
init_utils();
var getDayCalendarUtilityClass = (slot) => generateUtilityClass("MuiDayCalendar", slot);
var dayPickerClasses = generateUtilityClasses("MuiDayCalendar", ["root", "header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer", "weekNumberLabel", "weekNumber"]);

// node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.js
var import_jsx_runtime159 = __toESM(require_jsx_runtime());
var import_jsx_runtime160 = __toESM(require_jsx_runtime());
var _excluded98 = ["parentProps", "day", "focusableDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"];
var _excluded220 = ["ownerState"];
var useUtilityClasses81 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    header: ["header"],
    weekDayLabel: ["weekDayLabel"],
    loadingContainer: ["loadingContainer"],
    slideTransition: ["slideTransition"],
    monthContainer: ["monthContainer"],
    weekContainer: ["weekContainer"],
    weekNumberLabel: ["weekNumberLabel"],
    weekNumber: ["weekNumber"]
  };
  return composeClasses(slots, getDayCalendarUtilityClass, classes2);
};
var weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
var PickersCalendarDayRoot = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})({});
var PickersCalendarDayHeader = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "Header",
  overridesResolver: (_4, styles5) => styles5.header
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
});
var PickersCalendarWeekDayLabel = styled_default(Typography_default, {
  name: "MuiDayCalendar",
  slot: "WeekDayLabel",
  overridesResolver: (_4, styles5) => styles5.weekDayLabel
})(({
  theme
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: (theme.vars || theme).palette.text.secondary
}));
var PickersCalendarWeekNumberLabel = styled_default(Typography_default, {
  name: "MuiDayCalendar",
  slot: "WeekNumberLabel",
  overridesResolver: (_4, styles5) => styles5.weekNumberLabel
})(({
  theme
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: theme.palette.text.disabled
}));
var PickersCalendarWeekNumber = styled_default(Typography_default, {
  name: "MuiDayCalendar",
  slot: "WeekNumber",
  overridesResolver: (_4, styles5) => styles5.weekNumber
})(({
  theme
}) => _extends({}, theme.typography.caption, {
  width: DAY_SIZE,
  height: DAY_SIZE,
  padding: 0,
  margin: `0 ${DAY_MARGIN}px`,
  color: theme.palette.text.disabled,
  fontSize: "0.75rem",
  alignItems: "center",
  justifyContent: "center",
  display: "inline-flex"
}));
var PickersCalendarLoadingContainer = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "LoadingContainer",
  overridesResolver: (_4, styles5) => styles5.loadingContainer
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  minHeight: weeksContainerHeight
});
var PickersCalendarSlideTransition = styled_default(PickersSlideTransition, {
  name: "MuiDayCalendar",
  slot: "SlideTransition",
  overridesResolver: (_4, styles5) => styles5.slideTransition
})({
  minHeight: weeksContainerHeight
});
var PickersCalendarWeekContainer = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "MonthContainer",
  overridesResolver: (_4, styles5) => styles5.monthContainer
})({
  overflow: "hidden"
});
var PickersCalendarWeek = styled_default("div", {
  name: "MuiDayCalendar",
  slot: "WeekContainer",
  overridesResolver: (_4, styles5) => styles5.weekContainer
})({
  margin: `${DAY_MARGIN}px 0`,
  display: "flex",
  justifyContent: "center"
});
function WrappedDay(_ref) {
  var _ref2, _slots$day, _slotProps$day;
  let {
    parentProps,
    day,
    focusableDay,
    selectedDays,
    isDateDisabled,
    currentMonthNumber,
    isViewFocused
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded98);
  const {
    disabled,
    disableHighlightToday,
    isMonthSwitchingAnimating,
    showDaysOutsideCurrentMonth,
    components,
    componentsProps,
    slots,
    slotProps,
    timezone
  } = parentProps;
  const utils = useUtils();
  const now2 = useNow(timezone);
  const isFocusableDay = focusableDay !== null && utils.isSameDay(day, focusableDay);
  const isSelected = selectedDays.some((selectedDay) => utils.isSameDay(selectedDay, day));
  const isToday = utils.isSameDay(day, now2);
  const Day = (_ref2 = (_slots$day = slots == null ? void 0 : slots.day) != null ? _slots$day : components == null ? void 0 : components.Day) != null ? _ref2 : PickersDay2;
  const _useSlotProps = useSlotProps({
    elementType: Day,
    externalSlotProps: (_slotProps$day = slotProps == null ? void 0 : slotProps.day) != null ? _slotProps$day : componentsProps == null ? void 0 : componentsProps.day,
    additionalProps: _extends({
      disableHighlightToday,
      showDaysOutsideCurrentMonth,
      role: "gridcell",
      isAnimating: isMonthSwitchingAnimating,
      "data-timestamp": utils.toJsDate(day).valueOf()
    }, other),
    ownerState: _extends({}, parentProps, {
      day,
      selected: isSelected
    })
  }), dayProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded220);
  const isDisabled = React139.useMemo(() => disabled || isDateDisabled(day), [disabled, isDateDisabled, day]);
  const outsideCurrentMonth = React139.useMemo(() => utils.getMonth(day) !== currentMonthNumber, [utils, day, currentMonthNumber]);
  const isFirstVisibleCell = React139.useMemo(() => {
    const startOfMonth = utils.startOfMonth(utils.setMonth(day, currentMonthNumber));
    if (!showDaysOutsideCurrentMonth) {
      return utils.isSameDay(day, startOfMonth);
    }
    return utils.isSameDay(day, utils.startOfWeek(startOfMonth));
  }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
  const isLastVisibleCell = React139.useMemo(() => {
    const endOfMonth = utils.endOfMonth(utils.setMonth(day, currentMonthNumber));
    if (!showDaysOutsideCurrentMonth) {
      return utils.isSameDay(day, endOfMonth);
    }
    return utils.isSameDay(day, utils.endOfWeek(endOfMonth));
  }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
  return (0, import_jsx_runtime159.jsx)(Day, _extends({}, dayProps, {
    day,
    disabled: isDisabled,
    autoFocus: isViewFocused && isFocusableDay,
    today: isToday,
    outsideCurrentMonth,
    isFirstVisibleCell,
    isLastVisibleCell,
    selected: isSelected,
    tabIndex: isFocusableDay ? 0 : -1,
    "aria-selected": isSelected,
    "aria-current": isToday ? "date" : void 0
  }));
}
function DayCalendar(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDayCalendar"
  });
  const {
    onFocusedDayChange,
    className,
    currentMonth,
    selectedDays,
    focusedDay,
    loading,
    onSelectedDaysChange,
    onMonthSwitchingAnimationEnd,
    readOnly,
    reduceAnimations,
    renderLoading = () => (0, import_jsx_runtime159.jsx)("span", {
      children: "..."
    }),
    slideDirection,
    TransitionProps,
    disablePast,
    disableFuture,
    minDate,
    maxDate,
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    dayOfWeekFormatter: dayOfWeekFormatterFromProps,
    hasFocus,
    onFocusedViewChange,
    gridLabelId,
    displayWeekNumber,
    fixedWeekNumber,
    autoFocus,
    timezone
  } = props;
  const now2 = useNow(timezone);
  const utils = useUtils();
  const classes2 = useUtilityClasses81(props);
  const theme = useTheme();
  const isRTL = theme.direction === "rtl";
  const dayOfWeekFormatter = dayOfWeekFormatterFromProps || ((_day, date) => utils.format(date, "weekdayShort").charAt(0).toUpperCase());
  const isDateDisabled = useIsDateDisabled({
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    minDate,
    maxDate,
    disablePast,
    disableFuture,
    timezone
  });
  const localeText = useLocaleText();
  const [internalHasFocus, setInternalHasFocus] = useControlled({
    name: "DayCalendar",
    state: "hasFocus",
    controlled: hasFocus,
    default: autoFocus != null ? autoFocus : false
  });
  const [internalFocusedDay, setInternalFocusedDay] = React139.useState(() => focusedDay || now2);
  const handleDaySelect = useEventCallback_default((day) => {
    if (readOnly) {
      return;
    }
    onSelectedDaysChange(day);
  });
  const focusDay = (day) => {
    if (!isDateDisabled(day)) {
      onFocusedDayChange(day);
      setInternalFocusedDay(day);
      onFocusedViewChange == null || onFocusedViewChange(true);
      setInternalHasFocus(true);
    }
  };
  const handleKeyDown = useEventCallback_default((event, day) => {
    switch (event.key) {
      case "ArrowUp":
        focusDay(utils.addDays(day, -7));
        event.preventDefault();
        break;
      case "ArrowDown":
        focusDay(utils.addDays(day, 7));
        event.preventDefault();
        break;
      case "ArrowLeft": {
        const newFocusedDayDefault = utils.addDays(day, isRTL ? 1 : -1);
        const nextAvailableMonth = utils.addMonths(day, isRTL ? 1 : -1);
        const closestDayToFocus = findClosestEnabledDate({
          utils,
          date: newFocusedDayDefault,
          minDate: isRTL ? newFocusedDayDefault : utils.startOfMonth(nextAvailableMonth),
          maxDate: isRTL ? utils.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
          isDateDisabled,
          timezone
        });
        focusDay(closestDayToFocus || newFocusedDayDefault);
        event.preventDefault();
        break;
      }
      case "ArrowRight": {
        const newFocusedDayDefault = utils.addDays(day, isRTL ? -1 : 1);
        const nextAvailableMonth = utils.addMonths(day, isRTL ? -1 : 1);
        const closestDayToFocus = findClosestEnabledDate({
          utils,
          date: newFocusedDayDefault,
          minDate: isRTL ? utils.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
          maxDate: isRTL ? newFocusedDayDefault : utils.endOfMonth(nextAvailableMonth),
          isDateDisabled,
          timezone
        });
        focusDay(closestDayToFocus || newFocusedDayDefault);
        event.preventDefault();
        break;
      }
      case "Home":
        focusDay(utils.startOfWeek(day));
        event.preventDefault();
        break;
      case "End":
        focusDay(utils.endOfWeek(day));
        event.preventDefault();
        break;
      case "PageUp":
        focusDay(utils.addMonths(day, 1));
        event.preventDefault();
        break;
      case "PageDown":
        focusDay(utils.addMonths(day, -1));
        event.preventDefault();
        break;
      default:
        break;
    }
  });
  const handleFocus = useEventCallback_default((event, day) => focusDay(day));
  const handleBlur = useEventCallback_default((event, day) => {
    if (internalHasFocus && utils.isSameDay(internalFocusedDay, day)) {
      onFocusedViewChange == null || onFocusedViewChange(false);
    }
  });
  const currentMonthNumber = utils.getMonth(currentMonth);
  const validSelectedDays = React139.useMemo(() => selectedDays.filter((day) => !!day).map((day) => utils.startOfDay(day)), [utils, selectedDays]);
  const transitionKey = currentMonthNumber;
  const slideNodeRef = React139.useMemo(() => React139.createRef(), [transitionKey]);
  const startOfCurrentWeek = utils.startOfWeek(now2);
  const focusableDay = React139.useMemo(() => {
    const startOfMonth = utils.startOfMonth(currentMonth);
    const endOfMonth = utils.endOfMonth(currentMonth);
    if (isDateDisabled(internalFocusedDay) || utils.isAfterDay(internalFocusedDay, endOfMonth) || utils.isBeforeDay(internalFocusedDay, startOfMonth)) {
      return findClosestEnabledDate({
        utils,
        date: internalFocusedDay,
        minDate: startOfMonth,
        maxDate: endOfMonth,
        disablePast,
        disableFuture,
        isDateDisabled,
        timezone
      });
    }
    return internalFocusedDay;
  }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils, timezone]);
  const weeksToDisplay = React139.useMemo(() => {
    const currentMonthWithTimezone = utils.setTimezone(currentMonth, timezone);
    const toDisplay = utils.getWeekArray(currentMonthWithTimezone);
    let nextMonth = utils.addMonths(currentMonthWithTimezone, 1);
    while (fixedWeekNumber && toDisplay.length < fixedWeekNumber) {
      const additionalWeeks = utils.getWeekArray(nextMonth);
      const hasCommonWeek = utils.isSameDay(toDisplay[toDisplay.length - 1][0], additionalWeeks[0][0]);
      additionalWeeks.slice(hasCommonWeek ? 1 : 0).forEach((week) => {
        if (toDisplay.length < fixedWeekNumber) {
          toDisplay.push(week);
        }
      });
      nextMonth = utils.addMonths(nextMonth, 1);
    }
    return toDisplay;
  }, [currentMonth, fixedWeekNumber, utils, timezone]);
  return (0, import_jsx_runtime160.jsxs)(PickersCalendarDayRoot, {
    role: "grid",
    "aria-labelledby": gridLabelId,
    className: classes2.root,
    children: [(0, import_jsx_runtime160.jsxs)(PickersCalendarDayHeader, {
      role: "row",
      className: classes2.header,
      children: [displayWeekNumber && (0, import_jsx_runtime159.jsx)(PickersCalendarWeekNumberLabel, {
        variant: "caption",
        role: "columnheader",
        "aria-label": localeText.calendarWeekNumberHeaderLabel,
        className: classes2.weekNumberLabel,
        children: localeText.calendarWeekNumberHeaderText
      }), getWeekdays(utils, now2).map((weekday, i) => {
        var _dayOfWeekFormatter;
        const day = utils.format(weekday, "weekdayShort");
        return (0, import_jsx_runtime159.jsx)(PickersCalendarWeekDayLabel, {
          variant: "caption",
          role: "columnheader",
          "aria-label": utils.format(utils.addDays(startOfCurrentWeek, i), "weekday"),
          className: classes2.weekDayLabel,
          children: (_dayOfWeekFormatter = dayOfWeekFormatter == null ? void 0 : dayOfWeekFormatter(day, weekday)) != null ? _dayOfWeekFormatter : day
        }, day + i.toString());
      })]
    }), loading ? (0, import_jsx_runtime159.jsx)(PickersCalendarLoadingContainer, {
      className: classes2.loadingContainer,
      children: renderLoading()
    }) : (0, import_jsx_runtime159.jsx)(PickersCalendarSlideTransition, _extends({
      transKey: transitionKey,
      onExited: onMonthSwitchingAnimationEnd,
      reduceAnimations,
      slideDirection,
      className: clsx_default2(className, classes2.slideTransition)
    }, TransitionProps, {
      nodeRef: slideNodeRef,
      children: (0, import_jsx_runtime159.jsx)(PickersCalendarWeekContainer, {
        ref: slideNodeRef,
        role: "rowgroup",
        className: classes2.monthContainer,
        children: weeksToDisplay.map((week, index) => (0, import_jsx_runtime160.jsxs)(PickersCalendarWeek, {
          role: "row",
          className: classes2.weekContainer,
          "aria-rowindex": index + 1,
          children: [displayWeekNumber && (0, import_jsx_runtime159.jsx)(PickersCalendarWeekNumber, {
            className: classes2.weekNumber,
            role: "rowheader",
            "aria-label": localeText.calendarWeekNumberAriaLabelText(utils.getWeekNumber(week[0])),
            children: localeText.calendarWeekNumberText(utils.getWeekNumber(week[0]))
          }), week.map((day, dayIndex) => (0, import_jsx_runtime159.jsx)(WrappedDay, {
            parentProps: props,
            day,
            selectedDays: validSelectedDays,
            focusableDay,
            onKeyDown: handleKeyDown,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onDaySelect: handleDaySelect,
            isDateDisabled,
            currentMonthNumber,
            isViewFocused: internalHasFocus,
            "aria-colindex": dayIndex + 1
          }, day.toString()))]
        }, `week-${week[0]}`))
      })
    }))]
  });
}

// node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js
init_extends();
var React140 = __toESM(require_react());
init_useEventCallback();
var createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {
  switch (action.type) {
    case "changeMonth":
      return _extends({}, state, {
        slideDirection: action.direction,
        currentMonth: action.newMonth,
        isMonthSwitchingAnimating: !reduceAnimations
      });
    case "finishMonthSwitchingAnimation":
      return _extends({}, state, {
        isMonthSwitchingAnimating: false
      });
    case "changeFocusedDay": {
      if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {
        return state;
      }
      const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);
      return _extends({}, state, {
        focusedDay: action.focusedDay,
        isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
        currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,
        slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? "left" : "right"
      });
    }
    default:
      throw new Error("missing support");
  }
};
var useCalendarState = (params) => {
  const {
    value,
    referenceDate: referenceDateProp,
    defaultCalendarMonth,
    disableFuture,
    disablePast,
    disableSwitchToMonthOnDayFocus = false,
    maxDate,
    minDate,
    onMonthChange,
    reduceAnimations,
    shouldDisableDate,
    timezone
  } = params;
  const utils = useUtils();
  const reducerFn = React140.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;
  const referenceDate = React140.useMemo(
    () => {
      let externalReferenceDate = null;
      if (referenceDateProp) {
        externalReferenceDate = referenceDateProp;
      } else if (defaultCalendarMonth) {
        externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);
      }
      return singleItemValueManager.getInitialReferenceValue({
        value,
        utils,
        timezone,
        props: params,
        referenceDate: externalReferenceDate,
        granularity: SECTION_TYPE_GRANULARITY.day
      });
    },
    []
  );
  const [calendarState, dispatch] = React140.useReducer(reducerFn, {
    isMonthSwitchingAnimating: false,
    focusedDay: referenceDate,
    currentMonth: utils.startOfMonth(referenceDate),
    slideDirection: "left"
  });
  const handleChangeMonth = React140.useCallback((payload) => {
    dispatch(_extends({
      type: "changeMonth"
    }, payload));
    if (onMonthChange) {
      onMonthChange(payload.newMonth);
    }
  }, [onMonthChange]);
  const changeMonth = React140.useCallback((newDate) => {
    const newDateRequested = newDate;
    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {
      return;
    }
    handleChangeMonth({
      newMonth: utils.startOfMonth(newDateRequested),
      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? "left" : "right"
    });
  }, [calendarState.currentMonth, handleChangeMonth, utils]);
  const isDateDisabled = useIsDateDisabled({
    shouldDisableDate,
    minDate,
    maxDate,
    disableFuture,
    disablePast,
    timezone
  });
  const onMonthSwitchingAnimationEnd = React140.useCallback(() => {
    dispatch({
      type: "finishMonthSwitchingAnimation"
    });
  }, []);
  const changeFocusedDay = useEventCallback_default((newFocusedDate, withoutMonthSwitchingAnimation) => {
    if (!isDateDisabled(newFocusedDate)) {
      dispatch({
        type: "changeFocusedDay",
        focusedDay: newFocusedDate,
        withoutMonthSwitchingAnimation
      });
    }
  });
  return {
    referenceDate,
    calendarState,
    changeMonth,
    changeFocusedDay,
    isDateDisabled,
    onMonthSwitchingAnimationEnd,
    handleChangeMonth
  };
};

// node_modules/@mui/x-date-pickers/hooks/useClearableField.js
var import_jsx_runtime161 = __toESM(require_jsx_runtime());
var import_jsx_runtime162 = __toESM(require_jsx_runtime());
var _excluded99 = ["ownerState"];
var useClearableField = ({
  clearable,
  fieldProps: forwardedFieldProps,
  InputProps: ForwardedInputProps,
  onClear,
  slots,
  slotProps,
  components,
  componentsProps
}) => {
  var _ref, _slots$clearButton, _slotProps$clearButto, _ref2, _slots$clearIcon, _slotProps$clearIcon;
  const localeText = useLocaleText();
  const IconButton = (_ref = (_slots$clearButton = slots == null ? void 0 : slots.clearButton) != null ? _slots$clearButton : components == null ? void 0 : components.ClearButton) != null ? _ref : IconButton_default;
  const _useSlotProps = useSlotProps({
    elementType: IconButton,
    externalSlotProps: (_slotProps$clearButto = slotProps == null ? void 0 : slotProps.clearButton) != null ? _slotProps$clearButto : componentsProps == null ? void 0 : componentsProps.clearButton,
    ownerState: {},
    className: "clearButton",
    additionalProps: {
      title: localeText.fieldClearLabel
    }
  }), iconButtonProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded99);
  const EndClearIcon = (_ref2 = (_slots$clearIcon = slots == null ? void 0 : slots.clearIcon) != null ? _slots$clearIcon : components == null ? void 0 : components.ClearIcon) != null ? _ref2 : ClearIcon;
  const endClearIconProps = useSlotProps({
    elementType: EndClearIcon,
    externalSlotProps: (_slotProps$clearIcon = slotProps == null ? void 0 : slotProps.clearIcon) != null ? _slotProps$clearIcon : componentsProps == null ? void 0 : componentsProps.clearIcon,
    ownerState: {}
  });
  const InputProps = _extends({}, ForwardedInputProps, {
    endAdornment: (0, import_jsx_runtime162.jsxs)(React141.Fragment, {
      children: [clearable && (0, import_jsx_runtime161.jsx)(InputAdornment_default, {
        position: "end",
        sx: {
          marginRight: ForwardedInputProps != null && ForwardedInputProps.endAdornment ? -1 : -1.5
        },
        children: (0, import_jsx_runtime161.jsx)(IconButton, _extends({}, iconButtonProps, {
          onClick: onClear,
          children: (0, import_jsx_runtime161.jsx)(EndClearIcon, _extends({
            fontSize: "small"
          }, endClearIconProps))
        }))
      }), ForwardedInputProps == null ? void 0 : ForwardedInputProps.endAdornment]
    })
  });
  const fieldProps = _extends({}, forwardedFieldProps, {
    sx: [{
      "& .clearButton": {
        opacity: 1
      },
      "@media (pointer: fine)": {
        "& .clearButton": {
          opacity: 0
        },
        "&:hover, &:focus-within": {
          ".clearButton": {
            opacity: 1
          }
        }
      }
    }, ...Array.isArray(forwardedFieldProps.sx) ? forwardedFieldProps.sx : [forwardedFieldProps.sx]]
  });
  return {
    InputProps,
    fieldProps
  };
};

// node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.js
var import_jsx_runtime163 = __toESM(require_jsx_runtime());
var _excluded100 = ["components", "componentsProps", "slots", "slotProps", "InputProps", "inputProps"];
var _excluded221 = ["inputRef"];
var _excluded312 = ["ref", "onPaste", "onKeyDown", "inputMode", "readOnly", "clearable", "onClear"];
var DateTimeField = React142.forwardRef(function DateTimeField2(inProps, ref) {
  var _ref, _slots$textField, _slotProps$textField;
  const themeProps = useThemeProps2({
    props: inProps,
    name: "MuiDateTimeField"
  });
  const {
    components,
    componentsProps,
    slots,
    slotProps,
    InputProps,
    inputProps
  } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded100);
  const ownerState = themeProps;
  const TextField = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField_default;
  const _useSlotProps = useSlotProps({
    elementType: TextField,
    externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
    externalForwardedProps: other,
    ownerState
  }), {
    inputRef: externalInputRef
  } = _useSlotProps, textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded221);
  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
  const _useDateTimeField = useDateTimeField({
    props: textFieldProps,
    inputRef: externalInputRef
  }), {
    ref: inputRef,
    onPaste,
    onKeyDown,
    inputMode,
    readOnly,
    clearable,
    onClear
  } = _useDateTimeField, fieldProps = _objectWithoutPropertiesLoose(_useDateTimeField, _excluded312);
  const {
    InputProps: ProcessedInputProps,
    fieldProps: processedFieldProps
  } = useClearableField({
    onClear,
    clearable,
    fieldProps,
    InputProps: fieldProps.InputProps,
    slots,
    slotProps,
    components,
    componentsProps
  });
  return (0, import_jsx_runtime163.jsx)(TextField, _extends({
    ref
  }, processedFieldProps, {
    InputProps: _extends({}, ProcessedInputProps, {
      readOnly
    }),
    inputProps: _extends({}, fieldProps.inputProps, {
      inputMode,
      onPaste,
      onKeyDown,
      ref: inputRef
    })
  }));
});
true ? DateTimeField.propTypes = {
  ampm: import_prop_types94.default.bool,
  autoFocus: import_prop_types94.default.bool,
  className: import_prop_types94.default.string,
  clearable: import_prop_types94.default.bool,
  color: import_prop_types94.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
  component: import_prop_types94.default.elementType,
  components: import_prop_types94.default.object,
  componentsProps: import_prop_types94.default.object,
  defaultValue: import_prop_types94.default.any,
  disabled: import_prop_types94.default.bool,
  disableFuture: import_prop_types94.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types94.default.bool,
  disablePast: import_prop_types94.default.bool,
  focused: import_prop_types94.default.bool,
  format: import_prop_types94.default.string,
  formatDensity: import_prop_types94.default.oneOf(["dense", "spacious"]),
  FormHelperTextProps: import_prop_types94.default.object,
  fullWidth: import_prop_types94.default.bool,
  helperText: import_prop_types94.default.node,
  hiddenLabel: import_prop_types94.default.bool,
  id: import_prop_types94.default.string,
  InputLabelProps: import_prop_types94.default.object,
  inputProps: import_prop_types94.default.object,
  InputProps: import_prop_types94.default.object,
  inputRef: refType_default,
  label: import_prop_types94.default.node,
  margin: import_prop_types94.default.oneOf(["dense", "none", "normal"]),
  maxDate: import_prop_types94.default.any,
  maxDateTime: import_prop_types94.default.any,
  maxTime: import_prop_types94.default.any,
  minDate: import_prop_types94.default.any,
  minDateTime: import_prop_types94.default.any,
  minTime: import_prop_types94.default.any,
  minutesStep: import_prop_types94.default.number,
  name: import_prop_types94.default.string,
  onBlur: import_prop_types94.default.func,
  onChange: import_prop_types94.default.func,
  onClear: import_prop_types94.default.func,
  onError: import_prop_types94.default.func,
  onFocus: import_prop_types94.default.func,
  onSelectedSectionsChange: import_prop_types94.default.func,
  readOnly: import_prop_types94.default.bool,
  referenceDate: import_prop_types94.default.any,
  required: import_prop_types94.default.bool,
  selectedSections: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types94.default.number, import_prop_types94.default.shape({
    endIndex: import_prop_types94.default.number.isRequired,
    startIndex: import_prop_types94.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types94.default.func,
  shouldDisableDate: import_prop_types94.default.func,
  shouldDisableMonth: import_prop_types94.default.func,
  shouldDisableTime: import_prop_types94.default.func,
  shouldDisableYear: import_prop_types94.default.func,
  shouldRespectLeadingZeros: import_prop_types94.default.bool,
  size: import_prop_types94.default.oneOf(["medium", "small"]),
  slotProps: import_prop_types94.default.object,
  slots: import_prop_types94.default.object,
  style: import_prop_types94.default.object,
  sx: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object, import_prop_types94.default.bool])), import_prop_types94.default.func, import_prop_types94.default.object]),
  timezone: import_prop_types94.default.string,
  unstableFieldRef: import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object]),
  value: import_prop_types94.default.any,
  variant: import_prop_types94.default.oneOf(["filled", "outlined", "standard"])
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
init_extends();
var React145 = __toESM(require_react());
init_styles();

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
var React143 = __toESM(require_react());
var import_prop_types95 = __toESM(require_prop_types());
init_styles();
init_composeClasses();

// node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerTabsClasses.js
init_utils();
function getDateTimePickerTabsUtilityClass(slot) {
  return generateUtilityClass("MuiDateTimePickerTabs", slot);
}
var dateTimePickerTabsClasses = generateUtilityClasses("MuiDateTimePickerTabs", ["root"]);

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
var import_jsx_runtime164 = __toESM(require_jsx_runtime());
var import_jsx_runtime165 = __toESM(require_jsx_runtime());
var viewToTab = (view) => {
  if (isDatePickerView(view)) {
    return "date";
  }
  return "time";
};
var tabToView = (tab) => {
  if (tab === "date") {
    return "day";
  }
  return "hours";
};
var useUtilityClasses82 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes2);
};
var DateTimePickerTabsRoot = styled_default(Tabs_default, {
  name: "MuiDateTimePickerTabs",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})(({
  theme
}) => ({
  boxShadow: `0 -1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
  "&:last-child": {
    boxShadow: `0 1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
    [`& .${tabsClasses_default.indicator}`]: {
      bottom: "auto",
      top: 0
    }
  }
}));
var DateTimePickerTabs = function DateTimePickerTabs2(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDateTimePickerTabs"
  });
  const {
    dateIcon = (0, import_jsx_runtime164.jsx)(DateRangeIcon, {}),
    onViewChange,
    timeIcon = (0, import_jsx_runtime164.jsx)(TimeIcon, {}),
    view,
    hidden = typeof window === "undefined" || window.innerHeight < 667,
    className,
    sx
  } = props;
  const localeText = useLocaleText();
  const classes2 = useUtilityClasses82(props);
  const handleChange = (event, value) => {
    onViewChange(tabToView(value));
  };
  if (hidden) {
    return null;
  }
  return (0, import_jsx_runtime165.jsxs)(DateTimePickerTabsRoot, {
    ownerState: props,
    variant: "fullWidth",
    value: viewToTab(view),
    onChange: handleChange,
    className: clsx_default2(className, classes2.root),
    sx,
    children: [(0, import_jsx_runtime164.jsx)(Tab_default, {
      value: "date",
      "aria-label": localeText.dateTableLabel,
      icon: (0, import_jsx_runtime164.jsx)(React143.Fragment, {
        children: dateIcon
      })
    }), (0, import_jsx_runtime164.jsx)(Tab_default, {
      value: "time",
      "aria-label": localeText.timeTableLabel,
      icon: (0, import_jsx_runtime164.jsx)(React143.Fragment, {
        children: timeIcon
      })
    })]
  });
};
true ? DateTimePickerTabs.propTypes = {
  classes: import_prop_types95.default.object,
  className: import_prop_types95.default.string,
  dateIcon: import_prop_types95.default.node,
  hidden: import_prop_types95.default.bool,
  onViewChange: import_prop_types95.default.func.isRequired,
  sx: import_prop_types95.default.oneOfType([import_prop_types95.default.arrayOf(import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.object, import_prop_types95.default.bool])), import_prop_types95.default.func, import_prop_types95.default.object]),
  timeIcon: import_prop_types95.default.node,
  view: import_prop_types95.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React144 = __toESM(require_react());
var import_prop_types96 = __toESM(require_prop_types());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerToolbarClasses.js
init_utils();
function getDateTimePickerToolbarUtilityClass(slot) {
  return generateUtilityClass("MuiDateTimePickerToolbar", slot);
}
var dateTimePickerToolbarClasses = generateUtilityClasses("MuiDateTimePickerToolbar", ["root", "dateContainer", "timeContainer", "timeDigitsContainer", "separator", "timeLabelReverse", "ampmSelection", "ampmLandscape", "ampmLabel"]);

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
var import_jsx_runtime166 = __toESM(require_jsx_runtime());
var import_jsx_runtime167 = __toESM(require_jsx_runtime());
var _excluded101 = ["ampm", "ampmInClock", "value", "onChange", "view", "isLandscape", "onViewChange", "toolbarFormat", "toolbarPlaceholder", "views", "disabled", "readOnly", "toolbarVariant"];
var useUtilityClasses83 = (ownerState) => {
  const {
    classes: classes2,
    theme,
    isLandscape
  } = ownerState;
  const slots = {
    root: ["root"],
    dateContainer: ["dateContainer"],
    timeContainer: ["timeContainer", theme.direction === "rtl" && "timeLabelReverse"],
    timeDigitsContainer: ["timeDigitsContainer", theme.direction === "rtl" && "timeLabelReverse"],
    separator: ["separator"],
    ampmSelection: ["ampmSelection", isLandscape && "ampmLandscape"],
    ampmLabel: ["ampmLabel"]
  };
  return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes2);
};
var DateTimePickerToolbarRoot = styled_default(PickersToolbar, {
  name: "MuiDateTimePickerToolbar",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => ({
  paddingLeft: ownerState.toolbarVariant === "desktop" && !ownerState.isLandscape ? 24 : 16,
  paddingRight: ownerState.toolbarVariant === "desktop" && !ownerState.isLandscape ? 0 : 16,
  borderBottom: ownerState.toolbarVariant === "desktop" ? `1px solid ${(theme.vars || theme).palette.divider}` : void 0,
  borderRight: ownerState.toolbarVariant === "desktop" && ownerState.isLandscape ? `1px solid ${(theme.vars || theme).palette.divider}` : void 0,
  justifyContent: "space-around",
  position: "relative"
}));
DateTimePickerToolbarRoot.propTypes = {
  as: import_prop_types96.default.elementType,
  classes: import_prop_types96.default.object,
  className: import_prop_types96.default.string,
  isLandscape: import_prop_types96.default.bool.isRequired,
  isMobileKeyboardViewOpen: import_prop_types96.default.bool,
  landscapeDirection: import_prop_types96.default.oneOf(["column", "row"]),
  ownerState: import_prop_types96.default.object.isRequired,
  sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object]),
  toggleMobileKeyboardView: import_prop_types96.default.func,
  toolbarTitle: import_prop_types96.default.node,
  viewType: import_prop_types96.default.oneOf(["date", "time"])
};
var DateTimePickerToolbarDateContainer = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "DateContainer",
  overridesResolver: (props, styles5) => styles5.dateContainer
})({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start"
});
var DateTimePickerToolbarTimeContainer = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "TimeContainer",
  overridesResolver: (props, styles5) => styles5.timeContainer
})(({
  theme,
  ownerState
}) => {
  const direction = ownerState.isLandscape && ownerState.toolbarVariant !== "desktop" ? "column" : "row";
  return _extends({
    display: "flex",
    flexDirection: direction
  }, ownerState.toolbarVariant === "desktop" && _extends({}, !ownerState.isLandscape && {
    gap: 9,
    marginRight: 4,
    alignSelf: "flex-end"
  }), theme.direction === "rtl" && {
    flexDirection: `${direction}-reverse`
  });
});
var DateTimePickerToolbarTimeDigitsContainer = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "TimeDigitsContainer",
  overridesResolver: (props, styles5) => styles5.timeDigitsContainer
})(({
  theme,
  ownerState
}) => _extends({
  display: "flex"
}, ownerState.toolbarVariant === "desktop" && {
  gap: 1.5
}, theme.direction === "rtl" && {
  flexDirection: "row-reverse"
}));
DateTimePickerToolbarTimeContainer.propTypes = {
  as: import_prop_types96.default.elementType,
  ownerState: import_prop_types96.default.object.isRequired,
  sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object])
};
var DateTimePickerToolbarSeparator = styled_default(PickersToolbarText, {
  name: "MuiDateTimePickerToolbar",
  slot: "Separator",
  overridesResolver: (props, styles5) => styles5.separator
})(({
  ownerState
}) => ({
  margin: ownerState.toolbarVariant === "desktop" ? 0 : "0 4px 0 2px",
  cursor: "default"
}));
var DateTimePickerToolbarAmPmSelection = styled_default("div", {
  name: "MuiDateTimePickerToolbar",
  slot: "AmPmSelection",
  overridesResolver: (props, styles5) => [{
    [`.${dateTimePickerToolbarClasses.ampmLabel}`]: styles5.ampmLabel
  }, {
    [`&.${dateTimePickerToolbarClasses.ampmLandscape}`]: styles5.ampmLandscape
  }, styles5.ampmSelection]
})(({
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "column",
  marginRight: "auto",
  marginLeft: 12
}, ownerState.isLandscape && {
  margin: "4px 0 auto",
  flexDirection: "row",
  justifyContent: "space-around",
  width: "100%"
}, {
  [`& .${dateTimePickerToolbarClasses.ampmLabel}`]: {
    fontSize: 17
  }
}));
function DateTimePickerToolbar(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDateTimePickerToolbar"
  });
  const {
    ampm,
    ampmInClock,
    value,
    onChange,
    view,
    isLandscape,
    onViewChange,
    toolbarFormat,
    toolbarPlaceholder = "\u2013\u2013",
    views,
    disabled,
    readOnly,
    toolbarVariant = "mobile"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
  const ownerState = props;
  const utils = useUtils();
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(value, ampm, onChange);
  const showAmPmControl = Boolean(ampm && !ampmInClock);
  const isDesktop = toolbarVariant === "desktop";
  const localeText = useLocaleText();
  const theme = useTheme();
  const classes2 = useUtilityClasses83(_extends({}, ownerState, {
    theme
  }));
  const formatHours = (time) => ampm ? utils.format(time, "hours12h") : utils.format(time, "hours24h");
  const dateText = React144.useMemo(() => {
    if (!value) {
      return toolbarPlaceholder;
    }
    if (toolbarFormat) {
      return utils.formatByString(value, toolbarFormat);
    }
    return utils.format(value, "shortDate");
  }, [value, toolbarFormat, toolbarPlaceholder, utils]);
  return (0, import_jsx_runtime167.jsxs)(DateTimePickerToolbarRoot, _extends({
    toolbarTitle: localeText.dateTimePickerToolbarTitle,
    isLandscape,
    className: classes2.root
  }, other, {
    ownerState,
    children: [(0, import_jsx_runtime167.jsxs)(DateTimePickerToolbarDateContainer, {
      className: classes2.dateContainer,
      ownerState,
      children: [views.includes("year") && (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
        tabIndex: -1,
        variant: "subtitle1",
        onClick: () => onViewChange("year"),
        selected: view === "year",
        value: value ? utils.format(value, "year") : "\u2013"
      }), views.includes("day") && (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
        tabIndex: -1,
        variant: isDesktop ? "h5" : "h4",
        onClick: () => onViewChange("day"),
        selected: view === "day",
        value: dateText
      })]
    }), (0, import_jsx_runtime167.jsxs)(DateTimePickerToolbarTimeContainer, {
      className: classes2.timeContainer,
      ownerState,
      children: [(0, import_jsx_runtime167.jsxs)(DateTimePickerToolbarTimeDigitsContainer, {
        className: classes2.timeDigitsContainer,
        ownerState,
        children: [views.includes("hours") && (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
          variant: isDesktop ? "h5" : "h3",
          width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
          onClick: () => onViewChange("hours"),
          selected: view === "hours",
          value: value ? formatHours(value) : "--"
        }), views.includes("minutes") && (0, import_jsx_runtime167.jsxs)(React144.Fragment, {
          children: [(0, import_jsx_runtime166.jsx)(DateTimePickerToolbarSeparator, {
            variant: isDesktop ? "h5" : "h3",
            value: ":",
            className: classes2.separator,
            ownerState
          }), (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
            variant: isDesktop ? "h5" : "h3",
            width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
            onClick: () => onViewChange("minutes"),
            selected: view === "minutes",
            value: value ? utils.format(value, "minutes") : "--"
          })]
        }), views.includes("seconds") && (0, import_jsx_runtime167.jsxs)(React144.Fragment, {
          children: [(0, import_jsx_runtime166.jsx)(DateTimePickerToolbarSeparator, {
            variant: isDesktop ? "h5" : "h3",
            value: ":",
            className: classes2.separator,
            ownerState
          }), (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
            variant: isDesktop ? "h5" : "h3",
            width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : void 0,
            onClick: () => onViewChange("seconds"),
            selected: view === "seconds",
            value: value ? utils.format(value, "seconds") : "--"
          })]
        })]
      }), showAmPmControl && !isDesktop && (0, import_jsx_runtime167.jsxs)(DateTimePickerToolbarAmPmSelection, {
        className: classes2.ampmSelection,
        ownerState,
        children: [(0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
          variant: "subtitle2",
          selected: meridiemMode === "am",
          typographyClassName: classes2.ampmLabel,
          value: formatMeridiem(utils, "am"),
          onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
          disabled
        }), (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
          variant: "subtitle2",
          selected: meridiemMode === "pm",
          typographyClassName: classes2.ampmLabel,
          value: formatMeridiem(utils, "pm"),
          onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
          disabled
        })]
      }), ampm && isDesktop && (0, import_jsx_runtime166.jsx)(PickersToolbarButton, {
        variant: "h5",
        onClick: () => onViewChange("meridiem"),
        selected: view === "meridiem",
        value: value && meridiemMode ? formatMeridiem(utils, meridiemMode) : "--",
        width: MULTI_SECTION_CLOCK_SECTION_WIDTH
      })]
    })]
  }));
}
true ? DateTimePickerToolbar.propTypes = {
  ampm: import_prop_types96.default.bool,
  ampmInClock: import_prop_types96.default.bool,
  classes: import_prop_types96.default.object,
  className: import_prop_types96.default.string,
  disabled: import_prop_types96.default.bool,
  hidden: import_prop_types96.default.bool,
  isLandscape: import_prop_types96.default.bool.isRequired,
  onChange: import_prop_types96.default.func.isRequired,
  onViewChange: import_prop_types96.default.func.isRequired,
  readOnly: import_prop_types96.default.bool,
  sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object]),
  titleId: import_prop_types96.default.string,
  toolbarFormat: import_prop_types96.default.string,
  toolbarPlaceholder: import_prop_types96.default.node,
  toolbarVariant: import_prop_types96.default.oneOf(["desktop", "mobile"]),
  value: import_prop_types96.default.any,
  view: import_prop_types96.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired,
  views: import_prop_types96.default.arrayOf(import_prop_types96.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
function useDateTimePickerDefaultizedProps(props, name) {
  var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$orientati, _themeProps$disableIg, _themeProps$disableFu, _themeProps$disablePa, _themeProps$minDateTi, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps2({
    props,
    name
  });
  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
  const localeText = React145.useMemo(() => {
    var _themeProps$localeTex;
    if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
      return themeProps.localeText;
    }
    return _extends({}, themeProps.localeText, {
      dateTimePickerToolbarTitle: themeProps.localeText.toolbarTitle
    });
  }, [themeProps.localeText]);
  const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
  const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
  return _extends({}, themeProps, applyDefaultViewProps({
    views: themeProps.views,
    openTo: themeProps.openTo,
    defaultViews: ["year", "day", "hours", "minutes"],
    defaultOpenTo: "day"
  }), {
    ampm,
    localeText,
    orientation: (_themeProps$orientati = themeProps.orientation) != null ? _themeProps$orientati : "portrait",
    disableIgnoringDatePartForTimeValidation: (_themeProps$disableIg = themeProps.disableIgnoringDatePartForTimeValidation) != null ? _themeProps$disableIg : Boolean(themeProps.minDateTime || themeProps.maxDateTime || themeProps.disablePast || themeProps.disableFuture),
    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
    minDate: applyDefaultDate(utils, (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate, defaultDates.maxDate),
    minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
    maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime,
    slots: _extends({
      toolbar: DateTimePickerToolbar,
      tabs: DateTimePickerTabs
    }, slots),
    slotProps: _extends({}, slotProps, {
      toolbar: _extends({
        ampm
      }, slotProps == null ? void 0 : slotProps.toolbar)
    })
  });
}

// node_modules/@mui/x-date-pickers/dateViewRenderers/dateViewRenderers.js
var React153 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React152 = __toESM(require_react());
var import_prop_types100 = __toESM(require_prop_types());
init_utils4();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.js
var React146 = __toESM(require_react());
init_esm2();
init_Fade();
init_styles();
init_composeClasses();

// node_modules/@mui/x-date-pickers/DateCalendar/pickersFadeTransitionGroupClasses.js
init_utils();
var getPickersFadeTransitionGroupUtilityClass = (slot) => generateUtilityClass("MuiPickersFadeTransitionGroup", slot);
var pickersFadeTransitionGroupClasses = generateUtilityClasses("MuiPickersFadeTransitionGroup", ["root"]);

// node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.js
var import_jsx_runtime168 = __toESM(require_jsx_runtime());
var useUtilityClasses84 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes2);
};
var PickersFadeTransitionGroupRoot = styled_default(TransitionGroup_default, {
  name: "MuiPickersFadeTransitionGroup",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})({
  display: "block",
  position: "relative"
});
function PickersFadeTransitionGroup(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersFadeTransitionGroup"
  });
  const {
    children,
    className,
    reduceAnimations,
    transKey
  } = props;
  const classes2 = useUtilityClasses84(props);
  const theme = useTheme();
  if (reduceAnimations) {
    return children;
  }
  return (0, import_jsx_runtime168.jsx)(PickersFadeTransitionGroupRoot, {
    className: clsx_default2(classes2.root, className),
    children: (0, import_jsx_runtime168.jsx)(Fade_default, {
      appear: false,
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: {
        appear: theme.transitions.duration.enteringScreen,
        enter: theme.transitions.duration.enteringScreen,
        exit: 0
      },
      children
    }, transKey)
  });
}

// node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React148 = __toESM(require_react());
var import_prop_types97 = __toESM(require_prop_types());
init_esm();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.js
init_objectWithoutPropertiesLoose();
init_extends();
var React147 = __toESM(require_react());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/MonthCalendar/pickersMonthClasses.js
init_utils();
function getPickersMonthUtilityClass(slot) {
  return generateUtilityClass("MuiPickersMonth", slot);
}
var pickersMonthClasses = generateUtilityClasses("MuiPickersMonth", ["root", "monthButton", "disabled", "selected"]);

// node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.js
var import_jsx_runtime169 = __toESM(require_jsx_runtime());
var _excluded102 = ["autoFocus", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "aria-label", "monthsPerRow"];
var useUtilityClasses85 = (ownerState) => {
  const {
    disabled,
    selected,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    monthButton: ["monthButton", disabled && "disabled", selected && "selected"]
  };
  return composeClasses(slots, getPickersMonthUtilityClass, classes2);
};
var PickersMonthRoot = styled_default("div", {
  name: "MuiPickersMonth",
  slot: "Root",
  overridesResolver: (_4, styles5) => [styles5.root]
})(({
  ownerState
}) => ({
  flexBasis: ownerState.monthsPerRow === 3 ? "33.3%" : "25%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center"
}));
var PickersMonthButton = styled_default("button", {
  name: "MuiPickersMonth",
  slot: "MonthButton",
  overridesResolver: (_4, styles5) => [styles5.monthButton, {
    [`&.${pickersMonthClasses.disabled}`]: styles5.disabled
  }, {
    [`&.${pickersMonthClasses.selected}`]: styles5.selected
  }]
})(({
  theme
}) => _extends({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, theme.typography.subtitle1, {
  margin: "8px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${pickersMonthClasses.disabled}`]: {
    color: (theme.vars || theme).palette.text.secondary
  },
  [`&.${pickersMonthClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText,
    backgroundColor: (theme.vars || theme).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  }
}));
var PickersMonth = React147.memo(function PickersMonth2(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersMonth"
  });
  const {
    autoFocus,
    children,
    disabled,
    selected,
    value,
    tabIndex,
    onClick: onClick2,
    onKeyDown,
    onFocus,
    onBlur,
    "aria-current": ariaCurrent,
    "aria-label": ariaLabel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded102);
  const ref = React147.useRef(null);
  const classes2 = useUtilityClasses85(props);
  useEnhancedEffect_default(() => {
    if (autoFocus) {
      var _ref$current;
      (_ref$current = ref.current) == null || _ref$current.focus();
    }
  }, [autoFocus]);
  return (0, import_jsx_runtime169.jsx)(PickersMonthRoot, _extends({
    className: classes2.root,
    ownerState: props
  }, other, {
    children: (0, import_jsx_runtime169.jsx)(PickersMonthButton, {
      ref,
      disabled,
      type: "button",
      role: "radio",
      tabIndex: disabled ? -1 : tabIndex,
      "aria-current": ariaCurrent,
      "aria-checked": selected,
      "aria-label": ariaLabel,
      onClick: (event) => onClick2(event, value),
      onKeyDown: (event) => onKeyDown(event, value),
      onFocus: (event) => onFocus(event, value),
      onBlur: (event) => onBlur(event, value),
      className: classes2.monthButton,
      ownerState: props,
      children
    })
  }));
});

// node_modules/@mui/x-date-pickers/MonthCalendar/monthCalendarClasses.js
init_utils();
function getMonthCalendarUtilityClass(slot) {
  return generateUtilityClass("MuiMonthCalendar", slot);
}
var monthCalendarClasses = generateUtilityClasses("MuiMonthCalendar", ["root"]);

// node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.js
var import_jsx_runtime170 = __toESM(require_jsx_runtime());
var _excluded103 = ["className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow", "timezone", "gridLabelId"];
var useUtilityClasses86 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getMonthCalendarUtilityClass, classes2);
};
function useMonthCalendarDefaultizedProps(props, name) {
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps2({
    props,
    name
  });
  return _extends({
    disableFuture: false,
    disablePast: false
  }, themeProps, {
    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
  });
}
var MonthCalendarRoot = styled_default("div", {
  name: "MuiMonthCalendar",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  display: "flex",
  flexWrap: "wrap",
  alignContent: "stretch",
  padding: "0 4px",
  width: DIALOG_WIDTH,
  boxSizing: "border-box"
});
var MonthCalendar = React148.forwardRef(function MonthCalendar2(inProps, ref) {
  const props = useMonthCalendarDefaultizedProps(inProps, "MuiMonthCalendar");
  const {
    className,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onChange,
    shouldDisableMonth,
    readOnly,
    disableHighlightToday,
    autoFocus = false,
    onMonthFocus,
    hasFocus,
    onFocusedViewChange,
    monthsPerRow = 3,
    timezone: timezoneProp,
    gridLabelId
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded103);
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "MonthCalendar",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const now2 = useNow(timezone);
  const theme = useTheme_default();
  const utils = useUtils();
  const referenceDate = React148.useMemo(
    () => singleItemValueManager.getInitialReferenceValue({
      value,
      utils,
      props,
      timezone,
      referenceDate: referenceDateProp,
      granularity: SECTION_TYPE_GRANULARITY.month
    }),
    []
  );
  const ownerState = props;
  const classes2 = useUtilityClasses86(ownerState);
  const todayMonth = React148.useMemo(() => utils.getMonth(now2), [utils, now2]);
  const selectedMonth = React148.useMemo(() => {
    if (value != null) {
      return utils.getMonth(value);
    }
    if (disableHighlightToday) {
      return null;
    }
    return utils.getMonth(referenceDate);
  }, [value, utils, disableHighlightToday, referenceDate]);
  const [focusedMonth, setFocusedMonth] = React148.useState(() => selectedMonth || todayMonth);
  const [internalHasFocus, setInternalHasFocus] = useControlled({
    name: "MonthCalendar",
    state: "hasFocus",
    controlled: hasFocus,
    default: autoFocus != null ? autoFocus : false
  });
  const changeHasFocus = useEventCallback_default((newHasFocus) => {
    setInternalHasFocus(newHasFocus);
    if (onFocusedViewChange) {
      onFocusedViewChange(newHasFocus);
    }
  });
  const isMonthDisabled = React148.useCallback((dateToValidate) => {
    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now2, minDate) ? now2 : minDate);
    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now2, maxDate) ? now2 : maxDate);
    const monthToValidate = utils.startOfMonth(dateToValidate);
    if (utils.isBefore(monthToValidate, firstEnabledMonth)) {
      return true;
    }
    if (utils.isAfter(monthToValidate, lastEnabledMonth)) {
      return true;
    }
    if (!shouldDisableMonth) {
      return false;
    }
    return shouldDisableMonth(monthToValidate);
  }, [disableFuture, disablePast, maxDate, minDate, now2, shouldDisableMonth, utils]);
  const handleMonthSelection = useEventCallback_default((event, month) => {
    if (readOnly) {
      return;
    }
    const newDate = utils.setMonth(value != null ? value : referenceDate, month);
    handleValueChange(newDate);
  });
  const focusMonth = useEventCallback_default((month) => {
    if (!isMonthDisabled(utils.setMonth(value != null ? value : referenceDate, month))) {
      setFocusedMonth(month);
      changeHasFocus(true);
      if (onMonthFocus) {
        onMonthFocus(month);
      }
    }
  });
  React148.useEffect(() => {
    setFocusedMonth((prevFocusedMonth) => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
  }, [selectedMonth]);
  const handleKeyDown = useEventCallback_default((event, month) => {
    const monthsInYear = 12;
    const monthsInRow = 3;
    switch (event.key) {
      case "ArrowUp":
        focusMonth((monthsInYear + month - monthsInRow) % monthsInYear);
        event.preventDefault();
        break;
      case "ArrowDown":
        focusMonth((monthsInYear + month + monthsInRow) % monthsInYear);
        event.preventDefault();
        break;
      case "ArrowLeft":
        focusMonth((monthsInYear + month + (theme.direction === "ltr" ? -1 : 1)) % monthsInYear);
        event.preventDefault();
        break;
      case "ArrowRight":
        focusMonth((monthsInYear + month + (theme.direction === "ltr" ? 1 : -1)) % monthsInYear);
        event.preventDefault();
        break;
      default:
        break;
    }
  });
  const handleMonthFocus = useEventCallback_default((event, month) => {
    focusMonth(month);
  });
  const handleMonthBlur = useEventCallback_default((event, month) => {
    if (focusedMonth === month) {
      changeHasFocus(false);
    }
  });
  return (0, import_jsx_runtime170.jsx)(MonthCalendarRoot, _extends({
    ref,
    className: clsx_default2(classes2.root, className),
    ownerState,
    role: "radiogroup",
    "aria-labelledby": gridLabelId
  }, other, {
    children: getMonthsInYear(utils, value != null ? value : referenceDate).map((month) => {
      const monthNumber = utils.getMonth(month);
      const monthText = utils.format(month, "monthShort");
      const monthLabel = utils.format(month, "month");
      const isSelected = monthNumber === selectedMonth;
      const isDisabled = disabled || isMonthDisabled(month);
      return (0, import_jsx_runtime170.jsx)(PickersMonth, {
        selected: isSelected,
        value: monthNumber,
        onClick: handleMonthSelection,
        onKeyDown: handleKeyDown,
        autoFocus: internalHasFocus && monthNumber === focusedMonth,
        disabled: isDisabled,
        tabIndex: monthNumber === focusedMonth ? 0 : -1,
        onFocus: handleMonthFocus,
        onBlur: handleMonthBlur,
        "aria-current": todayMonth === monthNumber ? "date" : void 0,
        "aria-label": monthLabel,
        monthsPerRow,
        children: monthText
      }, monthText);
    })
  }));
});
true ? MonthCalendar.propTypes = {
  autoFocus: import_prop_types97.default.bool,
  classes: import_prop_types97.default.object,
  className: import_prop_types97.default.string,
  defaultValue: import_prop_types97.default.any,
  disabled: import_prop_types97.default.bool,
  disableFuture: import_prop_types97.default.bool,
  disableHighlightToday: import_prop_types97.default.bool,
  disablePast: import_prop_types97.default.bool,
  gridLabelId: import_prop_types97.default.string,
  hasFocus: import_prop_types97.default.bool,
  maxDate: import_prop_types97.default.any,
  minDate: import_prop_types97.default.any,
  monthsPerRow: import_prop_types97.default.oneOf([3, 4]),
  onChange: import_prop_types97.default.func,
  onFocusedViewChange: import_prop_types97.default.func,
  onMonthFocus: import_prop_types97.default.func,
  readOnly: import_prop_types97.default.bool,
  referenceDate: import_prop_types97.default.any,
  shouldDisableMonth: import_prop_types97.default.func,
  sx: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object, import_prop_types97.default.bool])), import_prop_types97.default.func, import_prop_types97.default.object]),
  timezone: import_prop_types97.default.string,
  value: import_prop_types97.default.any
} : void 0;

// node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React150 = __toESM(require_react());
var import_prop_types98 = __toESM(require_prop_types());
init_esm();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.js
init_objectWithoutPropertiesLoose();
init_extends();
var React149 = __toESM(require_react());
init_utils();
init_styles();

// node_modules/@mui/x-date-pickers/YearCalendar/pickersYearClasses.js
init_utils();
function getPickersYearUtilityClass(slot) {
  return generateUtilityClass("MuiPickersYear", slot);
}
var pickersYearClasses = generateUtilityClasses("MuiPickersYear", ["root", "yearButton", "selected", "disabled"]);

// node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.js
var import_jsx_runtime171 = __toESM(require_jsx_runtime());
var _excluded104 = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "yearsPerRow"];
var useUtilityClasses87 = (ownerState) => {
  const {
    disabled,
    selected,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    yearButton: ["yearButton", disabled && "disabled", selected && "selected"]
  };
  return composeClasses(slots, getPickersYearUtilityClass, classes2);
};
var PickersYearRoot = styled_default("div", {
  name: "MuiPickersYear",
  slot: "Root",
  overridesResolver: (_4, styles5) => [styles5.root]
})(({
  ownerState
}) => ({
  flexBasis: ownerState.yearsPerRow === 3 ? "33.3%" : "25%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center"
}));
var PickersYearButton = styled_default("button", {
  name: "MuiPickersYear",
  slot: "YearButton",
  overridesResolver: (_4, styles5) => [styles5.yearButton, {
    [`&.${pickersYearClasses.disabled}`]: styles5.disabled
  }, {
    [`&.${pickersYearClasses.selected}`]: styles5.selected
  }]
})(({
  theme
}) => _extends({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, theme.typography.subtitle1, {
  margin: "6px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.action.active, theme.palette.action.focusOpacity)
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${pickersYearClasses.disabled}`]: {
    color: (theme.vars || theme).palette.text.secondary
  },
  [`&.${pickersYearClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText,
    backgroundColor: (theme.vars || theme).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  }
}));
var PickersYear = React149.memo(function PickersYear2(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersYear"
  });
  const {
    autoFocus,
    className,
    children,
    disabled,
    selected,
    value,
    tabIndex,
    onClick: onClick2,
    onKeyDown,
    onFocus,
    onBlur,
    "aria-current": ariaCurrent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
  const ref = React149.useRef(null);
  const classes2 = useUtilityClasses87(props);
  React149.useEffect(() => {
    if (autoFocus) {
      ref.current.focus();
    }
  }, [autoFocus]);
  return (0, import_jsx_runtime171.jsx)(PickersYearRoot, _extends({
    className: clsx_default2(classes2.root, className),
    ownerState: props
  }, other, {
    children: (0, import_jsx_runtime171.jsx)(PickersYearButton, {
      ref,
      disabled,
      type: "button",
      role: "radio",
      tabIndex: disabled ? -1 : tabIndex,
      "aria-current": ariaCurrent,
      "aria-checked": selected,
      onClick: (event) => onClick2(event, value),
      onKeyDown: (event) => onKeyDown(event, value),
      onFocus: (event) => onFocus(event, value),
      onBlur: (event) => onBlur(event, value),
      className: classes2.yearButton,
      ownerState: props,
      children
    })
  }));
});

// node_modules/@mui/x-date-pickers/YearCalendar/yearCalendarClasses.js
init_utils();
function getYearCalendarUtilityClass(slot) {
  return generateUtilityClass("MuiYearCalendar", slot);
}
var yearCalendarClasses = generateUtilityClasses("MuiYearCalendar", ["root"]);

// node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.js
var import_jsx_runtime172 = __toESM(require_jsx_runtime());
var _excluded105 = ["autoFocus", "className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsPerRow", "timezone", "gridLabelId"];
var useUtilityClasses88 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getYearCalendarUtilityClass, classes2);
};
function useYearCalendarDefaultizedProps(props, name) {
  var _themeProps$yearsPerR;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps2({
    props,
    name
  });
  return _extends({
    disablePast: false,
    disableFuture: false
  }, themeProps, {
    yearsPerRow: (_themeProps$yearsPerR = themeProps.yearsPerRow) != null ? _themeProps$yearsPerR : 3,
    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
  });
}
var YearCalendarRoot = styled_default("div", {
  name: "MuiYearCalendar",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  display: "flex",
  flexDirection: "row",
  flexWrap: "wrap",
  overflowY: "auto",
  height: "100%",
  padding: "0 4px",
  width: DIALOG_WIDTH,
  maxHeight: MAX_CALENDAR_HEIGHT,
  boxSizing: "border-box",
  position: "relative"
});
var YearCalendar = React150.forwardRef(function YearCalendar2(inProps, ref) {
  const props = useYearCalendarDefaultizedProps(inProps, "MuiYearCalendar");
  const {
    autoFocus,
    className,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onChange,
    readOnly,
    shouldDisableYear,
    disableHighlightToday,
    onYearFocus,
    hasFocus,
    onFocusedViewChange,
    yearsPerRow,
    timezone: timezoneProp,
    gridLabelId
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded105);
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "YearCalendar",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const now2 = useNow(timezone);
  const theme = useTheme_default();
  const utils = useUtils();
  const referenceDate = React150.useMemo(
    () => singleItemValueManager.getInitialReferenceValue({
      value,
      utils,
      props,
      timezone,
      referenceDate: referenceDateProp,
      granularity: SECTION_TYPE_GRANULARITY.year
    }),
    []
  );
  const ownerState = props;
  const classes2 = useUtilityClasses88(ownerState);
  const todayYear = React150.useMemo(() => utils.getYear(now2), [utils, now2]);
  const selectedYear = React150.useMemo(() => {
    if (value != null) {
      return utils.getYear(value);
    }
    if (disableHighlightToday) {
      return null;
    }
    return utils.getYear(referenceDate);
  }, [value, utils, disableHighlightToday, referenceDate]);
  const [focusedYear, setFocusedYear] = React150.useState(() => selectedYear || todayYear);
  const [internalHasFocus, setInternalHasFocus] = useControlled({
    name: "YearCalendar",
    state: "hasFocus",
    controlled: hasFocus,
    default: autoFocus != null ? autoFocus : false
  });
  const changeHasFocus = useEventCallback_default((newHasFocus) => {
    setInternalHasFocus(newHasFocus);
    if (onFocusedViewChange) {
      onFocusedViewChange(newHasFocus);
    }
  });
  const isYearDisabled = React150.useCallback((dateToValidate) => {
    if (disablePast && utils.isBeforeYear(dateToValidate, now2)) {
      return true;
    }
    if (disableFuture && utils.isAfterYear(dateToValidate, now2)) {
      return true;
    }
    if (minDate && utils.isBeforeYear(dateToValidate, minDate)) {
      return true;
    }
    if (maxDate && utils.isAfterYear(dateToValidate, maxDate)) {
      return true;
    }
    if (!shouldDisableYear) {
      return false;
    }
    const yearToValidate = utils.startOfYear(dateToValidate);
    return shouldDisableYear(yearToValidate);
  }, [disableFuture, disablePast, maxDate, minDate, now2, shouldDisableYear, utils]);
  const handleYearSelection = useEventCallback_default((event, year) => {
    if (readOnly) {
      return;
    }
    const newDate = utils.setYear(value != null ? value : referenceDate, year);
    handleValueChange(newDate);
  });
  const focusYear = useEventCallback_default((year) => {
    if (!isYearDisabled(utils.setYear(value != null ? value : referenceDate, year))) {
      setFocusedYear(year);
      changeHasFocus(true);
      onYearFocus == null || onYearFocus(year);
    }
  });
  React150.useEffect(() => {
    setFocusedYear((prevFocusedYear) => selectedYear !== null && prevFocusedYear !== selectedYear ? selectedYear : prevFocusedYear);
  }, [selectedYear]);
  const handleKeyDown = useEventCallback_default((event, year) => {
    switch (event.key) {
      case "ArrowUp":
        focusYear(year - yearsPerRow);
        event.preventDefault();
        break;
      case "ArrowDown":
        focusYear(year + yearsPerRow);
        event.preventDefault();
        break;
      case "ArrowLeft":
        focusYear(year + (theme.direction === "ltr" ? -1 : 1));
        event.preventDefault();
        break;
      case "ArrowRight":
        focusYear(year + (theme.direction === "ltr" ? 1 : -1));
        event.preventDefault();
        break;
      default:
        break;
    }
  });
  const handleYearFocus = useEventCallback_default((event, year) => {
    focusYear(year);
  });
  const handleYearBlur = useEventCallback_default((event, year) => {
    if (focusedYear === year) {
      changeHasFocus(false);
    }
  });
  const scrollerRef = React150.useRef(null);
  const handleRef = useForkRef(ref, scrollerRef);
  React150.useEffect(() => {
    if (autoFocus || scrollerRef.current === null) {
      return;
    }
    const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');
    if (!tabbableButton) {
      return;
    }
    const offsetHeight = tabbableButton.offsetHeight;
    const offsetTop = tabbableButton.offsetTop;
    const clientHeight = scrollerRef.current.clientHeight;
    const scrollTop = scrollerRef.current.scrollTop;
    const elementBottom = offsetTop + offsetHeight;
    if (offsetHeight > clientHeight || offsetTop < scrollTop) {
      return;
    }
    scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
  }, [autoFocus]);
  return (0, import_jsx_runtime172.jsx)(YearCalendarRoot, _extends({
    ref: handleRef,
    className: clsx_default2(classes2.root, className),
    ownerState,
    role: "radiogroup",
    "aria-labelledby": gridLabelId
  }, other, {
    children: utils.getYearRange(minDate, maxDate).map((year) => {
      const yearNumber = utils.getYear(year);
      const isSelected = yearNumber === selectedYear;
      const isDisabled = disabled || isYearDisabled(year);
      return (0, import_jsx_runtime172.jsx)(PickersYear, {
        selected: isSelected,
        value: yearNumber,
        onClick: handleYearSelection,
        onKeyDown: handleKeyDown,
        autoFocus: internalHasFocus && yearNumber === focusedYear,
        disabled: isDisabled,
        tabIndex: yearNumber === focusedYear ? 0 : -1,
        onFocus: handleYearFocus,
        onBlur: handleYearBlur,
        "aria-current": todayYear === yearNumber ? "date" : void 0,
        yearsPerRow,
        children: utils.format(year, "year")
      }, utils.format(year, "year"));
    })
  }));
});
true ? YearCalendar.propTypes = {
  autoFocus: import_prop_types98.default.bool,
  classes: import_prop_types98.default.object,
  className: import_prop_types98.default.string,
  defaultValue: import_prop_types98.default.any,
  disabled: import_prop_types98.default.bool,
  disableFuture: import_prop_types98.default.bool,
  disableHighlightToday: import_prop_types98.default.bool,
  disablePast: import_prop_types98.default.bool,
  gridLabelId: import_prop_types98.default.string,
  hasFocus: import_prop_types98.default.bool,
  maxDate: import_prop_types98.default.any,
  minDate: import_prop_types98.default.any,
  onChange: import_prop_types98.default.func,
  onFocusedViewChange: import_prop_types98.default.func,
  onYearFocus: import_prop_types98.default.func,
  readOnly: import_prop_types98.default.bool,
  referenceDate: import_prop_types98.default.any,
  shouldDisableYear: import_prop_types98.default.func,
  sx: import_prop_types98.default.oneOfType([import_prop_types98.default.arrayOf(import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object, import_prop_types98.default.bool])), import_prop_types98.default.func, import_prop_types98.default.object]),
  timezone: import_prop_types98.default.string,
  value: import_prop_types98.default.any,
  yearsPerRow: import_prop_types98.default.oneOf([3, 4])
} : void 0;

// node_modules/@mui/x-date-pickers/PickersCalendarHeader/pickersCalendarHeaderClasses.js
init_utils();
var getPickersCalendarHeaderUtilityClass = (slot) => generateUtilityClass("MuiPickersCalendarHeader", slot);
var pickersCalendarHeaderClasses = generateUtilityClasses("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);

// node_modules/@mui/x-date-pickers/PickersCalendarHeader/PickersCalendarHeader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React151 = __toESM(require_react());
var import_prop_types99 = __toESM(require_prop_types());
init_Fade();
init_styles();
init_utils4();
init_utils();
init_IconButton();
var import_jsx_runtime173 = __toESM(require_jsx_runtime());
var import_jsx_runtime174 = __toESM(require_jsx_runtime());
var _excluded106 = ["slots", "slotProps", "components", "componentsProps", "currentMonth", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onMonthChange", "onViewChange", "view", "reduceAnimations", "views", "labelId", "className", "timezone"];
var _excluded222 = ["ownerState"];
var useUtilityClasses89 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    labelContainer: ["labelContainer"],
    label: ["label"],
    switchViewButton: ["switchViewButton"],
    switchViewIcon: ["switchViewIcon"]
  };
  return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes2);
};
var PickersCalendarHeaderRoot = styled_default("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})({
  display: "flex",
  alignItems: "center",
  marginTop: 16,
  marginBottom: 8,
  paddingLeft: 24,
  paddingRight: 12,
  maxHeight: 30,
  minHeight: 30
});
var PickersCalendarHeaderLabelContainer = styled_default("div", {
  name: "MuiPickersCalendarHeader",
  slot: "LabelContainer",
  overridesResolver: (_4, styles5) => styles5.labelContainer
})(({
  theme
}) => _extends({
  display: "flex",
  overflow: "hidden",
  alignItems: "center",
  cursor: "pointer",
  marginRight: "auto"
}, theme.typography.body1, {
  fontWeight: theme.typography.fontWeightMedium
}));
var PickersCalendarHeaderLabel = styled_default("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Label",
  overridesResolver: (_4, styles5) => styles5.label
})({
  marginRight: 6
});
var PickersCalendarHeaderSwitchViewButton = styled_default(IconButton_default, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewButton",
  overridesResolver: (_4, styles5) => styles5.switchViewButton
})(({
  ownerState
}) => _extends({
  marginRight: "auto"
}, ownerState.view === "year" && {
  [`.${pickersCalendarHeaderClasses.switchViewIcon}`]: {
    transform: "rotate(180deg)"
  }
}));
var PickersCalendarHeaderSwitchViewIcon = styled_default(ArrowDropDownIcon, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewIcon",
  overridesResolver: (_4, styles5) => styles5.switchViewIcon
})(({
  theme
}) => ({
  willChange: "transform",
  transition: theme.transitions.create("transform"),
  transform: "rotate(0deg)"
}));
var PickersCalendarHeader = React151.forwardRef(function PickersCalendarHeader2(inProps, ref) {
  var _ref, _slots$switchViewButt, _ref2, _slots$switchViewIcon;
  const localeText = useLocaleText();
  const utils = useUtils();
  const props = useThemeProps2({
    props: inProps,
    name: "MuiPickersCalendarHeader"
  });
  const {
    slots,
    slotProps,
    components,
    currentMonth: month,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onMonthChange,
    onViewChange,
    view,
    reduceAnimations,
    views,
    labelId,
    className,
    timezone
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
  const ownerState = props;
  const classes2 = useUtilityClasses89(props);
  const SwitchViewButton = (_ref = (_slots$switchViewButt = slots == null ? void 0 : slots.switchViewButton) != null ? _slots$switchViewButt : components == null ? void 0 : components.SwitchViewButton) != null ? _ref : PickersCalendarHeaderSwitchViewButton;
  const switchViewButtonProps = useSlotProps({
    elementType: SwitchViewButton,
    externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewButton,
    additionalProps: {
      size: "small",
      "aria-label": localeText.calendarViewSwitchingButtonAriaLabel(view)
    },
    ownerState,
    className: classes2.switchViewButton
  });
  const SwitchViewIcon = (_ref2 = (_slots$switchViewIcon = slots == null ? void 0 : slots.switchViewIcon) != null ? _slots$switchViewIcon : components == null ? void 0 : components.SwitchViewIcon) != null ? _ref2 : PickersCalendarHeaderSwitchViewIcon;
  const _useSlotProps = useSlotProps({
    elementType: SwitchViewIcon,
    externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewIcon,
    ownerState: void 0,
    className: classes2.switchViewIcon
  }), switchViewIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded222);
  const selectNextMonth = () => onMonthChange(utils.addMonths(month, 1), "left");
  const selectPreviousMonth = () => onMonthChange(utils.addMonths(month, -1), "right");
  const isNextMonthDisabled = useNextMonthDisabled(month, {
    disableFuture,
    maxDate,
    timezone
  });
  const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
    disablePast,
    minDate,
    timezone
  });
  const handleToggleView = () => {
    if (views.length === 1 || !onViewChange || disabled) {
      return;
    }
    if (views.length === 2) {
      onViewChange(views.find((el) => el !== view) || views[0]);
    } else {
      const nextIndexToOpen = views.indexOf(view) !== 0 ? 0 : 1;
      onViewChange(views[nextIndexToOpen]);
    }
  };
  if (views.length === 1 && views[0] === "year") {
    return null;
  }
  return (0, import_jsx_runtime174.jsxs)(PickersCalendarHeaderRoot, _extends({}, other, {
    ownerState,
    className: clsx_default2(className, classes2.root),
    ref,
    children: [(0, import_jsx_runtime174.jsxs)(PickersCalendarHeaderLabelContainer, {
      role: "presentation",
      onClick: handleToggleView,
      ownerState,
      "aria-live": "polite",
      className: classes2.labelContainer,
      children: [(0, import_jsx_runtime173.jsx)(PickersFadeTransitionGroup, {
        reduceAnimations,
        transKey: utils.format(month, "monthAndYear"),
        children: (0, import_jsx_runtime173.jsx)(PickersCalendarHeaderLabel, {
          id: labelId,
          ownerState,
          className: classes2.label,
          children: utils.format(month, "monthAndYear")
        })
      }), views.length > 1 && !disabled && (0, import_jsx_runtime173.jsx)(SwitchViewButton, _extends({}, switchViewButtonProps, {
        children: (0, import_jsx_runtime173.jsx)(SwitchViewIcon, _extends({}, switchViewIconProps))
      }))]
    }), (0, import_jsx_runtime173.jsx)(Fade_default, {
      in: view === "day",
      children: (0, import_jsx_runtime173.jsx)(PickersArrowSwitcher, {
        slots,
        slotProps,
        onGoToPrevious: selectPreviousMonth,
        isPreviousDisabled: isPreviousMonthDisabled,
        previousLabel: localeText.previousMonth,
        onGoToNext: selectNextMonth,
        isNextDisabled: isNextMonthDisabled,
        nextLabel: localeText.nextMonth
      })
    })]
  }));
});
true ? PickersCalendarHeader.propTypes = {
  classes: import_prop_types99.default.object,
  className: import_prop_types99.default.string,
  components: import_prop_types99.default.object,
  componentsProps: import_prop_types99.default.object,
  currentMonth: import_prop_types99.default.any.isRequired,
  disabled: import_prop_types99.default.bool,
  disableFuture: import_prop_types99.default.bool,
  disablePast: import_prop_types99.default.bool,
  labelId: import_prop_types99.default.string,
  maxDate: import_prop_types99.default.any.isRequired,
  minDate: import_prop_types99.default.any.isRequired,
  onMonthChange: import_prop_types99.default.func.isRequired,
  onViewChange: import_prop_types99.default.func,
  reduceAnimations: import_prop_types99.default.bool.isRequired,
  slotProps: import_prop_types99.default.object,
  slots: import_prop_types99.default.object,
  sx: import_prop_types99.default.oneOfType([import_prop_types99.default.arrayOf(import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object, import_prop_types99.default.bool])), import_prop_types99.default.func, import_prop_types99.default.object]),
  timezone: import_prop_types99.default.string.isRequired,
  view: import_prop_types99.default.oneOf(["day", "month", "year"]).isRequired,
  views: import_prop_types99.default.arrayOf(import_prop_types99.default.oneOf(["day", "month", "year"]).isRequired).isRequired
} : void 0;

// node_modules/@mui/x-date-pickers/internals/components/PickerViewRoot/PickerViewRoot.js
init_styles();
var PickerViewRoot = styled_default("div")({
  overflow: "hidden",
  width: DIALOG_WIDTH,
  maxHeight: VIEW_HEIGHT,
  display: "flex",
  flexDirection: "column",
  margin: "0 auto"
});

// node_modules/@mui/x-date-pickers/DateCalendar/dateCalendarClasses.js
init_utils();
var getDateCalendarUtilityClass = (slot) => generateUtilityClass("MuiDateCalendar", slot);
var dateCalendarClasses = generateUtilityClasses("MuiDateCalendar", ["root", "viewTransitionContainer"]);

// node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.js
var import_jsx_runtime175 = __toESM(require_jsx_runtime());
var import_jsx_runtime176 = __toESM(require_jsx_runtime());
var _excluded107 = ["autoFocus", "onViewChange", "value", "defaultValue", "referenceDate", "disableFuture", "disablePast", "defaultCalendarMonth", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "components", "componentsProps", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsPerRow", "monthsPerRow", "timezone"];
var useUtilityClasses90 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    viewTransitionContainer: ["viewTransitionContainer"]
  };
  return composeClasses(slots, getDateCalendarUtilityClass, classes2);
};
function useDateCalendarDefaultizedProps(props, name) {
  var _themeProps$loading, _themeProps$disablePa, _themeProps$disableFu, _themeProps$openTo, _themeProps$views, _themeProps$reduceAni, _themeProps$renderLoa;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const defaultReduceAnimations = useDefaultReduceAnimations();
  const themeProps = useThemeProps2({
    props,
    name
  });
  return _extends({}, themeProps, {
    loading: (_themeProps$loading = themeProps.loading) != null ? _themeProps$loading : false,
    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
    openTo: (_themeProps$openTo = themeProps.openTo) != null ? _themeProps$openTo : "day",
    views: (_themeProps$views = themeProps.views) != null ? _themeProps$views : ["year", "day"],
    reduceAnimations: (_themeProps$reduceAni = themeProps.reduceAnimations) != null ? _themeProps$reduceAni : defaultReduceAnimations,
    renderLoading: (_themeProps$renderLoa = themeProps.renderLoading) != null ? _themeProps$renderLoa : () => (0, import_jsx_runtime175.jsx)("span", {
      children: "..."
    }),
    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
  });
}
var DateCalendarRoot = styled_default(PickerViewRoot, {
  name: "MuiDateCalendar",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  display: "flex",
  flexDirection: "column",
  height: VIEW_HEIGHT
});
var DateCalendarViewTransitionContainer = styled_default(PickersFadeTransitionGroup, {
  name: "MuiDateCalendar",
  slot: "ViewTransitionContainer",
  overridesResolver: (props, styles5) => styles5.viewTransitionContainer
})({});
var DateCalendar = React152.forwardRef(function DateCalendar2(inProps, ref) {
  var _ref, _slots$calendarHeader, _slotProps$calendarHe;
  const utils = useUtils();
  const id = useId();
  const props = useDateCalendarDefaultizedProps(inProps, "MuiDateCalendar");
  const {
    autoFocus,
    onViewChange,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableFuture,
    disablePast,
    defaultCalendarMonth,
    onChange,
    onYearChange,
    onMonthChange,
    reduceAnimations,
    shouldDisableDate,
    shouldDisableMonth,
    shouldDisableYear,
    view: inView,
    views,
    openTo,
    className,
    disabled,
    readOnly,
    minDate,
    maxDate,
    disableHighlightToday,
    focusedView: inFocusedView,
    onFocusedViewChange,
    showDaysOutsideCurrentMonth,
    fixedWeekNumber,
    dayOfWeekFormatter,
    components,
    componentsProps,
    slots,
    slotProps,
    loading,
    renderLoading,
    displayWeekNumber,
    yearsPerRow,
    monthsPerRow,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded107);
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "DateCalendar",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const {
    view,
    setView,
    focusedView,
    setFocusedView,
    goToNextView,
    setValueAndGoToNextView
  } = useViews({
    view: inView,
    views,
    openTo,
    onChange: handleValueChange,
    onViewChange,
    autoFocus,
    focusedView: inFocusedView,
    onFocusedViewChange
  });
  const {
    referenceDate,
    calendarState,
    changeFocusedDay,
    changeMonth,
    handleChangeMonth,
    isDateDisabled,
    onMonthSwitchingAnimationEnd
  } = useCalendarState({
    value,
    defaultCalendarMonth,
    referenceDate: referenceDateProp,
    reduceAnimations,
    onMonthChange,
    minDate,
    maxDate,
    shouldDisableDate,
    disablePast,
    disableFuture,
    timezone
  });
  const minDateWithDisabled = disabled && value || minDate;
  const maxDateWithDisabled = disabled && value || maxDate;
  const gridLabelId = `${id}-grid-label`;
  const hasFocus = focusedView !== null;
  const CalendarHeader = (_ref = (_slots$calendarHeader = slots == null ? void 0 : slots.calendarHeader) != null ? _slots$calendarHeader : components == null ? void 0 : components.CalendarHeader) != null ? _ref : PickersCalendarHeader;
  const calendarHeaderProps = useSlotProps({
    elementType: CalendarHeader,
    externalSlotProps: (_slotProps$calendarHe = slotProps == null ? void 0 : slotProps.calendarHeader) != null ? _slotProps$calendarHe : componentsProps == null ? void 0 : componentsProps.calendarHeader,
    additionalProps: {
      views,
      view,
      currentMonth: calendarState.currentMonth,
      onViewChange: setView,
      onMonthChange: (newMonth, direction) => handleChangeMonth({
        newMonth,
        direction
      }),
      minDate: minDateWithDisabled,
      maxDate: maxDateWithDisabled,
      disabled,
      disablePast,
      disableFuture,
      reduceAnimations,
      timezone,
      labelId: gridLabelId,
      slots,
      slotProps
    },
    ownerState: props
  });
  const handleDateMonthChange = useEventCallback_default((newDate) => {
    const startOfMonth = utils.startOfMonth(newDate);
    const endOfMonth = utils.endOfMonth(newDate);
    const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
      utils,
      date: newDate,
      minDate: utils.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
      maxDate: utils.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
      disablePast,
      disableFuture,
      isDateDisabled,
      timezone
    }) : newDate;
    if (closestEnabledDate) {
      setValueAndGoToNextView(closestEnabledDate, "finish");
      onMonthChange == null || onMonthChange(startOfMonth);
    } else {
      goToNextView();
      changeMonth(startOfMonth);
    }
    changeFocusedDay(closestEnabledDate, true);
  });
  const handleDateYearChange = useEventCallback_default((newDate) => {
    const startOfYear = utils.startOfYear(newDate);
    const endOfYear = utils.endOfYear(newDate);
    const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
      utils,
      date: newDate,
      minDate: utils.isBefore(minDate, startOfYear) ? startOfYear : minDate,
      maxDate: utils.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
      disablePast,
      disableFuture,
      isDateDisabled,
      timezone
    }) : newDate;
    if (closestEnabledDate) {
      setValueAndGoToNextView(closestEnabledDate, "finish");
      onYearChange == null || onYearChange(closestEnabledDate);
    } else {
      goToNextView();
      changeMonth(startOfYear);
    }
    changeFocusedDay(closestEnabledDate, true);
  });
  const handleSelectedDayChange = useEventCallback_default((day) => {
    if (day) {
      return handleValueChange(mergeDateAndTime(utils, day, value != null ? value : referenceDate), "finish", view);
    }
    return handleValueChange(day, "finish", view);
  });
  React152.useEffect(() => {
    if (value != null && utils.isValid(value)) {
      changeMonth(value);
    }
  }, [value]);
  const ownerState = props;
  const classes2 = useUtilityClasses90(ownerState);
  const baseDateValidationProps = {
    disablePast,
    disableFuture,
    maxDate,
    minDate
  };
  const commonViewProps = {
    disableHighlightToday,
    readOnly,
    disabled,
    timezone,
    gridLabelId
  };
  const prevOpenViewRef = React152.useRef(view);
  React152.useEffect(() => {
    if (prevOpenViewRef.current === view) {
      return;
    }
    if (focusedView === prevOpenViewRef.current) {
      setFocusedView(view, true);
    }
    prevOpenViewRef.current = view;
  }, [focusedView, setFocusedView, view]);
  const selectedDays = React152.useMemo(() => [value], [value]);
  return (0, import_jsx_runtime176.jsxs)(DateCalendarRoot, _extends({
    ref,
    className: clsx_default2(classes2.root, className),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime175.jsx)(CalendarHeader, _extends({}, calendarHeaderProps)), (0, import_jsx_runtime175.jsx)(DateCalendarViewTransitionContainer, {
      reduceAnimations,
      className: classes2.viewTransitionContainer,
      transKey: view,
      ownerState,
      children: (0, import_jsx_runtime176.jsxs)("div", {
        children: [view === "year" && (0, import_jsx_runtime175.jsx)(YearCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
          value,
          onChange: handleDateYearChange,
          shouldDisableYear,
          hasFocus,
          onFocusedViewChange: (isViewFocused) => setFocusedView("year", isViewFocused),
          yearsPerRow,
          referenceDate
        })), view === "month" && (0, import_jsx_runtime175.jsx)(MonthCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
          hasFocus,
          className,
          value,
          onChange: handleDateMonthChange,
          shouldDisableMonth,
          onFocusedViewChange: (isViewFocused) => setFocusedView("month", isViewFocused),
          monthsPerRow,
          referenceDate
        })), view === "day" && (0, import_jsx_runtime175.jsx)(DayCalendar, _extends({}, calendarState, baseDateValidationProps, commonViewProps, {
          onMonthSwitchingAnimationEnd,
          onFocusedDayChange: changeFocusedDay,
          reduceAnimations,
          selectedDays,
          onSelectedDaysChange: handleSelectedDayChange,
          shouldDisableDate,
          shouldDisableMonth,
          shouldDisableYear,
          hasFocus,
          onFocusedViewChange: (isViewFocused) => setFocusedView("day", isViewFocused),
          showDaysOutsideCurrentMonth,
          fixedWeekNumber,
          dayOfWeekFormatter,
          displayWeekNumber,
          components,
          componentsProps,
          slots,
          slotProps,
          loading,
          renderLoading
        }))]
      })
    })]
  }));
});
true ? DateCalendar.propTypes = {
  autoFocus: import_prop_types100.default.bool,
  classes: import_prop_types100.default.object,
  className: import_prop_types100.default.string,
  components: import_prop_types100.default.object,
  componentsProps: import_prop_types100.default.object,
  dayOfWeekFormatter: import_prop_types100.default.func,
  defaultCalendarMonth: import_prop_types100.default.any,
  defaultValue: import_prop_types100.default.any,
  disabled: import_prop_types100.default.bool,
  disableFuture: import_prop_types100.default.bool,
  disableHighlightToday: import_prop_types100.default.bool,
  disablePast: import_prop_types100.default.bool,
  displayWeekNumber: import_prop_types100.default.bool,
  fixedWeekNumber: import_prop_types100.default.number,
  focusedView: import_prop_types100.default.oneOf(["day", "month", "year"]),
  loading: import_prop_types100.default.bool,
  maxDate: import_prop_types100.default.any,
  minDate: import_prop_types100.default.any,
  monthsPerRow: import_prop_types100.default.oneOf([3, 4]),
  onChange: import_prop_types100.default.func,
  onFocusedViewChange: import_prop_types100.default.func,
  onMonthChange: import_prop_types100.default.func,
  onViewChange: import_prop_types100.default.func,
  onYearChange: import_prop_types100.default.func,
  openTo: import_prop_types100.default.oneOf(["day", "month", "year"]),
  readOnly: import_prop_types100.default.bool,
  reduceAnimations: import_prop_types100.default.bool,
  referenceDate: import_prop_types100.default.any,
  renderLoading: import_prop_types100.default.func,
  shouldDisableDate: import_prop_types100.default.func,
  shouldDisableMonth: import_prop_types100.default.func,
  shouldDisableYear: import_prop_types100.default.func,
  showDaysOutsideCurrentMonth: import_prop_types100.default.bool,
  slotProps: import_prop_types100.default.object,
  slots: import_prop_types100.default.object,
  sx: import_prop_types100.default.oneOfType([import_prop_types100.default.arrayOf(import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object, import_prop_types100.default.bool])), import_prop_types100.default.func, import_prop_types100.default.object]),
  timezone: import_prop_types100.default.string,
  value: import_prop_types100.default.any,
  view: import_prop_types100.default.oneOf(["day", "month", "year"]),
  views: import_prop_types100.default.arrayOf(import_prop_types100.default.oneOf(["day", "month", "year"]).isRequired),
  yearsPerRow: import_prop_types100.default.oneOf([3, 4])
} : void 0;

// node_modules/@mui/x-date-pickers/dateViewRenderers/dateViewRenderers.js
var import_jsx_runtime177 = __toESM(require_jsx_runtime());
var renderDateViewCalendar = ({
  view,
  onViewChange,
  views,
  focusedView,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minDate,
  maxDate,
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  reduceAnimations,
  onMonthChange,
  monthsPerRow,
  onYearChange,
  yearsPerRow,
  defaultCalendarMonth,
  components,
  componentsProps,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  sx,
  autoFocus,
  fixedWeekNumber,
  displayWeekNumber,
  timezone
}) => (0, import_jsx_runtime177.jsx)(DateCalendar, {
  view,
  onViewChange,
  views: views.filter(isDatePickerView),
  focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minDate,
  maxDate,
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  reduceAnimations,
  onMonthChange,
  monthsPerRow,
  onYearChange,
  yearsPerRow,
  defaultCalendarMonth,
  components,
  componentsProps,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  sx,
  autoFocus,
  fixedWeekNumber,
  displayWeekNumber,
  timezone
});

// node_modules/@mui/x-date-pickers/dateTimeViewRenderers/dateTimeViewRenderers.js
init_extends();
var React164 = __toESM(require_react());
init_Divider();
init_utils4();

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js
init_extends();
init_objectWithoutPropertiesLoose();
var React156 = __toESM(require_react());
var import_prop_types101 = __toESM(require_prop_types());
init_styles();
init_useEventCallback();
init_composeClasses();

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getMultiSectionDigitalClockUtilityClass(slot) {
  return generateUtilityClass("MuiMultiSectionDigitalClock", slot);
}
var multiSectionDigitalClockClasses = generateUtilityClasses("MuiMultiSectionDigitalClock", ["root"]);

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.js
init_extends();
init_objectWithoutPropertiesLoose();
var React154 = __toESM(require_react());
init_styles();
init_composeClasses();
init_MenuList();
init_MenuItem();
init_useForkRef();

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockSectionClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getMultiSectionDigitalClockSectionUtilityClass(slot) {
  return generateUtilityClass("MuiMultiSectionDigitalClockSection", slot);
}
var multiSectionDigitalClockSectionClasses = generateUtilityClasses("MuiMultiSectionDigitalClockSection", ["root", "item"]);

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.js
var import_jsx_runtime178 = __toESM(require_jsx_runtime());
var _excluded108 = ["autoFocus", "onChange", "className", "disabled", "readOnly", "items", "active", "slots", "slotProps", "skipDisabled"];
var useUtilityClasses91 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    item: ["item"]
  };
  return composeClasses(slots, getMultiSectionDigitalClockSectionUtilityClass, classes2);
};
var MultiSectionDigitalClockSectionRoot = styled_default(MenuList_default, {
  name: "MuiMultiSectionDigitalClockSection",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => ({
  maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
  width: 56,
  padding: 0,
  overflow: "hidden",
  "@media (prefers-reduced-motion: no-preference)": {
    scrollBehavior: ownerState.alreadyRendered ? "smooth" : "auto"
  },
  "@media (pointer: fine)": {
    "&:hover": {
      overflowY: "auto"
    }
  },
  "@media (pointer: none), (pointer: coarse)": {
    overflowY: "auto"
  },
  "&:not(:first-of-type)": {
    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
  },
  "&:after": {
    display: "block",
    content: '""',
    height: "calc(100% - 40px - 6px)"
  }
}));
var MultiSectionDigitalClockSectionItem = styled_default(MenuItem_default, {
  name: "MuiMultiSectionDigitalClockSection",
  slot: "Item",
  overridesResolver: (_4, styles5) => styles5.item
})(({
  theme
}) => ({
  padding: 8,
  margin: "2px 4px",
  width: MULTI_SECTION_CLOCK_SECTION_WIDTH,
  justifyContent: "center",
  "&:first-of-type": {
    marginTop: 4
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
  },
  "&.Mui-selected": {
    backgroundColor: (theme.vars || theme).palette.primary.main,
    color: (theme.vars || theme).palette.primary.contrastText,
    "&:focus-visible, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  "&.Mui-focusVisible": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
  }
}));
var MultiSectionDigitalClockSection = React154.forwardRef(function MultiSectionDigitalClockSection2(inProps, ref) {
  var _slots$digitalClockSe;
  const containerRef = React154.useRef(null);
  const handleRef = useForkRef(ref, containerRef);
  const previousActive = React154.useRef(null);
  const props = useThemeProps2({
    props: inProps,
    name: "MuiMultiSectionDigitalClockSection"
  });
  const {
    autoFocus,
    onChange,
    className,
    disabled,
    readOnly,
    items,
    active,
    slots,
    slotProps,
    skipDisabled
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded108);
  const ownerState = React154.useMemo(() => _extends({}, props, {
    alreadyRendered: !!containerRef.current
  }), [props]);
  const classes2 = useUtilityClasses91(ownerState);
  const DigitalClockSectionItem = (_slots$digitalClockSe = slots == null ? void 0 : slots.digitalClockSectionItem) != null ? _slots$digitalClockSe : MultiSectionDigitalClockSectionItem;
  React154.useEffect(() => {
    if (containerRef.current === null) {
      return;
    }
    const activeItem = containerRef.current.querySelector('[role="option"][aria-selected="true"]');
    if (active && autoFocus && activeItem) {
      activeItem.focus();
    }
    if (!activeItem || previousActive.current === activeItem) {
      return;
    }
    previousActive.current = activeItem;
    const offsetTop = activeItem.offsetTop;
    containerRef.current.scrollTop = offsetTop - 4;
  });
  return (0, import_jsx_runtime178.jsx)(MultiSectionDigitalClockSectionRoot, _extends({
    ref: handleRef,
    className: clsx_default2(classes2.root, className),
    ownerState,
    autoFocusItem: autoFocus && active,
    role: "listbox"
  }, other, {
    children: items.map((option) => {
      var _option$isDisabled, _option$isDisabled2;
      if (skipDisabled && (_option$isDisabled = option.isDisabled) != null && _option$isDisabled.call(option, option.value)) {
        return null;
      }
      const isSelected = option.isSelected(option.value);
      return (0, import_jsx_runtime178.jsx)(DigitalClockSectionItem, _extends({
        onClick: () => !readOnly && onChange(option.value),
        selected: isSelected,
        disabled: disabled || ((_option$isDisabled2 = option.isDisabled) == null ? void 0 : _option$isDisabled2.call(option, option.value)),
        disableRipple: readOnly,
        role: "option",
        "aria-disabled": readOnly,
        "aria-label": option.ariaLabel,
        "aria-selected": isSelected,
        className: classes2.item
      }, slotProps == null ? void 0 : slotProps.digitalClockSectionItem, {
        children: option.label
      }), option.label);
    })
  }));
});

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.utils.js
var getHourSectionOptions = ({
  now: now2,
  value,
  utils,
  ampm,
  isDisabled,
  resolveAriaLabel,
  timeStep
}) => {
  const currentHours = value ? utils.getHours(value) : null;
  const result = [];
  const isSelected = (hour) => {
    if (currentHours === null) {
      return false;
    }
    if (ampm) {
      if (hour === 12) {
        return currentHours === 12 || currentHours === 0;
      }
      return currentHours === hour || currentHours - 12 === hour;
    }
    return currentHours === hour;
  };
  const endHour = ampm ? 11 : 23;
  for (let hour = 0; hour <= endHour; hour += timeStep) {
    let label = utils.format(utils.setHours(now2, hour), ampm ? "hours12h" : "hours24h");
    const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
    label = utils.formatNumber(label);
    result.push({
      value: hour,
      label,
      isSelected,
      isDisabled,
      ariaLabel
    });
  }
  return result;
};
var getTimeSectionOptions = ({
  value,
  utils,
  isDisabled,
  timeStep,
  resolveLabel,
  resolveAriaLabel,
  hasValue = true
}) => {
  const isSelected = (timeValue) => {
    if (value === null) {
      return false;
    }
    return hasValue && value === timeValue;
  };
  return [...Array.from({
    length: Math.ceil(60 / timeStep)
  }, (_4, index) => {
    const timeValue = timeStep * index;
    return {
      value: timeValue,
      label: utils.formatNumber(resolveLabel(timeValue)),
      isDisabled,
      isSelected,
      ariaLabel: resolveAriaLabel(timeValue.toString())
    };
  })];
};

// node_modules/@mui/x-date-pickers/internals/hooks/useClockReferenceDate.js
var React155 = __toESM(require_react());
var useClockReferenceDate = ({
  value,
  referenceDate: referenceDateProp,
  utils,
  props,
  timezone
}) => {
  const referenceDate = React155.useMemo(
    () => singleItemValueManager.getInitialReferenceValue({
      value,
      utils,
      props,
      referenceDate: referenceDateProp,
      granularity: SECTION_TYPE_GRANULARITY.day,
      timezone,
      getTodayDate: () => getTodayDate(utils, timezone, "date")
    }),
    []
  );
  return value != null ? value : referenceDate;
};

// node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js
var import_jsx_runtime179 = __toESM(require_jsx_runtime());
var _excluded109 = ["ampm", "timeSteps", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "skipDisabled", "timezone"];
var useUtilityClasses92 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes2);
};
var MultiSectionDigitalClockRoot = styled_default(PickerViewRoot, {
  name: "MuiMultiSectionDigitalClock",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})(({
  theme
}) => ({
  display: "flex",
  flexDirection: "row",
  width: "100%",
  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
}));
var MultiSectionDigitalClock = React156.forwardRef(function MultiSectionDigitalClock2(inProps, ref) {
  const utils = useUtils();
  const props = useThemeProps2({
    props: inProps,
    name: "MuiMultiSectionDigitalClock"
  });
  const {
    ampm = utils.is12HourCycleInCurrentLocale(),
    timeSteps: inTimeSteps,
    autoFocus,
    components,
    componentsProps,
    slots,
    slotProps,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableIgnoringDatePartForTimeValidation = false,
    maxTime,
    minTime,
    disableFuture,
    disablePast,
    minutesStep = 1,
    shouldDisableClock,
    shouldDisableTime,
    onChange,
    view: inView,
    views: inViews = ["hours", "minutes"],
    openTo,
    onViewChange,
    focusedView: inFocusedView,
    onFocusedViewChange,
    className,
    disabled,
    readOnly,
    skipDisabled = false,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded109);
  const {
    value,
    handleValueChange: handleRawValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "MultiSectionDigitalClock",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const localeText = useLocaleText();
  const now2 = useNow(timezone);
  const timeSteps = React156.useMemo(() => _extends({
    hours: 1,
    minutes: 5,
    seconds: 5
  }, inTimeSteps), [inTimeSteps]);
  const valueOrReferenceDate = useClockReferenceDate({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  });
  const handleValueChange = useEventCallback_default((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));
  const views = React156.useMemo(() => {
    if (!ampm || !inViews.includes("hours")) {
      return inViews;
    }
    return inViews.includes("meridiem") ? inViews : [...inViews, "meridiem"];
  }, [ampm, inViews]);
  const {
    view,
    setValueAndGoToNextView,
    focusedView
  } = useViews({
    view: inView,
    views,
    openTo,
    onViewChange,
    onChange: handleValueChange,
    focusedView: inFocusedView,
    onFocusedViewChange
  });
  const handleMeridiemValueChange = useEventCallback_default((newValue) => {
    setValueAndGoToNextView(newValue, "finish", "meridiem");
  });
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, "finish");
  const isTimeDisabled = React156.useCallback((rawValue, viewType) => {
    const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
    const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
    const containsValidTime = ({
      start,
      end
    }) => {
      if (minTime && isAfter2(minTime, end)) {
        return false;
      }
      if (maxTime && isAfter2(start, maxTime)) {
        return false;
      }
      if (disableFuture && isAfter2(start, now2)) {
        return false;
      }
      if (disablePast && isAfter2(now2, shouldCheckPastEnd ? end : start)) {
        return false;
      }
      return true;
    };
    const isValidValue = (timeValue, step = 1) => {
      if (timeValue % step !== 0) {
        return false;
      }
      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
        return false;
      }
      if (shouldDisableTime) {
        switch (viewType) {
          case "hours":
            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
          case "minutes":
            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
          case "seconds":
            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
          default:
            return false;
        }
      }
      return true;
    };
    switch (viewType) {
      case "hours": {
        const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
        const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
        const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
        const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(valueWithMeridiem);
      }
      case "minutes": {
        const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
        const start = utils.setSeconds(dateWithNewMinutes, 0);
        const end = utils.setSeconds(dateWithNewMinutes, 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue, minutesStep);
      }
      case "seconds": {
        const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
        const start = dateWithNewSeconds;
        const end = dateWithNewSeconds;
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue);
      }
      default:
        throw new Error("not supported");
    }
  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now2, views]);
  const buildViewProps = React156.useCallback((viewToBuild) => {
    switch (viewToBuild) {
      case "hours": {
        return {
          onChange: (hours2) => {
            const valueWithMeridiem = convertValueToMeridiem(hours2, meridiemMode, ampm);
            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), "finish", "hours");
          },
          items: getHourSectionOptions({
            now: now2,
            value,
            ampm,
            utils,
            isDisabled: (hours2) => disabled || isTimeDisabled(hours2, "hours"),
            timeStep: timeSteps.hours,
            resolveAriaLabel: localeText.hoursClockNumberText
          })
        };
      }
      case "minutes": {
        return {
          onChange: (minutes2) => {
            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minutes2), "finish", "minutes");
          },
          items: getTimeSectionOptions({
            value: utils.getMinutes(valueOrReferenceDate),
            utils,
            isDisabled: (minutes2) => disabled || isTimeDisabled(minutes2, "minutes"),
            resolveLabel: (minutes2) => utils.format(utils.setMinutes(now2, minutes2), "minutes"),
            timeStep: timeSteps.minutes,
            hasValue: !!value,
            resolveAriaLabel: localeText.minutesClockNumberText
          })
        };
      }
      case "seconds": {
        return {
          onChange: (seconds2) => {
            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, seconds2), "finish", "seconds");
          },
          items: getTimeSectionOptions({
            value: utils.getSeconds(valueOrReferenceDate),
            utils,
            isDisabled: (seconds2) => disabled || isTimeDisabled(seconds2, "seconds"),
            resolveLabel: (seconds2) => utils.format(utils.setSeconds(now2, seconds2), "seconds"),
            timeStep: timeSteps.seconds,
            hasValue: !!value,
            resolveAriaLabel: localeText.secondsClockNumberText
          })
        };
      }
      case "meridiem": {
        const amLabel = formatMeridiem(utils, "am");
        const pmLabel = formatMeridiem(utils, "pm");
        return {
          onChange: handleMeridiemChange,
          items: [{
            value: "am",
            label: amLabel,
            isSelected: () => !!value && meridiemMode === "am",
            ariaLabel: amLabel
          }, {
            value: "pm",
            label: pmLabel,
            isSelected: () => !!value && meridiemMode === "pm",
            ariaLabel: pmLabel
          }]
        };
      }
      default:
        throw new Error(`Unknown view: ${viewToBuild} found.`);
    }
  }, [now2, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, disabled, isTimeDisabled, handleMeridiemChange]);
  const viewTimeOptions = React156.useMemo(() => {
    return views.reduce((result, currentView) => {
      return _extends({}, result, {
        [currentView]: buildViewProps(currentView)
      });
    }, {});
  }, [views, buildViewProps]);
  const ownerState = props;
  const classes2 = useUtilityClasses92(ownerState);
  return (0, import_jsx_runtime179.jsx)(MultiSectionDigitalClockRoot, _extends({
    ref,
    className: clsx_default2(classes2.root, className),
    ownerState,
    role: "group"
  }, other, {
    children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => (0, import_jsx_runtime179.jsx)(MultiSectionDigitalClockSection, {
      items: viewOptions.items,
      onChange: viewOptions.onChange,
      active: view === timeView,
      autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,
      disabled,
      readOnly,
      slots: slots != null ? slots : components,
      slotProps: slotProps != null ? slotProps : componentsProps,
      skipDisabled,
      "aria-label": localeText.selectViewText(timeView)
    }, timeView))
  }));
});
true ? MultiSectionDigitalClock.propTypes = {
  ampm: import_prop_types101.default.bool,
  autoFocus: import_prop_types101.default.bool,
  classes: import_prop_types101.default.object,
  className: import_prop_types101.default.string,
  components: import_prop_types101.default.object,
  componentsProps: import_prop_types101.default.object,
  defaultValue: import_prop_types101.default.any,
  disabled: import_prop_types101.default.bool,
  disableFuture: import_prop_types101.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types101.default.bool,
  disablePast: import_prop_types101.default.bool,
  focusedView: import_prop_types101.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  maxTime: import_prop_types101.default.any,
  minTime: import_prop_types101.default.any,
  minutesStep: import_prop_types101.default.number,
  onChange: import_prop_types101.default.func,
  onFocusedViewChange: import_prop_types101.default.func,
  onViewChange: import_prop_types101.default.func,
  openTo: import_prop_types101.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  readOnly: import_prop_types101.default.bool,
  referenceDate: import_prop_types101.default.any,
  shouldDisableClock: import_prop_types101.default.func,
  shouldDisableTime: import_prop_types101.default.func,
  skipDisabled: import_prop_types101.default.bool,
  slotProps: import_prop_types101.default.object,
  slots: import_prop_types101.default.object,
  sx: import_prop_types101.default.oneOfType([import_prop_types101.default.arrayOf(import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object, import_prop_types101.default.bool])), import_prop_types101.default.func, import_prop_types101.default.object]),
  timeSteps: import_prop_types101.default.shape({
    hours: import_prop_types101.default.number,
    minutes: import_prop_types101.default.number,
    seconds: import_prop_types101.default.number
  }),
  timezone: import_prop_types101.default.string,
  value: import_prop_types101.default.any,
  view: import_prop_types101.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  views: import_prop_types101.default.arrayOf(import_prop_types101.default.oneOf(["hours", "meridiem", "minutes", "seconds"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/internals/components/DateTimeViewWrapper/DateTimeViewWrapper.js
init_styles();
var DateTimeViewWrapper = styled_default("div")({
  display: "flex",
  margin: "0 auto"
});

// node_modules/@mui/x-date-pickers/timeViewRenderers/timeViewRenderers.js
var React163 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js
init_extends();
init_objectWithoutPropertiesLoose();
var React161 = __toESM(require_react());
var import_prop_types102 = __toESM(require_prop_types());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/timeClockClasses.js
init_utils();
function getTimeClockUtilityClass(slot) {
  return generateUtilityClass("MuiTimeClock", slot);
}
var timeClockClasses = generateUtilityClasses("MuiTimeClock", ["root", "arrowSwitcher"]);

// node_modules/@mui/x-date-pickers/TimeClock/Clock.js
init_extends();
var React158 = __toESM(require_react());
init_IconButton();
init_Typography();
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.js
init_objectWithoutPropertiesLoose();
init_extends();
var React157 = __toESM(require_react());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/shared.js
var CLOCK_WIDTH = 220;
var CLOCK_HOUR_WIDTH = 36;
var clockCenter = {
  x: CLOCK_WIDTH / 2,
  y: CLOCK_WIDTH / 2
};
var baseClockPoint = {
  x: clockCenter.x,
  y: 0
};
var cx = baseClockPoint.x - clockCenter.x;
var cy = baseClockPoint.y - clockCenter.y;
var rad2deg = (rad) => rad * (180 / Math.PI);
var getAngleValue = (step, offsetX, offsetY) => {
  const x = offsetX - clockCenter.x;
  const y = offsetY - clockCenter.y;
  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
  let deg = rad2deg(atan);
  deg = Math.round(deg / step) * step;
  deg %= 360;
  const value = Math.floor(deg / step) || 0;
  const delta = x ** 2 + y ** 2;
  const distance = Math.sqrt(delta);
  return {
    value,
    distance
  };
};
var getMinutes = (offsetX, offsetY, step = 1) => {
  const angleStep = step * 6;
  let {
    value
  } = getAngleValue(angleStep, offsetX, offsetY);
  value = value * step % 60;
  return value;
};
var getHours = (offsetX, offsetY, ampm) => {
  const {
    value,
    distance
  } = getAngleValue(30, offsetX, offsetY);
  let hour = value || 12;
  if (!ampm) {
    if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
      hour += 12;
      hour %= 24;
    }
  } else {
    hour %= 12;
  }
  return hour;
};

// node_modules/@mui/x-date-pickers/TimeClock/clockPointerClasses.js
init_utils();
function getClockPointerUtilityClass(slot) {
  return generateUtilityClass("MuiClockPointer", slot);
}
var clockPointerClasses = generateUtilityClasses("MuiClockPointer", ["root", "thumb"]);

// node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.js
var import_jsx_runtime180 = __toESM(require_jsx_runtime());
var _excluded110 = ["className", "hasSelected", "isInner", "type", "viewValue"];
var useUtilityClasses93 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    thumb: ["thumb"]
  };
  return composeClasses(slots, getClockPointerUtilityClass, classes2);
};
var ClockPointerRoot = styled_default("div", {
  name: "MuiClockPointer",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})(({
  theme,
  ownerState
}) => _extends({
  width: 2,
  backgroundColor: (theme.vars || theme).palette.primary.main,
  position: "absolute",
  left: "calc(50% - 1px)",
  bottom: "50%",
  transformOrigin: "center bottom 0px"
}, ownerState.shouldAnimate && {
  transition: theme.transitions.create(["transform", "height"])
}));
var ClockPointerThumb = styled_default("div", {
  name: "MuiClockPointer",
  slot: "Thumb",
  overridesResolver: (_4, styles5) => styles5.thumb
})(({
  theme,
  ownerState
}) => _extends({
  width: 4,
  height: 4,
  backgroundColor: (theme.vars || theme).palette.primary.contrastText,
  borderRadius: "50%",
  position: "absolute",
  top: -21,
  left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
  border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${(theme.vars || theme).palette.primary.main}`,
  boxSizing: "content-box"
}, ownerState.hasSelected && {
  backgroundColor: (theme.vars || theme).palette.primary.main
}));
function ClockPointer(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiClockPointer"
  });
  const {
    className,
    isInner,
    type,
    viewValue
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded110);
  const previousType = React157.useRef(type);
  React157.useEffect(() => {
    previousType.current = type;
  }, [type]);
  const ownerState = _extends({}, props, {
    shouldAnimate: previousType.current !== type
  });
  const classes2 = useUtilityClasses93(ownerState);
  const getAngleStyle = () => {
    const max2 = type === "hours" ? 12 : 60;
    let angle = 360 / max2 * viewValue;
    if (type === "hours" && viewValue > 12) {
      angle -= 360;
    }
    return {
      height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
      transform: `rotateZ(${angle}deg)`
    };
  };
  return (0, import_jsx_runtime180.jsx)(ClockPointerRoot, _extends({
    style: getAngleStyle(),
    className: clsx_default2(className, classes2.root),
    ownerState
  }, other, {
    children: (0, import_jsx_runtime180.jsx)(ClockPointerThumb, {
      ownerState,
      className: classes2.thumb
    })
  }));
}

// node_modules/@mui/x-date-pickers/TimeClock/clockClasses.js
init_utils();
function getClockUtilityClass(slot) {
  return generateUtilityClass("MuiClock", slot);
}
var clockClasses = generateUtilityClasses("MuiClock", ["root", "clock", "wrapper", "squareMask", "pin", "amButton", "pmButton", "meridiemText"]);

// node_modules/@mui/x-date-pickers/TimeClock/Clock.js
var import_jsx_runtime181 = __toESM(require_jsx_runtime());
var import_jsx_runtime182 = __toESM(require_jsx_runtime());
var useUtilityClasses94 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    clock: ["clock"],
    wrapper: ["wrapper"],
    squareMask: ["squareMask"],
    pin: ["pin"],
    amButton: ["amButton"],
    pmButton: ["pmButton"],
    meridiemText: ["meridiemText"]
  };
  return composeClasses(slots, getClockUtilityClass, classes2);
};
var ClockRoot = styled_default("div", {
  name: "MuiClock",
  slot: "Root",
  overridesResolver: (_4, styles5) => styles5.root
})(({
  theme
}) => ({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  margin: theme.spacing(2)
}));
var ClockClock = styled_default("div", {
  name: "MuiClock",
  slot: "Clock",
  overridesResolver: (_4, styles5) => styles5.clock
})({
  backgroundColor: "rgba(0,0,0,.07)",
  borderRadius: "50%",
  height: 220,
  width: 220,
  flexShrink: 0,
  position: "relative",
  pointerEvents: "none"
});
var ClockWrapper = styled_default("div", {
  name: "MuiClock",
  slot: "Wrapper",
  overridesResolver: (_4, styles5) => styles5.wrapper
})({
  "&:focus": {
    outline: "none"
  }
});
var ClockSquareMask = styled_default("div", {
  name: "MuiClock",
  slot: "SquareMask",
  overridesResolver: (_4, styles5) => styles5.squareMask
})(({
  ownerState
}) => _extends({
  width: "100%",
  height: "100%",
  position: "absolute",
  pointerEvents: "auto",
  outline: 0,
  touchAction: "none",
  userSelect: "none"
}, ownerState.disabled ? {} : {
  "@media (pointer: fine)": {
    cursor: "pointer",
    borderRadius: "50%"
  },
  "&:active": {
    cursor: "move"
  }
}));
var ClockPin = styled_default("div", {
  name: "MuiClock",
  slot: "Pin",
  overridesResolver: (_4, styles5) => styles5.pin
})(({
  theme
}) => ({
  width: 6,
  height: 6,
  borderRadius: "50%",
  backgroundColor: (theme.vars || theme).palette.primary.main,
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)"
}));
var ClockAmButton = styled_default(IconButton_default, {
  name: "MuiClock",
  slot: "AmButton",
  overridesResolver: (_4, styles5) => styles5.amButton
})(({
  theme,
  ownerState
}) => _extends({
  zIndex: 1,
  position: "absolute",
  bottom: 8,
  left: 8,
  paddingLeft: 4,
  paddingRight: 4,
  width: CLOCK_HOUR_WIDTH
}, ownerState.meridiemMode === "am" && {
  backgroundColor: (theme.vars || theme).palette.primary.main,
  color: (theme.vars || theme).palette.primary.contrastText,
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.primary.light
  }
}));
var ClockPmButton = styled_default(IconButton_default, {
  name: "MuiClock",
  slot: "PmButton",
  overridesResolver: (_4, styles5) => styles5.pmButton
})(({
  theme,
  ownerState
}) => _extends({
  zIndex: 1,
  position: "absolute",
  bottom: 8,
  right: 8,
  paddingLeft: 4,
  paddingRight: 4,
  width: CLOCK_HOUR_WIDTH
}, ownerState.meridiemMode === "pm" && {
  backgroundColor: (theme.vars || theme).palette.primary.main,
  color: (theme.vars || theme).palette.primary.contrastText,
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.primary.light
  }
}));
var ClockMeridiemText = styled_default(Typography_default, {
  name: "MuiClock",
  slot: "meridiemText",
  overridesResolver: (_4, styles5) => styles5.meridiemText
})({
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis"
});
function Clock(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiClock"
  });
  const {
    ampm,
    ampmInClock,
    autoFocus,
    children,
    value,
    handleMeridiemChange,
    isTimeDisabled,
    meridiemMode,
    minutesStep = 1,
    onChange,
    selectedId,
    type,
    viewValue,
    disabled,
    readOnly,
    className
  } = props;
  const ownerState = props;
  const utils = useUtils();
  const localeText = useLocaleText();
  const isMoving = React158.useRef(false);
  const classes2 = useUtilityClasses94(ownerState);
  const isSelectedTimeDisabled = isTimeDisabled(viewValue, type);
  const isPointerInner = !ampm && type === "hours" && (viewValue < 1 || viewValue > 12);
  const handleValueChange = (newValue, isFinish) => {
    if (disabled || readOnly) {
      return;
    }
    if (isTimeDisabled(newValue, type)) {
      return;
    }
    onChange(newValue, isFinish);
  };
  const setTime = (event, isFinish) => {
    let {
      offsetX,
      offsetY
    } = event;
    if (offsetX === void 0) {
      const rect = event.target.getBoundingClientRect();
      offsetX = event.changedTouches[0].clientX - rect.left;
      offsetY = event.changedTouches[0].clientY - rect.top;
    }
    const newSelectedValue = type === "seconds" || type === "minutes" ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
    handleValueChange(newSelectedValue, isFinish);
  };
  const handleTouchMove = (event) => {
    isMoving.current = true;
    setTime(event, "shallow");
  };
  const handleTouchEnd = (event) => {
    if (isMoving.current) {
      setTime(event, "finish");
      isMoving.current = false;
    }
  };
  const handleMouseMove = (event) => {
    if (event.buttons > 0) {
      setTime(event.nativeEvent, "shallow");
    }
  };
  const handleMouseUp = (event) => {
    if (isMoving.current) {
      isMoving.current = false;
    }
    setTime(event.nativeEvent, "finish");
  };
  const hasSelected = React158.useMemo(() => {
    if (type === "hours") {
      return true;
    }
    return viewValue % 5 === 0;
  }, [type, viewValue]);
  const keyboardControlStep = type === "minutes" ? minutesStep : 1;
  const listboxRef = React158.useRef(null);
  useEnhancedEffect_default(() => {
    if (autoFocus) {
      listboxRef.current.focus();
    }
  }, [autoFocus]);
  const handleKeyDown = (event) => {
    if (isMoving.current) {
      return;
    }
    switch (event.key) {
      case "Home":
        handleValueChange(0, "partial");
        event.preventDefault();
        break;
      case "End":
        handleValueChange(type === "minutes" ? 59 : 23, "partial");
        event.preventDefault();
        break;
      case "ArrowUp":
        handleValueChange(viewValue + keyboardControlStep, "partial");
        event.preventDefault();
        break;
      case "ArrowDown":
        handleValueChange(viewValue - keyboardControlStep, "partial");
        event.preventDefault();
        break;
      default:
    }
  };
  return (0, import_jsx_runtime182.jsxs)(ClockRoot, {
    className: clsx_default2(className, classes2.root),
    children: [(0, import_jsx_runtime182.jsxs)(ClockClock, {
      className: classes2.clock,
      children: [(0, import_jsx_runtime181.jsx)(ClockSquareMask, {
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        onMouseUp: handleMouseUp,
        onMouseMove: handleMouseMove,
        ownerState: {
          disabled
        },
        className: classes2.squareMask
      }), !isSelectedTimeDisabled && (0, import_jsx_runtime182.jsxs)(React158.Fragment, {
        children: [(0, import_jsx_runtime181.jsx)(ClockPin, {
          className: classes2.pin
        }), value != null && (0, import_jsx_runtime181.jsx)(ClockPointer, {
          type,
          viewValue,
          isInner: isPointerInner,
          hasSelected
        })]
      }), (0, import_jsx_runtime181.jsx)(ClockWrapper, {
        "aria-activedescendant": selectedId,
        "aria-label": localeText.clockLabelText(type, value, utils),
        ref: listboxRef,
        role: "listbox",
        onKeyDown: handleKeyDown,
        tabIndex: 0,
        className: classes2.wrapper,
        children
      })]
    }), ampm && ampmInClock && (0, import_jsx_runtime182.jsxs)(React158.Fragment, {
      children: [(0, import_jsx_runtime181.jsx)(ClockAmButton, {
        onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
        disabled: disabled || meridiemMode === null,
        ownerState,
        className: classes2.amButton,
        title: formatMeridiem(utils, "am"),
        children: (0, import_jsx_runtime181.jsx)(ClockMeridiemText, {
          variant: "caption",
          className: classes2.meridiemText,
          children: formatMeridiem(utils, "am")
        })
      }), (0, import_jsx_runtime181.jsx)(ClockPmButton, {
        disabled: disabled || meridiemMode === null,
        onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
        ownerState,
        className: classes2.pmButton,
        title: formatMeridiem(utils, "pm"),
        children: (0, import_jsx_runtime181.jsx)(ClockMeridiemText, {
          variant: "caption",
          className: classes2.meridiemText,
          children: formatMeridiem(utils, "pm")
        })
      })]
    })]
  });
}

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.js
var React160 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.js
init_objectWithoutPropertiesLoose();
init_extends();
var React159 = __toESM(require_react());
init_styles();
init_utils();

// node_modules/@mui/x-date-pickers/TimeClock/clockNumberClasses.js
init_utils();
function getClockNumberUtilityClass(slot) {
  return generateUtilityClass("MuiClockNumber", slot);
}
var clockNumberClasses = generateUtilityClasses("MuiClockNumber", ["root", "selected", "disabled"]);

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.js
var import_jsx_runtime183 = __toESM(require_jsx_runtime());
var _excluded111 = ["className", "disabled", "index", "inner", "label", "selected"];
var useUtilityClasses95 = (ownerState) => {
  const {
    classes: classes2,
    selected,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected", disabled && "disabled"]
  };
  return composeClasses(slots, getClockNumberUtilityClass, classes2);
};
var ClockNumberRoot = styled_default("span", {
  name: "MuiClockNumber",
  slot: "Root",
  overridesResolver: (_4, styles5) => [styles5.root, {
    [`&.${clockNumberClasses.disabled}`]: styles5.disabled
  }, {
    [`&.${clockNumberClasses.selected}`]: styles5.selected
  }]
})(({
  theme,
  ownerState
}) => _extends({
  height: CLOCK_HOUR_WIDTH,
  width: CLOCK_HOUR_WIDTH,
  position: "absolute",
  left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  borderRadius: "50%",
  color: (theme.vars || theme).palette.text.primary,
  fontFamily: theme.typography.fontFamily,
  "&:focused": {
    backgroundColor: (theme.vars || theme).palette.background.paper
  },
  [`&.${clockNumberClasses.selected}`]: {
    color: (theme.vars || theme).palette.primary.contrastText
  },
  [`&.${clockNumberClasses.disabled}`]: {
    pointerEvents: "none",
    color: (theme.vars || theme).palette.text.disabled
  }
}, ownerState.inner && _extends({}, theme.typography.body2, {
  color: (theme.vars || theme).palette.text.secondary
})));
function ClockNumber(inProps) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiClockNumber"
  });
  const {
    className,
    disabled,
    index,
    inner,
    label,
    selected
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded111);
  const ownerState = props;
  const classes2 = useUtilityClasses95(ownerState);
  const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
  const length = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
  const x = Math.round(Math.cos(angle) * length);
  const y = Math.round(Math.sin(angle) * length);
  return (0, import_jsx_runtime183.jsx)(ClockNumberRoot, _extends({
    className: clsx_default2(className, classes2.root),
    "aria-disabled": disabled ? true : void 0,
    "aria-selected": selected ? true : void 0,
    role: "option",
    style: {
      transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
    },
    ownerState
  }, other, {
    children: label
  }));
}

// node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.js
var import_jsx_runtime184 = __toESM(require_jsx_runtime());
var getHourNumbers = ({
  ampm,
  value,
  getClockNumberText,
  isDisabled,
  selectedId,
  utils
}) => {
  const currentHours = value ? utils.getHours(value) : null;
  const hourNumbers = [];
  const startHour = ampm ? 1 : 0;
  const endHour = ampm ? 12 : 23;
  const isSelected = (hour) => {
    if (currentHours === null) {
      return false;
    }
    if (ampm) {
      if (hour === 12) {
        return currentHours === 12 || currentHours === 0;
      }
      return currentHours === hour || currentHours - 12 === hour;
    }
    return currentHours === hour;
  };
  for (let hour = startHour; hour <= endHour; hour += 1) {
    let label = hour.toString();
    if (hour === 0) {
      label = "00";
    }
    const inner = !ampm && (hour === 0 || hour > 12);
    label = utils.formatNumber(label);
    const selected = isSelected(hour);
    hourNumbers.push((0, import_jsx_runtime184.jsx)(ClockNumber, {
      id: selected ? selectedId : void 0,
      index: hour,
      inner,
      selected,
      disabled: isDisabled(hour),
      label,
      "aria-label": getClockNumberText(label)
    }, hour));
  }
  return hourNumbers;
};
var getMinutesNumbers = ({
  utils,
  value,
  isDisabled,
  getClockNumberText,
  selectedId
}) => {
  const f = utils.formatNumber;
  return [[5, f("05")], [10, f("10")], [15, f("15")], [20, f("20")], [25, f("25")], [30, f("30")], [35, f("35")], [40, f("40")], [45, f("45")], [50, f("50")], [55, f("55")], [0, f("00")]].map(([numberValue, label], index) => {
    const selected = numberValue === value;
    return (0, import_jsx_runtime184.jsx)(ClockNumber, {
      label,
      id: selected ? selectedId : void 0,
      index: index + 1,
      inner: false,
      disabled: isDisabled(numberValue),
      selected,
      "aria-label": getClockNumberText(label)
    }, numberValue);
  });
};

// node_modules/@mui/x-date-pickers/TimeClock/TimeClock.js
var import_jsx_runtime185 = __toESM(require_jsx_runtime());
var import_jsx_runtime186 = __toESM(require_jsx_runtime());
var _excluded112 = ["ampm", "ampmInClock", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "showViewSwitcher", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "timezone"];
var useUtilityClasses96 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    arrowSwitcher: ["arrowSwitcher"]
  };
  return composeClasses(slots, getTimeClockUtilityClass, classes2);
};
var TimeClockRoot = styled_default(PickerViewRoot, {
  name: "MuiTimeClock",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})({
  display: "flex",
  flexDirection: "column",
  position: "relative"
});
var TimeClockArrowSwitcher = styled_default(PickersArrowSwitcher, {
  name: "MuiTimeClock",
  slot: "ArrowSwitcher",
  overridesResolver: (props, styles5) => styles5.arrowSwitcher
})({
  position: "absolute",
  right: 12,
  top: 15
});
var TIME_CLOCK_DEFAULT_VIEWS = ["hours", "minutes"];
var TimeClock = React161.forwardRef(function TimeClock2(inProps, ref) {
  const utils = useUtils();
  const props = useThemeProps2({
    props: inProps,
    name: "MuiTimeClock"
  });
  const {
    ampm = utils.is12HourCycleInCurrentLocale(),
    ampmInClock = false,
    autoFocus,
    components,
    componentsProps,
    slots: innerSlots,
    slotProps: innerSlotProps,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableIgnoringDatePartForTimeValidation = false,
    maxTime,
    minTime,
    disableFuture,
    disablePast,
    minutesStep = 1,
    shouldDisableClock,
    shouldDisableTime,
    showViewSwitcher,
    onChange,
    view: inView,
    views = TIME_CLOCK_DEFAULT_VIEWS,
    openTo,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    className,
    disabled,
    readOnly,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded112);
  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
  const {
    value,
    handleValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "TimeClock",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const valueOrReferenceDate = useClockReferenceDate({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  });
  const localeText = useLocaleText();
  const now2 = useNow(timezone);
  const {
    view,
    setView,
    previousView,
    nextView,
    setValueAndGoToNextView
  } = useViews({
    view: inView,
    views,
    openTo,
    onViewChange,
    onChange: handleValueChange,
    focusedView,
    onFocusedViewChange
  });
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView);
  const isTimeDisabled = React161.useCallback((rawValue, viewType) => {
    const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
    const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
    const containsValidTime = ({
      start,
      end
    }) => {
      if (minTime && isAfter2(minTime, end)) {
        return false;
      }
      if (maxTime && isAfter2(start, maxTime)) {
        return false;
      }
      if (disableFuture && isAfter2(start, now2)) {
        return false;
      }
      if (disablePast && isAfter2(now2, shouldCheckPastEnd ? end : start)) {
        return false;
      }
      return true;
    };
    const isValidValue = (timeValue, step = 1) => {
      if (timeValue % step !== 0) {
        return false;
      }
      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
        return false;
      }
      if (shouldDisableTime) {
        switch (viewType) {
          case "hours":
            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
          case "minutes":
            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
          case "seconds":
            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
          default:
            return false;
        }
      }
      return true;
    };
    switch (viewType) {
      case "hours": {
        const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
        const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
        const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
        const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(valueWithMeridiem);
      }
      case "minutes": {
        const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
        const start = utils.setSeconds(dateWithNewMinutes, 0);
        const end = utils.setSeconds(dateWithNewMinutes, 59);
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue, minutesStep);
      }
      case "seconds": {
        const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
        const start = dateWithNewSeconds;
        const end = dateWithNewSeconds;
        return !containsValidTime({
          start,
          end
        }) || !isValidValue(rawValue);
      }
      default:
        throw new Error("not supported");
    }
  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now2, views]);
  const selectedId = useId();
  const viewProps = React161.useMemo(() => {
    switch (view) {
      case "hours": {
        const handleHoursChange = (hourValue, isFinish) => {
          const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);
          setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish);
        };
        return {
          onChange: handleHoursChange,
          viewValue: utils.getHours(valueOrReferenceDate),
          children: getHourNumbers({
            value,
            utils,
            ampm,
            onChange: handleHoursChange,
            getClockNumberText: localeText.hoursClockNumberText,
            isDisabled: (hourValue) => disabled || isTimeDisabled(hourValue, "hours"),
            selectedId
          })
        };
      }
      case "minutes": {
        const minutesValue = utils.getMinutes(valueOrReferenceDate);
        const handleMinutesChange = (minuteValue, isFinish) => {
          setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish);
        };
        return {
          viewValue: minutesValue,
          onChange: handleMinutesChange,
          children: getMinutesNumbers({
            utils,
            value: minutesValue,
            onChange: handleMinutesChange,
            getClockNumberText: localeText.minutesClockNumberText,
            isDisabled: (minuteValue) => disabled || isTimeDisabled(minuteValue, "minutes"),
            selectedId
          })
        };
      }
      case "seconds": {
        const secondsValue = utils.getSeconds(valueOrReferenceDate);
        const handleSecondsChange = (secondValue, isFinish) => {
          setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish);
        };
        return {
          viewValue: secondsValue,
          onChange: handleSecondsChange,
          children: getMinutesNumbers({
            utils,
            value: secondsValue,
            onChange: handleSecondsChange,
            getClockNumberText: localeText.secondsClockNumberText,
            isDisabled: (secondValue) => disabled || isTimeDisabled(secondValue, "seconds"),
            selectedId
          })
        };
      }
      default:
        throw new Error("You must provide the type for ClockView");
    }
  }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);
  const ownerState = props;
  const classes2 = useUtilityClasses96(ownerState);
  return (0, import_jsx_runtime186.jsxs)(TimeClockRoot, _extends({
    ref,
    className: clsx_default2(classes2.root, className),
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime185.jsx)(Clock, _extends({
      autoFocus: autoFocus != null ? autoFocus : !!focusedView,
      ampmInClock: ampmInClock && views.includes("hours"),
      value,
      type: view,
      ampm,
      minutesStep,
      isTimeDisabled,
      meridiemMode,
      handleMeridiemChange,
      selectedId,
      disabled,
      readOnly
    }, viewProps)), showViewSwitcher && (0, import_jsx_runtime185.jsx)(TimeClockArrowSwitcher, {
      className: classes2.arrowSwitcher,
      slots,
      slotProps,
      onGoToPrevious: () => setView(previousView),
      isPreviousDisabled: !previousView,
      previousLabel: localeText.openPreviousView,
      onGoToNext: () => setView(nextView),
      isNextDisabled: !nextView,
      nextLabel: localeText.openNextView,
      ownerState
    })]
  }));
});
true ? TimeClock.propTypes = {
  ampm: import_prop_types102.default.bool,
  ampmInClock: import_prop_types102.default.bool,
  autoFocus: import_prop_types102.default.bool,
  classes: import_prop_types102.default.object,
  className: import_prop_types102.default.string,
  components: import_prop_types102.default.object,
  componentsProps: import_prop_types102.default.object,
  defaultValue: import_prop_types102.default.any,
  disabled: import_prop_types102.default.bool,
  disableFuture: import_prop_types102.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types102.default.bool,
  disablePast: import_prop_types102.default.bool,
  focusedView: import_prop_types102.default.oneOf(["hours", "minutes", "seconds"]),
  maxTime: import_prop_types102.default.any,
  minTime: import_prop_types102.default.any,
  minutesStep: import_prop_types102.default.number,
  onChange: import_prop_types102.default.func,
  onFocusedViewChange: import_prop_types102.default.func,
  onViewChange: import_prop_types102.default.func,
  openTo: import_prop_types102.default.oneOf(["hours", "minutes", "seconds"]),
  readOnly: import_prop_types102.default.bool,
  referenceDate: import_prop_types102.default.any,
  shouldDisableClock: import_prop_types102.default.func,
  shouldDisableTime: import_prop_types102.default.func,
  showViewSwitcher: import_prop_types102.default.bool,
  slotProps: import_prop_types102.default.object,
  slots: import_prop_types102.default.object,
  sx: import_prop_types102.default.oneOfType([import_prop_types102.default.arrayOf(import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object, import_prop_types102.default.bool])), import_prop_types102.default.func, import_prop_types102.default.object]),
  timezone: import_prop_types102.default.string,
  value: import_prop_types102.default.any,
  view: import_prop_types102.default.oneOf(["hours", "minutes", "seconds"]),
  views: import_prop_types102.default.arrayOf(import_prop_types102.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.js
init_extends();
init_objectWithoutPropertiesLoose();
var React162 = __toESM(require_react());
var import_prop_types103 = __toESM(require_prop_types());
init_utils4();
init_styles();
init_useEventCallback();
init_composeClasses();
init_MenuItem();
init_MenuList();
init_useForkRef();

// node_modules/@mui/x-date-pickers/DigitalClock/digitalClockClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getDigitalClockUtilityClass(slot) {
  return generateUtilityClass("MuiDigitalClock", slot);
}
var digitalClockClasses = generateUtilityClasses("MuiDigitalClock", ["root", "list", "item"]);

// node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.js
var import_jsx_runtime187 = __toESM(require_jsx_runtime());
var _excluded113 = ["ampm", "timeStep", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "views", "skipDisabled", "timezone"];
var useUtilityClasses97 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["root"],
    list: ["list"],
    item: ["item"]
  };
  return composeClasses(slots, getDigitalClockUtilityClass, classes2);
};
var DigitalClockRoot = styled_default(PickerViewRoot, {
  name: "MuiDigitalClock",
  slot: "Root",
  overridesResolver: (props, styles5) => styles5.root
})(({
  ownerState
}) => ({
  overflowY: "auto",
  width: "100%",
  "@media (prefers-reduced-motion: no-preference)": {
    scrollBehavior: ownerState.alreadyRendered ? "smooth" : "auto"
  },
  maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT
}));
var DigitalClockList = styled_default(MenuList_default, {
  name: "MuiDigitalClock",
  slot: "List",
  overridesResolver: (props, styles5) => styles5.list
})({
  padding: 0
});
var DigitalClockItem = styled_default(MenuItem_default, {
  name: "MuiDigitalClock",
  slot: "Item",
  overridesResolver: (props, styles5) => styles5.item
})(({
  theme
}) => ({
  padding: "8px 16px",
  margin: "2px 4px",
  "&:first-of-type": {
    marginTop: 4
  },
  "&:hover": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
  },
  "&.Mui-selected": {
    backgroundColor: (theme.vars || theme).palette.primary.main,
    color: (theme.vars || theme).palette.primary.contrastText,
    "&:focus-visible, &:hover": {
      backgroundColor: (theme.vars || theme).palette.primary.dark
    }
  },
  "&.Mui-focusVisible": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
  }
}));
var DigitalClock = React162.forwardRef(function DigitalClock2(inProps, ref) {
  var _ref, _slots$digitalClockIt, _slotProps$digitalClo;
  const utils = useUtils();
  const containerRef = React162.useRef(null);
  const handleRef = useForkRef(ref, containerRef);
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDigitalClock"
  });
  const {
    ampm = utils.is12HourCycleInCurrentLocale(),
    timeStep = 30,
    autoFocus,
    components,
    componentsProps,
    slots,
    slotProps,
    value: valueProp,
    defaultValue,
    referenceDate: referenceDateProp,
    disableIgnoringDatePartForTimeValidation = false,
    maxTime,
    minTime,
    disableFuture,
    disablePast,
    minutesStep = 1,
    shouldDisableClock,
    shouldDisableTime,
    onChange,
    view: inView,
    openTo,
    onViewChange,
    focusedView,
    onFocusedViewChange,
    className,
    disabled,
    readOnly,
    views = ["hours"],
    skipDisabled = false,
    timezone: timezoneProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded113);
  const {
    value,
    handleValueChange: handleRawValueChange,
    timezone
  } = useControlledValueWithTimezone({
    name: "DigitalClock",
    timezone: timezoneProp,
    value: valueProp,
    defaultValue,
    onChange,
    valueManager: singleItemValueManager
  });
  const localeText = useLocaleText();
  const now2 = useNow(timezone);
  const ownerState = React162.useMemo(() => _extends({}, props, {
    alreadyRendered: !!containerRef.current
  }), [props]);
  const classes2 = useUtilityClasses97(ownerState);
  const ClockItem = (_ref = (_slots$digitalClockIt = slots == null ? void 0 : slots.digitalClockItem) != null ? _slots$digitalClockIt : components == null ? void 0 : components.DigitalClockItem) != null ? _ref : DigitalClockItem;
  const clockItemProps = useSlotProps({
    elementType: ClockItem,
    externalSlotProps: (_slotProps$digitalClo = slotProps == null ? void 0 : slotProps.digitalClockItem) != null ? _slotProps$digitalClo : componentsProps == null ? void 0 : componentsProps.digitalClockItem,
    ownerState: {},
    className: classes2.item
  });
  const valueOrReferenceDate = useClockReferenceDate({
    value,
    referenceDate: referenceDateProp,
    utils,
    props,
    timezone
  });
  const handleValueChange = useEventCallback_default((newValue) => handleRawValueChange(newValue, "finish", "hours"));
  const {
    setValueAndGoToNextView
  } = useViews({
    view: inView,
    views,
    openTo,
    onViewChange,
    onChange: handleValueChange,
    focusedView,
    onFocusedViewChange
  });
  const handleItemSelect = useEventCallback_default((newValue) => {
    setValueAndGoToNextView(newValue, "finish");
  });
  React162.useEffect(() => {
    if (containerRef.current === null) {
      return;
    }
    const selectedItem = containerRef.current.querySelector('[role="listbox"] [role="option"][aria-selected="true"]');
    if (!selectedItem) {
      return;
    }
    const offsetTop = selectedItem.offsetTop;
    containerRef.current.scrollTop = offsetTop - 4;
  });
  const isTimeDisabled = React162.useCallback((valueToCheck) => {
    const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
    const containsValidTime = () => {
      if (minTime && isAfter2(minTime, valueToCheck)) {
        return false;
      }
      if (maxTime && isAfter2(valueToCheck, maxTime)) {
        return false;
      }
      if (disableFuture && isAfter2(valueToCheck, now2)) {
        return false;
      }
      if (disablePast && isAfter2(now2, valueToCheck)) {
        return false;
      }
      return true;
    };
    const isValidValue = () => {
      if (utils.getMinutes(valueToCheck) % minutesStep !== 0) {
        return false;
      }
      if (shouldDisableClock != null && shouldDisableClock(utils.toJsDate(valueToCheck).getTime(), "hours")) {
        return false;
      }
      if (shouldDisableTime) {
        return !shouldDisableTime(valueToCheck, "hours");
      }
      return true;
    };
    return !containsValidTime() || !isValidValue();
  }, [disableIgnoringDatePartForTimeValidation, utils, minTime, maxTime, disableFuture, now2, disablePast, minutesStep, shouldDisableClock, shouldDisableTime]);
  const timeOptions = React162.useMemo(() => {
    const startOfDay = utils.startOfDay(valueOrReferenceDate);
    return [startOfDay, ...Array.from({
      length: Math.ceil(24 * 60 / timeStep) - 1
    }, (_4, index) => utils.addMinutes(startOfDay, timeStep * (index + 1)))];
  }, [valueOrReferenceDate, timeStep, utils]);
  return (0, import_jsx_runtime187.jsx)(DigitalClockRoot, _extends({
    ref: handleRef,
    className: clsx_default2(classes2.root, className),
    ownerState
  }, other, {
    children: (0, import_jsx_runtime187.jsx)(DigitalClockList, {
      autoFocusItem: autoFocus || !!focusedView,
      role: "listbox",
      "aria-label": localeText.timePickerToolbarTitle,
      className: classes2.list,
      children: timeOptions.map((option) => {
        if (skipDisabled && isTimeDisabled(option)) {
          return null;
        }
        const isSelected = utils.isEqual(option, value);
        return (0, import_jsx_runtime187.jsx)(ClockItem, _extends({
          onClick: () => !readOnly && handleItemSelect(option),
          selected: isSelected,
          disabled: disabled || isTimeDisabled(option),
          disableRipple: readOnly,
          role: "option",
          "aria-disabled": readOnly,
          "aria-selected": isSelected
        }, clockItemProps, {
          children: utils.format(option, ampm ? "fullTime12h" : "fullTime24h")
        }), utils.toISO(option));
      })
    })
  }));
});
true ? DigitalClock.propTypes = {
  ampm: import_prop_types103.default.bool,
  autoFocus: import_prop_types103.default.bool,
  classes: import_prop_types103.default.object,
  className: import_prop_types103.default.string,
  components: import_prop_types103.default.object,
  componentsProps: import_prop_types103.default.object,
  defaultValue: import_prop_types103.default.any,
  disabled: import_prop_types103.default.bool,
  disableFuture: import_prop_types103.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types103.default.bool,
  disablePast: import_prop_types103.default.bool,
  focusedView: import_prop_types103.default.oneOf(["hours"]),
  maxTime: import_prop_types103.default.any,
  minTime: import_prop_types103.default.any,
  minutesStep: import_prop_types103.default.number,
  onChange: import_prop_types103.default.func,
  onFocusedViewChange: import_prop_types103.default.func,
  onViewChange: import_prop_types103.default.func,
  openTo: import_prop_types103.default.oneOf(["hours"]),
  readOnly: import_prop_types103.default.bool,
  referenceDate: import_prop_types103.default.any,
  shouldDisableClock: import_prop_types103.default.func,
  shouldDisableTime: import_prop_types103.default.func,
  skipDisabled: import_prop_types103.default.bool,
  slotProps: import_prop_types103.default.object,
  slots: import_prop_types103.default.object,
  sx: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object, import_prop_types103.default.bool])), import_prop_types103.default.func, import_prop_types103.default.object]),
  timeStep: import_prop_types103.default.number,
  timezone: import_prop_types103.default.string,
  value: import_prop_types103.default.any,
  view: import_prop_types103.default.oneOf(["hours"]),
  views: import_prop_types103.default.arrayOf(import_prop_types103.default.oneOf(["hours"]))
} : void 0;

// node_modules/@mui/x-date-pickers/timeViewRenderers/timeViewRenderers.js
var import_jsx_runtime188 = __toESM(require_jsx_runtime());
var renderTimeViewClock = ({
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  ampmInClock,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  showViewSwitcher,
  disableIgnoringDatePartForTimeValidation,
  timezone
}) => (0, import_jsx_runtime188.jsx)(TimeClock, {
  view,
  onViewChange,
  focusedView: focusedView && isTimeView(focusedView) ? focusedView : null,
  onFocusedViewChange,
  views: views.filter(isTimeView),
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  ampmInClock,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  showViewSwitcher,
  disableIgnoringDatePartForTimeValidation,
  timezone
});
var renderDigitalClockTimeView = ({
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timezone
}) => (0, import_jsx_runtime188.jsx)(DigitalClock, {
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views: views.filter(isTimeView),
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeStep: timeSteps == null ? void 0 : timeSteps.minutes,
  skipDisabled,
  timezone
});
var renderMultiSectionDigitalClockTimeView = ({
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timezone
}) => (0, import_jsx_runtime188.jsx)(MultiSectionDigitalClock, {
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  views: views.filter(isTimeView),
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minTime,
  maxTime,
  shouldDisableTime,
  shouldDisableClock,
  minutesStep,
  ampm,
  components,
  componentsProps,
  slots,
  slotProps,
  readOnly,
  disabled,
  sx,
  autoFocus,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timezone
});

// node_modules/@mui/x-date-pickers/dateTimeViewRenderers/dateTimeViewRenderers.js
var import_jsx_runtime189 = __toESM(require_jsx_runtime());
var import_jsx_runtime190 = __toESM(require_jsx_runtime());
var renderDesktopDateTimeView = ({
  view,
  onViewChange,
  views,
  focusedView,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes: classes2,
  disableFuture,
  disablePast,
  minDate,
  minTime,
  maxDate,
  maxTime,
  shouldDisableDate,
  shouldDisableMonth,
  shouldDisableYear,
  shouldDisableTime,
  shouldDisableClock,
  reduceAnimations,
  minutesStep,
  ampm,
  onMonthChange,
  monthsPerRow,
  onYearChange,
  yearsPerRow,
  defaultCalendarMonth,
  components,
  componentsProps,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  sx,
  autoFocus,
  fixedWeekNumber,
  displayWeekNumber,
  timezone,
  disableIgnoringDatePartForTimeValidation,
  timeSteps,
  skipDisabled,
  timeViewsCount,
  shouldRenderTimeInASingleColumn
}) => {
  var _resolveComponentProp, _slotProps$actionBar;
  const isActionBarVisible = !!((_resolveComponentProp = resolveComponentProps((_slotProps$actionBar = slotProps == null ? void 0 : slotProps.actionBar) != null ? _slotProps$actionBar : componentsProps == null ? void 0 : componentsProps.actionBar, {})) != null && (_resolveComponentProp = _resolveComponentProp.actions) != null && _resolveComponentProp.length);
  const commonTimeProps = {
    view: isInternalTimeView(view) ? view : "hours",
    onViewChange,
    focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
    onFocusedViewChange,
    views: views.filter(isInternalTimeView),
    value,
    defaultValue,
    referenceDate,
    onChange,
    className,
    classes: classes2,
    disableFuture,
    disablePast,
    minTime,
    maxTime,
    shouldDisableTime,
    shouldDisableClock,
    minutesStep,
    ampm,
    components,
    componentsProps,
    slots,
    slotProps,
    readOnly,
    disabled,
    autoFocus,
    disableIgnoringDatePartForTimeValidation,
    timeSteps,
    skipDisabled,
    timezone
  };
  return (0, import_jsx_runtime190.jsxs)(React164.Fragment, {
    children: [(0, import_jsx_runtime190.jsxs)(DateTimeViewWrapper, {
      children: [(0, import_jsx_runtime189.jsx)(DateCalendar, {
        view: isDatePickerView(view) ? view : "day",
        onViewChange,
        views: views.filter(isDatePickerView),
        focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
        onFocusedViewChange,
        value,
        defaultValue,
        referenceDate,
        onChange,
        className,
        classes: classes2,
        disableFuture,
        disablePast,
        minDate,
        maxDate,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        reduceAnimations,
        onMonthChange,
        monthsPerRow,
        onYearChange,
        yearsPerRow,
        defaultCalendarMonth,
        components,
        componentsProps,
        slots,
        slotProps,
        loading,
        renderLoading,
        disableHighlightToday,
        readOnly,
        disabled,
        showDaysOutsideCurrentMonth,
        dayOfWeekFormatter,
        sx,
        autoFocus,
        fixedWeekNumber,
        displayWeekNumber,
        timezone
      }), timeViewsCount > 0 && (0, import_jsx_runtime190.jsxs)(React164.Fragment, {
        children: [(0, import_jsx_runtime189.jsx)(Divider_default, {
          orientation: "vertical"
        }), shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView(_extends({}, commonTimeProps, {
          view: "hours",
          views: ["hours"],
          focusedView: focusedView && isInternalTimeView(focusedView) ? "hours" : null,
          sx: _extends({
            width: "auto",
            [`&.${digitalClockClasses.root}`]: {
              maxHeight: VIEW_HEIGHT
            }
          }, Array.isArray(sx) ? sx : [sx])
        })) : renderMultiSectionDigitalClockTimeView(_extends({}, commonTimeProps, {
          view: isInternalTimeView(view) ? view : "hours",
          views: views.filter(isInternalTimeView),
          focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
          sx: _extends({
            borderBottom: 0,
            width: "auto",
            [`.${multiSectionDigitalClockSectionClasses.root}`]: {
              maxHeight: "100%"
            }
          }, Array.isArray(sx) ? sx : [sx])
        }))]
      })]
    }), isActionBarVisible && (0, import_jsx_runtime189.jsx)(Divider_default, {})]
  });
};

// node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React165 = __toESM(require_react());
init_utils4();
init_IconButton();
init_useForkRef();
init_useId();
var import_jsx_runtime191 = __toESM(require_jsx_runtime());
var import_jsx_runtime192 = __toESM(require_jsx_runtime());
var _excluded114 = ["props", "getOpenDialogAriaText"];
var _excluded223 = ["ownerState"];
var _excluded313 = ["ownerState"];
var useDesktopPicker = (_ref) => {
  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$inputAdornment, _slots$openPickerButt, _slots$layout;
  let {
    props,
    getOpenDialogAriaText
  } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded114);
  const {
    slots,
    slotProps: innerSlotProps,
    className,
    sx,
    format: format2,
    formatDensity,
    timezone,
    name,
    label,
    inputRef,
    readOnly,
    disabled,
    autoFocus,
    localeText,
    reduceAnimations
  } = props;
  const utils = useUtils();
  const internalInputRef = React165.useRef(null);
  const containerRef = React165.useRef(null);
  const labelId = useId();
  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
  const {
    open,
    actions,
    hasUIView,
    layoutProps,
    renderCurrentView,
    shouldRestoreFocus,
    fieldProps: pickerFieldProps
  } = usePicker(_extends({}, pickerParams, {
    props,
    inputRef: internalInputRef,
    autoFocusView: true,
    additionalViewProps: {},
    wrapperVariant: "desktop"
  }));
  const InputAdornment3 = (_slots$inputAdornment = slots.inputAdornment) != null ? _slots$inputAdornment : InputAdornment_default;
  const _useSlotProps = useSlotProps({
    elementType: InputAdornment3,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.inputAdornment,
    additionalProps: {
      position: "end"
    },
    ownerState: props
  }), inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded223);
  const OpenPickerButton = (_slots$openPickerButt = slots.openPickerButton) != null ? _slots$openPickerButt : IconButton_default;
  const _useSlotProps2 = useSlotProps({
    elementType: OpenPickerButton,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.openPickerButton,
    additionalProps: {
      disabled: disabled || readOnly,
      onClick: open ? actions.onClose : actions.onOpen,
      "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils),
      edge: inputAdornmentProps.position
    },
    ownerState: props
  }), openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded313);
  const OpenPickerIcon = slots.openPickerIcon;
  const Field = slots.field;
  const fieldProps = useSlotProps({
    elementType: Field,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
      id: labelId
    }, {
      readOnly,
      disabled,
      className,
      sx,
      format: format2,
      formatDensity,
      timezone,
      label,
      name,
      autoFocus: autoFocus && !props.open,
      focused: open ? true : void 0
    }),
    ownerState: props
  });
  if (hasUIView) {
    fieldProps.InputProps = _extends({}, fieldProps.InputProps, {
      ref: containerRef,
      [`${inputAdornmentProps.position}Adornment`]: (0, import_jsx_runtime191.jsx)(InputAdornment3, _extends({}, inputAdornmentProps, {
        children: (0, import_jsx_runtime191.jsx)(OpenPickerButton, _extends({}, openPickerButtonProps, {
          children: (0, import_jsx_runtime191.jsx)(OpenPickerIcon, _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.openPickerIcon))
        }))
      }))
    });
  }
  const slotsForField = _extends({
    textField: slots.textField,
    clearIcon: slots.clearIcon,
    clearButton: slots.clearButton
  }, fieldProps.slots);
  const Layout8 = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
  let labelledById = labelId;
  if (isToolbarHidden) {
    if (label) {
      labelledById = `${labelId}-label`;
    } else {
      labelledById = void 0;
    }
  }
  const slotProps = _extends({}, innerSlotProps, {
    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
      titleId: labelId
    }),
    popper: _extends({
      "aria-labelledby": labelledById
    }, innerSlotProps == null ? void 0 : innerSlotProps.popper)
  });
  const renderPicker = () => (0, import_jsx_runtime192.jsxs)(LocalizationProvider, {
    localeText,
    children: [(0, import_jsx_runtime191.jsx)(Field, _extends({}, fieldProps, {
      slots: slotsForField,
      slotProps,
      inputRef: handleInputRef
    })), (0, import_jsx_runtime191.jsx)(PickersPopper, _extends({
      role: "dialog",
      placement: "bottom-start",
      anchorEl: containerRef.current
    }, actions, {
      open,
      slots,
      slotProps,
      shouldRestoreFocus,
      reduceAnimations,
      children: (0, import_jsx_runtime191.jsx)(Layout8, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
        slots,
        slotProps,
        children: renderCurrentView()
      }))
    }))]
  });
  return {
    renderPicker
  };
};

// node_modules/@mui/x-date-pickers/internals/utils/date-time-utils.js
init_extends();
init_objectWithoutPropertiesLoose();
var _excluded115 = ["views", "format"];
var resolveDateTimeFormat = (utils, _ref) => {
  let {
    views,
    format: format2
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded115);
  if (format2) {
    return format2;
  }
  const dateViews2 = [];
  const timeViews2 = [];
  views.forEach((view) => {
    if (isTimeView(view)) {
      timeViews2.push(view);
    } else {
      dateViews2.push(view);
    }
  });
  if (timeViews2.length === 0) {
    return resolveDateFormat(utils, _extends({
      views: dateViews2
    }, other), false);
  }
  if (dateViews2.length === 0) {
    return resolveTimeFormat(utils, _extends({
      views: timeViews2
    }, other));
  }
  const timeFormat = resolveTimeFormat(utils, _extends({
    views: timeViews2
  }, other));
  const dateFormat = resolveDateFormat(utils, _extends({
    views: dateViews2
  }, other), false);
  return `${dateFormat} ${timeFormat}`;
};
var resolveViews = (ampm, views, shouldUseSingleColumn) => {
  if (shouldUseSingleColumn) {
    return views.filter((view) => !isInternalTimeView(view) || view === "hours");
  }
  return ampm ? [...views, "meridiem"] : views;
};
var resolveShouldRenderTimeInASingleColumn = (timeSteps, threshold) => {
  var _timeSteps$hours, _timeSteps$minutes;
  return 24 * 60 / (((_timeSteps$hours = timeSteps.hours) != null ? _timeSteps$hours : 1) * ((_timeSteps$minutes = timeSteps.minutes) != null ? _timeSteps$minutes : 5)) <= threshold;
};
function resolveTimeViewsResponse({
  thresholdToRenderTimeInASingleColumn: inThreshold,
  ampm,
  timeSteps: inTimeSteps,
  views
}) {
  const thresholdToRenderTimeInASingleColumn = inThreshold != null ? inThreshold : 24;
  const timeSteps = _extends({
    hours: 1,
    minutes: 5,
    seconds: 5
  }, inTimeSteps);
  const shouldRenderTimeInASingleColumn = resolveShouldRenderTimeInASingleColumn(timeSteps, thresholdToRenderTimeInASingleColumn);
  return {
    thresholdToRenderTimeInASingleColumn,
    timeSteps,
    shouldRenderTimeInASingleColumn,
    views: resolveViews(ampm, views, shouldRenderTimeInASingleColumn)
  };
}

// node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
var DesktopDateTimePicker = React166.forwardRef(function DesktopDateTimePicker2(inProps, ref) {
  var _defaultizedProps$amp, _defaultizedProps$yea, _defaultizedProps$slo2, _defaultizedProps$slo3, _defaultizedProps$slo4, _props$localeText$ope, _props$localeText;
  const localeText = useLocaleText();
  const utils = useUtils();
  const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiDesktopDateTimePicker");
  const {
    shouldRenderTimeInASingleColumn,
    thresholdToRenderTimeInASingleColumn,
    views,
    timeSteps
  } = resolveTimeViewsResponse(defaultizedProps);
  const shouldUseNewRenderer = !defaultizedProps.viewRenderers || Object.keys(defaultizedProps.viewRenderers).length === 0;
  const viewRenderers = shouldUseNewRenderer ? {
    day: renderDesktopDateTimeView,
    month: renderDesktopDateTimeView,
    year: renderDesktopDateTimeView,
    hours: renderDesktopDateTimeView,
    minutes: renderDesktopDateTimeView,
    seconds: renderDesktopDateTimeView,
    meridiem: renderDesktopDateTimeView
  } : _extends({
    day: renderDateViewCalendar,
    month: renderDateViewCalendar,
    year: renderDateViewCalendar,
    hours: null,
    minutes: null,
    seconds: null,
    meridiem: null
  }, defaultizedProps.viewRenderers);
  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
  const actionBarActions = shouldUseNewRenderer ? ["accept"] : [];
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    format: resolveDateTimeFormat(utils, defaultizedProps),
    views,
    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
    ampmInClock,
    timeSteps,
    thresholdToRenderTimeInASingleColumn,
    shouldRenderTimeInASingleColumn,
    slots: _extends({
      field: DateTimeField,
      openPickerIcon: CalendarIcon
    }, defaultizedProps.slots),
    slotProps: _extends({}, defaultizedProps.slotProps, {
      field: (ownerState) => {
        var _defaultizedProps$slo;
        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        });
      },
      toolbar: _extends({
        hidden: true,
        ampmInClock,
        toolbarVariant: shouldUseNewRenderer ? "desktop" : "mobile"
      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
      tabs: _extends({
        hidden: true
      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs),
      actionBar: _extends({
        actions: actionBarActions
      }, (_defaultizedProps$slo4 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo4.actionBar)
    })
  });
  const {
    renderPicker
  } = useDesktopPicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "date-time",
    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
    validator: validateDateTime
  });
  return renderPicker();
});
DesktopDateTimePicker.propTypes = {
  ampm: import_prop_types104.default.bool,
  ampmInClock: import_prop_types104.default.bool,
  autoFocus: import_prop_types104.default.bool,
  className: import_prop_types104.default.string,
  closeOnSelect: import_prop_types104.default.bool,
  components: import_prop_types104.default.object,
  componentsProps: import_prop_types104.default.object,
  dayOfWeekFormatter: import_prop_types104.default.func,
  defaultCalendarMonth: import_prop_types104.default.any,
  defaultValue: import_prop_types104.default.any,
  disabled: import_prop_types104.default.bool,
  disableFuture: import_prop_types104.default.bool,
  disableHighlightToday: import_prop_types104.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types104.default.bool,
  disableOpenPicker: import_prop_types104.default.bool,
  disablePast: import_prop_types104.default.bool,
  displayWeekNumber: import_prop_types104.default.bool,
  fixedWeekNumber: import_prop_types104.default.number,
  format: import_prop_types104.default.string,
  formatDensity: import_prop_types104.default.oneOf(["dense", "spacious"]),
  inputRef: refType_default,
  label: import_prop_types104.default.node,
  loading: import_prop_types104.default.bool,
  localeText: import_prop_types104.default.object,
  maxDate: import_prop_types104.default.any,
  maxDateTime: import_prop_types104.default.any,
  maxTime: import_prop_types104.default.any,
  minDate: import_prop_types104.default.any,
  minDateTime: import_prop_types104.default.any,
  minTime: import_prop_types104.default.any,
  minutesStep: import_prop_types104.default.number,
  monthsPerRow: import_prop_types104.default.oneOf([3, 4]),
  name: import_prop_types104.default.string,
  onAccept: import_prop_types104.default.func,
  onChange: import_prop_types104.default.func,
  onClose: import_prop_types104.default.func,
  onError: import_prop_types104.default.func,
  onMonthChange: import_prop_types104.default.func,
  onOpen: import_prop_types104.default.func,
  onSelectedSectionsChange: import_prop_types104.default.func,
  onViewChange: import_prop_types104.default.func,
  onYearChange: import_prop_types104.default.func,
  open: import_prop_types104.default.bool,
  openTo: import_prop_types104.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types104.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types104.default.bool,
  reduceAnimations: import_prop_types104.default.bool,
  referenceDate: import_prop_types104.default.any,
  renderLoading: import_prop_types104.default.func,
  selectedSections: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types104.default.number, import_prop_types104.default.shape({
    endIndex: import_prop_types104.default.number.isRequired,
    startIndex: import_prop_types104.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types104.default.func,
  shouldDisableDate: import_prop_types104.default.func,
  shouldDisableMonth: import_prop_types104.default.func,
  shouldDisableTime: import_prop_types104.default.func,
  shouldDisableYear: import_prop_types104.default.func,
  showDaysOutsideCurrentMonth: import_prop_types104.default.bool,
  skipDisabled: import_prop_types104.default.bool,
  slotProps: import_prop_types104.default.object,
  slots: import_prop_types104.default.object,
  sx: import_prop_types104.default.oneOfType([import_prop_types104.default.arrayOf(import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object, import_prop_types104.default.bool])), import_prop_types104.default.func, import_prop_types104.default.object]),
  thresholdToRenderTimeInASingleColumn: import_prop_types104.default.number,
  timeSteps: import_prop_types104.default.shape({
    hours: import_prop_types104.default.number,
    minutes: import_prop_types104.default.number,
    seconds: import_prop_types104.default.number
  }),
  timezone: import_prop_types104.default.string,
  value: import_prop_types104.default.any,
  view: import_prop_types104.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  viewRenderers: import_prop_types104.default.shape({
    day: import_prop_types104.default.func,
    hours: import_prop_types104.default.func,
    meridiem: import_prop_types104.default.func,
    minutes: import_prop_types104.default.func,
    month: import_prop_types104.default.func,
    seconds: import_prop_types104.default.func,
    year: import_prop_types104.default.func
  }),
  views: import_prop_types104.default.arrayOf(import_prop_types104.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  yearsPerRow: import_prop_types104.default.oneOf([3, 4])
};

// node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js
init_extends();
var React168 = __toESM(require_react());
var import_prop_types105 = __toESM(require_prop_types());
init_utils4();
init_utils();

// node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/useMobilePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React167 = __toESM(require_react());
init_utils4();
init_useForkRef();
init_useId();
var import_jsx_runtime193 = __toESM(require_jsx_runtime());
var import_jsx_runtime194 = __toESM(require_jsx_runtime());
var _excluded116 = ["props", "getOpenDialogAriaText"];
var useMobilePicker = (_ref) => {
  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$layout;
  let {
    props,
    getOpenDialogAriaText
  } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded116);
  const {
    slots,
    slotProps: innerSlotProps,
    className,
    sx,
    format: format2,
    formatDensity,
    timezone,
    name,
    label,
    inputRef,
    readOnly,
    disabled,
    localeText
  } = props;
  const utils = useUtils();
  const internalInputRef = React167.useRef(null);
  const labelId = useId();
  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
  const {
    open,
    actions,
    layoutProps,
    renderCurrentView,
    fieldProps: pickerFieldProps
  } = usePicker(_extends({}, pickerParams, {
    props,
    inputRef: internalInputRef,
    autoFocusView: true,
    additionalViewProps: {},
    wrapperVariant: "mobile"
  }));
  const Field = slots.field;
  const fieldProps = useSlotProps({
    elementType: Field,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
      id: labelId
    }, !(disabled || readOnly) && {
      onClick: actions.onOpen,
      onKeyDown: onSpaceOrEnter(actions.onOpen)
    }, {
      readOnly: readOnly != null ? readOnly : true,
      disabled,
      className,
      sx,
      format: format2,
      formatDensity,
      timezone,
      label,
      name
    }),
    ownerState: props
  });
  fieldProps.inputProps = _extends({}, fieldProps.inputProps, {
    "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils)
  });
  const slotsForField = _extends({
    textField: slots.textField
  }, fieldProps.slots);
  const Layout8 = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
  let labelledById = labelId;
  if (isToolbarHidden) {
    if (label) {
      labelledById = `${labelId}-label`;
    } else {
      labelledById = void 0;
    }
  }
  const slotProps = _extends({}, innerSlotProps, {
    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
      titleId: labelId
    }),
    mobilePaper: _extends({
      "aria-labelledby": labelledById
    }, innerSlotProps == null ? void 0 : innerSlotProps.mobilePaper)
  });
  const renderPicker = () => (0, import_jsx_runtime194.jsxs)(LocalizationProvider, {
    localeText,
    children: [(0, import_jsx_runtime193.jsx)(Field, _extends({}, fieldProps, {
      slots: slotsForField,
      slotProps,
      inputRef: handleInputRef
    })), (0, import_jsx_runtime193.jsx)(PickersModalDialog, _extends({}, actions, {
      open,
      slots,
      slotProps,
      children: (0, import_jsx_runtime193.jsx)(Layout8, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
        slots,
        slotProps,
        children: renderCurrentView()
      }))
    }))]
  });
  return {
    renderPicker
  };
};

// node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js
var MobileDateTimePicker = React168.forwardRef(function MobileDateTimePicker2(inProps, ref) {
  var _defaultizedProps$amp, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;
  const localeText = useLocaleText();
  const utils = useUtils();
  const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
  const viewRenderers = _extends({
    day: renderDateViewCalendar,
    month: renderDateViewCalendar,
    year: renderDateViewCalendar,
    hours: renderTimeViewClock,
    minutes: renderTimeViewClock,
    seconds: renderTimeViewClock
  }, defaultizedProps.viewRenderers);
  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    format: resolveDateTimeFormat(utils, defaultizedProps),
    ampmInClock,
    slots: _extends({
      field: DateTimeField
    }, defaultizedProps.slots),
    slotProps: _extends({}, defaultizedProps.slotProps, {
      field: (ownerState) => {
        var _defaultizedProps$slo;
        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        });
      },
      toolbar: _extends({
        hidden: false,
        ampmInClock
      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
      tabs: _extends({
        hidden: false
      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs)
    })
  });
  const {
    renderPicker
  } = useMobilePicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "date-time",
    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
    validator: validateDateTime
  });
  return renderPicker();
});
MobileDateTimePicker.propTypes = {
  ampm: import_prop_types105.default.bool,
  ampmInClock: import_prop_types105.default.bool,
  autoFocus: import_prop_types105.default.bool,
  className: import_prop_types105.default.string,
  closeOnSelect: import_prop_types105.default.bool,
  components: import_prop_types105.default.object,
  componentsProps: import_prop_types105.default.object,
  dayOfWeekFormatter: import_prop_types105.default.func,
  defaultCalendarMonth: import_prop_types105.default.any,
  defaultValue: import_prop_types105.default.any,
  disabled: import_prop_types105.default.bool,
  disableFuture: import_prop_types105.default.bool,
  disableHighlightToday: import_prop_types105.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types105.default.bool,
  disableOpenPicker: import_prop_types105.default.bool,
  disablePast: import_prop_types105.default.bool,
  displayWeekNumber: import_prop_types105.default.bool,
  fixedWeekNumber: import_prop_types105.default.number,
  format: import_prop_types105.default.string,
  formatDensity: import_prop_types105.default.oneOf(["dense", "spacious"]),
  inputRef: refType_default,
  label: import_prop_types105.default.node,
  loading: import_prop_types105.default.bool,
  localeText: import_prop_types105.default.object,
  maxDate: import_prop_types105.default.any,
  maxDateTime: import_prop_types105.default.any,
  maxTime: import_prop_types105.default.any,
  minDate: import_prop_types105.default.any,
  minDateTime: import_prop_types105.default.any,
  minTime: import_prop_types105.default.any,
  minutesStep: import_prop_types105.default.number,
  monthsPerRow: import_prop_types105.default.oneOf([3, 4]),
  name: import_prop_types105.default.string,
  onAccept: import_prop_types105.default.func,
  onChange: import_prop_types105.default.func,
  onClose: import_prop_types105.default.func,
  onError: import_prop_types105.default.func,
  onMonthChange: import_prop_types105.default.func,
  onOpen: import_prop_types105.default.func,
  onSelectedSectionsChange: import_prop_types105.default.func,
  onViewChange: import_prop_types105.default.func,
  onYearChange: import_prop_types105.default.func,
  open: import_prop_types105.default.bool,
  openTo: import_prop_types105.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types105.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types105.default.bool,
  reduceAnimations: import_prop_types105.default.bool,
  referenceDate: import_prop_types105.default.any,
  renderLoading: import_prop_types105.default.func,
  selectedSections: import_prop_types105.default.oneOfType([import_prop_types105.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types105.default.number, import_prop_types105.default.shape({
    endIndex: import_prop_types105.default.number.isRequired,
    startIndex: import_prop_types105.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types105.default.func,
  shouldDisableDate: import_prop_types105.default.func,
  shouldDisableMonth: import_prop_types105.default.func,
  shouldDisableTime: import_prop_types105.default.func,
  shouldDisableYear: import_prop_types105.default.func,
  showDaysOutsideCurrentMonth: import_prop_types105.default.bool,
  slotProps: import_prop_types105.default.object,
  slots: import_prop_types105.default.object,
  sx: import_prop_types105.default.oneOfType([import_prop_types105.default.arrayOf(import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object, import_prop_types105.default.bool])), import_prop_types105.default.func, import_prop_types105.default.object]),
  timezone: import_prop_types105.default.string,
  value: import_prop_types105.default.any,
  view: import_prop_types105.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  viewRenderers: import_prop_types105.default.shape({
    day: import_prop_types105.default.func,
    hours: import_prop_types105.default.func,
    minutes: import_prop_types105.default.func,
    month: import_prop_types105.default.func,
    seconds: import_prop_types105.default.func,
    year: import_prop_types105.default.func
  }),
  views: import_prop_types105.default.arrayOf(import_prop_types105.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  yearsPerRow: import_prop_types105.default.oneOf([3, 4])
};

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
var import_jsx_runtime195 = __toESM(require_jsx_runtime());
var _excluded117 = ["desktopModeMediaQuery"];
var DateTimePicker = React169.forwardRef(function DateTimePicker2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiDateTimePicker"
  });
  const {
    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded117);
  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime195.jsx)(DesktopDateTimePicker, _extends({
      ref
    }, other));
  }
  return (0, import_jsx_runtime195.jsx)(MobileDateTimePicker, _extends({
    ref
  }, other));
});
true ? DateTimePicker.propTypes = {
  ampm: import_prop_types106.default.bool,
  ampmInClock: import_prop_types106.default.bool,
  autoFocus: import_prop_types106.default.bool,
  className: import_prop_types106.default.string,
  closeOnSelect: import_prop_types106.default.bool,
  components: import_prop_types106.default.object,
  componentsProps: import_prop_types106.default.object,
  dayOfWeekFormatter: import_prop_types106.default.func,
  defaultCalendarMonth: import_prop_types106.default.any,
  defaultValue: import_prop_types106.default.any,
  desktopModeMediaQuery: import_prop_types106.default.string,
  disabled: import_prop_types106.default.bool,
  disableFuture: import_prop_types106.default.bool,
  disableHighlightToday: import_prop_types106.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types106.default.bool,
  disableOpenPicker: import_prop_types106.default.bool,
  disablePast: import_prop_types106.default.bool,
  displayWeekNumber: import_prop_types106.default.bool,
  fixedWeekNumber: import_prop_types106.default.number,
  format: import_prop_types106.default.string,
  formatDensity: import_prop_types106.default.oneOf(["dense", "spacious"]),
  inputRef: refType_default,
  label: import_prop_types106.default.node,
  loading: import_prop_types106.default.bool,
  localeText: import_prop_types106.default.object,
  maxDate: import_prop_types106.default.any,
  maxDateTime: import_prop_types106.default.any,
  maxTime: import_prop_types106.default.any,
  minDate: import_prop_types106.default.any,
  minDateTime: import_prop_types106.default.any,
  minTime: import_prop_types106.default.any,
  minutesStep: import_prop_types106.default.number,
  monthsPerRow: import_prop_types106.default.oneOf([3, 4]),
  name: import_prop_types106.default.string,
  onAccept: import_prop_types106.default.func,
  onChange: import_prop_types106.default.func,
  onClose: import_prop_types106.default.func,
  onError: import_prop_types106.default.func,
  onMonthChange: import_prop_types106.default.func,
  onOpen: import_prop_types106.default.func,
  onSelectedSectionsChange: import_prop_types106.default.func,
  onViewChange: import_prop_types106.default.func,
  onYearChange: import_prop_types106.default.func,
  open: import_prop_types106.default.bool,
  openTo: import_prop_types106.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types106.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types106.default.bool,
  reduceAnimations: import_prop_types106.default.bool,
  referenceDate: import_prop_types106.default.any,
  renderLoading: import_prop_types106.default.func,
  selectedSections: import_prop_types106.default.oneOfType([import_prop_types106.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types106.default.number, import_prop_types106.default.shape({
    endIndex: import_prop_types106.default.number.isRequired,
    startIndex: import_prop_types106.default.number.isRequired
  })]),
  shouldDisableClock: import_prop_types106.default.func,
  shouldDisableDate: import_prop_types106.default.func,
  shouldDisableMonth: import_prop_types106.default.func,
  shouldDisableTime: import_prop_types106.default.func,
  shouldDisableYear: import_prop_types106.default.func,
  showDaysOutsideCurrentMonth: import_prop_types106.default.bool,
  skipDisabled: import_prop_types106.default.bool,
  slotProps: import_prop_types106.default.object,
  slots: import_prop_types106.default.object,
  sx: import_prop_types106.default.oneOfType([import_prop_types106.default.arrayOf(import_prop_types106.default.oneOfType([import_prop_types106.default.func, import_prop_types106.default.object, import_prop_types106.default.bool])), import_prop_types106.default.func, import_prop_types106.default.object]),
  thresholdToRenderTimeInASingleColumn: import_prop_types106.default.number,
  timeSteps: import_prop_types106.default.shape({
    hours: import_prop_types106.default.number,
    minutes: import_prop_types106.default.number,
    seconds: import_prop_types106.default.number
  }),
  timezone: import_prop_types106.default.string,
  value: import_prop_types106.default.any,
  view: import_prop_types106.default.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  viewRenderers: import_prop_types106.default.shape({
    day: import_prop_types106.default.func,
    hours: import_prop_types106.default.func,
    meridiem: import_prop_types106.default.func,
    minutes: import_prop_types106.default.func,
    month: import_prop_types106.default.func,
    seconds: import_prop_types106.default.func,
    year: import_prop_types106.default.func
  }),
  views: import_prop_types106.default.arrayOf(import_prop_types106.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
  yearsPerRow: import_prop_types106.default.oneOf([3, 4])
} : void 0;

// node_modules/@devexpress/dx-react-scheduler-material-ui/dist/dx-react-scheduler-material-ui.es.js
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter2) {
  if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
    return Array.from(iter2);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var _excluded118 = ["children", "className"];
var PREFIX = "Container";
var classes = {
  container: "".concat(PREFIX, "-container")
};
var ContainerBase = function ContainerBase2(_ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded118);
  return (0, import_react4.createElement)("div", _extends2({
    className: clsx_m_default(classes.container, className)
  }, restProps), children);
};
true ? ContainerBase.propTypes = {
  children: import_prop_types107.default.node.isRequired,
  className: import_prop_types107.default.string
} : void 0;
ContainerBase.defaultProps = {
  className: void 0
};
var _excluded$1 = ["height", "style"];
var StyledContainerBase = styled_default(ContainerBase)(_defineProperty({}, "&.".concat(classes.container), {
  WebkitOverflowScrolling: "touch",
  width: "100%",
  height: "100%",
  position: "relative",
  display: "flex",
  flexDirection: "column"
}));
var Root = function Root2(_ref) {
  var height = _ref.height, style = _ref.style, restProps = _objectWithoutProperties(_ref, _excluded$1);
  var containerStyle = height === AUTO_HEIGHT ? {
    height: "100%"
  } : {
    height: "".concat(height, "px")
  };
  return (0, import_react4.createElement)(StyledContainerBase, _extends2({
    style: _objectSpread2(_objectSpread2({}, containerStyle), style)
  }, restProps));
};
true ? Root.propTypes = {
  height: import_prop_types107.default.oneOfType([import_prop_types107.default.number, import_prop_types107.default.string]).isRequired,
  style: import_prop_types107.default.object
} : void 0;
Root.defaultProps = {
  style: null
};
var _excluded$2 = ["children"];
var Scheduler2 = function Scheduler3(_ref) {
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$2);
  return (0, import_react4.createElement)(Scheduler, _extends2({
    rootComponent: Root
  }, restProps), children);
};
Scheduler2.Root = Root;
true ? Scheduler2.propTypes = {
  children: import_prop_types107.default.node.isRequired
} : void 0;
var _SPACING_CELL_HEIGHT;
var _BASIC_CELL_HEIGHT;
var red = colors_exports.red;
var pink2 = colors_exports.pink;
var purple = colors_exports.purple;
var deepPurple2 = colors_exports.deepPurple;
var indigo2 = colors_exports.indigo;
var blue = colors_exports.blue;
var lightBlue = colors_exports.lightBlue;
var cyan2 = colors_exports.cyan;
var teal2 = colors_exports.teal;
var green = colors_exports.green;
var lightGreen2 = colors_exports.lightGreen;
var lime2 = colors_exports.lime;
var yellow2 = colors_exports.yellow;
var amber2 = colors_exports.amber;
var orange = colors_exports.orange;
var deepOrange2 = colors_exports.deepOrange;
var PRIMARY_COLOR = blue;
var TRANSITIONS_TIME = 400;
var DEFAULT_PALETTE = [red, pink2, purple, deepPurple2, indigo2, blue, lightBlue, cyan2, teal2, green, lightGreen2, lime2, yellow2, amber2, orange, deepOrange2];
var XS_CELL_WIDTH = 50;
var SMALL_CELL_WIDTH = 65;
var CELL_WIDTH = 100;
var XS_LAYOUT_WIDTH = 500;
var SMALL_LAYOUT_WIDTH = 700;
var SMALL_LAYOUT_MEDIA_QUERY = "@media (max-width: ".concat(XS_LAYOUT_WIDTH, "px)");
var LAYOUT_MEDIA_QUERY = "@media (max-width: ".concat(SMALL_LAYOUT_WIDTH, "px)");
var GROUPING_PANEL_VERTICAL_CELL_WIDTH = 12.5;
var DEFAULT_SPACING = 8;
var SPACING_CELL_HEIGHT = (_SPACING_CELL_HEIGHT = {}, _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.MONTH, 12.5), _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.WEEK, 6), _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.DAY, 6), _defineProperty(_SPACING_CELL_HEIGHT, VIEW_TYPES.ALL_DAY_PANEL, 5.75), _SPACING_CELL_HEIGHT);
var BASIC_CELL_HEIGHT = (_BASIC_CELL_HEIGHT = {}, _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.MONTH, SPACING_CELL_HEIGHT[VIEW_TYPES.MONTH] * DEFAULT_SPACING), _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.WEEK, SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK] * DEFAULT_SPACING), _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.DAY, SPACING_CELL_HEIGHT[VIEW_TYPES.DAY] * DEFAULT_SPACING), _defineProperty(_BASIC_CELL_HEIGHT, VIEW_TYPES.ALL_DAY_PANEL, SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL] * DEFAULT_SPACING), _BASIC_CELL_HEIGHT);
var SPACING_LABEL_HEIGHT = SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK];
var LEFT_PANEL_WIDTH_SPACING = 10;
var getBorder = function getBorder2(theme) {
  return "1px solid ".concat(theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68));
};
var getBrightBorder = function getBrightBorder2(theme) {
  return "1px solid ".concat(theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.72) : darken(alpha(theme.palette.divider, 1), 0.5));
};
var cellsMeta = function cellsMeta2(tableElement) {
  var cellElements = Array.from(tableElement.querySelectorAll("td"));
  return {
    parentRect: function parentRect() {
      return tableElement.getBoundingClientRect();
    },
    getCellRects: cellElements.map(function(element) {
      return function() {
        return element.getBoundingClientRect();
      };
    })
  };
};
var scrollingStrategy = function scrollingStrategy2(scrollablePart, fixedPartVertical, fixedPartHorizontal) {
  var fixedPartVerticalRect = fixedPartVertical.getBoundingClientRect();
  var fixedPartHorizontalRect = fixedPartHorizontal && fixedPartHorizontal.getBoundingClientRect();
  var changeVerticalScroll = function changeVerticalScroll2(value) {
    scrollablePart.scrollTop += value;
  };
  var changeHorizontalScroll = function changeHorizontalScroll2(value) {
    scrollablePart.scrollLeft += value;
  };
  return {
    topBoundary: fixedPartVerticalRect.height + fixedPartVerticalRect.top,
    bottomBoundary: scrollablePart.offsetTop + scrollablePart.clientHeight,
    fixedTopHeight: fixedPartVerticalRect.height,
    leftBoundary: fixedPartHorizontalRect ? fixedPartHorizontalRect.width + fixedPartHorizontalRect.left : scrollablePart.offsetLeft,
    rightBoundary: scrollablePart.offsetLeft + scrollablePart.clientWidth,
    fixedLeftWidth: fixedPartHorizontalRect === null || fixedPartHorizontalRect === void 0 ? void 0 : fixedPartHorizontalRect.width,
    changeVerticalScroll,
    changeHorizontalScroll
  };
};
var ensureColor = function ensureColor2(level, color) {
  return color[level] || PRIMARY_COLOR[level];
};
var getResourceColor = function getResourceColor2(resources) {
  if (resources && resources.length) {
    var _resources$find;
    return (_resources$find = resources.find(function(resource) {
      return resource.isMain;
    })) === null || _resources$find === void 0 ? void 0 : _resources$find.color;
  }
  return void 0;
};
var getAppointmentColor = function getAppointmentColor2(level, color, defaultColor) {
  if (!color)
    return ensureColor(level, defaultColor);
  if (typeof color === "string")
    return color;
  return ensureColor(level, color);
};
var getWidthInPixels = function getWidthInPixels2(cellsNumber, cellWidth) {
  return "".concat(cellsNumber * cellWidth, "px");
};
var getViewCellKey = function getViewCellKey2(startDate, groups) {
  if (!groups)
    return startDate.toString();
  return groups.reduce(function(acc, group) {
    return acc.concat(group.id);
  }, startDate.toString());
};
var addCommaAndSpaceToString = function addCommaAndSpaceToString2(string) {
  return string && "".concat(string, ",\xA0");
};
var getEmptyCellWidth = function getEmptyCellWidth2(theme, width, calculatedWidth) {
  return width ? "".concat(width, "px") : "calc(".concat(theme.spacing(calculatedWidth), " + 1px)");
};
var _excluded$3 = ["timeScaleComponent", "dayScaleComponent", "timeTableComponent", "dayScaleEmptyCellComponent", "groupingPanelComponent", "groupingPanelSize", "setScrollingStrategy", "className", "forwardedRef"];
var PREFIX$1 = "MainLayout";
var classes$1 = {
  container: "".concat(PREFIX$1, "-container"),
  stickyElement: "".concat(PREFIX$1, "-stickyElement"),
  header: "".concat(PREFIX$1, "-header"),
  leftPanel: "".concat(PREFIX$1, "-leftPanel"),
  ordinaryLeftPanelBorder: "".concat(PREFIX$1, "-ordinaryLeftPanelBorder"),
  brightLeftPanelBorder: "".concat(PREFIX$1, "-brightLeftPanelBorder"),
  ordinaryHeaderBorder: "".concat(PREFIX$1, "-ordinaryHeaderBorder"),
  brightHeaderBorder: "".concat(PREFIX$1, "-brightHeaderBorder"),
  dayScaleEmptyCell: "".concat(PREFIX$1, "-dayScaleEmptyCell"),
  flexRow: "".concat(PREFIX$1, "-flexRow"),
  relativeContainer: "".concat(PREFIX$1, "-relativeContainer"),
  inlineFlex: "".concat(PREFIX$1, "-inlineFlex"),
  background: "".concat(PREFIX$1, "-background")
};
var StyledDiv = styled_default("div", {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== "leftPanelWidth" && prop !== "calculatedLeftPanelWidth";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, leftPanelWidth = _ref.leftPanelWidth, calculatedLeftPanelWidth = _ref.calculatedLeftPanelWidth;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$1.container), {
    overflowY: "auto",
    position: "relative",
    tableLayout: "fixed"
  }), _defineProperty(_ref2, "& .".concat(classes$1.stickyElement), {
    tableLayout: "fixed",
    position: "sticky",
    overflow: "visible",
    background: theme.palette.background.paper
  }), _defineProperty(_ref2, "& .".concat(classes$1.header), {
    top: 0,
    zIndex: 2
  }), _defineProperty(_ref2, "& .".concat(classes$1.leftPanel), {
    left: 0,
    zIndex: 1,
    boxSizing: "border-box"
  }), _defineProperty(_ref2, "& .".concat(classes$1.ordinaryLeftPanelBorder), {
    borderRight: getBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.brightLeftPanelBorder), {
    borderRight: getBrightBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.ordinaryHeaderBorder), {
    borderBottom: getBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.brightHeaderBorder), {
    borderBottom: getBrightBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$1.dayScaleEmptyCell), {
    display: "flex",
    alignItems: "flex-end",
    width: getEmptyCellWidth(theme, leftPanelWidth, calculatedLeftPanelWidth),
    minWidth: getEmptyCellWidth(theme, leftPanelWidth, calculatedLeftPanelWidth)
  }), _defineProperty(_ref2, "& .".concat(classes$1.flexRow), {
    display: "flex",
    flexDirection: "row"
  }), _defineProperty(_ref2, "& .".concat(classes$1.relativeContainer), {
    position: "relative"
  }), _defineProperty(_ref2, "& .".concat(classes$1.inlineFlex), {
    display: "inline-flex"
  }), _defineProperty(_ref2, "& .".concat(classes$1.background), {
    background: theme.palette.background.paper
  }), _ref2;
});
var MainLayout = (0, import_react4.memo)(function(_ref3) {
  var _classNames, _classNames2, _classNames3;
  var TimeScale = _ref3.timeScaleComponent, DayScale = _ref3.dayScaleComponent, TimeTable = _ref3.timeTableComponent, DayScaleEmptyCell3 = _ref3.dayScaleEmptyCellComponent, GroupingPanel3 = _ref3.groupingPanelComponent, groupingPanelSize = _ref3.groupingPanelSize, setScrollingStrategy = _ref3.setScrollingStrategy, className = _ref3.className, forwardedRef = _ref3.forwardedRef, restProps = _objectWithoutProperties(_ref3, _excluded$3);
  var layoutRef = (0, import_react4.useRef)(null);
  var layoutHeaderRef = (0, import_react4.useRef)(null);
  var leftPanelRef = (0, import_react4.useRef)(null);
  var _React$useState = (0, import_react4.useState)(false), _React$useState2 = _slicedToArray(_React$useState, 2), isLeftBorderSet = _React$useState2[0], setIsLeftBorderSet = _React$useState2[1];
  var _React$useState3 = (0, import_react4.useState)(false), _React$useState4 = _slicedToArray(_React$useState3, 2), isTopBorderSet = _React$useState4[0], setIsTopBorderSet = _React$useState4[1];
  var _React$useState5 = (0, import_react4.useState)(0), _React$useState6 = _slicedToArray(_React$useState5, 2), leftPanelWidth = _React$useState6[0], setLeftPanelWidth = _React$useState6[1];
  (0, import_react4.useEffect)(function() {
    var leftPanel = leftPanelRef.current;
    setScrollingStrategy(scrollingStrategy(layoutRef.current, layoutHeaderRef.current, leftPanel));
    leftPanel && setLeftPanelWidth(leftPanel.getBoundingClientRect().width);
  }, [layoutRef, layoutHeaderRef, leftPanelRef, setScrollingStrategy, setLeftPanelWidth]);
  var renderTimeScale = !!TimeScale;
  var renderLeftPanel = renderTimeScale || !!groupingPanelSize;
  var calculatedGroupPanelWidth = groupingPanelSize ? groupingPanelSize * GROUPING_PANEL_VERTICAL_CELL_WIDTH : 0;
  var calculatedLeftPanelWidth = LEFT_PANEL_WIDTH_SPACING + calculatedGroupPanelWidth;
  var setBorders = (0, import_react4.useCallback)(function(event) {
    if (!!event.target.scrollLeft ^ isLeftBorderSet) {
      setIsLeftBorderSet(!isLeftBorderSet);
    }
    if (!!event.target.scrollTop ^ isTopBorderSet) {
      setIsTopBorderSet(!isTopBorderSet);
    }
  }, [isLeftBorderSet, isTopBorderSet]);
  return (0, import_react4.createElement)(StyledDiv, _extends2({
    leftPanelWidth,
    calculatedLeftPanelWidth,
    ref: function ref(node) {
      layoutRef.current = node;
      if (typeof forwardedRef === "function") {
        forwardedRef(node);
      } else if (forwardedRef) {
        forwardedRef.current = node;
      }
    },
    className: clsx_m_default(classes$1.container, className),
    onScroll: setBorders
  }, restProps), (0, import_react4.createElement)("div", null, (0, import_react4.createElement)("div", {
    ref: layoutHeaderRef,
    className: clsx_m_default(classes$1.stickyElement, classes$1.header, classes$1.flexRow)
  }, (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$1.background, true), _defineProperty(_classNames, classes$1.inlineFlex, true), _defineProperty(_classNames, classes$1.ordinaryHeaderBorder, !isTopBorderSet), _defineProperty(_classNames, classes$1.brightHeaderBorder, isTopBorderSet), _classNames))
  }, renderLeftPanel && (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$1.stickyElement, true), _defineProperty(_classNames2, classes$1.leftPanel, true), _defineProperty(_classNames2, classes$1.dayScaleEmptyCell, true), _defineProperty(_classNames2, classes$1.ordinaryLeftPanelBorder, !isLeftBorderSet), _defineProperty(_classNames2, classes$1.brightLeftPanelBorder, isLeftBorderSet), _classNames2))
  }, (0, import_react4.createElement)(DayScaleEmptyCell3, null)), (0, import_react4.createElement)("div", null, (0, import_react4.createElement)(DayScale, null)))), (0, import_react4.createElement)("div", {
    className: classes$1.flexRow
  }, (0, import_react4.createElement)("div", {
    className: classes$1.inlineFlex
  }, renderLeftPanel && (0, import_react4.createElement)("div", {
    ref: leftPanelRef,
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$1.flexRow, true), _defineProperty(_classNames3, classes$1.stickyElement, true), _defineProperty(_classNames3, classes$1.leftPanel, true), _defineProperty(_classNames3, classes$1.ordinaryLeftPanelBorder, !isLeftBorderSet), _defineProperty(_classNames3, classes$1.brightLeftPanelBorder, isLeftBorderSet), _classNames3))
  }, (0, import_react4.createElement)(GroupingPanel3, null), renderTimeScale && (0, import_react4.createElement)(TimeScale, null)), (0, import_react4.createElement)("div", {
    className: classes$1.relativeContainer
  }, (0, import_react4.createElement)(TimeTable, null))))));
});
true ? MainLayout.propTypes = {
  timeScaleComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]),
  dayScaleComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  timeTableComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  dayScaleEmptyCellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  groupingPanelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]),
  groupingPanelSize: import_prop_types107.default.number,
  setScrollingStrategy: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string,
  forwardedRef: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object])
} : void 0;
MainLayout.defaultProps = {
  groupingPanelComponent: function groupingPanelComponent() {
    return null;
  },
  timeScaleComponent: void 0,
  groupingPanelSize: 0,
  className: void 0,
  forwardedRef: void 0
};
var _excluded$4 = ["children"];
var Row = function Row2(_ref) {
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$4);
  return (0, import_react4.createElement)(TableRow_default, restProps, children);
};
true ? Row.propTypes = {
  children: import_prop_types107.default.node
} : void 0;
Row.defaultProps = {
  children: null
};
var _excluded$5 = ["className", "children"];
var PREFIX$2 = "DayScaleEmptyCell";
var classes$2 = {
  emptyCell: "".concat(PREFIX$2, "-emptyCell")
};
var StyledDiv$1 = styled_default("div")(_defineProperty({}, "&.".concat(classes$2.emptyCell), {
  height: "100%",
  width: "100%"
}));
var DayScaleEmptyCell = function DayScaleEmptyCell2(_ref) {
  var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$5);
  return (0, import_react4.createElement)(StyledDiv$1, _extends2({}, restProps, {
    className: clsx_m_default(classes$2.emptyCell, className)
  }), children);
};
true ? DayScaleEmptyCell.propTypes = {
  className: import_prop_types107.default.string,
  children: import_prop_types107.default.node
} : void 0;
DayScaleEmptyCell.defaultProps = {
  className: void 0,
  children: void 0
};
var Container2 = styled_default(ContainerBase)(_defineProperty({}, "&.".concat(classes.container), {
  position: "absolute",
  width: "100%",
  top: 0,
  left: 0
}));
var _excluded$6 = ["cellComponent", "rowComponent", "cellsData", "groupOrientation", "className", "groupCount", "includeAllDayCell"];
var PREFIX$3 = "TicksLayout";
var classes$3 = {
  table: "".concat(PREFIX$3, "-table")
};
var StyledTable = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$3.table), {
  tableLayout: "fixed",
  boxSizing: "border-box"
}));
var TicksLayout = function TicksLayout2(_ref) {
  var Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, cellsData = _ref.cellsData, groupOrientation = _ref.groupOrientation, className = _ref.className, groupCount = _ref.groupCount, includeAllDayCell = _ref.includeAllDayCell, restProps = _objectWithoutProperties(_ref, _excluded$6);
  var groupHeight = cellsData.length / groupCount;
  return (0, import_react4.createElement)(StyledTable, _extends2({}, restProps, {
    className: clsx_m_default(classes$3.table, className)
  }), (0, import_react4.createElement)(TableBody_default, null, cellsData.map(function(_ref2, index) {
    var _ref3 = _slicedToArray(_ref2, 1), firstDay = _ref3[0];
    return (0, import_react4.createElement)(import_react4.Fragment, {
      key: index.toString()
    }, index % groupHeight === 0 && includeAllDayCell && (0, import_react4.createElement)(Row4, {
      key: (index / groupHeight).toString()
    }, (0, import_react4.createElement)(Cell7, {
      key: "all-day-tick ".concat(index / groupHeight),
      isAllDay: true,
      startDate: firstDay.startDate,
      endDate: firstDay.endDate,
      endOfGroup: false,
      groupingInfo: firstDay.groupingInfo
    })), (0, import_react4.createElement)(Row4, {
      key: (firstDay.startDate + index).toString()
    }, (0, import_react4.createElement)(Cell7, {
      key: index.toString(),
      startDate: firstDay.startDate,
      endDate: firstDay.endDate,
      endOfGroup: firstDay.endOfGroup && groupOrientation === VERTICAL_GROUP_ORIENTATION,
      groupingInfo: firstDay.groupingInfo
    })));
  })));
};
true ? TicksLayout.propTypes = {
  cellsData: import_prop_types107.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  groupOrientation: import_prop_types107.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION]),
  groupCount: import_prop_types107.default.number,
  includeAllDayCell: import_prop_types107.default.bool,
  className: import_prop_types107.default.string
} : void 0;
TicksLayout.defaultProps = {
  className: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION,
  groupCount: 1,
  includeAllDayCell: false
};
var _excluded$7 = ["labelComponent", "rowComponent", "tickCellComponent", "allDayTitleComponent", "cellsData", "formatDate", "groupOrientation", "groups", "showAllDayTitle", "height", "className"];
var PREFIX$4 = "Layout";
var classes$4 = {
  timeScaleContainer: "".concat(PREFIX$4, "-timeScaleContainer"),
  ticks: "".concat(PREFIX$4, "-ticks"),
  cell: "".concat(PREFIX$4, "-cell"),
  verticalCell: "".concat(PREFIX$4, "-verticalCell"),
  flexRow: "".concat(PREFIX$4, "-flexRow")
};
var StyledDiv$2 = styled_default("div", {
  shouldForwardProp: function shouldForwardProp2(prop) {
    return prop !== "height" && prop !== "defaultHeight";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, height = _ref.height, defaultHeight = _ref.defaultHeight;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$4.timeScaleContainer), {
    width: theme.spacing(LEFT_PANEL_WIDTH_SPACING - 1)
  }), _defineProperty(_ref2, "& .".concat(classes$4.ticks), {
    width: theme.spacing(1)
  }), _defineProperty(_ref2, "& .".concat(classes$4.cell), {
    boxSizing: "border-box",
    padding: 0,
    borderBottom: "none"
  }), _defineProperty(_ref2, "& .".concat(classes$4.verticalCell), {
    borderBottom: getBrightBorder(theme),
    "tr:last-child &": {
      borderBottom: "none"
    },
    height: height ? "".concat(height, "px") : theme.spacing(defaultHeight)
  }), _defineProperty(_ref2, "&.".concat(classes$4.flexRow), {
    display: "flex",
    flexDirection: "row"
  }), _ref2;
});
var Layout = function Layout2(_ref3) {
  var Label3 = _ref3.labelComponent, rowComponent = _ref3.rowComponent, tickCellComponent = _ref3.tickCellComponent, AllDayTitle = _ref3.allDayTitleComponent, cellsData = _ref3.cellsData, formatDate3 = _ref3.formatDate, groupOrientation = _ref3.groupOrientation, groups = _ref3.groups, showAllDayTitle = _ref3.showAllDayTitle, height = _ref3.height, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$7);
  var groupCount = getGroupsLastRow(groups).length;
  var cellsCount = cellsData.length / groupCount;
  var heightWithoutAllDayTitle = SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK] * cellsCount;
  var defaultHeight = showAllDayTitle ? heightWithoutAllDayTitle + SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL] : heightWithoutAllDayTitle;
  var calculatedHeight = height / groupCount;
  return (0, import_react4.createElement)(StyledDiv$2, _extends2({
    height: calculatedHeight,
    defaultHeight,
    className: clsx_m_default(classes$4.flexRow, className)
  }, restProps), (0, import_react4.createElement)(Table_default, {
    className: classes$4.timeScaleContainer
  }, (0, import_react4.createElement)(TableBody_default, null, getLabelsForAllGroups(cellsData, groups, groupOrientation).map(function(groupedLabels, groupIndex) {
    var _classNames;
    var firstDataLabel = groupedLabels[0];
    var lastDataLabel = groupedLabels[groupedLabels.length - 1];
    return (0, import_react4.createElement)(TableRow_default, {
      key: groupIndex.toString()
    }, (0, import_react4.createElement)(TableCell_default, {
      className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$4.cell, true), _defineProperty(_classNames, classes$4.verticalCell, groupOrientation === VERTICAL_GROUP_ORIENTATION), _classNames))
    }, (0, import_react4.createElement)(AllDayTitle, {
      fixedHeight: true
    }), (0, import_react4.createElement)(Label3, {
      key: firstDataLabel.startDate,
      groupingInfo: firstDataLabel.groupingInfo
    }), groupedLabels.map(function(label, index) {
      return index !== cellsData.length - 1 && (0, import_react4.createElement)(Label3, {
        time: label.endDate,
        formatDate: formatDate3,
        key: label.key,
        groupingInfo: label.groupingInfo
      });
    }), (0, import_react4.createElement)(Label3, {
      key: lastDataLabel.endDate,
      groupingInfo: lastDataLabel.groupingInfo
    })));
  }))), (0, import_react4.createElement)(TicksLayout, {
    rowComponent,
    cellComponent: tickCellComponent,
    cellsData,
    className: classes$4.ticks,
    groupOrientation,
    groupCount,
    includeAllDayCell: showAllDayTitle
  }));
};
true ? Layout.propTypes = {
  cellsData: import_prop_types107.default.arrayOf(Array).isRequired,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  allDayTitleComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]),
  tickCellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  groups: import_prop_types107.default.arrayOf(import_prop_types107.default.arrayOf(import_prop_types107.default.object)),
  groupOrientation: import_prop_types107.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION]),
  showAllDayTitle: import_prop_types107.default.bool,
  height: import_prop_types107.default.number,
  className: import_prop_types107.default.string
} : void 0;
Layout.defaultProps = {
  groups: [[{}]],
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION,
  allDayTitleComponent: function allDayTitleComponent() {
    return null;
  },
  showAllDayTitle: false,
  height: 0,
  className: void 0
};
var _excluded$8 = ["className", "time", "formatDate", "groupingInfo", "endOfGroup"];
var PREFIX$5 = "Label";
var classes$5 = {
  label: "".concat(PREFIX$5, "-label"),
  text: "".concat(PREFIX$5, "-text"),
  emptyLabel: "".concat(PREFIX$5, "-emptyLabel")
};
var StyledDiv$3 = styled_default("div")(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$5.label), {
    userSelect: "none",
    border: 0,
    height: theme.spacing(SPACING_LABEL_HEIGHT),
    lineHeight: theme.spacing(SPACING_LABEL_HEIGHT),
    padding: 0,
    overflow: "hidden",
    textOverflow: "ellipsis",
    textAlign: "right",
    paddingLeft: theme.spacing(0.25),
    paddingRight: theme.spacing(1)
  }), _defineProperty(_ref2, "& .".concat(classes$5.text), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    fontSize: "0.7rem",
    whiteSpace: "nowrap",
    color: theme.palette.text.secondary
  })), _defineProperty(_ref2, "&.".concat(classes$5.emptyLabel), {
    height: theme.spacing(SPACING_LABEL_HEIGHT / 2),
    "&:last-child": {
      height: "calc(".concat(theme.spacing(SPACING_LABEL_HEIGHT / 2), " - 1px)")
    }
  }), _ref2;
});
var Label = function Label2(_ref3) {
  var _classNames;
  var className = _ref3.className, time = _ref3.time, formatDate3 = _ref3.formatDate, groupingInfo = _ref3.groupingInfo, endOfGroup = _ref3.endOfGroup, restProps = _objectWithoutProperties(_ref3, _excluded$8);
  return (0, import_react4.createElement)(StyledDiv$3, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$5.label, true), _defineProperty(_classNames, classes$5.emptyLabel, !time), _classNames), className)
  }, restProps), time && (0, import_react4.createElement)("span", {
    className: classes$5.text
  }, formatDate3(time, HOUR_MINUTE_OPTIONS)));
};
true ? Label.propTypes = {
  formatDate: import_prop_types107.default.func,
  time: import_prop_types107.default.instanceOf(Date),
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object),
  endOfGroup: import_prop_types107.default.bool,
  className: import_prop_types107.default.string
} : void 0;
Label.defaultProps = {
  className: void 0,
  time: void 0,
  formatDate: function formatDate() {
    return void 0;
  },
  groupingInfo: void 0,
  endOfGroup: false
};
var _excluded$9 = ["className", "startDate", "endDate", "endOfGroup", "groupingInfo", "isAllDay"];
var PREFIX$6 = "TickCell";
var classes$6 = {
  cell: "".concat(PREFIX$6, "-cell"),
  brightBottomBorder: "".concat(PREFIX$6, "-brightBottomBorder"),
  allDayCell: "".concat(PREFIX$6, "-allDayCell")
};
var StyledTableCell = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$6.cell), {
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK]),
    padding: 0,
    boxSizing: "border-box",
    borderBottom: getBorder(theme),
    "tr:last-child &": {
      borderBottom: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$6.brightBottomBorder), {
    borderBottom: getBrightBorder(theme)
  }), _defineProperty(_ref2, "&.".concat(classes$6.allDayCell), {
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL])
  }), _ref2;
});
var TickCell = function TickCell2(_ref3) {
  var _classNames;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, isAllDay = _ref3.isAllDay, restProps = _objectWithoutProperties(_ref3, _excluded$9);
  return (0, import_react4.createElement)(StyledTableCell, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$6.cell, true), _defineProperty(_classNames, classes$6.brightBottomBorder, endOfGroup), _defineProperty(_classNames, classes$6.allDayCell, isAllDay), _classNames), className)
  }, restProps));
};
true ? TickCell.propTypes = {
  startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  endOfGroup: import_prop_types107.default.bool,
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object),
  isAllDay: import_prop_types107.default.bool,
  className: import_prop_types107.default.string
} : void 0;
TickCell.defaultProps = {
  className: void 0,
  startDate: void 0,
  endDate: void 0,
  endOfGroup: false,
  groupingInfo: void 0,
  isAllDay: false
};
var _excluded$a = ["className", "cellsNumber", "children"];
var PREFIX$7 = "Table";
var classes$7 = {
  table: "".concat(PREFIX$7, "-table")
};
var StyledTableMUI = styled_default(Table_default, {
  shouldForwardProp: function shouldForwardProp3(prop) {
    return prop !== "cellsNumber";
  }
})(function(_ref) {
  var _$concat;
  var cellsNumber = _ref.cellsNumber;
  return _defineProperty({}, "&.".concat(classes$7.table), (_$concat = {
    tableLayout: "fixed",
    minWidth: getWidthInPixels(cellsNumber, CELL_WIDTH),
    width: "100%"
  }, _defineProperty(_$concat, "".concat(LAYOUT_MEDIA_QUERY), {
    minWidth: getWidthInPixels(cellsNumber, SMALL_CELL_WIDTH)
  }), _defineProperty(_$concat, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    minWidth: getWidthInPixels(cellsNumber, XS_CELL_WIDTH)
  }), _$concat));
});
var Table = (0, import_react4.forwardRef)(function(_ref3, ref) {
  var className = _ref3.className, cellsNumber = _ref3.cellsNumber, children = _ref3.children, restProps = _objectWithoutProperties(_ref3, _excluded$a);
  return (0, import_react4.createElement)(StyledTableMUI, _extends2({
    cellsNumber,
    ref,
    className: clsx_m_default(classes$7.table, className)
  }, restProps), (0, import_react4.createElement)(TableBody_default, null, children));
});
Table.propTypes = {
  cellsNumber: import_prop_types107.default.number.isRequired,
  className: import_prop_types107.default.string,
  children: import_prop_types107.default.node.isRequired
};
Table.defaultProps = {
  className: void 0
};
var _excluded$b = ["setCellElementsMeta", "cellsNumber", "children"];
var Layout$1 = (0, import_react4.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, cellsNumber = _ref.cellsNumber, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$b);
  var tableRef = (0, import_react4.useRef)(null);
  (0, import_react4.useEffect)(function() {
    var tableElement = tableRef.current;
    setCellElementsMeta(cellsMeta(tableElement));
  });
  return (0, import_react4.createElement)(Table, _extends2({
    ref: tableRef,
    cellsNumber
  }, restProps), children);
});
true ? Layout$1.propTypes = {
  setCellElementsMeta: import_prop_types107.default.func.isRequired,
  cellsNumber: import_prop_types107.default.number.isRequired,
  children: import_prop_types107.default.node.isRequired
} : void 0;
var _excluded$c = ["setCellElementsMeta", "cellComponent", "allDayCellComponent", "rowComponent", "allDayRowComponent", "cellsData", "allDayCellsData", "formatDate"];
var renderCell = function renderCell2(Cell7, startDate, endDate, endOfGroup, groupingInfo, groupOrientation) {
  return (0, import_react4.createElement)(Cell7, {
    key: getViewCellKey(startDate, groupingInfo),
    startDate,
    endDate,
    endOfGroup,
    hasRightBorder: endOfGroup,
    groupingInfo,
    groupOrientation
  });
};
var Layout$2 = (0, import_react4.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, cellComponent = _ref.cellComponent, allDayCellComponent2 = _ref.allDayCellComponent, Row4 = _ref.rowComponent, AllDayRow = _ref.allDayRowComponent, cellsData = _ref.cellsData, allDayCellsData = _ref.allDayCellsData, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$c);
  return (0, import_react4.createElement)(Layout$1, _extends2({
    setCellElementsMeta,
    cellsNumber: cellsData[0].length
  }, restProps), prepareVerticalViewCellsData(cellsData, allDayCellsData).map(function(group, groupIndex) {
    return (0, import_react4.createElement)(import_react4.Fragment, {
      key: groupIndex.toString()
    }, allDayCellsData && (0, import_react4.createElement)(AllDayRow, null, allDayCellsData[groupIndex].map(function(_ref2) {
      var startDate = _ref2.startDate, endDate = _ref2.endDate, endOfGroup = _ref2.endOfGroup, groupingInfo = _ref2.groupingInfo, groupOrientation = _ref2.groupOrientation;
      return renderCell(allDayCellComponent2, startDate, endDate, endOfGroup, groupingInfo, groupOrientation);
    })), group.map(function(days2, index) {
      return (0, import_react4.createElement)(Row4, {
        key: index.toString()
      }, days2.map(function(_ref3) {
        var startDate = _ref3.startDate, endDate = _ref3.endDate, groupingInfo = _ref3.groupingInfo, endOfGroup = _ref3.endOfGroup, groupOrientation = _ref3.groupOrientation;
        return renderCell(cellComponent, startDate, endDate, endOfGroup, groupingInfo, groupOrientation);
      }));
    }));
  }));
});
Layout$2.propTypes = {
  cellsData: import_prop_types107.default.arrayOf(Array).isRequired,
  allDayCellsData: import_prop_types107.default.arrayOf(Array),
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  allDayCellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]),
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  allDayRowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]),
  formatDate: import_prop_types107.default.func.isRequired,
  setCellElementsMeta: import_prop_types107.default.func.isRequired
};
Layout$2.defaultProps = {
  allDayCellComponent: function allDayCellComponent() {
    return null;
  },
  allDayRowComponent: function allDayRowComponent() {
    return null;
  },
  allDayCellsData: void 0
};
var _excluded$d = ["className", "children", "startDate", "endDate", "currentTimeIndicatorPosition", "currentTimeIndicatorComponent", "isShaded", "endOfGroup", "groupingInfo", "groupOrientation", "hasRightBorder"];
var PREFIX$8 = "Cell";
var classes$8 = {
  cell: "".concat(PREFIX$8, "-cell"),
  shadedCell: "".concat(PREFIX$8, "-shadedCell"),
  shadedPart: "".concat(PREFIX$8, "-shadedPart"),
  brightRightBorder: "".concat(PREFIX$8, "-brightRightBorder"),
  brightBorderBottom: "".concat(PREFIX$8, "-brightBorderBottom")
};
var StyledTableCell$1 = styled_default(TableCell_default, {
  shouldForwardProp: function shouldForwardProp4(prop) {
    return prop !== "shadedHeight";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, shadedHeight = _ref.shadedHeight;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$8.cell), {
    position: "relative",
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.WEEK]),
    padding: 0,
    boxSizing: "border-box",
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none",
      paddingRight: 0
    },
    "tr:last-child &": {
      borderBottom: "none"
    },
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$8.shadedCell), {
    backgroundColor: alpha(theme.palette.action.disabledBackground, 0.04),
    "&:hover": {
      backgroundColor: theme.palette.action.selected
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    }
  }), _defineProperty(_ref2, "& .".concat(classes$8.shadedPart), {
    backgroundColor: alpha(theme.palette.action.disabledBackground, 0.04),
    position: "absolute",
    height: shadedHeight,
    width: "100%",
    left: 0,
    top: 0,
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "td:focus &": {
      opacity: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$8.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$8.brightBorderBottom), {
    borderBottom: getBrightBorder(theme)
  }), _ref2;
});
var Cell = function Cell2(_ref3) {
  var _classNames;
  var className = _ref3.className, children = _ref3.children, startDate = _ref3.startDate, endDate = _ref3.endDate, currentTimeIndicatorPosition = _ref3.currentTimeIndicatorPosition, CurrentTimeIndicator3 = _ref3.currentTimeIndicatorComponent, isShaded = _ref3.isShaded, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, groupOrientation = _ref3.groupOrientation, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$d);
  var isNow = !!currentTimeIndicatorPosition;
  return (0, import_react4.createElement)(StyledTableCell$1, _extends2({
    shadedHeight: currentTimeIndicatorPosition,
    tabIndex: 0,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$8.cell, true), _defineProperty(_classNames, classes$8.shadedCell, isShaded && !isNow), _defineProperty(_classNames, classes$8.brightRightBorder, (endOfGroup || hasRightBorder) && groupOrientation === HORIZONTAL_GROUP_ORIENTATION), _defineProperty(_classNames, classes$8.brightBorderBottom, endOfGroup && groupOrientation === VERTICAL_GROUP_ORIENTATION), _classNames), className)
  }, restProps), isNow && isShaded && (0, import_react4.createElement)("div", {
    className: classes$8.shadedPart
  }), isNow && (0, import_react4.createElement)(CurrentTimeIndicator3, {
    top: currentTimeIndicatorPosition
  }), children);
};
true ? Cell.propTypes = {
  startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  currentTimeIndicatorPosition: import_prop_types107.default.string,
  currentTimeIndicatorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]),
  isShaded: import_prop_types107.default.bool,
  endOfGroup: import_prop_types107.default.bool,
  hasRightBorder: import_prop_types107.default.bool,
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object),
  groupOrientation: import_prop_types107.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION])
} : void 0;
Cell.defaultProps = {
  children: null,
  className: void 0,
  startDate: new Date(),
  endDate: new Date(),
  currentTimeIndicatorPosition: void 0,
  currentTimeIndicatorComponent: function currentTimeIndicatorComponent() {
    return null;
  },
  isShaded: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION
};
var _excluded$e = ["cellComponent", "rowComponent", "groupingPanelComponent", "cellsData", "formatDate", "groupedByDate"];
var Layout$3 = (0, import_react4.memo)(function(_ref) {
  var Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, GroupingPanel3 = _ref.groupingPanelComponent, cellsData = _ref.cellsData, formatDate3 = _ref.formatDate, groupedByDate = _ref.groupedByDate, restProps = _objectWithoutProperties(_ref, _excluded$e);
  return (0, import_react4.createElement)(Table, _extends2({
    cellsNumber: cellsData[0].length
  }, restProps), !groupedByDate && (0, import_react4.createElement)(GroupingPanel3, null), (0, import_react4.createElement)(Row4, null, getDayScaleCells(cellsData, groupedByDate).map(function(_ref2) {
    var startDate = _ref2.startDate, endDate = _ref2.endDate, today = _ref2.today, key = _ref2.key, endOfGroup = _ref2.endOfGroup, groupingInfo = _ref2.groupingInfo, colSpan = _ref2.colSpan;
    return (0, import_react4.createElement)(Cell7, {
      key,
      startDate,
      endDate,
      today,
      formatDate: formatDate3,
      endOfGroup,
      hasRightBorder: endOfGroup,
      groupingInfo,
      colSpan
    });
  })), groupedByDate && (0, import_react4.createElement)(GroupingPanel3, null));
});
Layout$3.propTypes = {
  cellsData: import_prop_types107.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  groupingPanelComponent: import_prop_types107.default.func,
  formatDate: import_prop_types107.default.func.isRequired,
  groupedByDate: import_prop_types107.default.bool
};
Layout$3.defaultProps = {
  groupingPanelComponent: function groupingPanelComponent2() {
    return null;
  },
  groupedByDate: false
};
var _excluded$f = ["className", "startDate", "endDate", "today", "formatDate", "endOfGroup", "groupingInfo", "hasRightBorder"];
var PREFIX$9 = "Cell";
var classes$9 = {
  cell: "".concat(PREFIX$9, "-cell"),
  dayOfWeek: "".concat(PREFIX$9, "-dayOfWeek"),
  dayOfMonth: "".concat(PREFIX$9, "-dayOfMonth"),
  highlightedText: "".concat(PREFIX$9, "-highlightedText"),
  dayView: "".concat(PREFIX$9, "-dayView"),
  brightRightBorder: "".concat(PREFIX$9, "-brightRightBorder")
};
var StyledTableCell$2 = styled_default(TableCell_default)(function(_ref) {
  var _$concat, _objectSpread2$1, _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$9.cell), (_$concat = {
    userSelect: "none",
    paddingBottom: theme.spacing(0.5),
    textAlign: "center",
    borderBottom: "none",
    paddingRight: 0,
    paddingLeft: 0,
    boxSizing: "border-box"
  }, _defineProperty(_$concat, "".concat(LAYOUT_MEDIA_QUERY), {
    padding: theme.spacing(1),
    paddingBottom: 0
  }), _defineProperty(_$concat, "&:only-child", {
    textAlign: "left",
    paddingLeft: theme.spacing(2)
  }), _defineProperty(_$concat, "paddingTop", theme.spacing(0.5)), _$concat)), _defineProperty(_ref2, "& .".concat(classes$9.dayOfWeek), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    margin: 0,
    color: theme.palette.text.secondary,
    lineHeight: 1.17
  })), _defineProperty(_ref2, "& .".concat(classes$9.dayOfMonth), _objectSpread2(_objectSpread2({}, theme.typography.h4), {}, (_objectSpread2$1 = {}, _defineProperty(_objectSpread2$1, "".concat(LAYOUT_MEDIA_QUERY), _objectSpread2({}, theme.typography.h6)), _defineProperty(_objectSpread2$1, "color", theme.palette.text.secondary), _defineProperty(_objectSpread2$1, "lineHeight", 1.2), _defineProperty(_objectSpread2$1, "fontSize", "1.8rem"), _objectSpread2$1))), _defineProperty(_ref2, "& .".concat(classes$9.highlightedText), {
    color: theme.palette.primary.main,
    fontWeight: "bold"
  }), _defineProperty(_ref2, "& .".concat(classes$9.dayView), {
    "td:only-child &": {
      textAlign: "center",
      width: "auto",
      display: "inline-block"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$9.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _ref2;
});
var Cell$1 = function Cell3(_ref3) {
  var _classNames, _classNames2, _classNames3;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, today = _ref3.today, formatDate3 = _ref3.formatDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$f);
  return (0, import_react4.createElement)(StyledTableCell$2, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$9.cell, true), _defineProperty(_classNames, classes$9.brightRightBorder, endOfGroup || hasRightBorder), _classNames), className)
  }, restProps), (0, import_react4.createElement)("div", {
    className: classes$9.dayView
  }, (0, import_react4.createElement)("p", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$9.dayOfWeek, true), _defineProperty(_classNames2, classes$9.highlightedText, today), _classNames2))
  }, formatDate3(startDate, WEEK_DAY_OPTIONS)), (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$9.dayOfMonth, true), _defineProperty(_classNames3, classes$9.highlightedText, today), _classNames3))
  }, formatDate3(startDate, DAY_OPTIONS))));
};
true ? Cell$1.propTypes = {
  formatDate: import_prop_types107.default.func.isRequired,
  startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]).isRequired,
  endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  className: import_prop_types107.default.string,
  today: import_prop_types107.default.bool,
  endOfGroup: import_prop_types107.default.bool,
  hasRightBorder: import_prop_types107.default.bool,
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object)
} : void 0;
Cell$1.defaultProps = {
  className: void 0,
  endDate: void 0,
  today: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0
};
var DayView2 = withComponents({
  Layout: MainLayout,
  AppointmentLayer: Container2,
  DayScaleEmptyCell,
  TimeScaleLayout: Layout,
  TimeScaleLabel: Label,
  TimeScaleTickCell: TickCell,
  TimeScaleTicksRow: Row,
  DayScaleLayout: Layout$3,
  DayScaleCell: Cell$1,
  DayScaleRow: Row,
  TimeTableLayout: Layout$2,
  TimeTableCell: Cell,
  TimeTableRow: Row
})(DayView);
var WeekView2 = withComponents({
  Layout: MainLayout,
  AppointmentLayer: Container2,
  DayScaleEmptyCell,
  TimeScaleLayout: Layout,
  TimeScaleLabel: Label,
  TimeScaleTickCell: TickCell,
  TimeScaleTicksRow: Row,
  DayScaleLayout: Layout$3,
  DayScaleCell: Cell$1,
  DayScaleRow: Row,
  TimeTableLayout: Layout$2,
  TimeTableCell: Cell,
  TimeTableRow: Row
})(WeekView);
var _excluded$g = ["setCellElementsMeta", "cellComponent", "rowComponent", "cellsData", "formatDate"];
var Layout$4 = (0, import_react4.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, cellsData = _ref.cellsData, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$g);
  return (0, import_react4.createElement)(Layout$1, _extends2({
    setCellElementsMeta,
    cellsNumber: cellsData[0].length
  }, restProps), cellsData.map(function(row, index) {
    return (0, import_react4.createElement)(Row4, {
      key: index.toString()
    }, row.map(function(_ref2) {
      var startDate = _ref2.startDate, endDate = _ref2.endDate, today = _ref2.today, otherMonth = _ref2.otherMonth, groupingInfo = _ref2.groupingInfo, endOfGroup = _ref2.endOfGroup, groupOrientation = _ref2.groupOrientation;
      return (0, import_react4.createElement)(Cell7, {
        key: getViewCellKey(startDate, groupingInfo),
        startDate,
        endDate,
        today,
        otherMonth,
        formatDate: formatDate3,
        endOfGroup,
        hasRightBorder: endOfGroup,
        groupingInfo,
        groupOrientation
      });
    }));
  }));
});
Layout$4.propTypes = {
  cellsData: import_prop_types107.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  setCellElementsMeta: import_prop_types107.default.func.isRequired
};
var _excluded$h = ["className", "startDate", "endDate", "today", "otherMonth", "formatDate", "isShaded", "endOfGroup", "groupingInfo", "groupOrientation", "hasRightBorder"];
var PREFIX$a = "Cell";
var classes$a = {
  cell: "".concat(PREFIX$a, "-cell"),
  text: "".concat(PREFIX$a, "-text"),
  today: "".concat(PREFIX$a, "-today"),
  otherMonth: "".concat(PREFIX$a, "-otherMonth"),
  shadedCell: "".concat(PREFIX$a, "-shadedCell"),
  brightRightBorder: "".concat(PREFIX$a, "-brightRightBorder"),
  brightBorderBottom: "".concat(PREFIX$a, "-brightBorderBottom")
};
var StyledTableCell$3 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$a.cell), {
    userSelect: "none",
    verticalAlign: "top",
    padding: 0,
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.MONTH]),
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none",
      paddingRight: 0
    },
    "tr:last-child &": {
      borderBottom: "none"
    },
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    },
    boxSizing: "border-box"
  }), _defineProperty(_ref2, "& .".concat(classes$a.text), _defineProperty({
    padding: "1em",
    paddingTop: "0.5em",
    textAlign: "center"
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    padding: "0.5em"
  })), _defineProperty(_ref2, "& .".concat(classes$a.today), {
    marginTop: "0.33em",
    width: "1.72em",
    height: "1.72em",
    lineHeight: 1.72,
    textAlign: "center",
    borderRadius: "50%",
    background: theme.palette.primary.main,
    color: theme.palette.primary.contrastText,
    cursor: "default",
    marginRight: "auto",
    marginLeft: "auto"
  }), _defineProperty(_ref2, "& .".concat(classes$a.otherMonth), {
    color: theme.palette.text.disabled
  }), _defineProperty(_ref2, "&.".concat(classes$a.shadedCell), {
    backgroundColor: alpha(theme.palette.action.disabledBackground, 0.04),
    "&:hover": {
      backgroundColor: theme.palette.action.selected
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$a.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$a.brightBorderBottom), {
    borderBottom: getBrightBorder(theme)
  }), _ref2;
});
var CellBase = (0, import_react4.memo)(function(_ref3) {
  var _classNames, _classNames2;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, today = _ref3.today, otherMonth = _ref3.otherMonth, formatDate3 = _ref3.formatDate, isShaded = _ref3.isShaded, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, groupOrientation = _ref3.groupOrientation, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$h);
  var isFirstMonthDay = startDate.getDate() === 1;
  var formatOptions = isFirstMonthDay && !today ? DAY_SHORT_MONTH_OPTIONS : DAY_OPTIONS;
  return (0, import_react4.createElement)(StyledTableCell$3, _extends2({
    tabIndex: 0,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$a.cell, true), _defineProperty(_classNames, classes$a.shadedCell, isShaded), _defineProperty(_classNames, classes$a.brightRightBorder, (endOfGroup || hasRightBorder) && groupOrientation === HORIZONTAL_GROUP_ORIENTATION), _defineProperty(_classNames, classes$a.brightBorderBottom, endOfGroup && groupOrientation === VERTICAL_GROUP_ORIENTATION), _classNames), className)
  }, restProps), (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$a.text, !today), _defineProperty(_classNames2, classes$a.today, today), _defineProperty(_classNames2, classes$a.otherMonth, otherMonth && !today), _classNames2))
  }, formatDate3(startDate, formatOptions)));
});
true ? CellBase.propTypes = {
  formatDate: import_prop_types107.default.func.isRequired,
  startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]).isRequired,
  endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  className: import_prop_types107.default.string,
  today: import_prop_types107.default.bool,
  otherMonth: import_prop_types107.default.bool,
  isShaded: import_prop_types107.default.bool,
  endOfGroup: import_prop_types107.default.bool,
  hasRightBorder: import_prop_types107.default.bool,
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object),
  groupOrientation: import_prop_types107.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION])
} : void 0;
CellBase.defaultProps = {
  endDate: void 0,
  className: void 0,
  today: false,
  otherMonth: false,
  isShaded: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION
};
var Cell$2 = CellBase;
var _excluded$i = ["className", "startDate", "endDate", "today", "formatDate", "endOfGroup", "groupingInfo", "hasRightBorder"];
var PREFIX$b = "Cell";
var classes$b = {
  cell: "".concat(PREFIX$b, "-cell"),
  dayOfWeek: "".concat(PREFIX$b, "-dayOfWeek"),
  brightRightBorder: "".concat(PREFIX$b, "-brightRightBorder")
};
var StyledTableCell$4 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$b.cell), {
    userSelect: "none",
    padding: 0,
    borderBottom: "none",
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none",
      paddingRight: 0
    },
    textAlign: "center",
    boxSizing: "border-box"
  }), _defineProperty(_ref2, "& .".concat(classes$b.dayOfWeek), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    margin: 0,
    padding: theme.spacing(1),
    paddingBottom: 0,
    color: theme.palette.text.secondary,
    fontWeight: "bold"
  })), _defineProperty(_ref2, "&.".concat(classes$b.brightRightBorder), {
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    }
  }), _ref2;
});
var Cell$3 = function Cell4(_ref3) {
  var _classNames;
  var className = _ref3.className, startDate = _ref3.startDate, endDate = _ref3.endDate, today = _ref3.today, formatDate3 = _ref3.formatDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$i);
  return (0, import_react4.createElement)(StyledTableCell$4, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$b.cell, true), _defineProperty(_classNames, classes$b.brightRightBorder, endOfGroup || hasRightBorder), _classNames), className)
  }, restProps), (0, import_react4.createElement)("div", {
    className: classes$b.dayOfWeek
  }, formatDate3(startDate, WEEK_DAY_OPTIONS)));
};
true ? Cell$3.propTypes = {
  formatDate: import_prop_types107.default.func.isRequired,
  startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]).isRequired,
  endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  className: import_prop_types107.default.string,
  today: import_prop_types107.default.bool,
  endOfGroup: import_prop_types107.default.bool,
  hasRightBorder: import_prop_types107.default.bool,
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object)
} : void 0;
Cell$3.defaultProps = {
  className: void 0,
  endDate: void 0,
  today: false,
  endOfGroup: false,
  hasRightBorder: false,
  groupingInfo: void 0
};
var MonthView2 = withComponents({
  Layout: MainLayout,
  AppointmentLayer: Container2,
  DayScaleEmptyCell,
  DayScaleLayout: Layout$3,
  DayScaleCell: Cell$3,
  DayScaleRow: Row,
  TimeTableLayout: Layout$4,
  TimeTableCell: Cell$2,
  TimeTableRow: Row
})(MonthView);
var _excluded$j = ["data", "children", "className", "recurringIconComponent", "formatDate", "durationType"];
var PREFIX$c = "HorizontalAppointment";
var classes$c = {
  title: "".concat(PREFIX$c, "-title"),
  content: "".concat(PREFIX$c, "-content"),
  container: "".concat(PREFIX$c, "-container"),
  recurringContainer: "".concat(PREFIX$c, "-recurringContainer"),
  imageContainer: "".concat(PREFIX$c, "-imageContainer"),
  image: "".concat(PREFIX$c, "-image")
};
var StyledDiv$4 = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$c.title), {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }), _defineProperty(_ref2, "&.".concat(classes$c.content), {
    color: palette.common.white,
    padding: spacing(0.5),
    paddingTop: spacing(0.125),
    paddingLeft: spacing(0.75),
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    display: "flex"
  }), _defineProperty(_ref2, "& .".concat(classes$c.container), {
    width: "100%"
  }), _defineProperty(_ref2, "& .".concat(classes$c.recurringContainer), {
    width: "calc(100% - ".concat(spacing(2), ")")
  }), _defineProperty(_ref2, "& .".concat(classes$c.imageContainer), {
    width: spacing(2),
    height: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$c.image), {
    width: "100%",
    height: "100%"
  }), _ref2;
});
var HorizontalAppointment = function HorizontalAppointment2(_ref3) {
  var data = _ref3.data, children = _ref3.children, className = _ref3.className, RecurringIcon = _ref3.recurringIconComponent, formatDate3 = _ref3.formatDate, durationType = _ref3.durationType, restProps = _objectWithoutProperties(_ref3, _excluded$j);
  var repeat2 = !!data.rRule;
  return (0, import_react4.createElement)(StyledDiv$4, _extends2({
    className: clsx_m_default(classes$c.content, className)
  }, restProps), children || (0, import_react4.createElement)(import_react4.Fragment, null, (0, import_react4.createElement)("div", {
    className: repeat2 ? classes$c.recurringContainer : classes$c.container
  }, (0, import_react4.createElement)("div", {
    className: classes$c.title
  }, data.title)), repeat2 ? (0, import_react4.createElement)("div", {
    className: classes$c.imageContainer
  }, (0, import_react4.createElement)(RecurringIcon, {
    className: classes$c.image
  })) : void 0));
};
true ? HorizontalAppointment.propTypes = {
  recurringIconComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  data: import_prop_types107.default.object.isRequired,
  durationType: import_prop_types107.default.string,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  formatDate: import_prop_types107.default.func
} : void 0;
HorizontalAppointment.defaultProps = {
  formatDate: function formatDate2() {
    return "";
  },
  children: void 0,
  className: void 0,
  durationType: void 0
};
var _excluded$k = ["data", "children", "className", "formatDate", "recurringIconComponent", "durationType"];
var PREFIX$d = "VerticalAppointment";
var classes$d = {
  title: "".concat(PREFIX$d, "-title"),
  textContainer: "".concat(PREFIX$d, "-textContainer"),
  middleContainer: "".concat(PREFIX$d, "-middleContainer"),
  time: "".concat(PREFIX$d, "-time"),
  content: "".concat(PREFIX$d, "-content"),
  shortContent: "".concat(PREFIX$d, "-shortContent"),
  shortContainer: "".concat(PREFIX$d, "-shortContainer"),
  shortTime: "".concat(PREFIX$d, "-shortTime"),
  shortTitle: "".concat(PREFIX$d, "-shortTitle"),
  container: "".concat(PREFIX$d, "-container"),
  recurringContainer: "".concat(PREFIX$d, "-recurringContainer"),
  imageContainer: "".concat(PREFIX$d, "-imageContainer"),
  image: "".concat(PREFIX$d, "-image")
};
var StyledDiv$5 = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$d.title), {
    fontWeight: "bold",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }), _defineProperty(_ref2, "& .".concat(classes$d.textContainer), {
    lineHeight: 1,
    whiteSpace: "pre-wrap",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }), _defineProperty(_ref2, "& .".concat(classes$d.middleContainer), {
    lineHeight: "0.9!important"
  }), _defineProperty(_ref2, "& .".concat(classes$d.time), {
    display: "inline-block",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }), _defineProperty(_ref2, "&.".concat(classes$d.content), _defineProperty({
    color: palette.common.white,
    padding: spacing(0.5, 1),
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    display: "flex"
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    paddingLeft: spacing(0.5),
    paddingRight: spacing(0.5)
  })), _defineProperty(_ref2, "&.".concat(classes$d.shortContent), _defineProperty({
    padding: spacing(0.25, 1)
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    paddingLeft: spacing(0.5),
    paddingRight: spacing(0.5)
  })), _defineProperty(_ref2, "& .".concat(classes$d.shortContainer), {
    display: "flex"
  }), _defineProperty(_ref2, "& .".concat(classes$d.shortTime), {
    textOverflow: "initial",
    flexShrink: 0
  }), _defineProperty(_ref2, "& .".concat(classes$d.shortTitle), {
    flexShrink: 3
  }), _defineProperty(_ref2, "& .".concat(classes$d.container), {
    width: "100%"
  }), _defineProperty(_ref2, "& .".concat(classes$d.recurringContainer), {
    width: "calc(100% - ".concat(spacing(2), ")")
  }), _defineProperty(_ref2, "& .".concat(classes$d.imageContainer), {
    width: spacing(2),
    height: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$d.image), {
    width: "100%",
    height: "100%"
  }), _ref2;
});
var VerticalAppointment = function VerticalAppointment2(_ref3) {
  var _classNames, _classNames2, _classNames3;
  var data = _ref3.data, children = _ref3.children, className = _ref3.className, formatDate3 = _ref3.formatDate, RecurringIcon = _ref3.recurringIconComponent, durationType = _ref3.durationType, restProps = _objectWithoutProperties(_ref3, _excluded$k);
  var repeat2 = !!data.rRule;
  var isShortHeight = durationType === "short";
  var isMiddleHeight = durationType === "middle";
  return (0, import_react4.createElement)(StyledDiv$5, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$d.content, true), _defineProperty(_classNames, classes$d.shortContent, isShortHeight || isMiddleHeight), _classNames), className)
  }, restProps), children || (0, import_react4.createElement)(import_react4.Fragment, null, (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$d.container, !repeat2), _defineProperty(_classNames2, classes$d.recurringContainer, repeat2), _classNames2))
  }, isShortHeight ? (0, import_react4.createElement)("div", {
    className: classes$d.shortContainer
  }, (0, import_react4.createElement)("div", {
    className: clsx_m_default(classes$d.title, classes$d.shortTitle)
  }, addCommaAndSpaceToString(data.title)), (0, import_react4.createElement)("div", {
    className: clsx_m_default(classes$d.time, classes$d.shortTime)
  }, formatDate3(data.startDate, HOUR_MINUTE_OPTIONS))) : (0, import_react4.createElement)(import_react4.Fragment, null, (0, import_react4.createElement)("div", {
    className: classes$d.title
  }, data.title), (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$d.textContainer, true), _defineProperty(_classNames3, classes$d.middleContainer, isMiddleHeight), _classNames3))
  }, (0, import_react4.createElement)("div", {
    className: classes$d.time
  }, formatDate3(data.startDate, HOUR_MINUTE_OPTIONS)), (0, import_react4.createElement)("div", {
    className: classes$d.time
  }, "\xA0 - \xA0"), (0, import_react4.createElement)("div", {
    className: classes$d.time
  }, formatDate3(data.endDate, HOUR_MINUTE_OPTIONS))))), repeat2 ? (0, import_react4.createElement)("div", {
    className: classes$d.imageContainer
  }, (0, import_react4.createElement)(RecurringIcon, {
    className: classes$d.image
  })) : void 0));
};
true ? VerticalAppointment.propTypes = {
  recurringIconComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  data: import_prop_types107.default.object.isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  durationType: import_prop_types107.default.string.isRequired,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string
} : void 0;
VerticalAppointment.defaultProps = {
  children: void 0,
  className: void 0
};
var _excluded$l = ["type"];
var AppointmentContent = function AppointmentContent2(_ref) {
  var type = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded$l);
  return type === HORIZONTAL_TYPE ? (0, import_react4.createElement)(HorizontalAppointment, restProps) : (0, import_react4.createElement)(VerticalAppointment, restProps);
};
true ? AppointmentContent.propTypes = {
  type: import_prop_types107.default.oneOf([HORIZONTAL_TYPE, VERTICAL_TYPE]).isRequired
} : void 0;
var _excluded$m = ["className", "children", "data", "onClick", "draggable", "isShaded", "resources", "forwardedRef"];
var PREFIX$e = "Appointment";
var classes$e = {
  appointment: "".concat(PREFIX$e, "-appointment"),
  clickableAppointment: "".concat(PREFIX$e, "-clickableAppointment"),
  shadedAppointment: "".concat(PREFIX$e, "-shadedAppointment")
};
var StyledDiv$6 = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, typography = _ref$theme.typography, spacing = _ref$theme.spacing, resources = _ref.resources;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$e.appointment), _objectSpread2(_objectSpread2({
    userSelect: "none",
    position: "absolute",
    height: "100%",
    width: "100%",
    overflow: "hidden",
    boxSizing: "border-box",
    border: "1px solid ".concat(palette.background.paper),
    backgroundClip: "padding-box",
    borderRadius: spacing(0.5),
    backgroundColor: getAppointmentColor(300, getResourceColor(resources), palette.primary)
  }, typography.caption), {}, {
    "&:hover": {
      backgroundColor: getAppointmentColor(400, getResourceColor(resources), palette.primary)
    },
    "&:focus": {
      backgroundColor: getAppointmentColor(100, getResourceColor(resources), palette.primary),
      outline: 0
    }
  })), _defineProperty(_ref2, "&.".concat(classes$e.clickableAppointment), {
    cursor: "pointer"
  }), _defineProperty(_ref2, "&.".concat(classes$e.shadedAppointment), {
    backgroundColor: getAppointmentColor(200, getResourceColor(resources), palette.primary),
    "&:hover": {
      backgroundColor: getAppointmentColor(300, getResourceColor(resources), palette.primary)
    }
  }), _ref2;
});
var Appointment = function Appointment2(_ref3) {
  var _classNames;
  var className = _ref3.className, children = _ref3.children, data = _ref3.data, handleClick = _ref3.onClick, draggable = _ref3.draggable, isShaded = _ref3.isShaded, resources = _ref3.resources, forwardedRef = _ref3.forwardedRef, restProps = _objectWithoutProperties(_ref3, _excluded$m);
  var onClick2 = handleClick ? {
    onClick: function onClick3(_ref4) {
      var target = _ref4.target;
      handleClick({
        target,
        data
      });
    }
  } : null;
  var clickable = onClick2 || restProps.onDoubleClick || draggable;
  return (0, import_react4.createElement)(StyledDiv$6, _extends2({
    resources,
    ref: forwardedRef,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$e.appointment, true), _defineProperty(_classNames, classes$e.clickableAppointment, clickable), _defineProperty(_classNames, classes$e.shadedAppointment, isShaded), _classNames), className)
  }, onClick2, restProps), children);
};
true ? Appointment.propTypes = {
  children: import_prop_types107.default.node.isRequired,
  resources: import_prop_types107.default.array,
  className: import_prop_types107.default.string,
  data: import_prop_types107.default.object,
  onClick: import_prop_types107.default.func,
  draggable: import_prop_types107.default.bool,
  isShaded: import_prop_types107.default.bool,
  forwardedRef: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object])
} : void 0;
Appointment.defaultProps = {
  resources: [],
  onClick: void 0,
  className: void 0,
  data: {},
  draggable: false,
  isShaded: false,
  forwardedRef: void 0
};
var _excluded$n = ["position", "appointmentType", "className"];
var _styled;
var PREFIX$f = "AppointmentsContainer";
var classes$f = {
  slice: "".concat(PREFIX$f, "-slice"),
  verticalStart: "".concat(PREFIX$f, "-verticalStart"),
  verticalEnd: "".concat(PREFIX$f, "-verticalEnd"),
  horizontalStart: "".concat(PREFIX$f, "-horizontalStart"),
  horizontalEnd: "".concat(PREFIX$f, "-horizontalEnd")
};
var verticalStyles = {
  width: "100%",
  height: "10px"
};
var horizontalStyles = {
  top: 0,
  width: "10px",
  height: "100%"
};
var StyledDiv$7 = styled_default("div")((_styled = {}, _defineProperty(_styled, "&.".concat(classes$f.slice), {
  position: "absolute",
  zIndex: 50
}), _defineProperty(_styled, "&.".concat(classes$f.verticalStart), _objectSpread2(_objectSpread2({}, verticalStyles), {}, {
  top: "-10px",
  boxShadow: "0 10px 15px rgba(0,0,0,0.2)"
})), _defineProperty(_styled, "&.".concat(classes$f.verticalEnd), _objectSpread2(_objectSpread2({}, verticalStyles), {}, {
  bottom: "-10px",
  boxShadow: "0 -10px 15px rgba(0,0,0,0.2)"
})), _defineProperty(_styled, "&.".concat(classes$f.horizontalStart), _objectSpread2(_objectSpread2({}, horizontalStyles), {}, {
  left: "-10px",
  boxShadow: "10px 0 15px rgba(0,0,0,0.2)"
})), _defineProperty(_styled, "&.".concat(classes$f.horizontalEnd), _objectSpread2(_objectSpread2({}, horizontalStyles), {}, {
  right: "-10px",
  boxShadow: "-10px 0 15px rgba(0,0,0,0.2)"
})), _styled));
var SplitIndicator = (0, import_react4.memo)(function(_ref) {
  var _classNames;
  var position = _ref.position, appointmentType = _ref.appointmentType, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$n);
  var vertical = appointmentType === VERTICAL_TYPE;
  var start = position === POSITION_START;
  return (0, import_react4.createElement)(StyledDiv$7, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$f.slice, true), _defineProperty(_classNames, classes$f.verticalStart, vertical && start), _defineProperty(_classNames, classes$f.verticalEnd, vertical && !start), _defineProperty(_classNames, classes$f.horizontalStart, !vertical && start), _defineProperty(_classNames, classes$f.horizontalEnd, !vertical && !start), _classNames), className)
  }, restProps));
});
true ? SplitIndicator.propTypes = {
  appointmentType: import_prop_types107.default.oneOf([VERTICAL_TYPE, HORIZONTAL_TYPE]).isRequired,
  position: import_prop_types107.default.oneOf([POSITION_START, POSITION_END]).isRequired,
  className: import_prop_types107.default.string
} : void 0;
SplitIndicator.defaultProps = {
  className: void 0
};
var _excluded$o = ["style", "children"];
var AppointmentContainer = function AppointmentContainer2(_ref) {
  var style = _ref.style, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$o);
  return (0, import_react4.createElement)("div", _extends2({
    style
  }, restProps), children);
};
true ? AppointmentContainer.propTypes = {
  children: import_prop_types107.default.node.isRequired,
  style: import_prop_types107.default.object.isRequired
} : void 0;
var Appointments2 = withComponents({
  Appointment,
  AppointmentContent,
  Container: AppointmentContainer,
  SplitIndicator,
  RecurringIcon: Repeat_default
})(Appointments);
var _excluded$p = ["children", "className"];
var PREFIX$g = "Toolbar";
var classes$g = {
  toolbar: "".concat(PREFIX$g, "-toolbar")
};
var StyledToolbarMUI = styled_default(Toolbar_default)(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "&.".concat(classes$g.toolbar), {
    borderBottom: getBorder(theme)
  });
});
var Toolbar2 = function Toolbar3(_ref3) {
  var children = _ref3.children, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$p);
  return (0, import_react4.createElement)(StyledToolbarMUI, _extends2({
    className: clsx_m_default(classes$g.toolbar, className)
  }, restProps), children);
};
true ? Toolbar2.propTypes = {
  children: import_prop_types107.default.node.isRequired,
  className: import_prop_types107.default.string
} : void 0;
Toolbar2.defaultProps = {
  className: void 0
};
var _excluded$q = ["children", "className"];
var PREFIX$h = "FlexibleSpace";
var classes$h = {
  flexibleSpace: "".concat(PREFIX$h, "-flexibleSpace")
};
var StyledDiv$8 = styled_default("div")(_defineProperty({}, "&.".concat(classes$h.flexibleSpace), {
  flex: "0 0 0",
  marginLeft: "auto"
}));
var FlexibleSpace = function FlexibleSpace2(_ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$q);
  return (0, import_react4.createElement)(StyledDiv$8, _extends2({
    className: clsx_m_default(classes$h.flexibleSpace, className)
  }, restProps), children);
};
true ? FlexibleSpace.propTypes = {
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string
} : void 0;
FlexibleSpace.defaultProps = {
  children: null,
  className: void 0
};
var Toolbar$1 = withComponents({
  Root: Toolbar2,
  FlexibleSpace
})(Toolbar);
var _excluded$r = ["navigationButtonComponent", "openButtonComponent", "navigatorText", "rootRef", "onVisibilityToggle", "onNavigate", "className"];
var PREFIX$i = "Root";
var classes$i = {
  root: "".concat(PREFIX$i, "-root")
};
var StyledDiv$9 = styled_default("div")(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$i.root), {
    marginLeft: spacing(0.5),
    "&:first-of-type": {
      marginLeft: 0
    }
  });
});
var RootBase = function RootBase2(_ref3) {
  var NavigationButton2 = _ref3.navigationButtonComponent, OpenButton2 = _ref3.openButtonComponent, navigatorText = _ref3.navigatorText, rootRef = _ref3.rootRef, onVisibilityToggle = _ref3.onVisibilityToggle, onNavigate2 = _ref3.onNavigate, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$r);
  var navigateBack = (0, import_react4.useCallback)(function() {
    return onNavigate2("back");
  }, [onNavigate2]);
  var navigateForward = (0, import_react4.useCallback)(function() {
    return onNavigate2("forward");
  }, [onNavigate2]);
  return (0, import_react4.createElement)(StyledDiv$9, _extends2({
    className: clsx_m_default(classes$i.root, className),
    ref: rootRef
  }, restProps), (0, import_react4.createElement)(NavigationButton2, {
    type: "back",
    onClick: navigateBack
  }), (0, import_react4.createElement)(NavigationButton2, {
    type: "forward",
    onClick: navigateForward
  }), (0, import_react4.createElement)(OpenButton2, {
    onVisibilityToggle,
    text: navigatorText
  }));
};
true ? RootBase.propTypes = {
  navigationButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  openButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  onVisibilityToggle: import_prop_types107.default.func.isRequired,
  onNavigate: import_prop_types107.default.func.isRequired,
  rootRef: import_prop_types107.default.func.isRequired,
  navigatorText: import_prop_types107.default.string,
  className: import_prop_types107.default.string
} : void 0;
RootBase.defaultProps = {
  navigatorText: "",
  className: void 0
};
var Root$1 = RootBase;
var _excluded$s = ["visible", "onHide", "children", "target"];
var origin = {
  vertical: "top",
  horizontal: "right"
};
var Overlay = function Overlay2(_ref) {
  var visible = _ref.visible, onHide3 = _ref.onHide, children = _ref.children, target = _ref.target, restProps = _objectWithoutProperties(_ref, _excluded$s);
  return (0, import_react4.createElement)(Popover_default, _extends2({
    open: visible,
    anchorEl: target,
    onClose: onHide3,
    anchorOrigin: origin,
    transformOrigin: origin
  }, restProps), children);
};
true ? Overlay.propTypes = {
  onHide: import_prop_types107.default.func.isRequired,
  children: import_prop_types107.default.node.isRequired,
  visible: import_prop_types107.default.bool,
  target: import_prop_types107.default.oneOfType([import_prop_types107.default.object, import_prop_types107.default.func])
} : void 0;
Overlay.defaultProps = {
  visible: false,
  target: null
};
var _excluded$t = ["text", "onVisibilityToggle", "className"];
var PREFIX$j = "OpenButton";
var classes$j = {
  textButton: "".concat(PREFIX$j, "-textButton"),
  iconButton: "".concat(PREFIX$j, "-iconButton")
};
var StyledButton = styled_default(Button_default)(function() {
  return _defineProperty({}, "&.".concat(classes$j.textButton), _defineProperty({}, "".concat(LAYOUT_MEDIA_QUERY), {
    display: "none"
  }));
});
var StyledIconButton = styled_default(IconButton_default)(function(_ref2) {
  var spacing = _ref2.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$j.iconButton), _defineProperty({
    "@media (min-width: 700px)": {
      display: "none"
    }
  }, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    width: spacing(4),
    height: spacing(4),
    padding: 0
  }));
});
var OpenButton = (0, import_react4.memo)(function(_ref4) {
  var text = _ref4.text, onVisibilityToggle = _ref4.onVisibilityToggle, className = _ref4.className, restProps = _objectWithoutProperties(_ref4, _excluded$t);
  return (0, import_react4.createElement)(import_react4.Fragment, null, (0, import_react4.createElement)(StyledButton, _extends2({
    onClick: onVisibilityToggle,
    className: clsx_m_default(classes$j.textButton, className)
  }, restProps), text), (0, import_react4.createElement)(StyledIconButton, _extends2({
    onClick: onVisibilityToggle,
    className: clsx_m_default(classes$j.iconButton, className)
  }, restProps, {
    size: "large"
  }), (0, import_react4.createElement)(CalendarToday_default, null)));
});
OpenButton.propTypes = {
  onVisibilityToggle: import_prop_types107.default.func.isRequired,
  text: import_prop_types107.default.string,
  className: import_prop_types107.default.string
};
OpenButton.defaultProps = {
  text: "",
  className: void 0
};
var _excluded$u = ["type", "onClick", "className"];
var PREFIX$k = "NavigationButton";
var classes$k = {
  button: "".concat(PREFIX$k, "-button")
};
var StyledIconButton$1 = styled_default(IconButton_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$k.button), _defineProperty({}, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
    width: spacing(4),
    height: spacing(4),
    padding: 0
  }));
});
var NavigationButton = (0, import_react4.memo)(function(_ref3) {
  var type = _ref3.type, onClick2 = _ref3.onClick, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$u);
  return (0, import_react4.createElement)(StyledIconButton$1, _extends2({
    onClick: onClick2,
    color: "primary",
    className: clsx_m_default(classes$k.button, className)
  }, restProps, {
    size: "large"
  }), type === "back" ? (0, import_react4.createElement)(ChevronLeft_default, null) : (0, import_react4.createElement)(ChevronRight_default, null));
});
NavigationButton.propTypes = {
  type: import_prop_types107.default.oneOf(["forward", "back"]).isRequired,
  onClick: import_prop_types107.default.func,
  className: import_prop_types107.default.string
};
NavigationButton.defaultProps = {
  onClick: function onClick() {
  },
  className: void 0
};
var _excluded$v = ["rowComponent", "cellComponent", "headerRowComponent", "headerCellComponent", "className", "cells", "headerCells", "selectedDate", "onCellClick", "formatDate"];
var PREFIX$l = "Table";
var classes$l = {
  table: "".concat(PREFIX$l, "-table")
};
var StyledTableMUI$1 = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$l.table), {
  width: "320px",
  tableLayout: "fixed"
}));
var Table$1 = function Table2(_ref) {
  var Row4 = _ref.rowComponent, Cell7 = _ref.cellComponent, HeaderRow = _ref.headerRowComponent, HeaderCell3 = _ref.headerCellComponent, className = _ref.className, cells = _ref.cells, headerCells = _ref.headerCells, selectedDate = _ref.selectedDate, onCellClick2 = _ref.onCellClick, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$v);
  return (0, import_react4.createElement)(StyledTableMUI$1, _extends2({
    className: clsx_m_default(classes$l.table, className)
  }, restProps), (0, import_react4.createElement)(TableHead_default, null, (0, import_react4.createElement)(HeaderRow, null, headerCells.map(function(cell) {
    var key = formatDate3(cell.startDate, WEEK_DAY_OPTIONS);
    return (0, import_react4.createElement)(HeaderCell3, {
      key
    }, key);
  }))), (0, import_react4.createElement)(TableBody_default, null, cells.map(function(row) {
    return (0, import_react4.createElement)(Row4, {
      key: row[0].startDate.toString()
    }, row.map(function(_ref2) {
      var startDate = _ref2.startDate, otherMonth = _ref2.otherMonth, today = _ref2.today;
      var selected = areDatesSame(selectedDate, startDate);
      return (0, import_react4.createElement)(Cell7, {
        key: startDate.toString(),
        otherMonth,
        selected,
        today,
        onClick: function onClick2() {
          onCellClick2(startDate);
        }
      }, formatDate3(startDate, DAY_OPTIONS));
    }));
  })));
};
true ? Table$1.propTypes = {
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  headerRowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  headerCellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  cells: import_prop_types107.default.array.isRequired,
  selectedDate: import_prop_types107.default.oneOfType([import_prop_types107.default.instanceOf(Date), import_prop_types107.default.string, import_prop_types107.default.number]),
  formatDate: import_prop_types107.default.func.isRequired,
  headerCells: import_prop_types107.default.array,
  className: import_prop_types107.default.string,
  onCellClick: import_prop_types107.default.func
} : void 0;
Table$1.defaultProps = {
  className: void 0,
  headerCells: [],
  onCellClick: function onCellClick() {
  },
  selectedDate: void 0
};
var _excluded$w = ["selectedDate", "firstDayOfWeek", "getCells", "textComponent", "navigationButtonComponent", "navigatorComponent", "rowComponent", "cellComponent", "headerRowComponent", "headerCellComponent", "onSelectedDateChange", "formatDate"];
var Root$2 = function(_React$PureComponent) {
  _inherits(Root3, _React$PureComponent);
  var _super = _createSuper(Root3);
  function Root3(props) {
    var _this;
    _classCallCheck(this, Root3);
    _this = _super.call(this, props);
    var selectedDate = _this.props.selectedDate;
    _this.state = {
      selectedDate,
      currentDate: selectedDate
    };
    _this.onNavigate = _this.onNavigate.bind(_assertThisInitialized(_this));
    _this.onCellClick = _this.onCellClick.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Root3, [{
    key: "onNavigate",
    value: function onNavigate2(_ref) {
      var back = _ref.back;
      var currentDateState = this.state.currentDate;
      var nextDate = navigateByOneMonth(currentDateState, back);
      this.setState({
        currentDate: nextDate
      });
    }
  }, {
    key: "onCellClick",
    value: function onCellClick2(nextDate) {
      var onSelectedDateChange2 = this.props.onSelectedDateChange;
      this.setState({
        selectedDate: nextDate,
        currentDate: nextDate
      });
      onSelectedDateChange2(nextDate);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, selectedDate = _this$props.selectedDate, firstDayOfWeek = _this$props.firstDayOfWeek, getCells = _this$props.getCells, Text3 = _this$props.textComponent, NavigationButton2 = _this$props.navigationButtonComponent, Navigator3 = _this$props.navigatorComponent, Row4 = _this$props.rowComponent, Cell7 = _this$props.cellComponent, HeaderRow = _this$props.headerRowComponent, HeaderCell3 = _this$props.headerCellComponent, onSelectedDateChange2 = _this$props.onSelectedDateChange, formatDate3 = _this$props.formatDate, restProps = _objectWithoutProperties(_this$props, _excluded$w);
      var _this$state = this.state, selectedDateState = _this$state.selectedDate, currentDate = _this$state.currentDate;
      var cellsData = getCells(currentDate, firstDayOfWeek, 1, Date.now());
      return (0, import_react4.createElement)("div", restProps, (0, import_react4.createElement)(Navigator3, {
        currentDate,
        textComponent: Text3,
        navigationButtonComponent: NavigationButton2,
        onNavigate: this.onNavigate,
        formatDate: formatDate3
      }), (0, import_react4.createElement)(Table$1, {
        headerCells: cellsData[0],
        selectedDate: selectedDateState,
        cells: cellsData,
        rowComponent: Row4,
        cellComponent: Cell7,
        headerRowComponent: HeaderRow,
        headerCellComponent: HeaderCell3,
        onCellClick: this.onCellClick,
        formatDate: formatDate3
      }));
    }
  }]);
  return Root3;
}(import_react4.PureComponent);
true ? Root$2.propTypes = {
  textComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  navigationButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  headerRowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  headerCellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  navigatorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  getCells: import_prop_types107.default.func.isRequired,
  selectedDate: import_prop_types107.default.oneOfType([import_prop_types107.default.number, import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number,
  onSelectedDateChange: import_prop_types107.default.func
} : void 0;
Root$2.defaultProps = {
  onSelectedDateChange: function onSelectedDateChange() {
  },
  firstDayOfWeek: 0
};
var _excluded$x = ["otherMonth", "selected", "today", "children", "className"];
var PREFIX$m = "Cell";
var classes$m = {
  cell: "".concat(PREFIX$m, "-cell"),
  otherMonth: "".concat(PREFIX$m, "-otherMonth"),
  selected: "".concat(PREFIX$m, "-selected"),
  today: "".concat(PREFIX$m, "-today")
};
var StyledTableCell$5 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, palette = _ref$theme.palette, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$m.cell), {
    userSelect: "none",
    border: "none",
    cursor: "pointer",
    padding: 0,
    height: spacing(6),
    textAlign: "center",
    verticalAlign: "middle",
    "&:last-child": {
      padding: 0
    }
  }), _defineProperty(_ref2, "&.".concat(classes$m.otherMonth), {
    color: palette.text.disabled
  }), _defineProperty(_ref2, "& .".concat(classes$m.selected), {
    background: palette.primary.main,
    color: palette.primary.contrastText,
    display: "inline-block",
    width: "2.3em",
    lineHeight: 2.3,
    borderRadius: "50%",
    cursor: "default"
  }), _defineProperty(_ref2, "& .".concat(classes$m.today), {
    color: palette.primary.main,
    fontWeight: "bold"
  }), _ref2;
});
var Cell$4 = function Cell5(_ref3) {
  var _classNames, _classNames2;
  var otherMonth = _ref3.otherMonth, selected = _ref3.selected, today = _ref3.today, children = _ref3.children, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$x);
  return (0, import_react4.createElement)(StyledTableCell$5, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$m.cell, true), _defineProperty(_classNames, classes$m.otherMonth, otherMonth), _classNames), className)
  }, restProps), (0, import_react4.createElement)("span", {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$m.selected, selected), _defineProperty(_classNames2, classes$m.today, today && !selected), _classNames2))
  }, children));
};
true ? Cell$4.propTypes = {
  children: import_prop_types107.default.node,
  otherMonth: import_prop_types107.default.bool,
  selected: import_prop_types107.default.bool,
  today: import_prop_types107.default.bool,
  className: import_prop_types107.default.string
} : void 0;
Cell$4.defaultProps = {
  children: void 0,
  otherMonth: false,
  selected: false,
  today: false,
  className: void 0
};
var _excluded$y = ["children", "className"];
var PREFIX$n = "HeaderCell";
var classes$n = {
  cell: "".concat(PREFIX$n, "-cell")
};
var StyledTableCell$6 = styled_default(TableCell_default)(_defineProperty({}, "&.".concat(classes$n.cell), {
  userSelect: "none",
  border: "none",
  padding: 0,
  textAlign: "center",
  verticalAlign: "middle",
  "&:last-child": {
    padding: 0
  }
}));
var HeaderCell = function HeaderCell2(_ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$y);
  return (0, import_react4.createElement)(StyledTableCell$6, _extends2({
    className: clsx_m_default(_defineProperty({}, classes$n.cell, true), className)
  }, restProps), children);
};
true ? HeaderCell.propTypes = {
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string
} : void 0;
HeaderCell.defaultProps = {
  children: void 0,
  className: void 0
};
var _excluded$z = ["children"];
var Row$1 = function Row3(_ref) {
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$z);
  return (0, import_react4.createElement)(TableRow_default, restProps, children);
};
true ? Row$1.propTypes = {
  children: import_prop_types107.default.node.isRequired
} : void 0;
var _excluded$A = ["className", "currentDate", "textComponent", "navigationButtonComponent", "onNavigate", "formatDate"];
var PREFIX$o = "Navigator";
var classes$o = {
  navigator: "".concat(PREFIX$o, "-navigator")
};
var StyledToolbar = styled_default(Toolbar_default)(_defineProperty({}, "&.".concat(classes$o.navigator), {
  paddingLeft: 0,
  paddingRight: 0
}));
var Navigator = function Navigator2(_ref) {
  var className = _ref.className, currentDate = _ref.currentDate, Text3 = _ref.textComponent, NavigationButton2 = _ref.navigationButtonComponent, onNavigate2 = _ref.onNavigate, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$A);
  return (0, import_react4.createElement)(StyledToolbar, _extends2({
    className: clsx_m_default(classes$o.navigator, className)
  }, restProps), (0, import_react4.createElement)(NavigationButton2, {
    type: "back",
    onClick: function onClick2() {
      onNavigate2({
        back: true
      });
    }
  }), (0, import_react4.createElement)(Text3, {
    currentDate,
    formatDate: formatDate3
  }), (0, import_react4.createElement)(NavigationButton2, {
    type: "forward",
    onClick: function onClick2() {
      onNavigate2({
        back: false
      });
    }
  }));
};
true ? Navigator.propTypes = {
  textComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  navigationButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  currentDate: import_prop_types107.default.oneOfType([import_prop_types107.default.number, import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string,
  onNavigate: import_prop_types107.default.func
} : void 0;
Navigator.defaultProps = {
  className: void 0,
  onNavigate: function onNavigate() {
  }
};
var _excluded$B = ["className", "currentDate", "formatDate"];
var PREFIX$p = "Text";
var classes$p = {
  text: "".concat(PREFIX$p, "-text")
};
var StyledTypography = styled_default(Typography_default)(_defineProperty({}, "&.".concat(classes$p.text), {
  userSelect: "none",
  flex: 1,
  textAlign: "center"
}));
var Text = function Text2(_ref) {
  var className = _ref.className, currentDate = _ref.currentDate, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$B);
  return (0, import_react4.createElement)(StyledTypography, _extends2({
    variant: "h6",
    className: clsx_m_default(_defineProperty({}, classes$p.text, true), className)
  }, restProps), formatDate3(currentDate, MONTH_YEAR_OPTIONS));
};
true ? Text.propTypes = {
  currentDate: import_prop_types107.default.oneOfType([import_prop_types107.default.number, import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string
} : void 0;
Text.defaultProps = {
  className: void 0
};
var DateNavigator2 = withComponents({
  Root: Root$1,
  OpenButton,
  Overlay,
  NavigationButton,
  Calendar: Root$2,
  CalendarNavigator: Navigator,
  CalendarCell: Cell$4,
  CalendarRow: Row$1,
  CalendarHeaderCell: HeaderCell,
  CalendarHeaderRow: Row$1,
  CalendarText: Text,
  CalendarNavigationButton: NavigationButton
})(DateNavigator);
var _excluded$C = ["headerComponent", "contentComponent", "commandButtonComponent", "recurringIconComponent", "appointmentMeta", "appointmentResources", "showOpenButton", "showCloseButton", "showDeleteButton", "visible", "onHide", "commandButtonIds", "onOpenButtonClick", "onDeleteButtonClick", "formatDate"];
var PREFIX$q = "Layout";
var classes$q = {
  popover: "".concat(PREFIX$q, "-popover")
};
var StyledPopover = styled_default(Popover_default)(_defineProperty({}, "& .".concat(classes$q.popover), _defineProperty({
  borderRadius: "8px",
  width: "400px"
}, "".concat(SMALL_LAYOUT_MEDIA_QUERY), {
  width: "300px"
})));
var verticalTopHorizontalCenterOptions = {
  vertical: "top",
  horizontal: "center"
};
var Layout$5 = function Layout3(_ref) {
  var Header3 = _ref.headerComponent, Content3 = _ref.contentComponent, commandButtonComponent = _ref.commandButtonComponent, recurringIconComponent = _ref.recurringIconComponent, appointmentMeta = _ref.appointmentMeta, appointmentResources = _ref.appointmentResources, showOpenButton = _ref.showOpenButton, showCloseButton = _ref.showCloseButton, showDeleteButton = _ref.showDeleteButton, visible = _ref.visible, onHide3 = _ref.onHide, commandButtonIds2 = _ref.commandButtonIds, onOpenButtonClick3 = _ref.onOpenButtonClick, onDeleteButtonClick = _ref.onDeleteButtonClick, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$C);
  var target = appointmentMeta.target, _appointmentMeta$data = appointmentMeta.data, data = _appointmentMeta$data === void 0 ? {} : _appointmentMeta$data;
  return (0, import_react4.createElement)(StyledPopover, _extends2({
    open: visible,
    anchorEl: target,
    onClose: onHide3,
    anchorOrigin: verticalTopHorizontalCenterOptions,
    transformOrigin: verticalTopHorizontalCenterOptions,
    PaperProps: {
      className: classes$q.popover
    }
  }, restProps), (0, import_react4.createElement)(Header3, {
    appointmentData: data,
    commandButtonComponent,
    showOpenButton,
    showCloseButton,
    showDeleteButton,
    commandButtonIds: commandButtonIds2,
    onOpenButtonClick: onOpenButtonClick3,
    onDeleteButtonClick,
    onHide: onHide3
  }), (0, import_react4.createElement)(Content3, {
    appointmentData: data,
    appointmentResources,
    formatDate: formatDate3,
    recurringIconComponent
  }));
};
true ? Layout$5.propTypes = {
  commandButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  headerComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  contentComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  recurringIconComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  showOpenButton: import_prop_types107.default.bool.isRequired,
  showCloseButton: import_prop_types107.default.bool.isRequired,
  showDeleteButton: import_prop_types107.default.bool.isRequired,
  commandButtonIds: import_prop_types107.default.object.isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  onOpenButtonClick: import_prop_types107.default.func,
  onDeleteButtonClick: import_prop_types107.default.func.isRequired,
  appointmentMeta: import_prop_types107.default.shape({
    target: import_prop_types107.default.oneOfType([import_prop_types107.default.object, import_prop_types107.default.func]),
    data: import_prop_types107.default.object
  }),
  appointmentResources: import_prop_types107.default.array,
  visible: import_prop_types107.default.bool,
  onHide: import_prop_types107.default.func
} : void 0;
Layout$5.defaultProps = {
  onOpenButtonClick: function onOpenButtonClick() {
    return void 0;
  },
  onHide: function onHide() {
    return void 0;
  },
  appointmentMeta: {},
  appointmentResources: [],
  visible: false
};
var _excluded$D = ["appointmentData", "commandButtonComponent", "showOpenButton", "showCloseButton", "showDeleteButton", "commandButtonIds", "onOpenButtonClick", "onDeleteButtonClick", "onHide", "className", "children"];
var PREFIX$r = "Header";
var classes$r = {
  head: "".concat(PREFIX$r, "-head"),
  line: "".concat(PREFIX$r, "-line"),
  flexContainer: "".concat(PREFIX$r, "-flexContainer")
};
var StyledDiv$a = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$r.head), {
    position: "relative",
    paddingLeft: spacing(1),
    paddingRight: spacing(0.5),
    paddingTop: spacing(0.25),
    minHeight: spacing(1.5)
  }), _defineProperty(_ref2, "&.".concat(classes$r.flexContainer), {
    display: "flex",
    flexDirection: "row",
    justifyContent: "flex-end",
    alignItems: "flex-start"
  }), _defineProperty(_ref2, "& .".concat(classes$r.line), {
    backgroundColor: palette.action.disabledBackground,
    height: spacing(3.5),
    marginLeft: spacing(1),
    marginRight: spacing(1),
    marginTop: spacing(1.25),
    width: "1px"
  }), _ref2;
});
var Header = function Header2(_ref3) {
  var appointmentData = _ref3.appointmentData, CommandButton3 = _ref3.commandButtonComponent, showOpenButton = _ref3.showOpenButton, showCloseButton = _ref3.showCloseButton, showDeleteButton = _ref3.showDeleteButton, commandButtonIds2 = _ref3.commandButtonIds, onOpenButtonClick3 = _ref3.onOpenButtonClick, onDeleteButtonClick = _ref3.onDeleteButtonClick, onHide3 = _ref3.onHide, className = _ref3.className, children = _ref3.children, restProps = _objectWithoutProperties(_ref3, _excluded$D);
  var handleOpenButtonClick = function handleOpenButtonClick2() {
    onHide3();
    onOpenButtonClick3();
  };
  return (0, import_react4.createElement)(StyledDiv$a, _extends2({
    className: clsx_m_default(classes$r.head, classes$r.flexContainer, className)
  }, restProps), showOpenButton && (0, import_react4.createElement)(CommandButton3, {
    id: commandButtonIds2.open,
    onExecute: handleOpenButtonClick
  }), showDeleteButton && (0, import_react4.createElement)(CommandButton3, {
    id: commandButtonIds2.delete,
    onExecute: onDeleteButtonClick
  }), children, showCloseButton && (0, import_react4.createElement)(StyledDiv$a, {
    className: classes$r.flexContainer
  }, (0, import_react4.createElement)("div", {
    className: classes$r.line
  }), (0, import_react4.createElement)(CommandButton3, {
    id: commandButtonIds2.close,
    onExecute: onHide3
  })));
};
true ? Header.propTypes = {
  appointmentData: import_prop_types107.default.object,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  commandButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  showOpenButton: import_prop_types107.default.bool.isRequired,
  showCloseButton: import_prop_types107.default.bool.isRequired,
  showDeleteButton: import_prop_types107.default.bool.isRequired,
  commandButtonIds: import_prop_types107.default.object.isRequired,
  onOpenButtonClick: import_prop_types107.default.func,
  onDeleteButtonClick: import_prop_types107.default.func.isRequired,
  onHide: import_prop_types107.default.func
} : void 0;
Header.defaultProps = {
  appointmentData: void 0,
  className: void 0,
  children: void 0,
  onOpenButtonClick: function onOpenButtonClick2() {
    return void 0;
  },
  onHide: function onHide2() {
    return void 0;
  }
};
var _excluded$E = ["className", "children", "appointmentData", "appointmentResources", "formatDate", "recurringIconComponent"];
var PREFIX$s = "Content";
var classes$s = {
  content: "".concat(PREFIX$s, "-content"),
  text: "".concat(PREFIX$s, "-text"),
  title: "".concat(PREFIX$s, "-title"),
  icon: "".concat(PREFIX$s, "-icon"),
  lens: "".concat(PREFIX$s, "-lens"),
  lensMini: "".concat(PREFIX$s, "-lensMini"),
  textCenter: "".concat(PREFIX$s, "-textCenter"),
  dateAndTitle: "".concat(PREFIX$s, "-dateAndTitle"),
  titleContainer: "".concat(PREFIX$s, "-titleContainer"),
  contentContainer: "".concat(PREFIX$s, "-contentContainer"),
  resourceContainer: "".concat(PREFIX$s, "-resourceContainer"),
  recurringIcon: "".concat(PREFIX$s, "-recurringIcon"),
  relativeContainer: "".concat(PREFIX$s, "-relativeContainer")
};
var StyledDiv$b = styled_default("div")(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette, typography = _ref$theme.typography, resources = _ref.resources;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$s.content), _objectSpread2({
    padding: spacing(1.5, 1),
    paddingTop: spacing(1),
    backgroundColor: palette.background.paper,
    boxSizing: "border-box"
  }, typography.body2)), _defineProperty(_ref2, "& .".concat(classes$s.text), {
    display: "inline-block"
  }), _defineProperty(_ref2, "& .".concat(classes$s.title), _objectSpread2(_objectSpread2({}, typography.h6), {}, {
    color: palette.text.secondary,
    fontWeight: typography.fontWeightBold,
    overflow: "hidden",
    textOverflow: "ellipsis"
  })), _defineProperty(_ref2, "& .".concat(classes$s.icon), {
    verticalAlign: "middle",
    color: palette.action.active
  }), _defineProperty(_ref2, "& .".concat(classes$s.lens), {
    color: getAppointmentColor(300, getResourceColor(resources), palette.primary),
    width: spacing(4.5),
    height: spacing(4.5),
    verticalAlign: "super",
    position: "absolute",
    left: "50%",
    transform: "translate(-50%,0)"
  }), _defineProperty(_ref2, "& .".concat(classes$s.lensMini), {
    width: spacing(2.5),
    height: spacing(2.5)
  }), _defineProperty(_ref2, "& .".concat(classes$s.textCenter), {
    textAlign: "center",
    height: spacing(2.5)
  }), _defineProperty(_ref2, "& .".concat(classes$s.dateAndTitle), {
    lineHeight: 1.4
  }), _defineProperty(_ref2, "& .".concat(classes$s.titleContainer), {
    paddingBottom: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$s.contentContainer), {
    paddingBottom: spacing(1.5)
  }), _defineProperty(_ref2, "& .".concat(classes$s.resourceContainer), {
    paddingBottom: spacing(0.25)
  }), _defineProperty(_ref2, "& .".concat(classes$s.recurringIcon), {
    position: "absolute",
    paddingTop: spacing(0.875),
    left: "50%",
    transform: "translate(-50%,0)",
    color: palette.background.paper,
    width: spacing(2.625),
    height: spacing(2.625)
  }), _defineProperty(_ref2, "& .".concat(classes$s.relativeContainer), {
    position: "relative",
    width: "100%",
    height: "100%"
  }), _ref2;
});
var Content = function Content2(_ref3) {
  var className = _ref3.className, children = _ref3.children, appointmentData = _ref3.appointmentData, appointmentResources = _ref3.appointmentResources, formatDate3 = _ref3.formatDate, RecurringIcon = _ref3.recurringIconComponent, restProps = _objectWithoutProperties(_ref3, _excluded$E);
  var weekDays = viewBoundText(appointmentData.startDate, appointmentData.endDate, WEEKDAY_INTERVAL, appointmentData.startDate, 1, formatDate3);
  return (0, import_react4.createElement)(StyledDiv$b, _extends2({
    resources: appointmentResources,
    className: clsx_m_default(classes$s.content, className)
  }, restProps), (0, import_react4.createElement)(Grid_default, {
    container: true,
    alignItems: "flex-start",
    className: classes$s.titleContainer
  }, (0, import_react4.createElement)(Grid_default, {
    item: true,
    xs: 2
  }, (0, import_react4.createElement)("div", {
    className: classes$s.relativeContainer
  }, (0, import_react4.createElement)(Lens_default, {
    className: classes$s.lens
  }), !!appointmentData.rRule && (0, import_react4.createElement)(RecurringIcon, {
    className: classes$s.recurringIcon
  }))), (0, import_react4.createElement)(Grid_default, {
    item: true,
    xs: 10
  }, (0, import_react4.createElement)("div", null, (0, import_react4.createElement)("div", {
    className: clsx_m_default(classes$s.title, classes$s.dateAndTitle)
  }, appointmentData.title), (0, import_react4.createElement)("div", {
    className: clsx_m_default(classes$s.text, classes$s.dateAndTitle)
  }, weekDays)))), (0, import_react4.createElement)(Grid_default, {
    container: true,
    alignItems: "center",
    className: classes$s.contentContainer
  }, (0, import_react4.createElement)(Grid_default, {
    item: true,
    xs: 2,
    className: classes$s.textCenter
  }, (0, import_react4.createElement)(AccessTime_default, {
    className: classes$s.icon
  })), (0, import_react4.createElement)(Grid_default, {
    item: true,
    xs: 10
  }, (0, import_react4.createElement)("div", {
    className: classes$s.text
  }, "".concat(formatDate3(appointmentData.startDate, HOUR_MINUTE_OPTIONS), "\n              - ").concat(formatDate3(appointmentData.endDate, HOUR_MINUTE_OPTIONS))))), appointmentResources.map(function(resourceItem) {
    return (0, import_react4.createElement)(Grid_default, {
      container: true,
      alignItems: "center",
      className: classes$s.resourceContainer,
      key: "".concat(resourceItem.fieldName, "_").concat(resourceItem.id)
    }, (0, import_react4.createElement)(Grid_default, {
      item: true,
      xs: 2,
      className: classes$s.textCenter
    }, (0, import_react4.createElement)("div", {
      className: classes$s.relativeContainer
    }, (0, import_react4.createElement)(Lens_default, {
      className: clsx_m_default(classes$s.lens, classes$s.lensMini),
      style: {
        color: getAppointmentColor(300, resourceItem.color)
      }
    }))), (0, import_react4.createElement)(Grid_default, {
      item: true,
      xs: 10
    }, (0, import_react4.createElement)("div", {
      className: classes$s.text
    }, resourceItem.text)));
  }), children);
};
true ? Content.propTypes = {
  appointmentData: import_prop_types107.default.object,
  appointmentResources: import_prop_types107.default.array,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  formatDate: import_prop_types107.default.func.isRequired,
  recurringIconComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired
} : void 0;
Content.defaultProps = {
  appointmentData: void 0,
  appointmentResources: [],
  className: void 0,
  children: void 0
};
var _excluded$F = ["id", "onExecute"];
var getIcon = function getIcon2(id) {
  if (id === OPEN_COMMAND_BUTTON) {
    return (0, import_react4.createElement)(Edit_default, null);
  }
  if (id === CLOSE_COMMAND_BUTTON) {
    return (0, import_react4.createElement)(Close_default2, null);
  }
  if (id === DELETE_COMMAND_BUTTON) {
    return (0, import_react4.createElement)(Delete_default, null);
  }
  return null;
};
var CommandButton = function CommandButton2(_ref) {
  var id = _ref.id, onExecute2 = _ref.onExecute, restProps = _objectWithoutProperties(_ref, _excluded$F);
  return (0, import_react4.createElement)(IconButton_default, _extends2({
    onClick: onExecute2
  }, restProps, {
    size: "large"
  }), getIcon(id));
};
true ? CommandButton.propTypes = {
  id: import_prop_types107.default.string,
  onExecute: import_prop_types107.default.func
} : void 0;
CommandButton.defaultProps = {
  onExecute: function onExecute() {
    return void 0;
  },
  id: ""
};
var AppointmentTooltip2 = withComponents({
  Layout: Layout$5,
  Header,
  Content,
  CommandButton,
  RecurringIcon: Repeat_default
})(AppointmentTooltip);
var _excluded$G = ["value", "availableOptions", "onValueChange", "readOnly", "inputClasses"];
var PREFIX$t = "OutlinedSelect";
var classes$t = {
  root: "".concat(PREFIX$t, "-root"),
  input: "".concat(PREFIX$t, "-input"),
  menuItem: "".concat(PREFIX$t, "-menuItem"),
  inputRoot: "".concat(PREFIX$t, "-inputRoot")
};
var StyledSelect = styled_default(Select_default)(function(_ref) {
  var typography = _ref.theme.typography;
  return _defineProperty({}, "&.".concat(classes$t.root), {
    fontSize: typography.fontSize + 2
  });
});
var StyledOutlinedInput = styled_default(OutlinedInput_default)(function() {
  var _ref3;
  return _ref3 = {}, _defineProperty(_ref3, "& .".concat(classes$t.input), {
    fontWeight: "bold",
    textTransform: "uppercase"
  }), _defineProperty(_ref3, "&.".concat(classes$t.inputRoot), {
    width: "100%"
  }), _ref3;
});
var OutlinedSelect = (0, import_react4.memo)(function(_ref4) {
  var value = _ref4.value, availableOptions = _ref4.availableOptions, onValueChange5 = _ref4.onValueChange, readOnly = _ref4.readOnly, inputClasses = _ref4.inputClasses, restProps = _objectWithoutProperties(_ref4, _excluded$G);
  var handleChange = function handleChange2(event) {
    if (event.target.value !== value)
      onValueChange5(event.target.value);
  };
  return (0, import_react4.createElement)(StyledSelect, _extends2({
    disabled: readOnly,
    classes: {
      root: classes$t.root
    },
    value,
    onChange: handleChange,
    input: (0, import_react4.createElement)(StyledOutlinedInput, {
      classes: inputClasses || {
        input: classes$t.input,
        root: classes$t.inputRoot
      }
    })
  }, restProps), availableOptions.map(function(option) {
    return (0, import_react4.createElement)(MenuItem_default, {
      value: option.id,
      key: option.id,
      className: classes$t.menuItem
    }, option.text);
  }));
});
true ? OutlinedSelect.propTypes = {
  onValueChange: import_prop_types107.default.func,
  value: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]).isRequired,
  availableOptions: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]),
    text: import_prop_types107.default.string.isRequired
  })),
  readOnly: import_prop_types107.default.bool,
  inputClasses: import_prop_types107.default.object
} : void 0;
OutlinedSelect.defaultProps = {
  readOnly: false,
  onValueChange: function onValueChange() {
    return void 0;
  },
  availableOptions: [],
  inputClasses: null
};
var _excluded$H = ["currentView", "availableViews", "onChange"];
var PREFIX$u = "Switcher";
var classes$u = {
  input: "".concat(PREFIX$u, "-input"),
  inputRoot: "".concat(PREFIX$u, "-inputRoot")
};
var StyledOutlinedSelect = styled_default(OutlinedSelect)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$u.input), _defineProperty({
    padding: spacing(1.25, 1.75),
    paddingRight: spacing(4),
    textTransform: "uppercase"
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    fontSize: "0.75rem"
  })), _defineProperty(_ref2, "& .".concat(classes$u.inputRoot), {
    marginLeft: spacing(0.5),
    "&:first-of-type": {
      marginLeft: 0
    }
  }), _ref2;
});
var Switcher = (0, import_react4.memo)(function(_ref3) {
  var currentView = _ref3.currentView, availableViews2 = _ref3.availableViews, onChange = _ref3.onChange, restProps = _objectWithoutProperties(_ref3, _excluded$H);
  var availableOptions = availableViews2.map(function(_ref4) {
    var name = _ref4.name, displayName = _ref4.displayName;
    return {
      id: name,
      text: displayName
    };
  });
  return (0, import_react4.createElement)(StyledOutlinedSelect, _extends2({
    value: currentView.name,
    availableOptions,
    onValueChange: onChange,
    inputClasses: {
      input: classes$u.input,
      root: classes$u.inputRoot
    }
  }, restProps));
});
true ? Switcher.propTypes = {
  onChange: import_prop_types107.default.func.isRequired,
  currentView: import_prop_types107.default.shape({
    name: import_prop_types107.default.string.isRequired,
    displayName: import_prop_types107.default.string.isRequired
  }).isRequired,
  availableViews: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    name: import_prop_types107.default.string.isRequired,
    displayName: import_prop_types107.default.string.isRequired
  }))
} : void 0;
Switcher.defaultProps = {
  availableViews: []
};
var ViewSwitcher2 = withComponents({
  Switcher
})(ViewSwitcher);
var _excluded$I = ["setCellElementsMeta", "cellsData", "className", "cellComponent", "rowComponent", "formatDate"];
var PREFIX$v = "Layout";
var classes$v = {
  table: "".concat(PREFIX$v, "-table")
};
var StyledTable$1 = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$v.table), {
  tableLayout: "fixed"
}));
var Layout$6 = (0, import_react4.memo)(function(_ref) {
  var setCellElementsMeta = _ref.setCellElementsMeta, cellsData = _ref.cellsData, className = _ref.className, Cell7 = _ref.cellComponent, Row4 = _ref.rowComponent, formatDate3 = _ref.formatDate, restProps = _objectWithoutProperties(_ref, _excluded$I);
  var tableRef = (0, import_react4.useRef)(null);
  (0, import_react4.useEffect)(function() {
    var tableElement = tableRef.current;
    setCellElementsMeta(cellsMeta(tableElement));
  });
  return (0, import_react4.createElement)(StyledTable$1, _extends2({
    ref: tableRef,
    className: clsx_m_default(classes$v.table, className)
  }, restProps), (0, import_react4.createElement)(TableBody_default, null, (0, import_react4.createElement)(Row4, null, cellsData.map(function(_ref2) {
    var startDate = _ref2.startDate, endDate = _ref2.endDate, endOfGroup = _ref2.endOfGroup, groupingInfo = _ref2.groupingInfo;
    return (0, import_react4.createElement)(Cell7, {
      key: getViewCellKey(startDate, groupingInfo),
      startDate,
      endDate,
      endOfGroup,
      hasRightBorder: endOfGroup,
      groupingInfo
    });
  }))));
});
true ? Layout$6.propTypes = {
  formatDate: import_prop_types107.default.func.isRequired,
  cellsData: import_prop_types107.default.arrayOf(Array).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  setCellElementsMeta: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string
} : void 0;
Layout$6.defaultProps = {
  className: void 0
};
var _excluded$J = ["className", "children", "startDate", "endDate", "endOfGroup", "groupingInfo", "groupOrientation", "hasRightBorder"];
var PREFIX$w = "Cell";
var classes$w = {
  cell: "".concat(PREFIX$w, "-cell"),
  brightRightBorder: "".concat(PREFIX$w, "-brightRightBorder")
};
var StyledTableCell$7 = styled_default(TableCell_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$w.cell), {
    padding: 0,
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL]),
    boxSizing: "border-box",
    borderRight: getBorder(theme),
    "&:last-child": {
      borderRight: "none"
    },
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    },
    "&:focus": {
      backgroundColor: alpha(theme.palette.primary.main, 0.15),
      outline: 0
    },
    "tr:last-child &": {
      borderBottom: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$w.brightRightBorder), {
    borderRight: getBrightBorder(theme)
  }), _ref2;
});
var Cell$5 = function Cell6(_ref3) {
  var _classNames;
  var className = _ref3.className, children = _ref3.children, startDate = _ref3.startDate, endDate = _ref3.endDate, endOfGroup = _ref3.endOfGroup, groupingInfo = _ref3.groupingInfo, groupOrientation = _ref3.groupOrientation, hasRightBorder = _ref3.hasRightBorder, restProps = _objectWithoutProperties(_ref3, _excluded$J);
  return (0, import_react4.createElement)(StyledTableCell$7, _extends2({
    tabIndex: 0,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$w.cell, true), _defineProperty(_classNames, classes$w.brightRightBorder, groupOrientation === HORIZONTAL_GROUP_ORIENTATION && (endOfGroup || hasRightBorder)), _classNames), className)
  }, restProps), children);
};
true ? Cell$5.propTypes = {
  startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  hasRightBorder: import_prop_types107.default.bool,
  endOfGroup: import_prop_types107.default.bool,
  groupingInfo: import_prop_types107.default.arrayOf(import_prop_types107.default.object),
  groupOrientation: import_prop_types107.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION])
} : void 0;
Cell$5.defaultProps = {
  children: null,
  startDate: void 0,
  endDate: void 0,
  className: void 0,
  hasRightBorder: false,
  endOfGroup: false,
  groupingInfo: void 0,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION
};
var _excluded$K = ["getMessage", "className", "fixedHeight"];
var PREFIX$x = "TitleCell";
var classes$x = {
  container: "".concat(PREFIX$x, "-container"),
  content: "".concat(PREFIX$x, "-content"),
  title: "".concat(PREFIX$x, "-title"),
  fixedHeight: "".concat(PREFIX$x, "-fixedHeight")
};
var StyledDiv$c = styled_default("div")(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$x.container), {
    userSelect: "none",
    height: "100%",
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-end",
    position: "relative"
  }), _defineProperty(_ref2, "&.".concat(classes$x.fixedHeight), {
    height: theme.spacing(SPACING_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL]),
    width: "100%"
  }), _defineProperty(_ref2, "&.".concat(classes$x.content), {
    width: theme.spacing(10),
    boxSizing: "border-box",
    height: theme.spacing(5.75),
    textAlign: "right",
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end"
  }), _ref2;
});
var StyledTypography$1 = styled_default(Typography_default)(function(_ref3) {
  var theme = _ref3.theme;
  return _defineProperty({}, "&.".concat(classes$x.title), _objectSpread2(_objectSpread2({
    paddingRight: theme.spacing(2)
  }, theme.typography.caption), {}, {
    color: theme.palette.text.secondary
  }));
});
var TitleCell = (0, import_react4.memo)(function(_ref5) {
  var _classNames, _classNames2;
  var getMessage8 = _ref5.getMessage, className = _ref5.className, fixedHeight = _ref5.fixedHeight, restProps = _objectWithoutProperties(_ref5, _excluded$K);
  return (0, import_react4.createElement)(StyledDiv$c, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$x.container, true), _defineProperty(_classNames, classes$x.fixedHeight, fixedHeight), _classNames), className)
  }, restProps), (0, import_react4.createElement)(StyledDiv$c, {
    className: clsx_m_default((_classNames2 = {}, _defineProperty(_classNames2, classes$x.content, true), _defineProperty(_classNames2, classes$x.fixedHeight, fixedHeight), _classNames2), className)
  }, (0, import_react4.createElement)(StyledTypography$1, {
    className: classes$x.title,
    variant: "body1"
  }, getMessage8("allDay"))));
});
TitleCell.propTypes = {
  getMessage: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string,
  fixedHeight: import_prop_types107.default.bool
};
TitleCell.defaultProps = {
  className: void 0,
  fixedHeight: false
};
var Container$1 = styled_default(ContainerBase)(function() {
  return _defineProperty({}, "&.".concat(classes.container), {
    position: "relative",
    display: "table",
    minWidth: "100%"
  });
});
var AllDayPanel2 = withComponents({
  AppointmentLayer: Container2,
  Layout: Layout$6,
  Cell: Cell$5,
  Row,
  TitleCell,
  Container: Container$1
})(AllDayPanel);
var _excluded$L = ["basicLayoutComponent", "commandLayoutComponent", "recurrenceLayoutComponent", "isRecurrence", "children", "className"];
var _styled$1;
var PREFIX$y = "Layout";
var classes$y = {
  root: "".concat(PREFIX$y, "-root"),
  container: "".concat(PREFIX$y, "-container"),
  stickyContainer: "".concat(PREFIX$y, "-stickyContainer")
};
var StyledDiv$d = styled_default("div")((_styled$1 = {}, _defineProperty(_styled$1, "&.".concat(classes$y.root), {
  height: "100%",
  margin: "0 auto",
  overflowY: "auto"
}), _defineProperty(_styled$1, "& .".concat(classes$y.container), _defineProperty({
  display: "flex"
}, "".concat(LAYOUT_MEDIA_QUERY), {
  flexDirection: "column"
})), _defineProperty(_styled$1, "& .".concat(classes$y.stickyContainer), {
  display: "flex",
  position: "sticky",
  top: 0,
  zIndex: 1
}), _styled$1));
var Layout$7 = function Layout4(_ref) {
  var BasicLayout = _ref.basicLayoutComponent, CommandLayout = _ref.commandLayoutComponent, RecurrenceLayout = _ref.recurrenceLayoutComponent, isRecurrence = _ref.isRecurrence, children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$L);
  return (0, import_react4.createElement)(StyledDiv$d, _extends2({
    className: clsx_m_default(classes$y.root, className)
  }, restProps), (0, import_react4.createElement)("div", {
    className: classes$y.stickyContainer
  }, (0, import_react4.createElement)(CommandLayout, null)), (0, import_react4.createElement)("div", {
    className: classes$y.container
  }, (0, import_react4.createElement)(BasicLayout, null), (0, import_react4.createElement)(RecurrenceLayout, null)), children);
};
true ? Layout$7.propTypes = {
  basicLayoutComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  commandLayoutComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  recurrenceLayoutComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  isRecurrence: import_prop_types107.default.bool
} : void 0;
Layout$7.defaultProps = {
  className: void 0,
  isRecurrence: false,
  children: null
};
var _excluded$M = ["value", "placeholder", "className", "readOnly", "onValueChange", "type"];
var PREFIX$z = "TextEditor";
var classes$z = {
  editor: "".concat(PREFIX$z, "-editor"),
  title: "".concat(PREFIX$z, "-title")
};
var StyledTextField = styled_default(TextField_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$z.editor), {
    width: "100%",
    marginTop: theme.spacing(0.375),
    marginBottom: theme.spacing(0.125)
  }), _defineProperty(_ref2, "& .".concat(classes$z.title), _objectSpread2({}, theme.typography.h6)), _ref2;
});
var TextEditor = (0, import_react4.memo)(function(_ref3) {
  var value = _ref3.value, placeholder = _ref3.placeholder, className = _ref3.className, readOnly = _ref3.readOnly, onValueChange5 = _ref3.onValueChange, type = _ref3.type, restProps = _objectWithoutProperties(_ref3, _excluded$M);
  var textFieldType = type === NUMBER_EDITOR ? "number" : "text";
  var notesTextEditor = type === MULTILINE_TEXT_EDITOR;
  return (0, import_react4.createElement)(StyledTextField, _extends2({
    className: clsx_m_default(classes$z.editor, className),
    value,
    variant: notesTextEditor ? "outlined" : void 0,
    disabled: readOnly,
    onChange: function onChange(_ref4) {
      var target = _ref4.target;
      return onValueChange5(target.value);
    },
    InputProps: {
      className: clsx_m_default(_defineProperty({}, classes$z.title, type === TITLE_TEXT_EDITOR))
    },
    multiline: notesTextEditor,
    rows: "5",
    type: textFieldType,
    hiddenLabel: true,
    margin: "normal",
    placeholder
  }, restProps));
});
true ? TextEditor.propTypes = {
  value: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]),
  placeholder: import_prop_types107.default.string,
  className: import_prop_types107.default.string,
  readOnly: import_prop_types107.default.bool,
  onValueChange: import_prop_types107.default.func,
  type: import_prop_types107.default.string
} : void 0;
TextEditor.defaultProps = {
  value: "",
  placeholder: void 0,
  className: void 0,
  readOnly: false,
  onValueChange: function onValueChange2() {
    return void 0;
  },
  type: ORDINARY_TEXT_EDITOR
};
var _excluded$N = ["children", "locale", "className", "getMessage", "readOnly", "onFieldChange", "appointmentData", "fullSize", "resources", "appointmentResources", "textEditorComponent", "dateEditorComponent", "selectComponent", "labelComponent", "booleanEditorComponent", "resourceEditorComponent"];
var PREFIX$A = "Layout";
var classes$A = {
  root: "".concat(PREFIX$A, "-root"),
  fullSize: "".concat(PREFIX$A, "-fullSize"),
  halfSize: "".concat(PREFIX$A, "-halfSize"),
  labelWithMargins: "".concat(PREFIX$A, "-labelWithMargins"),
  notesEditor: "".concat(PREFIX$A, "-notesEditor"),
  dateEditor: "".concat(PREFIX$A, "-dateEditor"),
  dividerLabel: "".concat(PREFIX$A, "-dividerLabel"),
  booleanEditors: "".concat(PREFIX$A, "-booleanEditors"),
  dateEditors: "".concat(PREFIX$A, "-dateEditors")
};
var StyledDiv$e = styled_default("div")(function(_ref) {
  var _mediaMaxWidth, _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, typography = _ref$theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$A.root), _defineProperty({
    width: "650px",
    paddingTop: spacing(3),
    paddingBottom: spacing(3),
    paddingLeft: spacing(4),
    paddingRight: spacing(4),
    boxSizing: "border-box",
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)")
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px",
    paddingRight: spacing(2),
    paddingLeft: spacing(2),
    paddingBottom: 0
  })), _defineProperty(_ref2, "&.".concat(classes$A.fullSize), {
    paddingBottom: spacing(3)
  }), _defineProperty(_ref2, "&.".concat(classes$A.halfSize), {
    "@media (min-width: 700px) and (max-width: 850px)": {
      width: "400px"
    },
    "@media (min-width: 850px) and (max-width: 1000px)": {
      width: "480px"
    },
    "@media (min-width: 1000px) and (max-width: 1150px)": {
      width: "560px"
    }
  }), _defineProperty(_ref2, "& .".concat(classes$A.labelWithMargins), {
    marginTop: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$A.notesEditor), {
    marginBottom: spacing(0.5),
    marginTop: spacing(0.5)
  }), _defineProperty(_ref2, "& .".concat(classes$A.dateEditor), {
    width: "45%",
    paddingTop: "0px!important",
    marginTop: spacing(2),
    paddingBottom: "0px!important",
    marginBottom: 0
  }), _defineProperty(_ref2, "& .".concat(classes$A.dividerLabel), _objectSpread2(_objectSpread2({}, typography.body2), {}, {
    width: "10%",
    textAlign: "center",
    paddingTop: spacing(2)
  })), _defineProperty(_ref2, "& .".concat(classes$A.booleanEditors), {
    marginTop: spacing(0.875)
  }), _defineProperty(_ref2, "@media (max-width: 570px)", (_mediaMaxWidth = {}, _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.dateEditors), {
    flexDirection: "column"
  }), _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.booleanEditors), {
    flexDirection: "column",
    marginTop: spacing(1.875)
  }), _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.dateEditor), {
    width: "100%",
    "&:first-of-type": {
      marginBottom: 0
    },
    "&:last-child": {
      marginTop: spacing(2)
    }
  }), _defineProperty(_mediaMaxWidth, "& .".concat(classes$A.dividerLabel), {
    display: "none"
  }), _mediaMaxWidth)), _ref2;
});
var Layout$8 = function Layout5(_ref3) {
  var _classNames;
  var children = _ref3.children, locale2 = _ref3.locale, className = _ref3.className, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, fullSize = _ref3.fullSize, resources = _ref3.resources, appointmentResources = _ref3.appointmentResources, TextEditor2 = _ref3.textEditorComponent, DateEditor2 = _ref3.dateEditorComponent, Select2 = _ref3.selectComponent, Label3 = _ref3.labelComponent, BooleanEditor2 = _ref3.booleanEditorComponent, ResourceEditor2 = _ref3.resourceEditorComponent, restProps = _objectWithoutProperties(_ref3, _excluded$N);
  var changeTitle = (0, import_react4.useCallback)(function(title) {
    return onFieldChange10({
      title
    });
  }, [onFieldChange10]);
  var changeNotes = (0, import_react4.useCallback)(function(notes) {
    return onFieldChange10({
      notes
    });
  }, [onFieldChange10]);
  var changeStartDate = (0, import_react4.useCallback)(function(startDate2) {
    return onFieldChange10({
      startDate: startDate2
    });
  }, [onFieldChange10]);
  var changeEndDate = (0, import_react4.useCallback)(function(endDate) {
    return onFieldChange10({
      endDate
    });
  }, [onFieldChange10]);
  var changeAllDay = (0, import_react4.useCallback)(function(allDay) {
    return onFieldChange10({
      allDay
    });
  }, [onFieldChange10]);
  var changeResources = (0, import_react4.useCallback)(function(resource) {
    return onFieldChange10(resource);
  }, [onFieldChange10]);
  var rRule = appointmentData.rRule, startDate = appointmentData.startDate;
  var changeFrequency = (0, import_react4.useCallback)(function(value) {
    return handleChangeFrequency(value ? REPEAT_TYPES.DAILY : REPEAT_TYPES.NEVER, rRule, startDate, onFieldChange10);
  }, [rRule, startDate, onFieldChange10]);
  return (0, import_react4.createElement)(StyledDiv$e, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$A.root, true), _defineProperty(_classNames, classes$A.fullSize, fullSize), _defineProperty(_classNames, classes$A.halfSize, !fullSize), _classNames), className)
  }, restProps), (0, import_react4.createElement)(Label3, {
    text: getMessage8("detailsLabel"),
    type: TITLE
  }), (0, import_react4.createElement)(TextEditor2, {
    placeholder: getMessage8("titleLabel"),
    readOnly,
    type: TITLE_TEXT_EDITOR,
    value: appointmentData.title,
    onValueChange: changeTitle
  }), (0, import_react4.createElement)(Grid_default, {
    container: true,
    alignItems: "center",
    className: classes$A.dateEditors
  }, (0, import_react4.createElement)(DateEditor2, {
    className: classes$A.dateEditor,
    readOnly,
    value: appointmentData.startDate,
    onValueChange: changeStartDate,
    locale: locale2,
    excludeTime: appointmentData.allDay
  }), (0, import_react4.createElement)(Label3, {
    text: "-",
    className: classes$A.dividerLabel
  }), (0, import_react4.createElement)(DateEditor2, {
    className: classes$A.dateEditor,
    readOnly,
    value: appointmentData.endDate,
    onValueChange: changeEndDate,
    locale: locale2,
    excludeTime: appointmentData.allDay
  })), (0, import_react4.createElement)(Grid_default, {
    container: true,
    className: classes$A.booleanEditors
  }, (0, import_react4.createElement)(BooleanEditor2, {
    label: getMessage8("allDayLabel"),
    readOnly,
    value: appointmentData.allDay,
    onValueChange: changeAllDay
  }), (0, import_react4.createElement)(BooleanEditor2, {
    label: getMessage8("repeatLabel"),
    readOnly,
    value: !!appointmentData.rRule,
    onValueChange: changeFrequency
  })), (0, import_react4.createElement)(Label3, {
    text: getMessage8("moreInformationLabel"),
    type: TITLE,
    className: classes$A.labelWithMargins
  }), (0, import_react4.createElement)(TextEditor2, {
    placeholder: getMessage8("notesLabel"),
    readOnly,
    type: MULTILINE_TEXT_EDITOR,
    value: appointmentData.notes,
    onValueChange: changeNotes,
    className: classes$A.notesEditor
  }), resources.map(function(resource) {
    return (0, import_react4.createElement)(import_react4.Fragment, {
      key: resource.fieldName
    }, (0, import_react4.createElement)(ResourceEditor2, {
      label: resource.title,
      readOnly,
      resource,
      appointmentResources,
      onResourceChange: changeResources
    }));
  }), children);
};
true ? Layout$8.propTypes = {
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  dateEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  booleanEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  resourceEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  locale: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.arrayOf(import_prop_types107.default.string)]).isRequired,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  getMessage: import_prop_types107.default.func.isRequired,
  onFieldChange: import_prop_types107.default.func,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  resources: import_prop_types107.default.array,
  appointmentResources: import_prop_types107.default.array,
  readOnly: import_prop_types107.default.bool,
  fullSize: import_prop_types107.default.bool.isRequired
} : void 0;
Layout$8.defaultProps = {
  onFieldChange: function onFieldChange() {
    return void 0;
  },
  resources: [],
  appointmentResources: [],
  className: void 0,
  readOnly: false,
  children: null
};
var _excluded$O = ["commandButtonComponent", "onCommitButtonClick", "onCancelButtonClick", "onDeleteButtonClick", "getMessage", "children", "className", "fullSize", "readOnly", "disableSaveButton", "hideDeleteButton"];
var PREFIX$B = "Layout";
var classes$B = {
  root: "".concat(PREFIX$B, "-root"),
  basic: "".concat(PREFIX$B, "-basic"),
  fullSize: "".concat(PREFIX$B, "-fullSize"),
  line: "".concat(PREFIX$B, "-line")
};
var StyledGrid = styled_default(Grid_default)(function(_ref) {
  var _$concat, _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$B.root), {
    display: "flex",
    justifyContent: "flex-end",
    paddingTop: spacing(2),
    paddingLeft: spacing(2),
    paddingRight: spacing(4),
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)"),
    backgroundColor: palette.background.paper
  }), _defineProperty(_ref2, "&.".concat(classes$B.basic), {
    width: "650px"
  }), _defineProperty(_ref2, "&.".concat(classes$B.fullSize), {
    width: "1150px",
    "@media (min-width: 700px) and (max-width: 850px)": {
      width: "700px"
    },
    "@media (min-width: 850px) and (max-width: 1000px)": {
      width: "850px"
    },
    "@media (min-width: 1000px) and (max-width: 1150px)": {
      width: "1000px"
    }
  }), _defineProperty(_ref2, "".concat(LAYOUT_MEDIA_QUERY), (_$concat = {}, _defineProperty(_$concat, "&.".concat(classes$B.basic), {
    maxWidth: "700px",
    width: "100%"
  }), _defineProperty(_$concat, "&.".concat(classes$B.root), {
    paddingRight: spacing(2),
    paddingLeft: 0,
    paddingTop: spacing(1),
    maxWidth: "700px",
    width: "100%"
  }), _$concat)), _ref2;
});
var StyledDiv$f = styled_default("div")(function(_ref3) {
  var _ref3$theme = _ref3.theme, palette = _ref3$theme.palette, spacing = _ref3$theme.spacing;
  return _defineProperty({}, "&.".concat(classes$B.line), {
    backgroundColor: palette.action.disabledBackground,
    height: spacing(4.5),
    width: "1px"
  });
});
var Layout$9 = function Layout6(_ref5) {
  var _classNames;
  var CommandButton3 = _ref5.commandButtonComponent, onCommitButtonClick = _ref5.onCommitButtonClick, onCancelButtonClick = _ref5.onCancelButtonClick, onDeleteButtonClick = _ref5.onDeleteButtonClick, getMessage8 = _ref5.getMessage, children = _ref5.children, className = _ref5.className, fullSize = _ref5.fullSize, readOnly = _ref5.readOnly, disableSaveButton = _ref5.disableSaveButton, hideDeleteButton = _ref5.hideDeleteButton, restProps = _objectWithoutProperties(_ref5, _excluded$O);
  return (0, import_react4.createElement)(StyledGrid, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$B.root, true), _defineProperty(_classNames, classes$B.basic, !fullSize), _defineProperty(_classNames, classes$B.fullSize, fullSize), _classNames), className),
    container: true,
    alignItems: "center"
  }, restProps), (0, import_react4.createElement)(CommandButton3, {
    onExecute: onCancelButtonClick,
    getMessage: getMessage8,
    id: CANCEL_BUTTON
  }), !readOnly && (0, import_react4.createElement)(import_react4.Fragment, null, !hideDeleteButton && (0, import_react4.createElement)(import_react4.Fragment, null, (0, import_react4.createElement)(CommandButton3, {
    onExecute: onDeleteButtonClick,
    getMessage: getMessage8,
    id: DELETE_BUTTON
  }), (0, import_react4.createElement)(StyledDiv$f, {
    className: classes$B.line
  })), (0, import_react4.createElement)(CommandButton3, {
    getMessage: getMessage8,
    disabled: disableSaveButton,
    onExecute: onCommitButtonClick,
    id: SAVE_BUTTON
  })), children);
};
true ? Layout$9.propTypes = {
  commandButtonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  onCommitButtonClick: import_prop_types107.default.func.isRequired,
  onCancelButtonClick: import_prop_types107.default.func.isRequired,
  onDeleteButtonClick: import_prop_types107.default.func.isRequired,
  getMessage: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string,
  fullSize: import_prop_types107.default.bool,
  readOnly: import_prop_types107.default.bool,
  children: import_prop_types107.default.node,
  disableSaveButton: import_prop_types107.default.bool,
  hideDeleteButton: import_prop_types107.default.bool
} : void 0;
Layout$9.defaultProps = {
  className: void 0,
  children: void 0,
  fullSize: false,
  readOnly: false,
  disableSaveButton: false,
  hideDeleteButton: false
};
var _excluded$P = ["getMessage", "className", "onExecute"];
var PREFIX$C = "SaveButton";
var classes$C = {
  button: "".concat(PREFIX$C, "-button"),
  textButton: "".concat(PREFIX$C, "-textButton")
};
var StyledButton$1 = styled_default(Button_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, palette = _ref$theme.palette;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$C.button), {
    padding: spacing(0.5, 3.5),
    marginLeft: spacing(3),
    height: spacing(4.5),
    "&:first-of-type": {
      marginLeft: 0
    },
    backgroundColor: ensureColor(300, palette.primary),
    "&:hover": {
      backgroundColor: ensureColor(400, palette.primary)
    }
  }), _defineProperty(_ref2, "&.".concat(classes$C.textButton), {
    color: palette.primary.contrastText
  }), _ref2;
});
var SaveButton = (0, import_react4.memo)(function(_ref3) {
  var _classNames;
  var getMessage8 = _ref3.getMessage, className = _ref3.className, onExecute2 = _ref3.onExecute, restProps = _objectWithoutProperties(_ref3, _excluded$P);
  return (0, import_react4.createElement)(StyledButton$1, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$C.button, true), _defineProperty(_classNames, classes$C.textButton, !restProps.disabled), _classNames), className),
    onClick: onExecute2
  }, restProps), getMessage8("commitCommand"));
});
SaveButton.propTypes = {
  className: import_prop_types107.default.string,
  getMessage: import_prop_types107.default.func.isRequired,
  onExecute: import_prop_types107.default.func.isRequired
};
SaveButton.defaultProps = {
  className: void 0
};
var _excluded$Q = ["onExecute", "className"];
var PREFIX$D = "DeleteButton";
var classes$D = {
  button: "".concat(PREFIX$D, "-button")
};
var StyledIconButton$2 = styled_default(IconButton_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$D.button), {
    marginRight: spacing(0.5)
  });
});
var DeleteButton = (0, import_react4.memo)(function(_ref3) {
  var onExecute2 = _ref3.onExecute, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$Q);
  return (0, import_react4.createElement)(StyledIconButton$2, _extends2({
    className: clsx_m_default(classes$D.button, className),
    onClick: onExecute2
  }, restProps, {
    size: "large"
  }), (0, import_react4.createElement)(Delete_default, null));
});
DeleteButton.propTypes = {
  className: import_prop_types107.default.string,
  onExecute: import_prop_types107.default.func.isRequired
};
DeleteButton.defaultProps = {
  className: void 0
};
var _excluded$R = ["onExecute", "className"];
var PREFIX$E = "CancelButton";
var classes$E = {
  button: "".concat(PREFIX$E, "-button")
};
var StyledIconButton$3 = styled_default(IconButton_default)(function() {
  return _defineProperty({}, "&.".concat(classes$E.button), {
    marginRight: "auto"
  });
});
var CancelButton = (0, import_react4.memo)(function(_ref2) {
  var onExecute2 = _ref2.onExecute, className = _ref2.className, restProps = _objectWithoutProperties(_ref2, _excluded$R);
  return (0, import_react4.createElement)(StyledIconButton$3, _extends2({
    className: clsx_m_default(classes$E.button, className),
    onClick: onExecute2
  }, restProps, {
    size: "large"
  }), (0, import_react4.createElement)(Close_default2, null));
});
CancelButton.propTypes = {
  className: import_prop_types107.default.string,
  onExecute: import_prop_types107.default.func.isRequired
};
CancelButton.defaultProps = {
  className: void 0
};
var _excluded$S = ["id", "getMessage", "onExecute"];
var CommandButton$1 = (0, import_react4.memo)(function(_ref) {
  var id = _ref.id, getMessage8 = _ref.getMessage, onExecute2 = _ref.onExecute, restProps = _objectWithoutProperties(_ref, _excluded$S);
  switch (id) {
    case SAVE_BUTTON:
      return (0, import_react4.createElement)(SaveButton, _extends2({
        getMessage: getMessage8,
        onExecute: onExecute2
      }, restProps));
    case DELETE_BUTTON:
      return (0, import_react4.createElement)(DeleteButton, _extends2({
        onExecute: onExecute2
      }, restProps));
    case CANCEL_BUTTON:
      return (0, import_react4.createElement)(CancelButton, _extends2({
        onExecute: onExecute2
      }, restProps));
    default:
      return null;
  }
});
true ? CommandButton$1.propTypes = {
  id: import_prop_types107.default.string.isRequired,
  onExecute: import_prop_types107.default.func.isRequired,
  getMessage: import_prop_types107.default.func.isRequired
} : void 0;
var _excluded$T = ["children", "visible", "className", "fullSize", "target", "onHide"];
var PREFIX$F = "Overlay";
var classes$F = {
  root: "".concat(PREFIX$F, "-root"),
  absolutePosition: "".concat(PREFIX$F, "-absolutePosition"),
  paper: "".concat(PREFIX$F, "-paper"),
  fullSize: "".concat(PREFIX$F, "-fullSize"),
  halfSize: "".concat(PREFIX$F, "-halfSize"),
  transition: "".concat(PREFIX$F, "-transition")
};
var StyledDrawer = styled_default(Drawer_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$F.root), {
    overflow: "hidden",
    paddingTop: spacing(2),
    position: "absolute"
  }), _defineProperty(_ref2, "& .".concat(classes$F.absolutePosition), {
    position: "absolute"
  }), _defineProperty(_ref2, "& .".concat(classes$F.paper), {
    outline: "none"
  }), _defineProperty(_ref2, "& .".concat(classes$F.fullSize), _defineProperty({
    height: "100%",
    width: "1150px",
    "@media (min-width: 700px) and (max-width: 850px)": {
      width: "700px"
    },
    "@media (min-width: 850px) and (max-width: 1000px)": {
      width: "850px"
    },
    "@media (min-width: 1000px) and (max-width: 1150px)": {
      width: "1000px"
    }
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px"
  })), _defineProperty(_ref2, "& .".concat(classes$F.halfSize), _defineProperty({
    height: "100%",
    width: "650px"
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px"
  })), _defineProperty(_ref2, "& .".concat(classes$F.transition), {
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)!important")
  }), _ref2;
});
var Overlay$1 = function Overlay3(_ref3) {
  var _classNames;
  var children = _ref3.children, visible = _ref3.visible, className = _ref3.className, fullSize = _ref3.fullSize, target = _ref3.target, onHide3 = _ref3.onHide, restProps = _objectWithoutProperties(_ref3, _excluded$T);
  var _React$useState = (0, import_react4.useState)(false), _React$useState2 = _slicedToArray(_React$useState, 2), previouslyOpen = _React$useState2[0], setPreviouslyOpen = _React$useState2[1];
  var paperClasses = clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$F.absolutePosition, true), _defineProperty(_classNames, classes$F.paper, true), _defineProperty(_classNames, classes$F.fullSize, fullSize), _defineProperty(_classNames, classes$F.halfSize, !fullSize), _defineProperty(_classNames, classes$F.transition, visible && previouslyOpen), _classNames));
  return (0, import_react4.createElement)(StyledDrawer, _extends2({
    className: clsx_m_default(classes$F.root, className),
    PaperProps: {
      className: paperClasses
    },
    BackdropProps: {
      className: classes$F.absolutePosition
    },
    ModalProps: {
      container: target.current
    },
    SlideProps: {
      onEntered: function onEntered() {
        return setPreviouslyOpen(true);
      },
      onExited: function onExited() {
        return setPreviouslyOpen(false);
      }
    },
    open: visible,
    variant: "temporary",
    anchor: "left",
    transitionDuration: TRANSITIONS_TIME,
    onBackdropClick: onHide3
  }, restProps), children);
};
true ? Overlay$1.propTypes = {
  children: import_prop_types107.default.node.isRequired,
  fullSize: import_prop_types107.default.bool.isRequired,
  onHide: import_prop_types107.default.func.isRequired,
  visible: import_prop_types107.default.bool,
  className: import_prop_types107.default.string,
  target: import_prop_types107.default.object
} : void 0;
Overlay$1.defaultProps = {
  className: void 0,
  visible: false,
  target: null
};
var _excluded$U = ["onValueChange", "value", "readOnly", "className", "locale", "excludeTime"];
var DateEditorBase = (0, import_react4.memo)(function(_ref) {
  var onValueChange5 = _ref.onValueChange, value = _ref.value, readOnly = _ref.readOnly, className = _ref.className, locale2 = _ref.locale, excludeTime = _ref.excludeTime, restProps = _objectWithoutProperties(_ref, _excluded$U);
  var memoizedChangeHandler = (0, import_react4.useCallback)(function(nextDate) {
    return nextDate && onValueChange5(nextDate.toDate());
  }, [onValueChange5]);
  var dateFormat = excludeTime ? "DD/MM/YYYY" : "DD/MM/YYYY hh:mm A";
  return (0, import_react4.createElement)(LocalizationProvider, {
    dateAdapter: AdapterMoment
  }, (0, import_react4.createElement)(DateTimePicker, _extends2({
    disabled: readOnly,
    renderInput: function renderInput(props) {
      return (0, import_react4.createElement)(TextField_default, _extends2({
        className,
        margin: "normal"
      }, props));
    },
    value,
    onChange: memoizedChangeHandler,
    inputFormat: dateFormat
  }, restProps)));
});
true ? DateEditorBase.propTypes = {
  value: import_prop_types107.default.oneOfType([import_prop_types107.default.number, import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
  className: import_prop_types107.default.string,
  readOnly: import_prop_types107.default.bool,
  onValueChange: import_prop_types107.default.func.isRequired,
  locale: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.arrayOf(import_prop_types107.default.string)]),
  excludeTime: import_prop_types107.default.bool
} : void 0;
DateEditorBase.defaultProps = {
  locale: "en-US",
  value: void 0,
  className: void 0,
  readOnly: false,
  excludeTime: false
};
var DateEditor = DateEditorBase;
var _excluded$V = ["text", "className", "type"];
var PREFIX$G = "Label";
var classes$G = {
  label: "".concat(PREFIX$G, "-label"),
  titleLabel: "".concat(PREFIX$G, "-titleLabel")
};
var StyledTypography$2 = styled_default(Typography_default)(function(_ref) {
  var _ref2;
  var theme = _ref.theme;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$G.label), {
    overflow: "hidden",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis"
  }), _defineProperty(_ref2, "&.".concat(classes$G.titleLabel), {
    fontWeight: theme.typography.fontWeightBold,
    fontSize: theme.typography.fontSize + 5,
    paddingBottom: theme.spacing(1)
  }), _ref2;
});
var Label$1 = (0, import_react4.memo)(function(_ref3) {
  var _classNames;
  var text = _ref3.text, className = _ref3.className, type = _ref3.type, restProps = _objectWithoutProperties(_ref3, _excluded$V);
  return (0, import_react4.createElement)(StyledTypography$2, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$G.label, true), _defineProperty(_classNames, classes$G.titleLabel, type === TITLE), _classNames), className)
  }, restProps), text);
});
Label$1.propTypes = {
  text: import_prop_types107.default.string,
  className: import_prop_types107.default.string,
  type: import_prop_types107.default.string
};
Label$1.defaultProps = {
  text: void 0,
  className: void 0,
  type: ORDINARY_LABEL
};
var _excluded$W = ["label", "value", "readOnly", "onValueChange"];
var PREFIX$H = "BooleanEditor";
var classes$H = {
  label: "".concat(PREFIX$H, "-label")
};
var StyledFormControlLabel = styled_default(FormControlLabel_default)(_defineProperty({}, "&.".concat(classes$H.label), {
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis",
  userSelect: "none"
}));
var BooleanEditor = (0, import_react4.memo)(function(_ref) {
  var label = _ref.label, value = _ref.value, readOnly = _ref.readOnly, onValueChange5 = _ref.onValueChange, restProps = _objectWithoutProperties(_ref, _excluded$W);
  return (0, import_react4.createElement)(StyledFormControlLabel, _extends2({
    classes: {
      label: classes$H.label
    },
    control: (0, import_react4.createElement)(Checkbox_default, {
      color: "primary",
      checked: value,
      onChange: function onChange(_ref2) {
        var target = _ref2.target;
        return onValueChange5(target.checked);
      }
    }),
    disabled: readOnly,
    label
  }, restProps));
});
BooleanEditor.propTypes = {
  label: import_prop_types107.default.string,
  readOnly: import_prop_types107.default.bool,
  value: import_prop_types107.default.bool,
  onValueChange: import_prop_types107.default.func.isRequired
};
BooleanEditor.defaultProps = {
  label: void 0,
  readOnly: false,
  value: false
};
var _excluded$X = ["value", "availableOptions", "onValueChange", "readOnly", "className"];
var PREFIX$I = "FilledSelect";
var classes$I = {
  filledSelect: "".concat(PREFIX$I, "-filledSelect"),
  menuItem: "".concat(PREFIX$I, "-menuItem")
};
var StyledTextField$1 = styled_default(TextField_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, typography = _ref$theme.typography, spacing = _ref$theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$I.filledSelect), {
    marginTop: spacing(0.375),
    marginBottom: spacing(0.125)
  }), _defineProperty(_ref2, "& .".concat(classes$I.menuItem), {
    fontSize: typography.fontSize,
    textTransform: "uppercase"
  }), _ref2;
});
var FilledSelect = (0, import_react4.memo)(function(_ref3) {
  var value = _ref3.value, availableOptions = _ref3.availableOptions, onValueChange5 = _ref3.onValueChange, readOnly = _ref3.readOnly, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$X);
  var handleChange = function handleChange2(event) {
    if (event.target.value !== value)
      onValueChange5(event.target.value);
  };
  return (0, import_react4.createElement)(StyledTextField$1, _extends2({
    select: true,
    className: clsx_m_default(classes$I.filledSelect, className),
    value,
    onChange: handleChange,
    margin: "normal",
    hiddenLabel: true,
    disabled: readOnly
  }, restProps), availableOptions.map(function(option) {
    return (0, import_react4.createElement)(MenuItem_default, {
      value: option.id,
      key: option.id,
      className: classes$I.menuItem
    }, option.text);
  }));
});
true ? FilledSelect.propTypes = {
  onValueChange: import_prop_types107.default.func,
  value: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]).isRequired,
  availableOptions: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]),
    text: import_prop_types107.default.string.isRequired
  })),
  readOnly: import_prop_types107.default.bool,
  className: import_prop_types107.default.string
} : void 0;
FilledSelect.defaultProps = {
  readOnly: false,
  onValueChange: function onValueChange3() {
    return void 0;
  },
  availableOptions: [],
  className: void 0
};
var _excluded$Y = ["value", "availableOptions", "onValueChange", "readOnly", "type"];
var Select = (0, import_react4.memo)(function(_ref) {
  var value = _ref.value, availableOptions = _ref.availableOptions, onValueChange5 = _ref.onValueChange, readOnly = _ref.readOnly, type = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded$Y);
  var ResultingSelect = type === STANDARD_SELECT ? FilledSelect : OutlinedSelect;
  return (0, import_react4.createElement)(ResultingSelect, _extends2({
    value,
    availableOptions,
    onValueChange: onValueChange5,
    readOnly
  }, restProps));
});
true ? Select.propTypes = {
  onValueChange: import_prop_types107.default.func.isRequired,
  value: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]).isRequired,
  availableOptions: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.number]),
    text: import_prop_types107.default.string.isRequired
  })),
  readOnly: import_prop_types107.default.bool,
  type: import_prop_types107.default.string
} : void 0;
Select.defaultProps = {
  readOnly: false,
  availableOptions: [],
  type: STANDARD_SELECT
};
var _excluded$Z = ["className", "labelComponent", "textEditorComponent", "repeatEveryLabel", "repeatIntervalLabel", "readOnly", "interval", "changeRecurrenceInterval"];
var PREFIX$J = "IntervalEditor";
var classes$J = {
  grid: "".concat(PREFIX$J, "-grid"),
  label: "".concat(PREFIX$J, "-label"),
  labelWithMargin: "".concat(PREFIX$J, "-labelWithMargin"),
  textEditor: "".concat(PREFIX$J, "-textEditor")
};
var StyledGrid$1 = styled_default(Grid_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$J.grid), {
    marginTop: spacing(1.75)
  }), _defineProperty(_ref2, "& .".concat(classes$J.label), {
    width: "6.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$J.labelWithMargin), {
    marginLeft: "1em",
    width: "calc((100% - 7.5em) * 4 / 7)"
  }), _defineProperty(_ref2, "& .".concat(classes$J.textEditor), {
    width: "calc((100% - 7.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _ref2;
});
var IntervalEditor = function IntervalEditor2(_ref3) {
  var className = _ref3.className, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, repeatEveryLabel = _ref3.repeatEveryLabel, repeatIntervalLabel = _ref3.repeatIntervalLabel, readOnly = _ref3.readOnly, interval = _ref3.interval, changeRecurrenceInterval = _ref3.changeRecurrenceInterval, restProps = _objectWithoutProperties(_ref3, _excluded$Z);
  return (0, import_react4.createElement)(StyledGrid$1, _extends2({
    container: true,
    direction: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    className: clsx_m_default(classes$J.grid, className)
  }, restProps), (0, import_react4.createElement)(Label3, {
    text: repeatEveryLabel,
    className: classes$J.label
  }), (0, import_react4.createElement)(TextEditor2, {
    readOnly,
    value: interval,
    className: classes$J.textEditor,
    type: NUMBER_EDITOR,
    onValueChange: changeRecurrenceInterval
  }), (0, import_react4.createElement)(Label3, {
    text: repeatIntervalLabel,
    className: classes$J.labelWithMargin
  }));
};
true ? IntervalEditor.propTypes = {
  className: import_prop_types107.default.string,
  repeatEveryLabel: import_prop_types107.default.string.isRequired,
  repeatIntervalLabel: import_prop_types107.default.string.isRequired,
  readOnly: import_prop_types107.default.bool.isRequired,
  interval: import_prop_types107.default.number,
  changeRecurrenceInterval: import_prop_types107.default.func.isRequired,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired
} : void 0;
IntervalEditor.defaultProps = {
  className: void 0,
  interval: 1
};
var _excluded$_ = ["weeklyRecurrenceSelectorComponent", "radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "formatDate", "firstDayOfWeek"];
var Daily = function Daily2(_ref) {
  var weeklyRecurrenceSelectorComponent = _ref.weeklyRecurrenceSelectorComponent, radioGroupComponent = _ref.radioGroupComponent, textEditorComponent = _ref.textEditorComponent, labelComponent = _ref.labelComponent, getMessage8 = _ref.getMessage, readOnly = _ref.readOnly, onFieldChange10 = _ref.onFieldChange, appointmentData = _ref.appointmentData, selectComponent = _ref.selectComponent, formatDate3 = _ref.formatDate, firstDayOfWeek = _ref.firstDayOfWeek, restProps = _objectWithoutProperties(_ref, _excluded$_);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react4.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react4.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react4.createElement)(IntervalEditor, _extends2({
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("daysLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps));
};
true ? Daily.propTypes = {
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  radioGroupComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  onFieldChange: import_prop_types107.default.func,
  getMessage: import_prop_types107.default.func.isRequired,
  readOnly: import_prop_types107.default.bool,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
Daily.defaultProps = {
  onFieldChange: function onFieldChange2() {
    return void 0;
  },
  readOnly: false
};
var _excluded$$ = ["radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "weeklyRecurrenceSelectorComponent", "formatDate", "firstDayOfWeek"];
var PREFIX$K = "Weekly";
var classes$K = {
  container: "".concat(PREFIX$K, "-container")
};
var StyledDiv$g = styled_default("div")(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "& .".concat(classes$K.container), {
    marginBottom: theme.spacing(2)
  });
});
var Weekly = function Weekly2(_ref3) {
  var radioGroupComponent = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, labelComponent = _ref3.labelComponent, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, selectComponent = _ref3.selectComponent, WeeklyRecurrenceSelector2 = _ref3.weeklyRecurrenceSelectorComponent, formatDate3 = _ref3.formatDate, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$$);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react4.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react4.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react4.createElement)(StyledDiv$g, restProps, (0, import_react4.createElement)(IntervalEditor, _extends2({
    className: classes$K.container,
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("weeksOnLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps)), (0, import_react4.createElement)(WeeklyRecurrenceSelector2, {
    rRule: appointmentData.rRule,
    onValueChange: onFieldChange10,
    readOnly,
    formatDate: formatDate3,
    firstDayOfWeek
  }));
};
true ? Weekly.propTypes = {
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  radioGroupComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  onFieldChange: import_prop_types107.default.func,
  getMessage: import_prop_types107.default.func.isRequired,
  readOnly: import_prop_types107.default.bool,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
Weekly.defaultProps = {
  onFieldChange: function onFieldChange3() {
    return void 0;
  },
  readOnly: false
};
var _excluded$10 = ["radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "weeklyRecurrenceSelectorComponent", "formatDate", "firstDayOfWeek"];
var PREFIX$L = "Monthly";
var classes$L = {
  container: "".concat(PREFIX$L, "-container")
};
var StyledDiv$h = styled_default("div")(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "&.".concat(classes$L.container), {
    marginBottom: theme.spacing(1)
  });
});
var Monthly = function Monthly2(_ref3) {
  var RadioGroup5 = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, labelComponent = _ref3.labelComponent, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, selectComponent = _ref3.selectComponent, weeklyRecurrenceSelectorComponent = _ref3.weeklyRecurrenceSelectorComponent, formatDate3 = _ref3.formatDate, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$10);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react4.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react4.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react4.createElement)(StyledDiv$h, restProps, (0, import_react4.createElement)(IntervalEditor, _extends2({
    className: classes$L.container,
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("monthsLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps)), (0, import_react4.createElement)(RadioGroup5, {
    type: MONTHLY_RADIO_GROUP,
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent,
    onFieldChange: onFieldChange10,
    appointmentData,
    selectComponent,
    formatDate: formatDate3,
    dateEditorComponent: function dateEditorComponent() {
      return null;
    },
    firstDayOfWeek
  }));
};
true ? Monthly.propTypes = {
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  radioGroupComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  onFieldChange: import_prop_types107.default.func,
  getMessage: import_prop_types107.default.func.isRequired,
  readOnly: import_prop_types107.default.bool,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
Monthly.defaultProps = {
  onFieldChange: function onFieldChange4() {
    return void 0;
  },
  readOnly: false
};
var _excluded$11 = ["radioGroupComponent", "textEditorComponent", "labelComponent", "getMessage", "readOnly", "onFieldChange", "appointmentData", "selectComponent", "weeklyRecurrenceSelectorComponent", "formatDate", "firstDayOfWeek"];
var PREFIX$M = "Yearly";
var classes$M = {
  radioGroup: "".concat(PREFIX$M, "-radioGroup")
};
var StyledDiv$i = styled_default("div")(function(_ref) {
  var theme = _ref.theme;
  return _defineProperty({}, "& .".concat(classes$M.radioGroup), {
    marginTop: theme.spacing(1)
  });
});
var Yearly = function Yearly2(_ref3) {
  var RadioGroup5 = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, labelComponent = _ref3.labelComponent, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, selectComponent = _ref3.selectComponent, weeklyRecurrenceSelectorComponent = _ref3.weeklyRecurrenceSelectorComponent, formatDate3 = _ref3.formatDate, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$11);
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react4.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceInterval = (0, import_react4.useCallback)(function(interval) {
    return checkIsNaturalNumber(interval) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        interval
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  return (0, import_react4.createElement)(StyledDiv$i, restProps, (0, import_react4.createElement)(IntervalEditor, _extends2({
    repeatEveryLabel: getMessage8("repeatEveryLabel"),
    repeatIntervalLabel: getMessage8("yearsLabel"),
    textEditorComponent,
    labelComponent,
    changeRecurrenceInterval,
    interval: recurrenceOptions.interval,
    readOnly
  }, restProps)), (0, import_react4.createElement)(RadioGroup5, {
    type: YEARLY_RADIO_GROUP,
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent,
    onFieldChange: onFieldChange10,
    appointmentData,
    selectComponent,
    formatDate: formatDate3,
    className: classes$M.radioGroup,
    dateEditorComponent: function dateEditorComponent() {
      return null;
    },
    firstDayOfWeek
  }));
};
true ? Yearly.propTypes = {
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  radioGroupComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  onFieldChange: import_prop_types107.default.func,
  getMessage: import_prop_types107.default.func.isRequired,
  readOnly: import_prop_types107.default.bool,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
Yearly.defaultProps = {
  onFieldChange: function onFieldChange5() {
    return void 0;
  },
  readOnly: false
};
var _excluded$12 = ["radioGroupComponent", "textEditorComponent", "labelComponent", "dateEditorComponent", "selectComponent", "weeklyRecurrenceSelectorComponent", "children", "className", "getMessage", "readOnly", "onFieldChange", "appointmentData", "formatDate", "locale", "visible", "firstDayOfWeek"];
var PREFIX$N = "Layout";
var classes$N = {
  root: "".concat(PREFIX$N, "-root"),
  visible: "".concat(PREFIX$N, "-visible"),
  invisible: "".concat(PREFIX$N, "-invisible"),
  label: "".concat(PREFIX$N, "-label"),
  repeatLabel: "".concat(PREFIX$N, "-repeatLabel"),
  radioGroup: "".concat(PREFIX$N, "-radioGroup"),
  endRepeatLabel: "".concat(PREFIX$N, "-endRepeatLabel"),
  select: "".concat(PREFIX$N, "-select")
};
var StyledDiv$j = styled_default("div")(function(_ref) {
  var _$concat2, _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$N.root), _defineProperty({
    padding: 0,
    paddingTop: spacing(3),
    overflow: "hidden",
    width: 0,
    transition: "all ".concat(TRANSITIONS_TIME, "ms cubic-bezier(0, 0, 0.2, 1)"),
    boxSizing: "border-box",
    maxWidth: 0,
    opacity: 0
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    minWidth: "100%",
    maxHeight: 0
  })), _defineProperty(_ref2, "&.".concat(classes$N.visible), (_$concat2 = {
    maxWidth: "500px",
    width: "500px",
    padding: spacing(3),
    paddingRight: spacing(4),
    paddingLeft: spacing(1),
    opacity: 1
  }, _defineProperty(_$concat2, "".concat(LAYOUT_MEDIA_QUERY), {
    width: "100%",
    maxWidth: "700px",
    paddingRight: spacing(2),
    paddingLeft: spacing(2),
    maxHeight: 1e3
  }), _defineProperty(_$concat2, "@media (min-width: 700px) and (max-width: 850px)", {
    width: "300px"
  }), _defineProperty(_$concat2, "@media (min-width: 850px) and (max-width: 1000px)", {
    width: "370px"
  }), _defineProperty(_$concat2, "@media (min-width: 1000px) and (max-width: 1150px)", {
    width: "440px"
  }), _$concat2)), _defineProperty(_ref2, "&.".concat(classes$N.invisible), {
    maxHeight: 0,
    "@media (min-width: 700px)": {
      maxHeight: "500px"
    }
  }), _defineProperty(_ref2, "& .".concat(classes$N.label), {
    width: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$N.repeatLabel), {
    marginBottom: spacing(0.375)
  }), _defineProperty(_ref2, "& .".concat(classes$N.radioGroup), {
    marginTop: spacing(0.5)
  }), _defineProperty(_ref2, "& .".concat(classes$N.endRepeatLabel), {
    marginTop: spacing(2)
  }), _defineProperty(_ref2, "& .".concat(classes$N.select), {
    height: "3.8em"
  }), _ref2;
});
var getLayoutComponent = function getLayoutComponent2(recurrenceOptions) {
  if (recurrenceOptions) {
    switch (recurrenceOptions.freq) {
      case RRULE_REPEAT_TYPES.DAILY:
        return Daily;
      case RRULE_REPEAT_TYPES.WEEKLY:
        return Weekly;
      case RRULE_REPEAT_TYPES.MONTHLY:
        return Monthly;
      case RRULE_REPEAT_TYPES.YEARLY:
        return Yearly;
    }
  }
  return function() {
    return null;
  };
};
var Layout$a = function Layout7(_ref3) {
  var _classNames;
  var RadioGroup5 = _ref3.radioGroupComponent, textEditorComponent = _ref3.textEditorComponent, Label3 = _ref3.labelComponent, dateEditorComponent = _ref3.dateEditorComponent, Select2 = _ref3.selectComponent, weeklyRecurrenceSelectorComponent = _ref3.weeklyRecurrenceSelectorComponent, children = _ref3.children, className = _ref3.className, getMessage8 = _ref3.getMessage, readOnly = _ref3.readOnly, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, formatDate3 = _ref3.formatDate, locale2 = _ref3.locale, visible = _ref3.visible, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$12);
  if (!appointmentData.rRule) {
    return null;
  }
  var recurrenceOptions = getRecurrenceOptions(appointmentData.rRule) || {};
  var MainLayoutComponent = getLayoutComponent(recurrenceOptions);
  var frequency = getFrequencyString(recurrenceOptions.freq);
  var rRule = appointmentData.rRule, startDate = appointmentData.startDate;
  var changeFrequency = (0, import_react4.useCallback)(function(repeatType) {
    return handleChangeFrequency(repeatType, rRule, startDate, onFieldChange10);
  }, [rRule, startDate, onFieldChange10]);
  var selectOptions = (0, import_react4.useMemo)(function() {
    return getAvailableRecurrenceOptions(getMessage8);
  }, [getMessage8]);
  return (0, import_react4.createElement)(StyledDiv$j, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$N.root, true), _defineProperty(_classNames, classes$N.visible, visible), _defineProperty(_classNames, classes$N.invisible, !visible), _defineProperty(_classNames, "className", className), _classNames))
  }, restProps), (0, import_react4.createElement)(Label3, {
    text: getMessage8("repeatLabel"),
    type: TITLE,
    className: classes$N.repeatLabel
  }), (0, import_react4.createElement)(Select2, {
    onValueChange: changeFrequency,
    availableOptions: selectOptions,
    value: frequency,
    type: OUTLINED_SELECT,
    className: classes$N.select,
    readOnly
  }), (0, import_react4.createElement)(MainLayoutComponent, {
    textEditorComponent,
    labelComponent: Label3,
    getMessage: getMessage8,
    readOnly,
    radioGroupComponent: RadioGroup5,
    appointmentData,
    onFieldChange: onFieldChange10,
    selectComponent: Select2,
    weeklyRecurrenceSelectorComponent,
    formatDate: formatDate3,
    firstDayOfWeek
  }), (0, import_react4.createElement)(Label3, {
    text: getMessage8("endRepeatLabel"),
    className: classes$N.endRepeatLabel
  }), (0, import_react4.createElement)(RadioGroup5, {
    className: classes$N.radioGroup,
    type: END_REPEAT_RADIO_GROUP,
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent: Label3,
    dateEditorComponent,
    appointmentData,
    onFieldChange: onFieldChange10,
    selectComponent: Select2,
    formatDate: formatDate3,
    locale: locale2,
    firstDayOfWeek
  }), children);
};
true ? Layout$a.propTypes = {
  locale: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.arrayOf(import_prop_types107.default.string)]),
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  radioGroupComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  dateEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  weeklyRecurrenceSelectorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  onFieldChange: import_prop_types107.default.func,
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string,
  getMessage: import_prop_types107.default.func.isRequired,
  readOnly: import_prop_types107.default.bool,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  visible: import_prop_types107.default.bool.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
Layout$a.defaultProps = {
  locale: "en-US",
  onFieldChange: function onFieldChange6() {
    return void 0;
  },
  className: void 0,
  readOnly: false,
  children: null
};
var _excluded$13 = ["getMessage", "labelComponent", "textEditorComponent", "dateEditorComponent", "onFieldChange", "appointmentData", "locale", "readOnly"];
var PREFIX$O = "EndRepeatEditor";
var classes$O = {
  occurenceTextEditor: "".concat(PREFIX$O, "-occurenceTextEditor"),
  occurenceLabel: "".concat(PREFIX$O, "-occurenceLabel"),
  label: "".concat(PREFIX$O, "-label"),
  input: "".concat(PREFIX$O, "-input"),
  radioLabel: "".concat(PREFIX$O, "-radioLabel"),
  dateEditor: "".concat(PREFIX$O, "-dateEditor"),
  formControl: "".concat(PREFIX$O, "-formControl"),
  controlLabel: "".concat(PREFIX$O, "-controlLabel")
};
var StyledRadioGroup = styled_default(RadioGroup_default)(function(_ref) {
  var _ref2;
  var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, typography = _ref$theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$O.occurenceTextEditor), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$O.occurenceLabel), {
    marginLeft: "1em",
    width: "calc((100% - 5.5em) * 4 / 7)"
  }), _defineProperty(_ref2, "& .".concat(classes$O.label), {
    width: "4.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$O.input), {
    paddingBottom: spacing(2.75)
  }), _defineProperty(_ref2, "& .".concat(classes$O.radioLabel), {
    fontSize: typography.fontSize + 1
  }), _defineProperty(_ref2, "& .".concat(classes$O.dateEditor), {
    width: "calc(100% - 4.5em)"
  }), _defineProperty(_ref2, "& .".concat(classes$O.formControl), {
    marginRight: 0
  }), _defineProperty(_ref2, "& .".concat(classes$O.controlLabel), {
    width: "100%"
  }), _ref2;
});
var EndRepeatEditor = function EndRepeatEditor2(_ref3) {
  var getMessage8 = _ref3.getMessage, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, DateEditor2 = _ref3.dateEditorComponent, onFieldChange10 = _ref3.onFieldChange, appointmentData = _ref3.appointmentData, locale2 = _ref3.locale, readOnly = _ref3.readOnly, restProps = _objectWithoutProperties(_ref3, _excluded$13);
  var _React$useState = (0, import_react4.useState)(1), _React$useState2 = _slicedToArray(_React$useState, 2), count = _React$useState2[0], setCount = _React$useState2[1];
  var _React$useState3 = (0, import_react4.useState)(appointmentData.endDate), _React$useState4 = _slicedToArray(_React$useState3, 2), endDate = _React$useState4[0], setEndDate = _React$useState4[1];
  var rRule = appointmentData.rRule;
  var recurrenceOptions = (0, import_react4.useMemo)(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeRecurrenceCount = (0, import_react4.useCallback)(function(nextCount) {
    return checkIsNaturalNumber(nextCount) && onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        count: nextCount
      }))
    });
  }, [recurrenceOptions, onFieldChange10]);
  var changeRecurrenceEndDate = (0, import_react4.useCallback)(function(date) {
    if (isDateValid(date)) {
      onFieldChange10({
        rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
          until: date
        }))
      });
    }
  }, [recurrenceOptions, onFieldChange10]);
  var recurrenceCount = recurrenceOptions.count || count;
  var recurrenceEndDate = recurrenceOptions.until || endDate;
  var value;
  if (recurrenceOptions.count) {
    value = "endAfter";
  } else if (recurrenceOptions.until) {
    value = "endBy";
  } else {
    value = "never";
  }
  var onRadioGroupValueChange = function onRadioGroupValueChange2(event) {
    var change;
    switch (event.target.value) {
      case "endAfter":
        setEndDate(recurrenceOptions.until || endDate);
        change = {
          count,
          until: void 0
        };
        break;
      case "endBy":
        setCount(recurrenceOptions.count || count);
        change = {
          count: void 0,
          until: endDate
        };
        break;
      case "never":
        setEndDate(recurrenceOptions.until || endDate);
        setCount(recurrenceOptions.count || count);
        change = {
          count: void 0,
          until: void 0
        };
        break;
    }
    onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), change))
    });
  };
  return (0, import_react4.createElement)(StyledRadioGroup, _extends2({
    onChange: onRadioGroupValueChange,
    value
  }, restProps), (0, import_react4.createElement)(FormControlLabel_default, {
    value: "never",
    control: (0, import_react4.createElement)(Radio_default, {
      color: "primary"
    }),
    label: getMessage8("never"),
    classes: {
      label: classes$O.radioLabel
    },
    disabled: readOnly
  }), (0, import_react4.createElement)(FormControlLabel_default, {
    className: classes$O.formControl,
    value: "endAfter",
    classes: {
      label: classes$O.controlLabel
    },
    control: (0, import_react4.createElement)(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly,
    label: (0, import_react4.createElement)(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center"
    }, (0, import_react4.createElement)(Label3, {
      className: classes$O.label,
      text: getMessage8("onLabel")
    }), (0, import_react4.createElement)(TextEditor2, {
      readOnly: readOnly || value !== "endAfter",
      className: classes$O.occurenceTextEditor,
      value: recurrenceCount,
      type: NUMBER_EDITOR,
      onValueChange: changeRecurrenceCount
    }), (0, import_react4.createElement)(Label3, {
      className: classes$O.occurenceLabel,
      text: getMessage8("occurrencesLabel")
    }))
  }), (0, import_react4.createElement)(FormControlLabel_default, {
    className: classes$O.formControl,
    classes: {
      label: classes$O.controlLabel
    },
    value: "endBy",
    disabled: readOnly,
    control: (0, import_react4.createElement)(Radio_default, {
      color: "primary"
    }),
    label: (0, import_react4.createElement)(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center"
    }, (0, import_react4.createElement)(Label3, {
      className: classes$O.label,
      text: getMessage8("afterLabel")
    }), (0, import_react4.createElement)(DateEditor2, {
      className: classes$O.dateEditor,
      readOnly: readOnly || value !== "endBy",
      value: recurrenceEndDate,
      onValueChange: changeRecurrenceEndDate,
      allowKeyboardControl: false,
      locale: locale2,
      excludeTime: appointmentData.allDay
    }))
  }));
};
true ? EndRepeatEditor.propTypes = {
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  dateEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  locale: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.arrayOf(import_prop_types107.default.string)]).isRequired,
  getMessage: import_prop_types107.default.func,
  onFieldChange: import_prop_types107.default.func,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  readOnly: import_prop_types107.default.bool
} : void 0;
EndRepeatEditor.defaultProps = {
  onFieldChange: function onFieldChange7() {
    return void 0;
  },
  getMessage: function getMessage() {
    return void 0;
  },
  readOnly: false
};
var _excluded$14 = ["getMessage", "labelComponent", "textEditorComponent", "selectComponent", "readOnly", "appointmentData", "formatDate", "onFieldChange", "firstDayOfWeek"];
var PREFIX$P = "MonthlyEditor";
var classes$P = {
  textEditor: "".concat(PREFIX$P, "-textEditor"),
  input: "".concat(PREFIX$P, "-input"),
  select: "".concat(PREFIX$P, "-select"),
  longSelect: "".concat(PREFIX$P, "-longSelect"),
  label: "".concat(PREFIX$P, "-label"),
  longLabel: "".concat(PREFIX$P, "-longLabel"),
  grid: "".concat(PREFIX$P, "-grid"),
  formControl: "".concat(PREFIX$P, "-formControl"),
  controlLabel: "".concat(PREFIX$P, "-controlLabel")
};
var StyledRadioGroup$1 = styled_default(RadioGroup_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$P.textEditor), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "12em",
    marginRight: "1em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.input), {
    paddingBottom: spacing(2.75)
  }), _defineProperty(_ref2, "& .".concat(classes$P.select), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.longSelect), {
    width: "calc((100% - 5.5em) * 4 / 7)",
    minWidth: "calc(100% - 13.5em)",
    marginLeft: "1em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.label), {
    width: "4.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$P.longLabel), {
    width: "calc((100% - 5.5em) * 4 / 7)",
    minWidth: "calc(100% - 14em)"
  }), _defineProperty(_ref2, "& .".concat(classes$P.grid), {
    marginTop: spacing(1),
    marginBottom: spacing(1)
  }), _defineProperty(_ref2, "& .".concat(classes$P.formControl), {
    marginRight: 0
  }), _defineProperty(_ref2, "& .".concat(classes$P.controlLabel), {
    width: "100%"
  }), _ref2;
});
var MonthlyEditor = function MonthlyEditor2(_ref3) {
  var getMessage8 = _ref3.getMessage, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, Select2 = _ref3.selectComponent, readOnly = _ref3.readOnly, appointmentData = _ref3.appointmentData, formatDate3 = _ref3.formatDate, onFieldChange10 = _ref3.onFieldChange, firstDayOfWeek = _ref3.firstDayOfWeek, restProps = _objectWithoutProperties(_ref3, _excluded$14);
  var _useState = (0, import_react4.useState)(appointmentData.startDate.getDate()), _useState2 = _slicedToArray(_useState, 2), dayNumber = _useState2[0], setDayNumber = _useState2[1];
  var _useState3 = (0, import_react4.useState)(Math.trunc((appointmentData.startDate.getDate() - 1) / 7)), _useState4 = _slicedToArray(_useState3, 2), stateWeekNumber = _useState4[0], setStateWeekNumber = _useState4[1];
  var _useState5 = (0, import_react4.useState)(appointmentData.startDate.getDay()), _useState6 = _slicedToArray(_useState5, 2), stateDayOfWeek = _useState6[0], setStateDayOfWeek = _useState6[1];
  var rRule = appointmentData.rRule;
  var recurrenceOptions = import_react4.default.useMemo(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeByMonthDay = import_react4.default.useCallback(function(nextByMonthDay) {
    return onFieldChange10({
      rRule: handleStartDateChange(nextByMonthDay, recurrenceOptions)
    });
  }, [recurrenceOptions]);
  var _getRadioGroupDisplay = getRadioGroupDisplayData(recurrenceOptions, stateDayOfWeek, stateWeekNumber, dayNumber, "onDayNumber", "onDayOfWeek"), dayOfWeek = _getRadioGroupDisplay.dayOfWeek, weekNumber = _getRadioGroupDisplay.weekNumber, dayNumberTextField = _getRadioGroupDisplay.dayNumberTextField, value = _getRadioGroupDisplay.radioGroupValue;
  var changeWeekNumber = import_react4.default.useCallback(function(nextWeekNumber) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(nextWeekNumber, dayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, dayOfWeek]);
  var weekNumbers = import_react4.default.useMemo(function() {
    return getWeekNumberLabels(getMessage8);
  }, [getMessage8]);
  var changeDayOfWeek = import_react4.default.useCallback(function(nextDayOfWeek) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(weekNumber, nextDayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, weekNumber]);
  var daysOfWeek = import_react4.default.useMemo(function() {
    return getDaysOfWeek(formatDate3, firstDayOfWeek);
  }, [formatDate3, firstDayOfWeek]);
  var onDayNumberReadOnly = readOnly || value !== "onDayNumber";
  var onDayOfWeekReadOnly = readOnly || value !== "onDayOfWeek";
  var onRadioGroupValueChange = function onRadioGroupValueChange2(event) {
    switch (event.target.value) {
      case "onDayNumber":
        setStateWeekNumber(weekNumber);
        setStateDayOfWeek(dayOfWeek);
        onFieldChange10({
          rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
            bymonthday: dayNumber,
            byweekday: void 0
          }))
        });
        break;
      case "onDayOfWeek":
        setDayNumber(recurrenceOptions.bymonthday || dayNumber);
        onFieldChange10({
          rRule: handleToDayOfWeekChange(stateWeekNumber, stateDayOfWeek, recurrenceOptions)
        });
        break;
    }
  };
  return import_react4.default.createElement(StyledRadioGroup$1, _extends2({
    onChange: onRadioGroupValueChange,
    value
  }, restProps), import_react4.default.createElement(FormControlLabel_default, {
    className: classes$P.formControl,
    value: "onDayNumber",
    control: import_react4.default.createElement(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly,
    label: import_react4.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center",
      className: classes$P.grid
    }, import_react4.default.createElement(Label3, {
      text: getMessage8("onLabel"),
      className: classes$P.label
    }), import_react4.default.createElement(TextEditor2, {
      readOnly: onDayNumberReadOnly,
      value: dayNumberTextField,
      className: classes$P.textEditor,
      type: NUMBER_EDITOR,
      onValueChange: changeByMonthDay
    }), import_react4.default.createElement(Label3, {
      text: getMessage8("ofEveryMonthLabel"),
      className: classes$P.longLabel
    }))
  }), import_react4.default.createElement(FormControlLabel_default, {
    value: "onDayOfWeek",
    className: classes$P.formControl,
    classes: {
      label: classes$P.controlLabel
    },
    control: import_react4.default.createElement(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly,
    label: import_react4.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justify: "flex-start",
      alignItems: "center",
      className: classes$P.grid
    }, import_react4.default.createElement(Label3, {
      text: getMessage8("theLabel"),
      className: classes$P.label
    }), import_react4.default.createElement(Select2, {
      readOnly: onDayOfWeekReadOnly,
      onValueChange: changeWeekNumber,
      value: weekNumber,
      availableOptions: weekNumbers,
      className: classes$P.select
    }), import_react4.default.createElement(Select2, {
      readOnly: onDayOfWeekReadOnly,
      onValueChange: changeDayOfWeek,
      value: dayOfWeek,
      availableOptions: daysOfWeek,
      className: classes$P.longSelect
    }))
  }));
};
true ? MonthlyEditor.propTypes = {
  getMessage: import_prop_types107.default.func,
  onFieldChange: import_prop_types107.default.func,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  readOnly: import_prop_types107.default.bool,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
MonthlyEditor.defaultProps = {
  getMessage: function getMessage2() {
    return void 0;
  },
  onFieldChange: function onFieldChange8() {
    return void 0;
  },
  readOnly: false
};
var _excluded$15 = ["getMessage", "labelComponent", "textEditorComponent", "selectComponent", "readOnly", "readOnlyEditors", "month", "changeMonth", "months", "dayNumber", "changeByMonthDay", "className"];
var PREFIX$Q = "ChangeMonthEditor";
var classes$Q = {
  textEditor: "".concat(PREFIX$Q, "-textEditor"),
  label: "".concat(PREFIX$Q, "-label"),
  select: "".concat(PREFIX$Q, "-select"),
  formControl: "".concat(PREFIX$Q, "-formControl"),
  controlLabel: "".concat(PREFIX$Q, "-controlLabel")
};
var StyledFormControlLabel$1 = styled_default(FormControlLabel_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$Q.formControl), {
    marginRight: 0,
    marginTop: spacing(1),
    marginBottom: spacing(1)
  }), _defineProperty(_ref2, "&.".concat(classes$Q.controlLabel), {
    width: "100%"
  }), _ref2;
});
var ChangeMonthEditor = import_react4.default.memo(function(_ref3) {
  var getMessage8 = _ref3.getMessage, Label3 = _ref3.labelComponent, TextEditor2 = _ref3.textEditorComponent, Select2 = _ref3.selectComponent, readOnly = _ref3.readOnly, readOnlyEditors = _ref3.readOnlyEditors, month = _ref3.month, changeMonth = _ref3.changeMonth, months2 = _ref3.months, dayNumber = _ref3.dayNumber, changeByMonthDay = _ref3.changeByMonthDay, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$15);
  var StyledLabel = styled_default(Label3)(function() {
    return _defineProperty({}, "&.".concat(classes$Q.label), {
      width: "4.5em"
    });
  });
  var StyledSelect2 = styled_default(Select2)(function() {
    return _defineProperty({}, "&.".concat(classes$Q.select), {
      width: "calc((100% - 5.5em) * 3 / 7)",
      maxWidth: "8em"
    });
  });
  var StyledTextEditor = styled_default(TextEditor2)(function() {
    return _defineProperty({}, "&.".concat(classes$Q.textEditor), {
      width: "calc((100% - 5.5em) * 4 / 7)",
      minWidth: "calc(100% - 13.5em)",
      marginLeft: "1em"
    });
  });
  return import_react4.default.createElement(StyledFormControlLabel$1, _extends2({
    value: "onDayAndMonth",
    className: clsx_m_default(classes$Q.formControl, className),
    classes: {
      label: classes$Q.controlLabel
    },
    control: import_react4.default.createElement(Radio_default, {
      color: "primary"
    }),
    disabled: readOnly
  }, restProps, {
    label: import_react4.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justifyContent: "flex-start",
      alignItems: "center"
    }, import_react4.default.createElement(StyledLabel, {
      text: getMessage8("everyLabel"),
      className: classes$Q.label
    }), import_react4.default.createElement(StyledSelect2, {
      className: classes$Q.select,
      value: month,
      onValueChange: changeMonth,
      readOnly: readOnlyEditors,
      availableOptions: months2
    }), import_react4.default.createElement(StyledTextEditor, {
      className: classes$Q.textEditor,
      readOnly: readOnlyEditors,
      value: dayNumber,
      type: NUMBER_EDITOR,
      onValueChange: changeByMonthDay
    }))
  }));
});
true ? ChangeMonthEditor.propTypes = {
  getMessage: import_prop_types107.default.func,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  readOnly: import_prop_types107.default.bool,
  month: import_prop_types107.default.number.isRequired,
  changeMonth: import_prop_types107.default.func.isRequired,
  months: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.number.isRequired,
    text: import_prop_types107.default.string.isRequired
  })).isRequired,
  dayNumber: import_prop_types107.default.number.isRequired,
  changeByMonthDay: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string,
  readOnlyEditors: import_prop_types107.default.bool
} : void 0;
ChangeMonthEditor.defaultProps = {
  getMessage: function getMessage3() {
    return void 0;
  },
  readOnly: false,
  className: void 0,
  readOnlyEditors: false
};
var _excluded$16 = ["getMessage", "labelComponent", "selectComponent", "readOnly", "readOnlyEditors", "className", "weekNumber", "weekNumbers", "changeWeekNumber", "month", "months", "changeMonth", "dayOfWeek", "daysOfWeek", "changeDayOfWeek"];
var PREFIX$R = "ChangeWeekNumberEditor";
var classes$R = {
  label: "".concat(PREFIX$R, "-label"),
  select: "".concat(PREFIX$R, "-select"),
  longSelect: "".concat(PREFIX$R, "-longSelect"),
  formControlLabel: "".concat(PREFIX$R, "-formControlLabel"),
  formControl: "".concat(PREFIX$R, "-formControl"),
  doubleSelect: "".concat(PREFIX$R, "-doubleSelect"),
  radioButton: "".concat(PREFIX$R, "-radioButton"),
  controlLabel: "".concat(PREFIX$R, "-controlLabel")
};
var StyledDiv$k = styled_default("div")(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$R.label), {
    width: "4.5em"
  }), _defineProperty(_ref2, "& .".concat(classes$R.select), {
    width: "calc((100% - 5.5em) * 3 / 7)",
    maxWidth: "8em"
  }), _defineProperty(_ref2, "& .".concat(classes$R.longSelect), {
    width: "calc((100% - 5.5em) * 4 / 7)",
    minWidth: "calc(100% - 13.5em)",
    marginLeft: "1em"
  }), _defineProperty(_ref2, "& .".concat(classes$R.doubleSelect), {
    marginLeft: "4.5em",
    width: "calc(100% - 4.5em)",
    marginTop: spacing(1)
  }), _ref2;
});
var StyledFormControlLabel$2 = styled_default(FormControlLabel_default)(function(_ref3) {
  var _ref4;
  var spacing = _ref3.theme.spacing;
  return _ref4 = {}, _defineProperty(_ref4, "&.".concat(classes$R.formControlLabel), {
    alignItems: "flex-start"
  }), _defineProperty(_ref4, "&.".concat(classes$R.formControl), {
    marginRight: 0,
    marginTop: spacing(1),
    marginBottom: spacing(1)
  }), _defineProperty(_ref4, "&.".concat(classes$R.controlLabel), {
    width: "100%"
  }), _ref4;
});
var StyledRadio = styled_default(Radio_default)(function(_ref5) {
  var spacing = _ref5.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$R.radioButton), {
    marginTop: spacing(0.75)
  });
});
var ChangeWeekNumberEditor = import_react4.default.memo(function(_ref7) {
  var getMessage8 = _ref7.getMessage, Label3 = _ref7.labelComponent, Select2 = _ref7.selectComponent, readOnly = _ref7.readOnly, readOnlyEditors = _ref7.readOnlyEditors, className = _ref7.className, weekNumber = _ref7.weekNumber, weekNumbers = _ref7.weekNumbers, changeWeekNumber = _ref7.changeWeekNumber, month = _ref7.month, months2 = _ref7.months, changeMonth = _ref7.changeMonth, dayOfWeek = _ref7.dayOfWeek, daysOfWeek = _ref7.daysOfWeek, changeDayOfWeek = _ref7.changeDayOfWeek, restProps = _objectWithoutProperties(_ref7, _excluded$16);
  return import_react4.default.createElement(StyledFormControlLabel$2, _extends2({
    value: "onDayOfWeek",
    className: clsx_m_default(classes$R.formControlLabel, classes$R.formControl, className),
    classes: {
      label: classes$R.controlLabel
    },
    control: import_react4.default.createElement(StyledRadio, {
      color: "primary",
      className: classes$R.radioButton
    }),
    disabled: readOnly
  }, restProps, {
    label: import_react4.default.createElement(StyledDiv$k, null, import_react4.default.createElement(Grid_default, {
      container: true,
      direction: "row",
      justifyContent: "flex-start",
      alignItems: "center"
    }, import_react4.default.createElement(Label3, {
      className: classes$R.label,
      text: getMessage8("theLabel")
    }), import_react4.default.createElement(Select2, {
      className: classes$R.select,
      value: weekNumber,
      onValueChange: changeWeekNumber,
      readOnly: readOnlyEditors,
      availableOptions: weekNumbers
    }), import_react4.default.createElement(Select2, {
      className: classes$R.longSelect,
      value: dayOfWeek,
      onValueChange: changeDayOfWeek,
      readOnly: readOnlyEditors,
      availableOptions: daysOfWeek
    })), import_react4.default.createElement(Select2, {
      className: classes$R.doubleSelect,
      value: month,
      onValueChange: changeMonth,
      readOnly: readOnlyEditors,
      availableOptions: months2
    }))
  }));
});
ChangeWeekNumberEditor.propTypes = {
  getMessage: import_prop_types107.default.func,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  readOnly: import_prop_types107.default.bool,
  month: import_prop_types107.default.number.isRequired,
  changeMonth: import_prop_types107.default.func.isRequired,
  months: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.number.isRequired,
    text: import_prop_types107.default.string.isRequired
  })).isRequired,
  weekNumber: import_prop_types107.default.number.isRequired,
  changeWeekNumber: import_prop_types107.default.func.isRequired,
  weekNumbers: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.number.isRequired,
    text: import_prop_types107.default.string.isRequired
  })).isRequired,
  dayOfWeek: import_prop_types107.default.number.isRequired,
  changeDayOfWeek: import_prop_types107.default.func.isRequired,
  daysOfWeek: import_prop_types107.default.arrayOf(import_prop_types107.default.shape({
    id: import_prop_types107.default.number.isRequired,
    text: import_prop_types107.default.string.isRequired
  })).isRequired,
  className: import_prop_types107.default.string,
  readOnlyEditors: import_prop_types107.default.bool
};
ChangeWeekNumberEditor.defaultProps = {
  getMessage: function getMessage4() {
    return void 0;
  },
  readOnly: false,
  className: void 0,
  readOnlyEditors: false
};
var _excluded$17 = ["getMessage", "labelComponent", "textEditorComponent", "selectComponent", "readOnly", "appointmentData", "formatDate", "onFieldChange", "firstDayOfWeek"];
var getCurrentMonth = function getCurrentMonth2(recurrenceOptions, appointmentData) {
  if (recurrenceOptions.bymonth) {
    return recurrenceOptions.bymonth;
  }
  return appointmentData.startDate.getMonth() + 1;
};
var YearlyEditor = function YearlyEditor2(_ref) {
  var getMessage8 = _ref.getMessage, Label3 = _ref.labelComponent, TextEditor2 = _ref.textEditorComponent, Select2 = _ref.selectComponent, readOnly = _ref.readOnly, appointmentData = _ref.appointmentData, formatDate3 = _ref.formatDate, onFieldChange10 = _ref.onFieldChange, firstDayOfWeek = _ref.firstDayOfWeek, restProps = _objectWithoutProperties(_ref, _excluded$17);
  var _useState = (0, import_react4.useState)(appointmentData.startDate.getDate()), _useState2 = _slicedToArray(_useState, 2), dayNumber = _useState2[0], setDayNumber = _useState2[1];
  var _useState3 = (0, import_react4.useState)(Math.trunc((appointmentData.startDate.getDate() - 1) / 7)), _useState4 = _slicedToArray(_useState3, 2), stateWeekNumber = _useState4[0], setStateWeekNumber = _useState4[1];
  var _useState5 = (0, import_react4.useState)(appointmentData.startDate.getDay()), _useState6 = _slicedToArray(_useState5, 2), stateDayOfWeek = _useState6[0], setStateDayOfWeek = _useState6[1];
  var rRule = appointmentData.rRule;
  var recurrenceOptions = import_react4.default.useMemo(function() {
    return getRecurrenceOptions(rRule) || {};
  }, [rRule]);
  var changeByMonthDay = import_react4.default.useCallback(function(nextByMonthDay) {
    return onFieldChange10({
      rRule: handleStartDateChange(nextByMonthDay, recurrenceOptions)
    });
  }, [recurrenceOptions]);
  var _getRadioGroupDisplay = getRadioGroupDisplayData(recurrenceOptions, stateDayOfWeek, stateWeekNumber, dayNumber, "onDayAndMonth", "onDayOfWeek"), dayOfWeek = _getRadioGroupDisplay.dayOfWeek, weekNumber = _getRadioGroupDisplay.weekNumber, dayNumberTextField = _getRadioGroupDisplay.dayNumberTextField, value = _getRadioGroupDisplay.radioGroupValue;
  var month = getCurrentMonth(recurrenceOptions, appointmentData);
  var changeMonth = import_react4.default.useCallback(function(nextMonth) {
    return onFieldChange10({
      rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
        bymonth: nextMonth
      }))
    });
  }, [recurrenceOptions]);
  var months2 = import_react4.default.useMemo(function() {
    return getMonths(formatDate3);
  }, [formatDate3]);
  var monthsWithOf = import_react4.default.useMemo(function() {
    return getMonthsWithOf(getMessage8, formatDate3);
  }, [getMessage8, formatDate3]);
  var changeWeekNumber = import_react4.default.useCallback(function(nextWeekNumber) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(nextWeekNumber, dayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, dayOfWeek]);
  var weekNumbers = import_react4.default.useMemo(function() {
    return getWeekNumberLabels(getMessage8);
  }, [getMessage8]);
  var changeDayOfWeek = import_react4.default.useCallback(function(nextDayOfWeek) {
    return onFieldChange10({
      rRule: handleToDayOfWeekChange(weekNumber, nextDayOfWeek, recurrenceOptions)
    });
  }, [recurrenceOptions, weekNumber]);
  var daysOfWeek = import_react4.default.useMemo(function() {
    return getDaysOfWeek(formatDate3, firstDayOfWeek);
  }, [formatDate3, firstDayOfWeek]);
  var onDayAndMonthReadOnly = readOnly || value !== "onDayAndMonth";
  var onDayOfWeekReadOnly = readOnly || value !== "onDayOfWeek";
  var onRadioGroupValueChange = function onRadioGroupValueChange2(event) {
    switch (event.target.value) {
      case "onDayAndMonth":
        setStateWeekNumber(weekNumber);
        setStateDayOfWeek(dayOfWeek);
        onFieldChange10({
          rRule: changeRecurrenceOptions(_objectSpread2(_objectSpread2({}, recurrenceOptions), {}, {
            bymonthday: dayNumber,
            byweekday: void 0
          }))
        });
        break;
      case "onDayOfWeek":
        setDayNumber(recurrenceOptions.bymonthday || dayNumber);
        onFieldChange10({
          rRule: handleToDayOfWeekChange(stateWeekNumber, stateDayOfWeek, recurrenceOptions)
        });
        break;
    }
  };
  return import_react4.default.createElement(RadioGroup_default, _extends2({
    onChange: onRadioGroupValueChange,
    value
  }, restProps), import_react4.default.createElement(ChangeMonthEditor, {
    getMessage: getMessage8,
    labelComponent: Label3,
    textEditorComponent: TextEditor2,
    selectComponent: Select2,
    readOnly,
    readOnlyEditors: onDayAndMonthReadOnly,
    month,
    changeMonth,
    months: months2,
    dayNumber: dayNumberTextField,
    changeByMonthDay
  }), import_react4.default.createElement(ChangeWeekNumberEditor, {
    getMessage: getMessage8,
    labelComponent: Label3,
    selectComponent: Select2,
    readOnly,
    readOnlyEditors: onDayOfWeekReadOnly,
    month,
    changeMonth,
    months: monthsWithOf,
    weekNumber,
    weekNumbers,
    changeWeekNumber,
    dayOfWeek,
    daysOfWeek,
    changeDayOfWeek
  }));
};
true ? YearlyEditor.propTypes = {
  getMessage: import_prop_types107.default.func,
  onFieldChange: import_prop_types107.default.func,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  readOnly: import_prop_types107.default.bool,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
YearlyEditor.defaultProps = {
  onFieldChange: function onFieldChange9() {
    return void 0;
  },
  getMessage: function getMessage5() {
    return void 0;
  },
  readOnly: false
};
var _excluded$18 = ["dateEditorComponent", "textEditorComponent", "selectComponent", "labelComponent", "getMessage", "readOnly", "appointmentData", "formatDate", "onFieldChange", "type", "locale", "firstDayOfWeek"];
var RadioGroup3 = function RadioGroup4(_ref) {
  var dateEditorComponent = _ref.dateEditorComponent, textEditorComponent = _ref.textEditorComponent, selectComponent = _ref.selectComponent, labelComponent = _ref.labelComponent, getMessage8 = _ref.getMessage, readOnly = _ref.readOnly, appointmentData = _ref.appointmentData, formatDate3 = _ref.formatDate, onFieldChange10 = _ref.onFieldChange, type = _ref.type, locale2 = _ref.locale, firstDayOfWeek = _ref.firstDayOfWeek, restProps = _objectWithoutProperties(_ref, _excluded$18);
  var commonProps = {
    readOnly,
    getMessage: getMessage8,
    textEditorComponent,
    labelComponent,
    appointmentData,
    onFieldChange: onFieldChange10
  };
  switch (type) {
    case END_REPEAT_RADIO_GROUP:
      return (0, import_react4.createElement)(EndRepeatEditor, _extends2({
        dateEditorComponent,
        locale: locale2
      }, commonProps, restProps));
    case MONTHLY_RADIO_GROUP:
      return (0, import_react4.createElement)(MonthlyEditor, _extends2({
        selectComponent,
        formatDate: formatDate3,
        firstDayOfWeek
      }, commonProps, restProps));
    case YEARLY_RADIO_GROUP:
      return (0, import_react4.createElement)(YearlyEditor, _extends2({
        selectComponent,
        formatDate: formatDate3,
        firstDayOfWeek
      }, commonProps, restProps));
    default:
      return function() {
        return null;
      };
  }
};
true ? RadioGroup3.propTypes = {
  getMessage: import_prop_types107.default.func.isRequired,
  labelComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  textEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  dateEditorComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  selectComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  locale: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.arrayOf(import_prop_types107.default.string)]),
  readOnly: import_prop_types107.default.bool,
  type: import_prop_types107.default.string.isRequired,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  }).isRequired,
  onFieldChange: import_prop_types107.default.func.isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
RadioGroup3.defaultProps = {
  locale: void 0,
  readOnly: false
};
var _excluded$19 = ["formatDate", "rRule", "readOnly", "className", "onValueChange", "firstDayOfWeek"];
var PREFIX$S = "WeeklyRecurrenceSelector";
var classes$S = {
  selectedButton: "".concat(PREFIX$S, "-selectedButton"),
  button: "".concat(PREFIX$S, "-button"),
  buttonGroup: "".concat(PREFIX$S, "-buttonGroup")
};
var StyledButtonGroup = styled_default(ButtonGroup_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$S.buttonGroup), {
    marginBottom: spacing(2)
  });
});
var StyledButton$2 = styled_default(Button_default)(function(_ref3) {
  var _ref4;
  var _ref3$theme = _ref3.theme, palette = _ref3$theme.palette, spacing = _ref3$theme.spacing;
  return _ref4 = {}, _defineProperty(_ref4, "&.".concat(classes$S.selectedButton), {
    backgroundColor: ensureColor(400, palette.primary),
    "&:hover": {
      backgroundColor: ensureColor(500, palette.primary)
    },
    border: "1px solid ".concat(ensureColor(400, palette.primary), "!important"),
    borderLeft: "1px solid ".concat(ensureColor(50, palette.primary), "!important"),
    "&:first-of-type": {
      borderLeft: "1px solid ".concat(ensureColor(400, palette.primary), "!important")
    },
    color: ensureColor(50, palette.primary)
  }), _defineProperty(_ref4, "&.".concat(classes$S.button), {
    minWidth: spacing(3)
  }), _ref4;
});
var isCurrentWeekDay = function isCurrentWeekDay2(_ref5, currentWeekDay) {
  var byweekday = _ref5.byweekday;
  return byweekday && byweekday.findIndex(function(_ref6) {
    var weekday = _ref6.weekday;
    return weekday === currentWeekDay;
  }) > -1;
};
var WeeklyRecurrenceSelector = import_react4.default.memo(function(_ref7) {
  var formatDate3 = _ref7.formatDate, rRule = _ref7.rRule, readOnly = _ref7.readOnly, className = _ref7.className, onValueChange5 = _ref7.onValueChange, firstDayOfWeek = _ref7.firstDayOfWeek, restProps = _objectWithoutProperties(_ref7, _excluded$19);
  var recurrenceOptions = getRecurrenceOptions(rRule);
  var daysOfWeekArray = getDaysOfWeekArray(firstDayOfWeek);
  var daysOfWeekDates = getDaysOfWeekDates(firstDayOfWeek);
  return import_react4.default.createElement(StyledButtonGroup, _extends2({
    variant: "outlined",
    size: "small",
    disabled: readOnly,
    className: clsx_m_default(classes$S.buttonGroup, className),
    fullWidth: true
  }, restProps), daysOfWeekArray.map(function(dayOfWeek, index) {
    var _classNames;
    return import_react4.default.createElement(StyledButton$2, {
      className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$S.button, true), _defineProperty(_classNames, classes$S.selectedButton, isCurrentWeekDay(recurrenceOptions, dayOfWeek)), _classNames)),
      key: dayOfWeek,
      onClick: function onClick2() {
        return onValueChange5({
          rRule: changeRecurrenceOptions(handleWeekDaysChange(recurrenceOptions, dayOfWeek, onValueChange5))
        });
      }
    }, formatDate3(daysOfWeekDates[index], WEEK_DAY_OPTIONS));
  }));
});
true ? WeeklyRecurrenceSelector.propTypes = {
  formatDate: import_prop_types107.default.func.isRequired,
  rRule: import_prop_types107.default.string.isRequired,
  onValueChange: import_prop_types107.default.func,
  readOnly: import_prop_types107.default.bool,
  className: import_prop_types107.default.string,
  firstDayOfWeek: import_prop_types107.default.number.isRequired
} : void 0;
WeeklyRecurrenceSelector.defaultProps = {
  onValueChange: function onValueChange4() {
    return void 0;
  },
  readOnly: false,
  className: void 0
};
var _excluded$1a = ["children", "className"];
var PREFIX$T = "OverlayContainer";
var classes$T = {
  container: "".concat(PREFIX$T, "-container")
};
var StyledDiv$l = styled_default("div")(_defineProperty({}, "&.".concat(classes$T.container), {
  position: "absolute",
  width: "100%",
  height: "100%"
}));
var OverlayContainer = (0, import_react4.forwardRef)(function(_ref, ref) {
  var children = _ref.children, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$1a);
  return (0, import_react4.createElement)(StyledDiv$l, _extends2({
    ref,
    className: clsx_m_default(classes$T.container, className)
  }, restProps), children);
});
OverlayContainer.propTypes = {
  children: import_prop_types107.default.node,
  className: import_prop_types107.default.string
};
OverlayContainer.defaultProps = {
  children: null,
  className: void 0
};
var _excluded$1b = ["readOnly", "resource", "appointmentResources", "onResourceChange", "className"];
var PREFIX$U = "ResourceEditor";
var classes$U = {
  select: "".concat(PREFIX$U, "-select"),
  selectBox: "".concat(PREFIX$U, "-selectBox"),
  chips: "".concat(PREFIX$U, "-chips"),
  chip: "".concat(PREFIX$U, "-chip"),
  resourceCircle: "".concat(PREFIX$U, "-resourceCircle"),
  itemContainer: "".concat(PREFIX$U, "-itemContainer"),
  circleContainer: "".concat(PREFIX$U, "-circleContainer")
};
var StyledTextField$2 = styled_default(TextField_default)(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$U.select), {
    padding: spacing(1)
  }), _defineProperty(_ref2, "&.".concat(classes$U.selectBox), {
    minHeight: spacing(6.5),
    width: "100%"
  }), _ref2;
});
var StyledDiv$m = styled_default("div")(function(_ref3) {
  var _ref4;
  var spacing = _ref3.theme.spacing;
  return _ref4 = {}, _defineProperty(_ref4, "&.".concat(classes$U.resourceCircle), {
    height: spacing(2),
    width: spacing(2),
    borderRadius: "50%",
    marginRight: spacing(1)
  }), _defineProperty(_ref4, "&.".concat(classes$U.itemContainer), {
    display: "flex",
    padding: spacing(0.75)
  }), _defineProperty(_ref4, "& .".concat(classes$U.circleContainer), {
    display: "flex",
    alignItems: "center"
  }), _defineProperty(_ref4, "&.".concat(classes$U.chips), {
    display: "flex",
    flexWrap: "wrap"
  }), _defineProperty(_ref4, "& .".concat(classes$U.chip), {
    color: "white",
    margin: 2
  }), _ref4;
});
var getResourceInstance = function getResourceInstance2(resourceInstances, id) {
  return resourceInstances.find(function(item) {
    return item.id === id;
  });
};
var ResourceEditor = (0, import_react4.memo)(function(_ref5) {
  var readOnly = _ref5.readOnly, resource = _ref5.resource, appointmentResources = _ref5.appointmentResources, onResourceChange2 = _ref5.onResourceChange, className = _ref5.className, restProps = _objectWithoutProperties(_ref5, _excluded$1b);
  var values = appointmentResources.reduce(function(acc, resourceItem) {
    return resourceItem.fieldName === resource.fieldName ? [].concat(_toConsumableArray(acc), [resourceItem.id]) : acc;
  }, []);
  var _onChange = function onChange(nextValue) {
    onResourceChange2(_defineProperty({}, resource.fieldName, nextValue));
  };
  return (0, import_react4.createElement)(StyledTextField$2, _extends2({
    select: true,
    disabled: readOnly,
    variant: "outlined",
    margin: "normal",
    value: values,
    SelectProps: {
      multiple: resource.allowMultiple,
      renderValue: function renderValue() {
        var selected = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        return resource.allowMultiple ? (0, import_react4.createElement)(StyledDiv$m, {
          className: classes$U.chips
        }, selected.map(function(value) {
          var resourceItem = getResourceInstance(resource.instances, value);
          return (0, import_react4.createElement)(Chip_default, {
            key: value,
            label: resourceItem.text,
            className: classes$U.chip,
            style: {
              backgroundColor: getAppointmentColor(300, resourceItem.color)
            }
          });
        })) : (0, import_react4.createElement)(StyledDiv$m, {
          className: classes$U.itemContainer
        }, (0, import_react4.createElement)("div", {
          className: classes$U.circleContainer
        }, (0, import_react4.createElement)(StyledDiv$m, {
          className: classes$U.resourceCircle,
          style: {
            backgroundColor: getAppointmentColor(400, getResourceInstance(resource.instances, selected[0]).color)
          }
        })), getResourceInstance(resource.instances, selected[0]).text);
      }
    },
    onChange: function onChange(event) {
      return _onChange(event.target.value);
    },
    className: clsx_m_default(classes$U.selectBox, className),
    classes: {
      select: classes$U.select
    }
  }, restProps), resource.instances.map(function(resourceItem) {
    return (0, import_react4.createElement)(MenuItem_default, {
      key: resourceItem.id,
      value: resourceItem.id
    }, (0, import_react4.createElement)(StyledDiv$m, {
      className: classes$U.resourceCircle,
      style: {
        backgroundColor: getAppointmentColor(400, resourceItem.color)
      }
    }), resourceItem.text);
  }));
});
true ? ResourceEditor.propTypes = {
  readOnly: import_prop_types107.default.bool,
  appointmentResources: import_prop_types107.default.array,
  onResourceChange: import_prop_types107.default.func,
  resource: import_prop_types107.default.object,
  className: import_prop_types107.default.string
} : void 0;
ResourceEditor.defaultProps = {
  className: void 0,
  readOnly: false,
  appointmentResources: [],
  onResourceChange: function onResourceChange() {
    return void 0;
  },
  resource: {}
};
var AppointmentForm2 = withComponents({
  Overlay: Overlay$1,
  Layout: Layout$7,
  TextEditor,
  BasicLayout: Layout$8,
  CommandLayout: Layout$9,
  CommandButton: CommandButton$1,
  DateEditor,
  Label: Label$1,
  BooleanEditor,
  Select,
  RecurrenceLayout: Layout$a,
  RadioGroup: RadioGroup3,
  WeeklyRecurrenceSelector,
  Container: OverlayContainer,
  ResourceEditor
})(AppointmentForm);
var _excluded$1c = ["className", "data", "formatDate", "type", "fromPrev", "toNext", "durationType", "isShaded"];
var _excluded224 = ["className", "resources", "isShaded"];
var _excluded314 = ["className"];
var PREFIX$V = "DraftAppointment";
var classes$V = {
  appointment: "".concat(PREFIX$V, "-appointment"),
  shadedAppointment: "".concat(PREFIX$V, "-shadedAppointment")
};
var AppointmentBase = function AppointmentBase2(_ref) {
  var className = _ref.className, data = _ref.data, formatDate3 = _ref.formatDate, type = _ref.type, fromPrev = _ref.fromPrev, toNext = _ref.toNext, durationType = _ref.durationType, isShaded = _ref.isShaded, restProps = _objectWithoutProperties(_ref, _excluded$1c);
  return (0, import_react4.createElement)(Appointment, _extends2({
    className,
    type,
    isShaded
  }, restProps), fromPrev && (0, import_react4.createElement)(SplitIndicator, {
    position: POSITION_START,
    appointmentType: type
  }), (0, import_react4.createElement)(AppointmentContent, {
    data,
    type,
    recurringIconComponent: Repeat_default,
    formatDate: formatDate3,
    durationType
  }), toNext && (0, import_react4.createElement)(SplitIndicator, {
    position: POSITION_END,
    appointmentType: type
  }));
};
true ? AppointmentBase.propTypes = {
  data: import_prop_types107.default.object.isRequired,
  fromPrev: import_prop_types107.default.bool.isRequired,
  toNext: import_prop_types107.default.bool.isRequired,
  formatDate: import_prop_types107.default.func.isRequired,
  durationType: import_prop_types107.default.string,
  className: import_prop_types107.default.string,
  type: import_prop_types107.default.string,
  isShaded: import_prop_types107.default.bool
} : void 0;
AppointmentBase.defaultProps = {
  durationType: void 0,
  className: void 0,
  type: void 0,
  isShaded: false
};
var StyledDraftAppointmentBase = styled_default(AppointmentBase)(function(_ref2) {
  var _ref3;
  var theme = _ref2.theme, resources = _ref2.resources;
  return _ref3 = {}, _defineProperty(_ref3, "&.".concat(classes$V.appointment), {
    boxShadow: theme.shadows[3],
    cursor: "move",
    overflow: "hidden",
    backgroundColor: getAppointmentColor(600, getResourceColor(resources), theme.palette.primary),
    border: 0
  }), _defineProperty(_ref3, "&.".concat(classes$V.shadedAppointment), {
    backgroundColor: getAppointmentColor(400, getResourceColor(resources), theme.palette.primary)
  }), _ref3;
});
var DraftAppointment = function DraftAppointment2(_ref4) {
  var _classNames;
  var className = _ref4.className, resources = _ref4.resources, isShaded = _ref4.isShaded, restProps = _objectWithoutProperties(_ref4, _excluded224);
  return (0, import_react4.createElement)(StyledDraftAppointmentBase, _extends2({
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$V.appointment, true), _defineProperty(_classNames, classes$V.shadedAppointment, isShaded), _classNames), className),
    resources
  }, restProps));
};
true ? DraftAppointment.propTypes = {
  resources: import_prop_types107.default.array,
  className: import_prop_types107.default.string,
  isShaded: import_prop_types107.default.bool
} : void 0;
DraftAppointment.defaultProps = {
  className: void 0,
  resources: [],
  isShaded: false
};
var StyledSourceAppointmentBase = styled_default(AppointmentBase)(function() {
  return _defineProperty({}, "&.".concat(classes$V.appointment), {
    opacity: 0.5
  });
});
var SourceAppointment = function SourceAppointment2(_ref6) {
  var className = _ref6.className, restProps = _objectWithoutProperties(_ref6, _excluded314);
  return (0, import_react4.createElement)(StyledSourceAppointmentBase, _extends2({
    className: clsx_m_default(classes$V.appointment, className)
  }, restProps));
};
true ? SourceAppointment.propTypes = {
  className: import_prop_types107.default.string
} : void 0;
SourceAppointment.defaultProps = {
  className: void 0
};
var Container$2 = styled_default(ContainerBase)(function() {
  return _defineProperty({}, "&.".concat(classes.container), {
    position: "absolute",
    left: 0,
    top: 0,
    height: "100%",
    width: "100%",
    cursor: "move"
  });
});
var _excluded$1d = ["className", "position", "appointmentType", "forwardedRef"];
var PREFIX$W = "Resize";
var classes$W = {
  resize: "".concat(PREFIX$W, "-resize"),
  verticalStart: "".concat(PREFIX$W, "-verticalStart"),
  verticalEnd: "".concat(PREFIX$W, "-verticalEnd"),
  horizontalStart: "".concat(PREFIX$W, "-horizontalStart"),
  horizontalEnd: "".concat(PREFIX$W, "-horizontalEnd")
};
var verticalStyles$1 = function verticalStyles2(spacing) {
  return {
    width: "100%",
    height: spacing(1),
    cursor: "ns-resize"
  };
};
var horizontalStyles$1 = function horizontalStyles2(spacing) {
  return {
    width: spacing(1),
    height: "100%",
    cursor: "ew-resize"
  };
};
var StyledDiv$n = styled_default("div")(function(_ref) {
  var _ref2;
  var spacing = _ref.theme.spacing;
  var vertical = verticalStyles$1(spacing);
  var horizontal = horizontalStyles$1(spacing);
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$W.resize), {
    position: "absolute",
    zIndex: 100
  }), _defineProperty(_ref2, "&.".concat(classes$W.verticalStart), _objectSpread2(_objectSpread2({}, vertical), {}, {
    top: 0
  })), _defineProperty(_ref2, "&.".concat(classes$W.verticalEnd), _objectSpread2(_objectSpread2({}, vertical), {}, {
    bottom: 0
  })), _defineProperty(_ref2, "&.".concat(classes$W.horizontalStart), _objectSpread2(_objectSpread2({}, horizontal), {}, {
    left: 0
  })), _defineProperty(_ref2, "&.".concat(classes$W.horizontalEnd), _objectSpread2(_objectSpread2({}, horizontal), {}, {
    right: 0
  })), _ref2;
});
var Resize = (0, import_react4.memo)(function(_ref3) {
  var _classNames;
  var className = _ref3.className, position = _ref3.position, appointmentType = _ref3.appointmentType, forwardedRef = _ref3.forwardedRef, restProps = _objectWithoutProperties(_ref3, _excluded$1d);
  var vertical = appointmentType === VERTICAL_TYPE;
  var start = position === POSITION_START;
  return (0, import_react4.createElement)(StyledDiv$n, _extends2({
    ref: forwardedRef,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$W.resize, true), _defineProperty(_classNames, classes$W.verticalStart, vertical && start), _defineProperty(_classNames, classes$W.verticalEnd, vertical && !start), _defineProperty(_classNames, classes$W.horizontalStart, !vertical && start), _defineProperty(_classNames, classes$W.horizontalEnd, !vertical && !start), _classNames), className)
  }, restProps));
});
true ? Resize.propTypes = {
  position: import_prop_types107.default.oneOf([POSITION_START, POSITION_END]).isRequired,
  appointmentType: import_prop_types107.default.oneOf([HORIZONTAL_TYPE, VERTICAL_TYPE]).isRequired,
  className: import_prop_types107.default.string,
  forwardedRef: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object])
} : void 0;
Resize.defaultProps = {
  className: void 0,
  forwardedRef: void 0
};
var DragDropProvider3 = withComponents({
  DraftAppointment,
  SourceAppointment,
  Container: Container$2,
  Resize
})(DragDropProvider2);
var _excluded$1e = ["setCurrentDate", "getMessage", "className"];
var PREFIX$X = "TodayButton";
var classes$X = {
  button: "".concat(PREFIX$X, "-button")
};
var StyledButton$3 = styled_default(Button_default)(function(_ref) {
  var spacing = _ref.theme.spacing;
  return _defineProperty({}, "&.".concat(classes$X.button), _defineProperty({
    padding: spacing(0.8, 2),
    marginLeft: spacing(0.5),
    "&:first-of-type": {
      marginLeft: 0
    }
  }, "".concat(LAYOUT_MEDIA_QUERY), {
    fontSize: "0.75rem"
  }));
});
var TodayButton2 = function TodayButton3(_ref3) {
  var setCurrentDate = _ref3.setCurrentDate, getMessage8 = _ref3.getMessage, className = _ref3.className, restProps = _objectWithoutProperties(_ref3, _excluded$1e);
  var handleClick = function handleClick2() {
    setCurrentDate(new Date());
  };
  return (0, import_react4.createElement)(StyledButton$3, _extends2({
    className: clsx_m_default(classes$X.button, className),
    variant: "outlined",
    onClick: handleClick
  }, restProps), getMessage8("today"));
};
true ? TodayButton2.propTypes = {
  setCurrentDate: import_prop_types107.default.func.isRequired,
  className: import_prop_types107.default.string,
  getMessage: import_prop_types107.default.func.isRequired
} : void 0;
TodayButton2.defaultProps = {
  className: void 0
};
var TodayButton$1 = withComponents({
  Button: TodayButton2
})(TodayButton);
var _excluded$1f = ["children", "visible", "onHide", "target", "className"];
var _styled$2;
var PREFIX$Y = "Overlay";
var classes$Y = {
  modal: "".concat(PREFIX$Y, "-modal"),
  paper: "".concat(PREFIX$Y, "-paper"),
  root: "".concat(PREFIX$Y, "-root")
};
var StyledDialog = styled_default(Dialog_default)((_styled$2 = {}, _defineProperty(_styled$2, "& .".concat(classes$Y.modal), {
  position: "absolute!important"
}), _defineProperty(_styled$2, "& .".concat(classes$Y.paper), {
  zIndex: "1302!important"
}), _defineProperty(_styled$2, "&.".concat(classes$Y.root), {
  zIndex: "1301!important"
}), _styled$2));
var Overlay$2 = function Overlay4(_ref) {
  var children = _ref.children, visible = _ref.visible, onHide3 = _ref.onHide, target = _ref.target, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$1f);
  return (0, import_react4.createElement)(StyledDialog, _extends2({
    open: visible,
    onClose: onHide3,
    className: clsx_m_default(classes$Y.modal, classes$Y.root, className),
    BackdropProps: {
      className: classes$Y.modal
    },
    PaperProps: {
      className: classes$Y.paper
    },
    container: target.current,
    onBackdropClick: onHide3
  }, restProps), children);
};
true ? Overlay$2.propTypes = {
  children: import_prop_types107.default.node.isRequired,
  onHide: import_prop_types107.default.func.isRequired,
  target: import_prop_types107.default.object.isRequired,
  visible: import_prop_types107.default.bool,
  className: import_prop_types107.default.string
} : void 0;
Overlay$2.defaultProps = {
  className: void 0,
  visible: false
};
var _excluded$1g = ["buttonComponent", "handleClose", "commit", "availableOperations", "getMessage", "isDeleting"];
var PREFIX$Z = "Layout";
var classes$Z = {
  title: "".concat(PREFIX$Z, "-title"),
  content: "".concat(PREFIX$Z, "-content")
};
var StyledDiv$o = styled_default("div")(function(_ref) {
  var _$concat, _ref2;
  var typography = _ref.theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$Z.title), typography.h6), _defineProperty(_ref2, "& .".concat(classes$Z.content), {
    fontSize: "1rem"
  }), _defineProperty(_ref2, "".concat(SMALL_LAYOUT_MEDIA_QUERY), (_$concat = {}, _defineProperty(_$concat, "& .".concat(classes$Z.title), {
    fontSize: "1.1rem"
  }), _defineProperty(_$concat, "& .".concat(classes$Z.content), {
    fontSize: "0.9rem"
  }), _$concat)), _ref2;
});
var Layout$b = (0, import_react4.memo)(function(_ref3) {
  var Button3 = _ref3.buttonComponent, handleClose2 = _ref3.handleClose, commit2 = _ref3.commit, availableOperations = _ref3.availableOperations, getMessage8 = _ref3.getMessage, isDeleting = _ref3.isDeleting, restProps = _objectWithoutProperties(_ref3, _excluded$1g);
  var _React$useState = (0, import_react4.useState)(availableOperations[0].value), _React$useState2 = _slicedToArray(_React$useState, 2), currentValue = _React$useState2[0], setCurrentValue = _React$useState2[1];
  var handleChange = (0, import_react4.useCallback)(function(event) {
    setCurrentValue(event.target.value);
  });
  var onCommitButtonClick = function onCommitButtonClick2() {
    commit2(currentValue);
  };
  return (0, import_react4.createElement)(StyledDiv$o, restProps, (0, import_react4.createElement)(DialogTitle_default, {
    className: classes$Z.title
  }, getMessage8(isDeleting ? "menuDeletingTitle" : "menuEditingTitle")), (0, import_react4.createElement)(DialogContent_default, null, (0, import_react4.createElement)(RadioGroup_default, {
    value: currentValue,
    onChange: handleChange
  }, availableOperations.map(function(operation) {
    return (0, import_react4.createElement)(FormControlLabel_default, {
      value: operation.value,
      control: (0, import_react4.createElement)(Radio_default, null),
      label: operation.title,
      key: operation.value,
      classes: {
        label: classes$Z.content
      }
    });
  }))), (0, import_react4.createElement)(DialogActions_default, null, (0, import_react4.createElement)(Button3, {
    onClick: handleClose2,
    title: getMessage8("cancelButton")
  }), (0, import_react4.createElement)(Button3, {
    onClick: onCommitButtonClick,
    title: getMessage8("commitButton"),
    color: "primary"
  })));
});
true ? Layout$b.propTypes = {
  buttonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  availableOperations: import_prop_types107.default.array.isRequired,
  handleClose: import_prop_types107.default.func,
  commit: import_prop_types107.default.func,
  getMessage: import_prop_types107.default.func,
  isDeleting: import_prop_types107.default.bool
} : void 0;
Layout$b.defaultProps = {
  handleClose: function handleClose() {
    return void 0;
  },
  commit: function commit() {
    return void 0;
  },
  getMessage: function getMessage6() {
    return void 0;
  },
  isDeleting: false
};
var _excluded$1h = ["onClick", "title"];
var Button = function Button2(_ref) {
  var onClick2 = _ref.onClick, title = _ref.title, restProps = _objectWithoutProperties(_ref, _excluded$1h);
  return (0, import_react4.createElement)(Button_default, _extends2({
    onClick: onClick2
  }, restProps), title);
};
true ? Button.propTypes = {
  onClick: import_prop_types107.default.func.isRequired,
  title: import_prop_types107.default.string
} : void 0;
Button.defaultProps = {
  title: ""
};
var EditRecurrenceMenu2 = withComponents({
  Layout: Layout$b,
  Overlay: Overlay$2,
  Button,
  Container: OverlayContainer
})(EditRecurrenceMenu);
var _excluded$1i = ["buttonComponent", "handleCancel", "handleConfirm", "getMessage", "isDeleting", "appointmentData"];
var PREFIX$_ = "Layout";
var classes$_ = {
  title: "".concat(PREFIX$_, "-title")
};
var StyledDialogTitle = styled_default(DialogTitle_default)(function(_ref) {
  var _ref2;
  var typography = _ref.theme.typography;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$_.title), _objectSpread2({}, typography.h6)), _defineProperty(_ref2, "".concat(SMALL_LAYOUT_MEDIA_QUERY), _defineProperty({}, "&.".concat(classes$_.title), {
    fontSize: "1.1rem"
  })), _ref2;
});
var Layout$c = (0, import_react4.memo)(function(_ref3) {
  var Button3 = _ref3.buttonComponent, handleCancel2 = _ref3.handleCancel, handleConfirm2 = _ref3.handleConfirm, getMessage8 = _ref3.getMessage, isDeleting = _ref3.isDeleting, appointmentData = _ref3.appointmentData, restProps = _objectWithoutProperties(_ref3, _excluded$1i);
  return (0, import_react4.createElement)("div", restProps, (0, import_react4.createElement)(StyledDialogTitle, {
    className: classes$_.title
  }, getMessage8(isDeleting ? "confirmDeleteMessage" : "confirmCancelMessage")), (0, import_react4.createElement)(DialogActions_default, null, (0, import_react4.createElement)(Button3, {
    onClick: handleCancel2,
    title: getMessage8("cancelButton")
  }), (0, import_react4.createElement)(Button3, {
    onClick: handleConfirm2,
    title: getMessage8(isDeleting ? "deleteButton" : "discardButton"),
    color: "primary"
  })));
});
Layout$c.propTypes = {
  buttonComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  handleCancel: import_prop_types107.default.func,
  handleConfirm: import_prop_types107.default.func,
  getMessage: import_prop_types107.default.func,
  isDeleting: import_prop_types107.default.bool,
  appointmentData: import_prop_types107.default.shape({
    title: import_prop_types107.default.string,
    startDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    endDate: import_prop_types107.default.oneOfType([import_prop_types107.default.string, import_prop_types107.default.instanceOf(Date)]),
    rRule: import_prop_types107.default.string,
    notes: import_prop_types107.default.string,
    additionalInformation: import_prop_types107.default.string,
    allDay: import_prop_types107.default.bool
  })
};
Layout$c.defaultProps = {
  handleCancel: function handleCancel() {
    return void 0;
  },
  handleConfirm: function handleConfirm() {
    return void 0;
  },
  getMessage: function getMessage7() {
    return void 0;
  },
  isDeleting: false,
  appointmentData: {
    startDate: new Date(),
    endDate: new Date()
  }
};
var ConfirmationDialog2 = withComponents({
  Overlay: Overlay$2,
  Layout: Layout$c,
  Container: OverlayContainer,
  Button
})(ConfirmationDialog);
var _excluded$1j = ["top"];
var PREFIX$$ = "Indicator";
var classes$$ = {
  line: "".concat(PREFIX$$, "-line"),
  circle: "".concat(PREFIX$$, "-circle"),
  nowIndicator: "".concat(PREFIX$$, "-nowIndicator")
};
var StyledDiv$p = styled_default("div", {
  shouldForwardProp: function shouldForwardProp5(prop) {
    return prop !== "topValue";
  }
})(function(_ref) {
  var _ref2;
  var theme = _ref.theme, topValue = _ref.topValue;
  return _ref2 = {}, _defineProperty(_ref2, "& .".concat(classes$$.circle), {
    width: theme.spacing(1.5),
    height: theme.spacing(1.5),
    borderRadius: "50%",
    transform: "translate(-50%, -50%)"
  }), _defineProperty(_ref2, "& .".concat(classes$$.line), {
    height: "2px",
    width: "100%",
    transform: "translate(0, -1px)"
  }), _defineProperty(_ref2, "& .".concat(classes$$.nowIndicator), {
    position: "absolute",
    left: 0,
    top: topValue,
    background: theme.palette.secondary.main,
    zIndex: 1
  }), _ref2;
});
var Indicator = function Indicator2(_ref3) {
  var top = _ref3.top, restProps = _objectWithoutProperties(_ref3, _excluded$1j);
  return (0, import_react4.createElement)(StyledDiv$p, _extends2({
    topValue: top
  }, restProps), (0, import_react4.createElement)("div", {
    className: clsx_m_default(classes$$.nowIndicator, classes$$.circle)
  }), (0, import_react4.createElement)("div", {
    className: clsx_m_default(classes$$.nowIndicator, classes$$.line)
  }));
};
true ? Indicator.propTypes = {
  top: import_prop_types107.default.string
} : void 0;
Indicator.defaultProps = {
  top: 0
};
var CurrentTimeIndicator2 = withComponents({
  Indicator
})(CurrentTimeIndicator);
var Resources2 = function Resources3(_ref) {
  var data = _ref.data, mainResourceName = _ref.mainResourceName, palette = _ref.palette;
  return (0, import_react4.createElement)(Resources, {
    data,
    mainResourceName,
    palette
  });
};
true ? Resources2.propTypes = {
  data: import_prop_types107.default.array,
  mainResourceName: import_prop_types107.default.string,
  palette: import_prop_types107.default.array
} : void 0;
Resources2.defaultProps = {
  data: [],
  mainResourceName: void 0,
  palette: DEFAULT_PALETTE
};
var _excluded$1k = ["rowComponent", "cellComponent", "groups", "colSpan", "cellStyle", "showHeaderForEveryDate"];
var HorizontalLayout = function HorizontalLayout2(_ref) {
  var Row4 = _ref.rowComponent, Cell7 = _ref.cellComponent, groups = _ref.groups, colSpan = _ref.colSpan, cellStyle = _ref.cellStyle, showHeaderForEveryDate = _ref.showHeaderForEveryDate, restProps = _objectWithoutProperties(_ref, _excluded$1k);
  return (0, import_react4.createElement)(import_react4.Fragment, null, groups.map(function(groupRow, rowIndex) {
    var cellColSpan = colSpan / groupRow.length;
    return (0, import_react4.createElement)(Row4, _extends2({
      key: groups[rowIndex][0].text
    }, restProps), !showHeaderForEveryDate && groupRow.map(function(group, index) {
      return (0, import_react4.createElement)(Cell7, {
        group,
        colSpan: cellColSpan,
        key: getCellKey(groups, index, rowIndex),
        left: cellStyle.left,
        endOfGroup: true,
        groupedByDate: false
      });
    }), showHeaderForEveryDate && getRowFromGroups(colSpan, groupRow, cellStyle, groups, rowIndex).map(function(_ref2) {
      var group = _ref2.group, columnSpan = _ref2.colSpan, key = _ref2.key, endOfGroup = _ref2.endOfGroup;
      return (0, import_react4.createElement)(Cell7, {
        group,
        colSpan: columnSpan,
        key,
        left: cellStyle.left,
        endOfGroup,
        groupedByDate: true
      });
    }));
  }));
};
true ? HorizontalLayout.propTypes = {
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  groups: import_prop_types107.default.arrayOf(import_prop_types107.default.arrayOf(import_prop_types107.default.object)).isRequired,
  colSpan: import_prop_types107.default.number.isRequired,
  cellStyle: import_prop_types107.default.object.isRequired,
  showHeaderForEveryDate: import_prop_types107.default.bool
} : void 0;
HorizontalLayout.defaultProps = {
  showHeaderForEveryDate: false
};
var _excluded$1l = ["rowComponent", "cellComponent", "groups", "rowSpan", "viewType", "className", "cellTextTopOffset", "alignWithAllDayRow"];
var PREFIX$10 = "VerticalLayout";
var classes$10 = {
  layout: "".concat(PREFIX$10, "-layout")
};
var StyledTable$2 = styled_default(Table_default)(_defineProperty({}, "&.".concat(classes$10.layout), {
  width: "auto",
  "&:only-child": {
    width: "100%"
  }
}));
var allDayCellHeight = BASIC_CELL_HEIGHT[VIEW_TYPES.ALL_DAY_PANEL];
var VerticalLayout = function VerticalLayout2(_ref) {
  var Row4 = _ref.rowComponent, Cell7 = _ref.cellComponent, groups = _ref.groups, rowSpan = _ref.rowSpan, viewType = _ref.viewType, className = _ref.className, cellTextTopOffset = _ref.cellTextTopOffset, alignWithAllDayRow = _ref.alignWithAllDayRow, restProps = _objectWithoutProperties(_ref, _excluded$1l);
  var timeTableCellHeight = BASIC_CELL_HEIGHT[viewType];
  return (0, import_react4.createElement)(StyledTable$2, _extends2({
    className: clsx_m_default(classes$10.layout, className)
  }, restProps), (0, import_react4.createElement)(TableBody_default, null, getGroupsLastRow(groups).map(function(_4, groupIndex) {
    return (0, import_react4.createElement)(Row4, {
      key: groupIndex.toString()
    }, getVerticalRowFromGroups(groups, groupIndex, rowSpan, timeTableCellHeight, alignWithAllDayRow, allDayCellHeight).map(function(_ref2) {
      var cellGroup = _ref2.group, cellRowSpan = _ref2.rowSpan, key = _ref2.key, height = _ref2.height;
      return (0, import_react4.createElement)(Cell7, {
        group: cellGroup,
        rowSpan: cellRowSpan,
        height,
        left: 0,
        colSpan: 1,
        groupOrientation: VERTICAL_GROUP_ORIENTATION,
        topOffset: cellTextTopOffset,
        key
      });
    }));
  })));
};
true ? VerticalLayout.propTypes = {
  rowComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  cellComponent: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object]).isRequired,
  alignWithAllDayRow: import_prop_types107.default.bool,
  groups: import_prop_types107.default.arrayOf(import_prop_types107.default.arrayOf(import_prop_types107.default.object)).isRequired,
  rowSpan: import_prop_types107.default.number.isRequired,
  viewType: import_prop_types107.default.string.isRequired,
  cellTextTopOffset: import_prop_types107.default.number,
  className: import_prop_types107.default.string
} : void 0;
VerticalLayout.defaultProps = {
  cellTextTopOffset: void 0,
  className: void 0,
  alignWithAllDayRow: false
};
var _excluded$1m = ["className", "group", "colSpan", "rowSpan", "left", "endOfGroup", "groupedByDate", "children", "height", "groupOrientation", "textStyle", "topOffset"];
var PREFIX$11 = "Cell";
var classes$11 = {
  cell: "".concat(PREFIX$11, "-cell"),
  text: "".concat(PREFIX$11, "-text"),
  horizontalCell: "".concat(PREFIX$11, "-horizontalCell"),
  content: "".concat(PREFIX$11, "-content"),
  verticalCell: "".concat(PREFIX$11, "-verticalCell"),
  groupedByDate: "".concat(PREFIX$11, "-groupedByDate"),
  verticalCellText: "".concat(PREFIX$11, "-title"),
  textContainer: "".concat(PREFIX$11, "-title")
};
var StyledTableCell$8 = styled_default(TableCell_default, {
  shouldForwardProp: function shouldForwardProp6(prop) {
    return prop !== "endOfGroup" && prop !== "textStyle" && prop !== "topOffset";
  }
})(function(_ref) {
  var _$concat, _ref2;
  var theme = _ref.theme, left = _ref.left, endOfGroup = _ref.endOfGroup, height = _ref.height, rowSpan = _ref.rowSpan, textStyle = _ref.textStyle, topOffset = _ref.topOffset;
  return _ref2 = {}, _defineProperty(_ref2, "&.".concat(classes$11.cell), {
    userSelect: "none",
    padding: 0,
    paddingTop: theme.spacing(0.5),
    boxSizing: "border-box",
    borderRight: getBrightBorder(theme),
    "&:last-child": {
      borderRight: "none"
    },
    height: height ? theme.spacing(height) : void 0
  }), _defineProperty(_ref2, "& .".concat(classes$11.text), _objectSpread2(_objectSpread2({}, theme.typography.caption), {}, {
    padding: theme.spacing(1),
    color: theme.palette.text.secondary,
    fontWeight: "bold",
    fontSize: "1rem",
    position: "sticky",
    display: "inline-block",
    left: "".concat(left, "px"),
    lineHeight: 1.5,
    whiteSpace: "pre-wrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    boxSizing: "border-box"
  }, textStyle)), _defineProperty(_ref2, "&.".concat(classes$11.horizontalCell), {
    borderBottom: "none",
    borderTop: getBrightBorder(theme),
    "tr:first-of-type &": {
      borderTop: "none"
    }
  }), _defineProperty(_ref2, "&.".concat(classes$11.verticalCell), (_$concat = {
    borderBottom: getBrightBorder(theme)
  }, _defineProperty(_$concat, "tr:nth-last-of-type(".concat(rowSpan, ") &"), {
    borderBottom: "none"
  }), _defineProperty(_$concat, "verticalAlign", "top"), _defineProperty(_$concat, "paddingTop", 0), _defineProperty(_$concat, "width", theme.spacing(GROUPING_PANEL_VERTICAL_CELL_WIDTH)), _defineProperty(_$concat, "minWidth", theme.spacing(GROUPING_PANEL_VERTICAL_CELL_WIDTH)), _defineProperty(_$concat, "maxWidth", theme.spacing(GROUPING_PANEL_VERTICAL_CELL_WIDTH)), _defineProperty(_$concat, "maxHeight", height ? theme.spacing(height - 2) : void 0), _$concat)), _defineProperty(_ref2, "&.".concat(classes$11.groupedByDate), {
    borderRight: endOfGroup ? getBrightBorder(theme) : getBorder(theme),
    borderTop: getBorder(theme)
  }), _defineProperty(_ref2, "& .".concat(classes$11.verticalCellText), {
    top: "".concat(topOffset, "px"),
    width: "100%"
  }), _defineProperty(_ref2, "& .".concat(classes$11.textContainer), {
    height: "100%"
  }), _ref2;
});
var Cell$6 = (0, import_react4.memo)(function(_ref3) {
  var _classNames, _classNames3;
  var className = _ref3.className, group = _ref3.group, colSpan = _ref3.colSpan, rowSpan = _ref3.rowSpan, left = _ref3.left, endOfGroup = _ref3.endOfGroup, groupedByDate = _ref3.groupedByDate, children = _ref3.children, height = _ref3.height, groupOrientation = _ref3.groupOrientation, textStyle = _ref3.textStyle, topOffset = _ref3.topOffset, restProps = _objectWithoutProperties(_ref3, _excluded$1m);
  var cellHeight = height / DEFAULT_SPACING;
  var isHorizontalGrouping = groupOrientation === HORIZONTAL_GROUP_ORIENTATION;
  var isVerticalGrouping2 = groupOrientation === VERTICAL_GROUP_ORIENTATION;
  return (0, import_react4.createElement)(StyledTableCell$8, _extends2({
    left,
    endOfGroup,
    height: cellHeight,
    textStyle,
    topOffset,
    className: clsx_m_default((_classNames = {}, _defineProperty(_classNames, classes$11.cell, true), _defineProperty(_classNames, classes$11.horizontalCell, isHorizontalGrouping), _defineProperty(_classNames, classes$11.verticalCell, isVerticalGrouping2), _defineProperty(_classNames, classes$11.groupedByDate, groupedByDate && !isVerticalGrouping2), _classNames), className),
    colSpan,
    rowSpan
  }, restProps), (0, import_react4.createElement)("div", {
    className: clsx_m_default(_defineProperty({}, classes$11.textContainer, isVerticalGrouping2))
  }, (0, import_react4.createElement)("div", {
    className: clsx_m_default((_classNames3 = {}, _defineProperty(_classNames3, classes$11.text, true), _defineProperty(_classNames3, classes$11.verticalCellText, isVerticalGrouping2), _classNames3))
  }, group.text, children)));
});
true ? Cell$6.propTypes = {
  className: import_prop_types107.default.string,
  group: import_prop_types107.default.object.isRequired,
  colSpan: import_prop_types107.default.number.isRequired,
  rowSpan: import_prop_types107.default.number,
  left: import_prop_types107.default.number.isRequired,
  endOfGroup: import_prop_types107.default.bool,
  groupedByDate: import_prop_types107.default.bool,
  height: import_prop_types107.default.number,
  groupOrientation: import_prop_types107.default.oneOf([HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION]),
  textStyle: import_prop_types107.default.object,
  topOffset: import_prop_types107.default.number,
  children: import_prop_types107.default.node
} : void 0;
Cell$6.defaultProps = {
  className: void 0,
  endOfGroup: true,
  rowSpan: 1,
  height: 48,
  groupOrientation: HORIZONTAL_GROUP_ORIENTATION,
  children: null,
  groupedByDate: true,
  textStyle: {},
  topOffset: void 0
};
var GroupingPanel2 = withComponents({
  HorizontalLayout,
  VerticalLayout,
  Cell: Cell$6,
  Row
})(GroupingPanel);
export {
  AllDayPanel2 as AllDayPanel,
  AppointmentForm2 as AppointmentForm,
  AppointmentTooltip2 as AppointmentTooltip,
  Appointments2 as Appointments,
  ConfirmationDialog2 as ConfirmationDialog,
  CurrentTimeIndicator2 as CurrentTimeIndicator,
  DateNavigator2 as DateNavigator,
  DayView2 as DayView,
  DragDropProvider3 as DragDropProvider,
  EditRecurrenceMenu2 as EditRecurrenceMenu,
  GroupingPanel2 as GroupingPanel,
  MonthView2 as MonthView,
  Resources2 as Resources,
  Scheduler2 as Scheduler,
  TodayButton$1 as TodayButton,
  Toolbar$1 as Toolbar,
  ViewSwitcher2 as ViewSwitcher,
  WeekView2 as WeekView
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @mui/material v5.15.11
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.30.1
//# sourceMappingURL=@devexpress_dx-react-scheduler-material-ui.js.map
